
VibrationAnalysis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800a544  0800a544  0001a544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5f4  0800a5f4  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5f4  0800a5f4  0001a5f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5fc  0800a5fc  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5fc  0800a5fc  0001a5fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a600  0800a600  0001a600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022e8  200001e8  0800a7ec  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00001500  200024d0  0800a7ec  000224d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cd8a  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d49  00000000  00000000  0003cfa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015e8  00000000  00000000  00040cf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001420  00000000  00000000  000422d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a893  00000000  00000000  000436f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014bf1  00000000  00000000  0005df8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000923a7  00000000  00000000  00072b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00104f23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e2c  00000000  00000000  00104fa0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a52c 	.word	0x0800a52c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800a52c 	.word	0x0800a52c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	4b1b      	ldr	r3, [pc, #108]	; (80005f8 <MX_DMA_Init+0x78>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a1a      	ldr	r2, [pc, #104]	; (80005f8 <MX_DMA_Init+0x78>)
 8000590:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
 8000596:	4b18      	ldr	r3, [pc, #96]	; (80005f8 <MX_DMA_Init+0x78>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <MX_DMA_Init+0x78>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a13      	ldr	r2, [pc, #76]	; (80005f8 <MX_DMA_Init+0x78>)
 80005ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <MX_DMA_Init+0x78>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	2100      	movs	r1, #0
 80005c2:	200b      	movs	r0, #11
 80005c4:	f000 fdd1 	bl	800116a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80005c8:	200b      	movs	r0, #11
 80005ca:	f000 fdea 	bl	80011a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2100      	movs	r1, #0
 80005d2:	2011      	movs	r0, #17
 80005d4:	f000 fdc9 	bl	800116a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80005d8:	2011      	movs	r0, #17
 80005da:	f000 fde2 	bl	80011a2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	2100      	movs	r1, #0
 80005e2:	2038      	movs	r0, #56	; 0x38
 80005e4:	f000 fdc1 	bl	800116a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80005e8:	2038      	movs	r0, #56	; 0x38
 80005ea:	f000 fdda 	bl	80011a2 <HAL_NVIC_EnableIRQ>

}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40023800 	.word	0x40023800

080005fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	4b17      	ldr	r3, [pc, #92]	; (8000664 <MX_GPIO_Init+0x68>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a16      	ldr	r2, [pc, #88]	; (8000664 <MX_GPIO_Init+0x68>)
 800060c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b14      	ldr	r3, [pc, #80]	; (8000664 <MX_GPIO_Init+0x68>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	4b10      	ldr	r3, [pc, #64]	; (8000664 <MX_GPIO_Init+0x68>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a0f      	ldr	r2, [pc, #60]	; (8000664 <MX_GPIO_Init+0x68>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <MX_GPIO_Init+0x68>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_GPIO_Init+0x68>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a08      	ldr	r2, [pc, #32]	; (8000664 <MX_GPIO_Init+0x68>)
 8000644:	f043 0302 	orr.w	r3, r3, #2
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_GPIO_Init+0x68>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f003 0302 	and.w	r3, r3, #2
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]

}
 8000656:	bf00      	nop
 8000658:	3714      	adds	r7, #20
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800

08000668 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800066c:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <MX_I2C1_Init+0x50>)
 800066e:	4a13      	ldr	r2, [pc, #76]	; (80006bc <MX_I2C1_Init+0x54>)
 8000670:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000672:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_I2C1_Init+0x50>)
 8000674:	4a12      	ldr	r2, [pc, #72]	; (80006c0 <MX_I2C1_Init+0x58>)
 8000676:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000678:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_I2C1_Init+0x50>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_I2C1_Init+0x50>)
 8000680:	2200      	movs	r2, #0
 8000682:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_I2C1_Init+0x50>)
 8000686:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800068a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800068c:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <MX_I2C1_Init+0x50>)
 800068e:	2200      	movs	r2, #0
 8000690:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_I2C1_Init+0x50>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000698:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <MX_I2C1_Init+0x50>)
 800069a:	2200      	movs	r2, #0
 800069c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_I2C1_Init+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a4:	4804      	ldr	r0, [pc, #16]	; (80006b8 <MX_I2C1_Init+0x50>)
 80006a6:	f001 fa31 	bl	8001b0c <HAL_I2C_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006b0:	f000 f9b4 	bl	8000a1c <Error_Handler>
  }

}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	2000027c 	.word	0x2000027c
 80006bc:	40005400 	.word	0x40005400
 80006c0:	00061a80 	.word	0x00061a80

080006c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08a      	sub	sp, #40	; 0x28
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a4c      	ldr	r2, [pc, #304]	; (8000814 <HAL_I2C_MspInit+0x150>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	f040 8091 	bne.w	800080a <HAL_I2C_MspInit+0x146>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	4b4a      	ldr	r3, [pc, #296]	; (8000818 <HAL_I2C_MspInit+0x154>)
 80006ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f0:	4a49      	ldr	r2, [pc, #292]	; (8000818 <HAL_I2C_MspInit+0x154>)
 80006f2:	f043 0302 	orr.w	r3, r3, #2
 80006f6:	6313      	str	r3, [r2, #48]	; 0x30
 80006f8:	4b47      	ldr	r3, [pc, #284]	; (8000818 <HAL_I2C_MspInit+0x154>)
 80006fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fc:	f003 0302 	and.w	r3, r3, #2
 8000700:	613b      	str	r3, [r7, #16]
 8000702:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000704:	23c0      	movs	r3, #192	; 0xc0
 8000706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000708:	2312      	movs	r3, #18
 800070a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800070c:	2301      	movs	r3, #1
 800070e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000710:	2303      	movs	r3, #3
 8000712:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000714:	2304      	movs	r3, #4
 8000716:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	4619      	mov	r1, r3
 800071e:	483f      	ldr	r0, [pc, #252]	; (800081c <HAL_I2C_MspInit+0x158>)
 8000720:	f001 f872 	bl	8001808 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	4b3b      	ldr	r3, [pc, #236]	; (8000818 <HAL_I2C_MspInit+0x154>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	4a3a      	ldr	r2, [pc, #232]	; (8000818 <HAL_I2C_MspInit+0x154>)
 800072e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000732:	6413      	str	r3, [r2, #64]	; 0x40
 8000734:	4b38      	ldr	r3, [pc, #224]	; (8000818 <HAL_I2C_MspInit+0x154>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000740:	4b37      	ldr	r3, [pc, #220]	; (8000820 <HAL_I2C_MspInit+0x15c>)
 8000742:	4a38      	ldr	r2, [pc, #224]	; (8000824 <HAL_I2C_MspInit+0x160>)
 8000744:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000746:	4b36      	ldr	r3, [pc, #216]	; (8000820 <HAL_I2C_MspInit+0x15c>)
 8000748:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800074c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800074e:	4b34      	ldr	r3, [pc, #208]	; (8000820 <HAL_I2C_MspInit+0x15c>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000754:	4b32      	ldr	r3, [pc, #200]	; (8000820 <HAL_I2C_MspInit+0x15c>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800075a:	4b31      	ldr	r3, [pc, #196]	; (8000820 <HAL_I2C_MspInit+0x15c>)
 800075c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000760:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000762:	4b2f      	ldr	r3, [pc, #188]	; (8000820 <HAL_I2C_MspInit+0x15c>)
 8000764:	2200      	movs	r2, #0
 8000766:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000768:	4b2d      	ldr	r3, [pc, #180]	; (8000820 <HAL_I2C_MspInit+0x15c>)
 800076a:	2200      	movs	r2, #0
 800076c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 800076e:	4b2c      	ldr	r3, [pc, #176]	; (8000820 <HAL_I2C_MspInit+0x15c>)
 8000770:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000774:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000776:	4b2a      	ldr	r3, [pc, #168]	; (8000820 <HAL_I2C_MspInit+0x15c>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800077c:	4b28      	ldr	r3, [pc, #160]	; (8000820 <HAL_I2C_MspInit+0x15c>)
 800077e:	2200      	movs	r2, #0
 8000780:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000782:	4827      	ldr	r0, [pc, #156]	; (8000820 <HAL_I2C_MspInit+0x15c>)
 8000784:	f000 fd28 	bl	80011d8 <HAL_DMA_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 800078e:	f000 f945 	bl	8000a1c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4a22      	ldr	r2, [pc, #136]	; (8000820 <HAL_I2C_MspInit+0x15c>)
 8000796:	639a      	str	r2, [r3, #56]	; 0x38
 8000798:	4a21      	ldr	r2, [pc, #132]	; (8000820 <HAL_I2C_MspInit+0x15c>)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800079e:	4b22      	ldr	r3, [pc, #136]	; (8000828 <HAL_I2C_MspInit+0x164>)
 80007a0:	4a22      	ldr	r2, [pc, #136]	; (800082c <HAL_I2C_MspInit+0x168>)
 80007a2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80007a4:	4b20      	ldr	r3, [pc, #128]	; (8000828 <HAL_I2C_MspInit+0x164>)
 80007a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80007aa:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007ac:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <HAL_I2C_MspInit+0x164>)
 80007ae:	2240      	movs	r2, #64	; 0x40
 80007b0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007b2:	4b1d      	ldr	r3, [pc, #116]	; (8000828 <HAL_I2C_MspInit+0x164>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <HAL_I2C_MspInit+0x164>)
 80007ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007be:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007c0:	4b19      	ldr	r3, [pc, #100]	; (8000828 <HAL_I2C_MspInit+0x164>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007c6:	4b18      	ldr	r3, [pc, #96]	; (8000828 <HAL_I2C_MspInit+0x164>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80007cc:	4b16      	ldr	r3, [pc, #88]	; (8000828 <HAL_I2C_MspInit+0x164>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <HAL_I2C_MspInit+0x164>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007d8:	4b13      	ldr	r3, [pc, #76]	; (8000828 <HAL_I2C_MspInit+0x164>)
 80007da:	2200      	movs	r2, #0
 80007dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80007de:	4812      	ldr	r0, [pc, #72]	; (8000828 <HAL_I2C_MspInit+0x164>)
 80007e0:	f000 fcfa 	bl	80011d8 <HAL_DMA_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 80007ea:	f000 f917 	bl	8000a1c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4a0d      	ldr	r2, [pc, #52]	; (8000828 <HAL_I2C_MspInit+0x164>)
 80007f2:	635a      	str	r2, [r3, #52]	; 0x34
 80007f4:	4a0c      	ldr	r2, [pc, #48]	; (8000828 <HAL_I2C_MspInit+0x164>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2100      	movs	r1, #0
 80007fe:	201f      	movs	r0, #31
 8000800:	f000 fcb3 	bl	800116a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000804:	201f      	movs	r0, #31
 8000806:	f000 fccc 	bl	80011a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800080a:	bf00      	nop
 800080c:	3728      	adds	r7, #40	; 0x28
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40005400 	.word	0x40005400
 8000818:	40023800 	.word	0x40023800
 800081c:	40020400 	.word	0x40020400
 8000820:	200002d0 	.word	0x200002d0
 8000824:	40026010 	.word	0x40026010
 8000828:	2000021c 	.word	0x2000021c
 800082c:	400260a0 	.word	0x400260a0

08000830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000836:	f000 fb29 	bl	8000e8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083a:	f000 f883 	bl	8000944 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083e:	f7ff fedd 	bl	80005fc <MX_GPIO_Init>
  MX_DMA_Init();
 8000842:	f7ff fe9d 	bl	8000580 <MX_DMA_Init>
  MX_I2C1_Init();
 8000846:	f7ff ff0f 	bl	8000668 <MX_I2C1_Init>
  MX_TIM1_Init();
 800084a:	f000 fa7d 	bl	8000d48 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 800084e:	f008 fceb 	bl	8009228 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000852:	f000 f8eb 	bl	8000a2c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_Delay(5000);
  //HAL_I2C_Mem_Write(&hi2c1, lsmaddr, (uint16_t) 0x12, I2C_MEMADD_SIZE_8BIT, 0b00000100, 1, HAL_MAX_DELAY);
  HAL_I2C_Mem_Write(&hi2c1, lsmaddr, (uint16_t) LSM6DS3_CTRL1_XL, I2C_MEMADD_SIZE_8BIT, 0b10100000, 1, HAL_MAX_DELAY);
 8000856:	4b32      	ldr	r3, [pc, #200]	; (8000920 <main+0xf0>)
 8000858:	8819      	ldrh	r1, [r3, #0]
 800085a:	f04f 33ff 	mov.w	r3, #4294967295
 800085e:	9302      	str	r3, [sp, #8]
 8000860:	2301      	movs	r3, #1
 8000862:	9301      	str	r3, [sp, #4]
 8000864:	23a0      	movs	r3, #160	; 0xa0
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	2301      	movs	r3, #1
 800086a:	2210      	movs	r2, #16
 800086c:	482d      	ldr	r0, [pc, #180]	; (8000924 <main+0xf4>)
 800086e:	f001 fa85 	bl	8001d7c <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8000872:	2064      	movs	r0, #100	; 0x64
 8000874:	f000 fb7c 	bl	8000f70 <HAL_Delay>
	  HAL_I2C_Mem_Read(&hi2c1, lsmaddr, (uint16_t) LSM6DS3_OUTZ_H_XL, I2C_MEMADD_SIZE_8BIT, &recdata, 1, HAL_MAX_DELAY);
	  z_val = (recdata[0] << 8) | z_val;
	  n = sprintf(buffer, "individual: %d, %d, %d\n",x_val,y_val,z_val);
	  CDC_Transmit_FS(buffer, n);
	  HAL_Delay(300); */
	  HAL_I2C_Mem_Read(&hi2c1, lsmaddr, (uint16_t) LSM6DS3_OUTX_L_XL, I2C_MEMADD_SIZE_8BIT, &recdata, 6, HAL_MAX_DELAY);
 8000878:	4b29      	ldr	r3, [pc, #164]	; (8000920 <main+0xf0>)
 800087a:	8819      	ldrh	r1, [r3, #0]
 800087c:	f04f 33ff 	mov.w	r3, #4294967295
 8000880:	9302      	str	r3, [sp, #8]
 8000882:	2306      	movs	r3, #6
 8000884:	9301      	str	r3, [sp, #4]
 8000886:	4b28      	ldr	r3, [pc, #160]	; (8000928 <main+0xf8>)
 8000888:	9300      	str	r3, [sp, #0]
 800088a:	2301      	movs	r3, #1
 800088c:	2228      	movs	r2, #40	; 0x28
 800088e:	4825      	ldr	r0, [pc, #148]	; (8000924 <main+0xf4>)
 8000890:	f001 fb6e 	bl	8001f70 <HAL_I2C_Mem_Read>
	  x_val = (recdata[0] & 0xFF ) | ((recdata[1] << 8));
 8000894:	4b24      	ldr	r3, [pc, #144]	; (8000928 <main+0xf8>)
 8000896:	881b      	ldrh	r3, [r3, #0]
 8000898:	b21b      	sxth	r3, r3
 800089a:	b2db      	uxtb	r3, r3
 800089c:	b21a      	sxth	r2, r3
 800089e:	4b22      	ldr	r3, [pc, #136]	; (8000928 <main+0xf8>)
 80008a0:	885b      	ldrh	r3, [r3, #2]
 80008a2:	021b      	lsls	r3, r3, #8
 80008a4:	b21b      	sxth	r3, r3
 80008a6:	4313      	orrs	r3, r2
 80008a8:	b21a      	sxth	r2, r3
 80008aa:	4b20      	ldr	r3, [pc, #128]	; (800092c <main+0xfc>)
 80008ac:	801a      	strh	r2, [r3, #0]
	  y_val = (recdata[2] & 0xFF ) | ((recdata[3] << 8));
 80008ae:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <main+0xf8>)
 80008b0:	889b      	ldrh	r3, [r3, #4]
 80008b2:	b21b      	sxth	r3, r3
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	b21a      	sxth	r2, r3
 80008b8:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <main+0xf8>)
 80008ba:	88db      	ldrh	r3, [r3, #6]
 80008bc:	021b      	lsls	r3, r3, #8
 80008be:	b21b      	sxth	r3, r3
 80008c0:	4313      	orrs	r3, r2
 80008c2:	b21a      	sxth	r2, r3
 80008c4:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <main+0x100>)
 80008c6:	801a      	strh	r2, [r3, #0]
	  z_val = (recdata[4] & 0xFF ) | ((recdata[5] << 8));
 80008c8:	4b17      	ldr	r3, [pc, #92]	; (8000928 <main+0xf8>)
 80008ca:	891b      	ldrh	r3, [r3, #8]
 80008cc:	b21b      	sxth	r3, r3
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	b21a      	sxth	r2, r3
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <main+0xf8>)
 80008d4:	895b      	ldrh	r3, [r3, #10]
 80008d6:	021b      	lsls	r3, r3, #8
 80008d8:	b21b      	sxth	r3, r3
 80008da:	4313      	orrs	r3, r2
 80008dc:	b21a      	sxth	r2, r3
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <main+0x104>)
 80008e0:	801a      	strh	r2, [r3, #0]
	  n = sprintf(buffer, "bulk: %d, %d, %d\n",x_val,y_val,z_val);
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <main+0xfc>)
 80008e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <main+0x100>)
 80008ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008f0:	4619      	mov	r1, r3
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <main+0x104>)
 80008f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008f8:	9300      	str	r3, [sp, #0]
 80008fa:	460b      	mov	r3, r1
 80008fc:	490e      	ldr	r1, [pc, #56]	; (8000938 <main+0x108>)
 80008fe:	480f      	ldr	r0, [pc, #60]	; (800093c <main+0x10c>)
 8000900:	f009 fac6 	bl	8009e90 <siprintf>
 8000904:	4602      	mov	r2, r0
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <main+0x110>)
 8000908:	601a      	str	r2, [r3, #0]
	  CDC_Transmit_FS(buffer, n);
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <main+0x110>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4619      	mov	r1, r3
 8000910:	480a      	ldr	r0, [pc, #40]	; (800093c <main+0x10c>)
 8000912:	f008 fd8b 	bl	800942c <CDC_Transmit_FS>
	  HAL_Delay(300);
 8000916:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800091a:	f000 fb29 	bl	8000f70 <HAL_Delay>
  {
 800091e:	e7ab      	b.n	8000878 <main+0x48>
 8000920:	20000000 	.word	0x20000000
 8000924:	2000027c 	.word	0x2000027c
 8000928:	20000338 	.word	0x20000338
 800092c:	20000334 	.word	0x20000334
 8000930:	20001326 	.word	0x20001326
 8000934:	20001324 	.word	0x20001324
 8000938:	0800a544 	.word	0x0800a544
 800093c:	20000350 	.word	0x20000350
 8000940:	20000330 	.word	0x20000330

08000944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b094      	sub	sp, #80	; 0x50
 8000948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094a:	f107 0320 	add.w	r3, r7, #32
 800094e:	2230      	movs	r2, #48	; 0x30
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f009 f9dc 	bl	8009d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000968:	2300      	movs	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	4b29      	ldr	r3, [pc, #164]	; (8000a14 <SystemClock_Config+0xd0>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000970:	4a28      	ldr	r2, [pc, #160]	; (8000a14 <SystemClock_Config+0xd0>)
 8000972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000976:	6413      	str	r3, [r2, #64]	; 0x40
 8000978:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <SystemClock_Config+0xd0>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000984:	2300      	movs	r3, #0
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	4b23      	ldr	r3, [pc, #140]	; (8000a18 <SystemClock_Config+0xd4>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000990:	4a21      	ldr	r2, [pc, #132]	; (8000a18 <SystemClock_Config+0xd4>)
 8000992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000996:	6013      	str	r3, [r2, #0]
 8000998:	4b1f      	ldr	r3, [pc, #124]	; (8000a18 <SystemClock_Config+0xd4>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009a4:	2301      	movs	r3, #1
 80009a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ae:	2302      	movs	r3, #2
 80009b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80009b8:	2319      	movs	r3, #25
 80009ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009bc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009c2:	2304      	movs	r3, #4
 80009c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009c6:	2307      	movs	r3, #7
 80009c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ca:	f107 0320 	add.w	r3, r7, #32
 80009ce:	4618      	mov	r0, r3
 80009d0:	f004 fcc6 	bl	8005360 <HAL_RCC_OscConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009da:	f000 f81f 	bl	8000a1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009de:	230f      	movs	r3, #15
 80009e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e2:	2302      	movs	r3, #2
 80009e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	2102      	movs	r1, #2
 80009fa:	4618      	mov	r0, r3
 80009fc:	f004 ff20 	bl	8005840 <HAL_RCC_ClockConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a06:	f000 f809 	bl	8000a1c <Error_Handler>
  }
}
 8000a0a:	bf00      	nop
 8000a0c:	3750      	adds	r7, #80	; 0x50
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40007000 	.word	0x40007000

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
	...

08000a2c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000a30:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <MX_SPI1_Init+0x64>)
 8000a32:	4a18      	ldr	r2, [pc, #96]	; (8000a94 <MX_SPI1_Init+0x68>)
 8000a34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a36:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <MX_SPI1_Init+0x64>)
 8000a38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a3e:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <MX_SPI1_Init+0x64>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <MX_SPI1_Init+0x64>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MX_SPI1_Init+0x64>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <MX_SPI1_Init+0x64>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <MX_SPI1_Init+0x64>)
 8000a58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a5c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <MX_SPI1_Init+0x64>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a64:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <MX_SPI1_Init+0x64>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_SPI1_Init+0x64>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a70:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <MX_SPI1_Init+0x64>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_SPI1_Init+0x64>)
 8000a78:	220a      	movs	r2, #10
 8000a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a7c:	4804      	ldr	r0, [pc, #16]	; (8000a90 <MX_SPI1_Init+0x64>)
 8000a7e:	f005 f897 	bl	8005bb0 <HAL_SPI_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a88:	f7ff ffc8 	bl	8000a1c <Error_Handler>
  }

}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20001328 	.word	0x20001328
 8000a94:	40013000 	.word	0x40013000

08000a98 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	; 0x28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a30      	ldr	r2, [pc, #192]	; (8000b78 <HAL_SPI_MspInit+0xe0>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d159      	bne.n	8000b6e <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	4b2f      	ldr	r3, [pc, #188]	; (8000b7c <HAL_SPI_MspInit+0xe4>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac2:	4a2e      	ldr	r2, [pc, #184]	; (8000b7c <HAL_SPI_MspInit+0xe4>)
 8000ac4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aca:	4b2c      	ldr	r3, [pc, #176]	; (8000b7c <HAL_SPI_MspInit+0xe4>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	4b28      	ldr	r3, [pc, #160]	; (8000b7c <HAL_SPI_MspInit+0xe4>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a27      	ldr	r2, [pc, #156]	; (8000b7c <HAL_SPI_MspInit+0xe4>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b25      	ldr	r3, [pc, #148]	; (8000b7c <HAL_SPI_MspInit+0xe4>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000af2:	23e0      	movs	r3, #224	; 0xe0
 8000af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	2302      	movs	r3, #2
 8000af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afe:	2303      	movs	r3, #3
 8000b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b02:	2305      	movs	r3, #5
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	481c      	ldr	r0, [pc, #112]	; (8000b80 <HAL_SPI_MspInit+0xe8>)
 8000b0e:	f000 fe7b 	bl	8001808 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000b12:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <HAL_SPI_MspInit+0xec>)
 8000b14:	4a1c      	ldr	r2, [pc, #112]	; (8000b88 <HAL_SPI_MspInit+0xf0>)
 8000b16:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000b18:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <HAL_SPI_MspInit+0xec>)
 8000b1a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000b1e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b20:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <HAL_SPI_MspInit+0xec>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b26:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <HAL_SPI_MspInit+0xec>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b2c:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <HAL_SPI_MspInit+0xec>)
 8000b2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b32:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b34:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <HAL_SPI_MspInit+0xec>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b3a:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_SPI_MspInit+0xec>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000b40:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <HAL_SPI_MspInit+0xec>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b46:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <HAL_SPI_MspInit+0xec>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b4c:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <HAL_SPI_MspInit+0xec>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000b52:	480c      	ldr	r0, [pc, #48]	; (8000b84 <HAL_SPI_MspInit+0xec>)
 8000b54:	f000 fb40 	bl	80011d8 <HAL_DMA_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8000b5e:	f7ff ff5d 	bl	8000a1c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a07      	ldr	r2, [pc, #28]	; (8000b84 <HAL_SPI_MspInit+0xec>)
 8000b66:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b68:	4a06      	ldr	r2, [pc, #24]	; (8000b84 <HAL_SPI_MspInit+0xec>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b6e:	bf00      	nop
 8000b70:	3728      	adds	r7, #40	; 0x28
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40013000 	.word	0x40013000
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020000 	.word	0x40020000
 8000b84:	20001380 	.word	0x20001380
 8000b88:	40026410 	.word	0x40026410

08000b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9a:	4a0f      	ldr	r2, [pc, #60]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000b9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	603b      	str	r3, [r7, #0]
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	4a08      	ldr	r2, [pc, #32]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	40023800 	.word	0x40023800

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bee:	e7fe      	b.n	8000bee <HardFault_Handler+0x4>

08000bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <MemManage_Handler+0x4>

08000bf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <BusFault_Handler+0x4>

08000bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <UsageFault_Handler+0x4>

08000c02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c30:	f000 f97e 	bl	8000f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000c3c:	4802      	ldr	r0, [pc, #8]	; (8000c48 <DMA1_Stream0_IRQHandler+0x10>)
 8000c3e:	f000 fb9b 	bl	8001378 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200002d0 	.word	0x200002d0

08000c4c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000c50:	4802      	ldr	r0, [pc, #8]	; (8000c5c <DMA1_Stream6_IRQHandler+0x10>)
 8000c52:	f000 fb91 	bl	8001378 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	2000021c 	.word	0x2000021c

08000c60 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c64:	4802      	ldr	r0, [pc, #8]	; (8000c70 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c66:	f005 f832 	bl	8005cce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	200013e0 	.word	0x200013e0

08000c74 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000c78:	4802      	ldr	r0, [pc, #8]	; (8000c84 <I2C1_EV_IRQHandler+0x10>)
 8000c7a:	f001 fb9f 	bl	80023bc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	2000027c 	.word	0x2000027c

08000c88 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000c8c:	4802      	ldr	r0, [pc, #8]	; (8000c98 <DMA2_Stream0_IRQHandler+0x10>)
 8000c8e:	f000 fb73 	bl	8001378 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20001380 	.word	0x20001380

08000c9c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ca0:	4802      	ldr	r0, [pc, #8]	; (8000cac <OTG_FS_IRQHandler+0x10>)
 8000ca2:	f003 fb2a 	bl	80042fa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200020c4 	.word	0x200020c4

08000cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb8:	4a14      	ldr	r2, [pc, #80]	; (8000d0c <_sbrk+0x5c>)
 8000cba:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <_sbrk+0x60>)
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc4:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <_sbrk+0x64>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d102      	bne.n	8000cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <_sbrk+0x64>)
 8000cce:	4a12      	ldr	r2, [pc, #72]	; (8000d18 <_sbrk+0x68>)
 8000cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <_sbrk+0x64>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d207      	bcs.n	8000cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ce0:	f008 ffdc 	bl	8009c9c <__errno>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	230c      	movs	r3, #12
 8000ce8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000cea:	f04f 33ff 	mov.w	r3, #4294967295
 8000cee:	e009      	b.n	8000d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <_sbrk+0x64>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cf6:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <_sbrk+0x64>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	4a05      	ldr	r2, [pc, #20]	; (8000d14 <_sbrk+0x64>)
 8000d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d02:	68fb      	ldr	r3, [r7, #12]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3718      	adds	r7, #24
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20010000 	.word	0x20010000
 8000d10:	00000500 	.word	0x00000500
 8000d14:	20000204 	.word	0x20000204
 8000d18:	200024d0 	.word	0x200024d0

08000d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <SystemInit+0x28>)
 8000d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d26:	4a07      	ldr	r2, [pc, #28]	; (8000d44 <SystemInit+0x28>)
 8000d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <SystemInit+0x28>)
 8000d32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d36:	609a      	str	r2, [r3, #8]
#endif
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d4e:	f107 0308 	add.w	r3, r7, #8
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000d64:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <MX_TIM1_Init+0x98>)
 8000d66:	4a1f      	ldr	r2, [pc, #124]	; (8000de4 <MX_TIM1_Init+0x9c>)
 8000d68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 8000d6a:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <MX_TIM1_Init+0x98>)
 8000d6c:	2254      	movs	r2, #84	; 0x54
 8000d6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d70:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <MX_TIM1_Init+0x98>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000d76:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <MX_TIM1_Init+0x98>)
 8000d78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d7c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d7e:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <MX_TIM1_Init+0x98>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d84:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <MX_TIM1_Init+0x98>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <MX_TIM1_Init+0x98>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d90:	4813      	ldr	r0, [pc, #76]	; (8000de0 <MX_TIM1_Init+0x98>)
 8000d92:	f004 ff71 	bl	8005c78 <HAL_TIM_Base_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000d9c:	f7ff fe3e 	bl	8000a1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000da6:	f107 0308 	add.w	r3, r7, #8
 8000daa:	4619      	mov	r1, r3
 8000dac:	480c      	ldr	r0, [pc, #48]	; (8000de0 <MX_TIM1_Init+0x98>)
 8000dae:	f005 f896 	bl	8005ede <HAL_TIM_ConfigClockSource>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000db8:	f7ff fe30 	bl	8000a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4805      	ldr	r0, [pc, #20]	; (8000de0 <MX_TIM1_Init+0x98>)
 8000dca:	f005 fa8b 	bl	80062e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000dd4:	f7ff fe22 	bl	8000a1c <Error_Handler>
  }

}
 8000dd8:	bf00      	nop
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	200013e0 	.word	0x200013e0
 8000de4:	40010000 	.word	0x40010000

08000de8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0e      	ldr	r2, [pc, #56]	; (8000e30 <HAL_TIM_Base_MspInit+0x48>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d115      	bne.n	8000e26 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <HAL_TIM_Base_MspInit+0x4c>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	4a0c      	ldr	r2, [pc, #48]	; (8000e34 <HAL_TIM_Base_MspInit+0x4c>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <HAL_TIM_Base_MspInit+0x4c>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2100      	movs	r1, #0
 8000e1a:	2019      	movs	r0, #25
 8000e1c:	f000 f9a5 	bl	800116a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e20:	2019      	movs	r0, #25
 8000e22:	f000 f9be 	bl	80011a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40010000 	.word	0x40010000
 8000e34:	40023800 	.word	0x40023800

08000e38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e70 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e3e:	e003      	b.n	8000e48 <LoopCopyDataInit>

08000e40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e46:	3104      	adds	r1, #4

08000e48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e48:	480b      	ldr	r0, [pc, #44]	; (8000e78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e50:	d3f6      	bcc.n	8000e40 <CopyDataInit>
  ldr  r2, =_sbss
 8000e52:	4a0b      	ldr	r2, [pc, #44]	; (8000e80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e54:	e002      	b.n	8000e5c <LoopFillZerobss>

08000e56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e58:	f842 3b04 	str.w	r3, [r2], #4

08000e5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e60:	d3f9      	bcc.n	8000e56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e62:	f7ff ff5b 	bl	8000d1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e66:	f008 ff1f 	bl	8009ca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e6a:	f7ff fce1 	bl	8000830 <main>
  bx  lr    
 8000e6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e70:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8000e74:	0800a604 	.word	0x0800a604
  ldr  r0, =_sdata
 8000e78:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e7c:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 8000e80:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8000e84:	200024d0 	.word	0x200024d0

08000e88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e88:	e7fe      	b.n	8000e88 <ADC_IRQHandler>
	...

08000e8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e90:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0d      	ldr	r2, [pc, #52]	; (8000ecc <HAL_Init+0x40>)
 8000e96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <HAL_Init+0x40>)
 8000ea2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <HAL_Init+0x40>)
 8000eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb4:	2003      	movs	r0, #3
 8000eb6:	f000 f94d 	bl	8001154 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f000 f808 	bl	8000ed0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec0:	f7ff fe64 	bl	8000b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40023c00 	.word	0x40023c00

08000ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_InitTick+0x54>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <HAL_InitTick+0x58>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f965 	bl	80011be <HAL_SYSTICK_Config>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00e      	b.n	8000f1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d80a      	bhi.n	8000f1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f04:	2200      	movs	r2, #0
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	f000 f92d 	bl	800116a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f10:	4a06      	ldr	r2, [pc, #24]	; (8000f2c <HAL_InitTick+0x5c>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f16:	2300      	movs	r3, #0
 8000f18:	e000      	b.n	8000f1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000004 	.word	0x20000004
 8000f28:	2000000c 	.word	0x2000000c
 8000f2c:	20000008 	.word	0x20000008

08000f30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_IncTick+0x20>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_IncTick+0x24>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <HAL_IncTick+0x24>)
 8000f42:	6013      	str	r3, [r2, #0]
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	2000000c 	.word	0x2000000c
 8000f54:	20001420 	.word	0x20001420

08000f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f5c:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <HAL_GetTick+0x14>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20001420 	.word	0x20001420

08000f70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f78:	f7ff ffee 	bl	8000f58 <HAL_GetTick>
 8000f7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f88:	d005      	beq.n	8000f96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <HAL_Delay+0x40>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	4413      	add	r3, r2
 8000f94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f96:	bf00      	nop
 8000f98:	f7ff ffde 	bl	8000f58 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d8f7      	bhi.n	8000f98 <HAL_Delay+0x28>
  {
  }
}
 8000fa8:	bf00      	nop
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	2000000c 	.word	0x2000000c

08000fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe6:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	60d3      	str	r3, [r2, #12]
}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <__NVIC_GetPriorityGrouping+0x18>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	0a1b      	lsrs	r3, r3, #8
 8001006:	f003 0307 	and.w	r3, r3, #7
}
 800100a:	4618      	mov	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	2b00      	cmp	r3, #0
 8001028:	db0b      	blt.n	8001042 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	f003 021f 	and.w	r2, r3, #31
 8001030:	4907      	ldr	r1, [pc, #28]	; (8001050 <__NVIC_EnableIRQ+0x38>)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	095b      	lsrs	r3, r3, #5
 8001038:	2001      	movs	r0, #1
 800103a:	fa00 f202 	lsl.w	r2, r0, r2
 800103e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000e100 	.word	0xe000e100

08001054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	6039      	str	r1, [r7, #0]
 800105e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	2b00      	cmp	r3, #0
 8001066:	db0a      	blt.n	800107e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	b2da      	uxtb	r2, r3
 800106c:	490c      	ldr	r1, [pc, #48]	; (80010a0 <__NVIC_SetPriority+0x4c>)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	0112      	lsls	r2, r2, #4
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	440b      	add	r3, r1
 8001078:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800107c:	e00a      	b.n	8001094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4908      	ldr	r1, [pc, #32]	; (80010a4 <__NVIC_SetPriority+0x50>)
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	f003 030f 	and.w	r3, r3, #15
 800108a:	3b04      	subs	r3, #4
 800108c:	0112      	lsls	r2, r2, #4
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	440b      	add	r3, r1
 8001092:	761a      	strb	r2, [r3, #24]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000e100 	.word	0xe000e100
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b089      	sub	sp, #36	; 0x24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f1c3 0307 	rsb	r3, r3, #7
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	bf28      	it	cs
 80010c6:	2304      	movcs	r3, #4
 80010c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3304      	adds	r3, #4
 80010ce:	2b06      	cmp	r3, #6
 80010d0:	d902      	bls.n	80010d8 <NVIC_EncodePriority+0x30>
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3b03      	subs	r3, #3
 80010d6:	e000      	b.n	80010da <NVIC_EncodePriority+0x32>
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	f04f 32ff 	mov.w	r2, #4294967295
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43da      	mvns	r2, r3
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	401a      	ands	r2, r3
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f0:	f04f 31ff 	mov.w	r1, #4294967295
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	fa01 f303 	lsl.w	r3, r1, r3
 80010fa:	43d9      	mvns	r1, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	4313      	orrs	r3, r2
         );
}
 8001102:	4618      	mov	r0, r3
 8001104:	3724      	adds	r7, #36	; 0x24
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001120:	d301      	bcc.n	8001126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001122:	2301      	movs	r3, #1
 8001124:	e00f      	b.n	8001146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001126:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <SysTick_Config+0x40>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112e:	210f      	movs	r1, #15
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	f7ff ff8e 	bl	8001054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <SysTick_Config+0x40>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <SysTick_Config+0x40>)
 8001140:	2207      	movs	r2, #7
 8001142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	e000e010 	.word	0xe000e010

08001154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ff29 	bl	8000fb4 <__NVIC_SetPriorityGrouping>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800116a:	b580      	push	{r7, lr}
 800116c:	b086      	sub	sp, #24
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	60b9      	str	r1, [r7, #8]
 8001174:	607a      	str	r2, [r7, #4]
 8001176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800117c:	f7ff ff3e 	bl	8000ffc <__NVIC_GetPriorityGrouping>
 8001180:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	68b9      	ldr	r1, [r7, #8]
 8001186:	6978      	ldr	r0, [r7, #20]
 8001188:	f7ff ff8e 	bl	80010a8 <NVIC_EncodePriority>
 800118c:	4602      	mov	r2, r0
 800118e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff5d 	bl	8001054 <__NVIC_SetPriority>
}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff31 	bl	8001018 <__NVIC_EnableIRQ>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ffa2 	bl	8001110 <SysTick_Config>
 80011cc:	4603      	mov	r3, r0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80011e4:	f7ff feb8 	bl	8000f58 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d101      	bne.n	80011f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e099      	b.n	8001328 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2202      	movs	r2, #2
 8001200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 0201 	bic.w	r2, r2, #1
 8001212:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001214:	e00f      	b.n	8001236 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001216:	f7ff fe9f 	bl	8000f58 <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b05      	cmp	r3, #5
 8001222:	d908      	bls.n	8001236 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2220      	movs	r2, #32
 8001228:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2203      	movs	r2, #3
 800122e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e078      	b.n	8001328 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1e8      	bne.n	8001216 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	4b38      	ldr	r3, [pc, #224]	; (8001330 <HAL_DMA_Init+0x158>)
 8001250:	4013      	ands	r3, r2
 8001252:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001262:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800126e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800127a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a1b      	ldr	r3, [r3, #32]
 8001280:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	4313      	orrs	r3, r2
 8001286:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128c:	2b04      	cmp	r3, #4
 800128e:	d107      	bne.n	80012a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001298:	4313      	orrs	r3, r2
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	4313      	orrs	r3, r2
 800129e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	697a      	ldr	r2, [r7, #20]
 80012a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	f023 0307 	bic.w	r3, r3, #7
 80012b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012bc:	697a      	ldr	r2, [r7, #20]
 80012be:	4313      	orrs	r3, r2
 80012c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	d117      	bne.n	80012fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ce:	697a      	ldr	r2, [r7, #20]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d00e      	beq.n	80012fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f000 fa19 	bl	8001714 <DMA_CheckFifoParam>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d008      	beq.n	80012fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2240      	movs	r2, #64	; 0x40
 80012ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2201      	movs	r2, #1
 80012f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80012f6:	2301      	movs	r3, #1
 80012f8:	e016      	b.n	8001328 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 f9d0 	bl	80016a8 <DMA_CalcBaseAndBitshift>
 8001308:	4603      	mov	r3, r0
 800130a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001310:	223f      	movs	r2, #63	; 0x3f
 8001312:	409a      	lsls	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2201      	movs	r2, #1
 8001322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001326:	2300      	movs	r3, #0
}
 8001328:	4618      	mov	r0, r3
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	f010803f 	.word	0xf010803f

08001334 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d004      	beq.n	8001352 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2280      	movs	r2, #128	; 0x80
 800134c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e00c      	b.n	800136c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2205      	movs	r2, #5
 8001356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f022 0201 	bic.w	r2, r2, #1
 8001368:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001384:	4b92      	ldr	r3, [pc, #584]	; (80015d0 <HAL_DMA_IRQHandler+0x258>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a92      	ldr	r2, [pc, #584]	; (80015d4 <HAL_DMA_IRQHandler+0x25c>)
 800138a:	fba2 2303 	umull	r2, r3, r2, r3
 800138e:	0a9b      	lsrs	r3, r3, #10
 8001390:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001396:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a2:	2208      	movs	r2, #8
 80013a4:	409a      	lsls	r2, r3
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4013      	ands	r3, r2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d01a      	beq.n	80013e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d013      	beq.n	80013e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f022 0204 	bic.w	r2, r2, #4
 80013ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d0:	2208      	movs	r2, #8
 80013d2:	409a      	lsls	r2, r3
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013dc:	f043 0201 	orr.w	r2, r3, #1
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e8:	2201      	movs	r2, #1
 80013ea:	409a      	lsls	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4013      	ands	r3, r2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d012      	beq.n	800141a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d00b      	beq.n	800141a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001406:	2201      	movs	r2, #1
 8001408:	409a      	lsls	r2, r3
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001412:	f043 0202 	orr.w	r2, r3, #2
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800141e:	2204      	movs	r2, #4
 8001420:	409a      	lsls	r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	4013      	ands	r3, r2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d012      	beq.n	8001450 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d00b      	beq.n	8001450 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800143c:	2204      	movs	r2, #4
 800143e:	409a      	lsls	r2, r3
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001448:	f043 0204 	orr.w	r2, r3, #4
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001454:	2210      	movs	r2, #16
 8001456:	409a      	lsls	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	4013      	ands	r3, r2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d043      	beq.n	80014e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0308 	and.w	r3, r3, #8
 800146a:	2b00      	cmp	r3, #0
 800146c:	d03c      	beq.n	80014e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001472:	2210      	movs	r2, #16
 8001474:	409a      	lsls	r2, r3
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d018      	beq.n	80014ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d108      	bne.n	80014a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	2b00      	cmp	r3, #0
 800149c:	d024      	beq.n	80014e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	4798      	blx	r3
 80014a6:	e01f      	b.n	80014e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d01b      	beq.n	80014e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	4798      	blx	r3
 80014b8:	e016      	b.n	80014e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d107      	bne.n	80014d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 0208 	bic.w	r2, r2, #8
 80014d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ec:	2220      	movs	r2, #32
 80014ee:	409a      	lsls	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	4013      	ands	r3, r2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 808e 	beq.w	8001616 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0310 	and.w	r3, r3, #16
 8001504:	2b00      	cmp	r3, #0
 8001506:	f000 8086 	beq.w	8001616 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800150e:	2220      	movs	r2, #32
 8001510:	409a      	lsls	r2, r3
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b05      	cmp	r3, #5
 8001520:	d136      	bne.n	8001590 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 0216 	bic.w	r2, r2, #22
 8001530:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	695a      	ldr	r2, [r3, #20]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001540:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	2b00      	cmp	r3, #0
 8001548:	d103      	bne.n	8001552 <HAL_DMA_IRQHandler+0x1da>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800154e:	2b00      	cmp	r3, #0
 8001550:	d007      	beq.n	8001562 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 0208 	bic.w	r2, r2, #8
 8001560:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001566:	223f      	movs	r2, #63	; 0x3f
 8001568:	409a      	lsls	r2, r3
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2201      	movs	r2, #1
 800157a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001582:	2b00      	cmp	r3, #0
 8001584:	d07d      	beq.n	8001682 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	4798      	blx	r3
        }
        return;
 800158e:	e078      	b.n	8001682 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d01c      	beq.n	80015d8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d108      	bne.n	80015be <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d030      	beq.n	8001616 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	4798      	blx	r3
 80015bc:	e02b      	b.n	8001616 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d027      	beq.n	8001616 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	4798      	blx	r3
 80015ce:	e022      	b.n	8001616 <HAL_DMA_IRQHandler+0x29e>
 80015d0:	20000004 	.word	0x20000004
 80015d4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d10f      	bne.n	8001606 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 0210 	bic.w	r2, r2, #16
 80015f4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2201      	movs	r2, #1
 8001602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800161a:	2b00      	cmp	r3, #0
 800161c:	d032      	beq.n	8001684 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b00      	cmp	r3, #0
 8001628:	d022      	beq.n	8001670 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2205      	movs	r2, #5
 800162e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 0201 	bic.w	r2, r2, #1
 8001640:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	3301      	adds	r3, #1
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	429a      	cmp	r2, r3
 800164c:	d307      	bcc.n	800165e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1f2      	bne.n	8001642 <HAL_DMA_IRQHandler+0x2ca>
 800165c:	e000      	b.n	8001660 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800165e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001674:	2b00      	cmp	r3, #0
 8001676:	d005      	beq.n	8001684 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	4798      	blx	r3
 8001680:	e000      	b.n	8001684 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001682:	bf00      	nop
    }
  }
}
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop

0800168c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800169a:	b2db      	uxtb	r3, r3
}
 800169c:	4618      	mov	r0, r3
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	3b10      	subs	r3, #16
 80016b8:	4a14      	ldr	r2, [pc, #80]	; (800170c <DMA_CalcBaseAndBitshift+0x64>)
 80016ba:	fba2 2303 	umull	r2, r3, r2, r3
 80016be:	091b      	lsrs	r3, r3, #4
 80016c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80016c2:	4a13      	ldr	r2, [pc, #76]	; (8001710 <DMA_CalcBaseAndBitshift+0x68>)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4413      	add	r3, r2
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	461a      	mov	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2b03      	cmp	r3, #3
 80016d4:	d909      	bls.n	80016ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016de:	f023 0303 	bic.w	r3, r3, #3
 80016e2:	1d1a      	adds	r2, r3, #4
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	659a      	str	r2, [r3, #88]	; 0x58
 80016e8:	e007      	b.n	80016fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016f2:	f023 0303 	bic.w	r3, r3, #3
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	aaaaaaab 	.word	0xaaaaaaab
 8001710:	0800a5b8 	.word	0x0800a5b8

08001714 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800171c:	2300      	movs	r3, #0
 800171e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001724:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d11f      	bne.n	800176e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	2b03      	cmp	r3, #3
 8001732:	d855      	bhi.n	80017e0 <DMA_CheckFifoParam+0xcc>
 8001734:	a201      	add	r2, pc, #4	; (adr r2, 800173c <DMA_CheckFifoParam+0x28>)
 8001736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173a:	bf00      	nop
 800173c:	0800174d 	.word	0x0800174d
 8001740:	0800175f 	.word	0x0800175f
 8001744:	0800174d 	.word	0x0800174d
 8001748:	080017e1 	.word	0x080017e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001750:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d045      	beq.n	80017e4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800175c:	e042      	b.n	80017e4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001762:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001766:	d13f      	bne.n	80017e8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800176c:	e03c      	b.n	80017e8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001776:	d121      	bne.n	80017bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	2b03      	cmp	r3, #3
 800177c:	d836      	bhi.n	80017ec <DMA_CheckFifoParam+0xd8>
 800177e:	a201      	add	r2, pc, #4	; (adr r2, 8001784 <DMA_CheckFifoParam+0x70>)
 8001780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001784:	08001795 	.word	0x08001795
 8001788:	0800179b 	.word	0x0800179b
 800178c:	08001795 	.word	0x08001795
 8001790:	080017ad 	.word	0x080017ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	73fb      	strb	r3, [r7, #15]
      break;
 8001798:	e02f      	b.n	80017fa <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d024      	beq.n	80017f0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017aa:	e021      	b.n	80017f0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017b4:	d11e      	bne.n	80017f4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80017ba:	e01b      	b.n	80017f4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d902      	bls.n	80017c8 <DMA_CheckFifoParam+0xb4>
 80017c2:	2b03      	cmp	r3, #3
 80017c4:	d003      	beq.n	80017ce <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80017c6:	e018      	b.n	80017fa <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	73fb      	strb	r3, [r7, #15]
      break;
 80017cc:	e015      	b.n	80017fa <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00e      	beq.n	80017f8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	73fb      	strb	r3, [r7, #15]
      break;
 80017de:	e00b      	b.n	80017f8 <DMA_CheckFifoParam+0xe4>
      break;
 80017e0:	bf00      	nop
 80017e2:	e00a      	b.n	80017fa <DMA_CheckFifoParam+0xe6>
      break;
 80017e4:	bf00      	nop
 80017e6:	e008      	b.n	80017fa <DMA_CheckFifoParam+0xe6>
      break;
 80017e8:	bf00      	nop
 80017ea:	e006      	b.n	80017fa <DMA_CheckFifoParam+0xe6>
      break;
 80017ec:	bf00      	nop
 80017ee:	e004      	b.n	80017fa <DMA_CheckFifoParam+0xe6>
      break;
 80017f0:	bf00      	nop
 80017f2:	e002      	b.n	80017fa <DMA_CheckFifoParam+0xe6>
      break;   
 80017f4:	bf00      	nop
 80017f6:	e000      	b.n	80017fa <DMA_CheckFifoParam+0xe6>
      break;
 80017f8:	bf00      	nop
    }
  } 
  
  return status; 
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001808:	b480      	push	{r7}
 800180a:	b089      	sub	sp, #36	; 0x24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001816:	2300      	movs	r3, #0
 8001818:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800181a:	2300      	movs	r3, #0
 800181c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800181e:	2300      	movs	r3, #0
 8001820:	61fb      	str	r3, [r7, #28]
 8001822:	e159      	b.n	8001ad8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001824:	2201      	movs	r2, #1
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	4013      	ands	r3, r2
 8001836:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	429a      	cmp	r2, r3
 800183e:	f040 8148 	bne.w	8001ad2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d00b      	beq.n	8001862 <HAL_GPIO_Init+0x5a>
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d007      	beq.n	8001862 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001856:	2b11      	cmp	r3, #17
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b12      	cmp	r3, #18
 8001860:	d130      	bne.n	80018c4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	2203      	movs	r2, #3
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43db      	mvns	r3, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4013      	ands	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	68da      	ldr	r2, [r3, #12]
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4313      	orrs	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001898:	2201      	movs	r2, #1
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	091b      	lsrs	r3, r3, #4
 80018ae:	f003 0201 	and.w	r2, r3, #1
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	2203      	movs	r2, #3
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d003      	beq.n	8001904 <HAL_GPIO_Init+0xfc>
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b12      	cmp	r3, #18
 8001902:	d123      	bne.n	800194c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	08da      	lsrs	r2, r3, #3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3208      	adds	r2, #8
 800190c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001910:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	220f      	movs	r2, #15
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	691a      	ldr	r2, [r3, #16]
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	08da      	lsrs	r2, r3, #3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3208      	adds	r2, #8
 8001946:	69b9      	ldr	r1, [r7, #24]
 8001948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	2203      	movs	r2, #3
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0203 	and.w	r2, r3, #3
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 80a2 	beq.w	8001ad2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	4b56      	ldr	r3, [pc, #344]	; (8001aec <HAL_GPIO_Init+0x2e4>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	4a55      	ldr	r2, [pc, #340]	; (8001aec <HAL_GPIO_Init+0x2e4>)
 8001998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800199c:	6453      	str	r3, [r2, #68]	; 0x44
 800199e:	4b53      	ldr	r3, [pc, #332]	; (8001aec <HAL_GPIO_Init+0x2e4>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019aa:	4a51      	ldr	r2, [pc, #324]	; (8001af0 <HAL_GPIO_Init+0x2e8>)
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	089b      	lsrs	r3, r3, #2
 80019b0:	3302      	adds	r3, #2
 80019b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	220f      	movs	r2, #15
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a48      	ldr	r2, [pc, #288]	; (8001af4 <HAL_GPIO_Init+0x2ec>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d019      	beq.n	8001a0a <HAL_GPIO_Init+0x202>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a47      	ldr	r2, [pc, #284]	; (8001af8 <HAL_GPIO_Init+0x2f0>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d013      	beq.n	8001a06 <HAL_GPIO_Init+0x1fe>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a46      	ldr	r2, [pc, #280]	; (8001afc <HAL_GPIO_Init+0x2f4>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d00d      	beq.n	8001a02 <HAL_GPIO_Init+0x1fa>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a45      	ldr	r2, [pc, #276]	; (8001b00 <HAL_GPIO_Init+0x2f8>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d007      	beq.n	80019fe <HAL_GPIO_Init+0x1f6>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a44      	ldr	r2, [pc, #272]	; (8001b04 <HAL_GPIO_Init+0x2fc>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d101      	bne.n	80019fa <HAL_GPIO_Init+0x1f2>
 80019f6:	2304      	movs	r3, #4
 80019f8:	e008      	b.n	8001a0c <HAL_GPIO_Init+0x204>
 80019fa:	2307      	movs	r3, #7
 80019fc:	e006      	b.n	8001a0c <HAL_GPIO_Init+0x204>
 80019fe:	2303      	movs	r3, #3
 8001a00:	e004      	b.n	8001a0c <HAL_GPIO_Init+0x204>
 8001a02:	2302      	movs	r3, #2
 8001a04:	e002      	b.n	8001a0c <HAL_GPIO_Init+0x204>
 8001a06:	2301      	movs	r3, #1
 8001a08:	e000      	b.n	8001a0c <HAL_GPIO_Init+0x204>
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	69fa      	ldr	r2, [r7, #28]
 8001a0e:	f002 0203 	and.w	r2, r2, #3
 8001a12:	0092      	lsls	r2, r2, #2
 8001a14:	4093      	lsls	r3, r2
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a1c:	4934      	ldr	r1, [pc, #208]	; (8001af0 <HAL_GPIO_Init+0x2e8>)
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	089b      	lsrs	r3, r3, #2
 8001a22:	3302      	adds	r3, #2
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a2a:	4b37      	ldr	r3, [pc, #220]	; (8001b08 <HAL_GPIO_Init+0x300>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	43db      	mvns	r3, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4013      	ands	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a4e:	4a2e      	ldr	r2, [pc, #184]	; (8001b08 <HAL_GPIO_Init+0x300>)
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a54:	4b2c      	ldr	r3, [pc, #176]	; (8001b08 <HAL_GPIO_Init+0x300>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a78:	4a23      	ldr	r2, [pc, #140]	; (8001b08 <HAL_GPIO_Init+0x300>)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a7e:	4b22      	ldr	r3, [pc, #136]	; (8001b08 <HAL_GPIO_Init+0x300>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	43db      	mvns	r3, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aa2:	4a19      	ldr	r2, [pc, #100]	; (8001b08 <HAL_GPIO_Init+0x300>)
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001aa8:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <HAL_GPIO_Init+0x300>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001acc:	4a0e      	ldr	r2, [pc, #56]	; (8001b08 <HAL_GPIO_Init+0x300>)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	61fb      	str	r3, [r7, #28]
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	2b0f      	cmp	r3, #15
 8001adc:	f67f aea2 	bls.w	8001824 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ae0:	bf00      	nop
 8001ae2:	3724      	adds	r7, #36	; 0x24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40013800 	.word	0x40013800
 8001af4:	40020000 	.word	0x40020000
 8001af8:	40020400 	.word	0x40020400
 8001afc:	40020800 	.word	0x40020800
 8001b00:	40020c00 	.word	0x40020c00
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40013c00 	.word	0x40013c00

08001b0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e11f      	b.n	8001d5e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d106      	bne.n	8001b38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7fe fdc6 	bl	80006c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2224      	movs	r2, #36	; 0x24
 8001b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0201 	bic.w	r2, r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b70:	f004 f80a 	bl	8005b88 <HAL_RCC_GetPCLK1Freq>
 8001b74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	4a7b      	ldr	r2, [pc, #492]	; (8001d68 <HAL_I2C_Init+0x25c>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d807      	bhi.n	8001b90 <HAL_I2C_Init+0x84>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4a7a      	ldr	r2, [pc, #488]	; (8001d6c <HAL_I2C_Init+0x260>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	bf94      	ite	ls
 8001b88:	2301      	movls	r3, #1
 8001b8a:	2300      	movhi	r3, #0
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	e006      	b.n	8001b9e <HAL_I2C_Init+0x92>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4a77      	ldr	r2, [pc, #476]	; (8001d70 <HAL_I2C_Init+0x264>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	bf94      	ite	ls
 8001b98:	2301      	movls	r3, #1
 8001b9a:	2300      	movhi	r3, #0
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e0db      	b.n	8001d5e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	4a72      	ldr	r2, [pc, #456]	; (8001d74 <HAL_I2C_Init+0x268>)
 8001baa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bae:	0c9b      	lsrs	r3, r3, #18
 8001bb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68ba      	ldr	r2, [r7, #8]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	4a64      	ldr	r2, [pc, #400]	; (8001d68 <HAL_I2C_Init+0x25c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d802      	bhi.n	8001be0 <HAL_I2C_Init+0xd4>
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	e009      	b.n	8001bf4 <HAL_I2C_Init+0xe8>
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001be6:	fb02 f303 	mul.w	r3, r2, r3
 8001bea:	4a63      	ldr	r2, [pc, #396]	; (8001d78 <HAL_I2C_Init+0x26c>)
 8001bec:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf0:	099b      	lsrs	r3, r3, #6
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	430b      	orrs	r3, r1
 8001bfa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	4956      	ldr	r1, [pc, #344]	; (8001d68 <HAL_I2C_Init+0x25c>)
 8001c10:	428b      	cmp	r3, r1
 8001c12:	d80d      	bhi.n	8001c30 <HAL_I2C_Init+0x124>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	1e59      	subs	r1, r3, #1
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c22:	3301      	adds	r3, #1
 8001c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c28:	2b04      	cmp	r3, #4
 8001c2a:	bf38      	it	cc
 8001c2c:	2304      	movcc	r3, #4
 8001c2e:	e04f      	b.n	8001cd0 <HAL_I2C_Init+0x1c4>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d111      	bne.n	8001c5c <HAL_I2C_Init+0x150>
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	1e58      	subs	r0, r3, #1
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6859      	ldr	r1, [r3, #4]
 8001c40:	460b      	mov	r3, r1
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	440b      	add	r3, r1
 8001c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	bf0c      	ite	eq
 8001c54:	2301      	moveq	r3, #1
 8001c56:	2300      	movne	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	e012      	b.n	8001c82 <HAL_I2C_Init+0x176>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	1e58      	subs	r0, r3, #1
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6859      	ldr	r1, [r3, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	0099      	lsls	r1, r3, #2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c72:	3301      	adds	r3, #1
 8001c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	bf0c      	ite	eq
 8001c7c:	2301      	moveq	r3, #1
 8001c7e:	2300      	movne	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_I2C_Init+0x17e>
 8001c86:	2301      	movs	r3, #1
 8001c88:	e022      	b.n	8001cd0 <HAL_I2C_Init+0x1c4>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10e      	bne.n	8001cb0 <HAL_I2C_Init+0x1a4>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	1e58      	subs	r0, r3, #1
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6859      	ldr	r1, [r3, #4]
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	440b      	add	r3, r1
 8001ca0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cae:	e00f      	b.n	8001cd0 <HAL_I2C_Init+0x1c4>
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	1e58      	subs	r0, r3, #1
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6859      	ldr	r1, [r3, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	0099      	lsls	r1, r3, #2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ccc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	6809      	ldr	r1, [r1, #0]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69da      	ldr	r2, [r3, #28]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001cfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6911      	ldr	r1, [r2, #16]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	68d2      	ldr	r2, [r2, #12]
 8001d0a:	4311      	orrs	r1, r2
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6812      	ldr	r2, [r2, #0]
 8001d10:	430b      	orrs	r3, r1
 8001d12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	695a      	ldr	r2, [r3, #20]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 0201 	orr.w	r2, r2, #1
 8001d3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2220      	movs	r2, #32
 8001d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	000186a0 	.word	0x000186a0
 8001d6c:	001e847f 	.word	0x001e847f
 8001d70:	003d08ff 	.word	0x003d08ff
 8001d74:	431bde83 	.word	0x431bde83
 8001d78:	10624dd3 	.word	0x10624dd3

08001d7c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	4608      	mov	r0, r1
 8001d86:	4611      	mov	r1, r2
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	817b      	strh	r3, [r7, #10]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	813b      	strh	r3, [r7, #8]
 8001d92:	4613      	mov	r3, r2
 8001d94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d96:	f7ff f8df 	bl	8000f58 <HAL_GetTick>
 8001d9a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b20      	cmp	r3, #32
 8001da6:	f040 80d9 	bne.w	8001f5c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	2319      	movs	r3, #25
 8001db0:	2201      	movs	r2, #1
 8001db2:	496d      	ldr	r1, [pc, #436]	; (8001f68 <HAL_I2C_Mem_Write+0x1ec>)
 8001db4:	68f8      	ldr	r0, [r7, #12]
 8001db6:	f001 ff58 	bl	8003c6a <I2C_WaitOnFlagUntilTimeout>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	e0cc      	b.n	8001f5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d101      	bne.n	8001dd2 <HAL_I2C_Mem_Write+0x56>
 8001dce:	2302      	movs	r3, #2
 8001dd0:	e0c5      	b.n	8001f5e <HAL_I2C_Mem_Write+0x1e2>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d007      	beq.n	8001df8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0201 	orr.w	r2, r2, #1
 8001df6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2221      	movs	r2, #33	; 0x21
 8001e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2240      	movs	r2, #64	; 0x40
 8001e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6a3a      	ldr	r2, [r7, #32]
 8001e22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4a4d      	ldr	r2, [pc, #308]	; (8001f6c <HAL_I2C_Mem_Write+0x1f0>)
 8001e38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e3a:	88f8      	ldrh	r0, [r7, #6]
 8001e3c:	893a      	ldrh	r2, [r7, #8]
 8001e3e:	8979      	ldrh	r1, [r7, #10]
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	9301      	str	r3, [sp, #4]
 8001e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	4603      	mov	r3, r0
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f001 fd14 	bl	8003878 <I2C_RequestMemoryWrite>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d052      	beq.n	8001efc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e081      	b.n	8001f5e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f001 ffd9 	bl	8003e16 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00d      	beq.n	8001e86 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	d107      	bne.n	8001e82 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e06b      	b.n	8001f5e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8a:	781a      	ldrb	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	695b      	ldr	r3, [r3, #20]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b04      	cmp	r3, #4
 8001ec2:	d11b      	bne.n	8001efc <HAL_I2C_Mem_Write+0x180>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d017      	beq.n	8001efc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	781a      	ldrb	r2, [r3, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001edc:	1c5a      	adds	r2, r3, #1
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1aa      	bne.n	8001e5a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f001 ffc5 	bl	8003e98 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00d      	beq.n	8001f30 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d107      	bne.n	8001f2c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f2a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e016      	b.n	8001f5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2220      	movs	r2, #32
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	e000      	b.n	8001f5e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001f5c:	2302      	movs	r3, #2
  }
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	00100002 	.word	0x00100002
 8001f6c:	ffff0000 	.word	0xffff0000

08001f70 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08c      	sub	sp, #48	; 0x30
 8001f74:	af02      	add	r7, sp, #8
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	4608      	mov	r0, r1
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4603      	mov	r3, r0
 8001f80:	817b      	strh	r3, [r7, #10]
 8001f82:	460b      	mov	r3, r1
 8001f84:	813b      	strh	r3, [r7, #8]
 8001f86:	4613      	mov	r3, r2
 8001f88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f8a:	f7fe ffe5 	bl	8000f58 <HAL_GetTick>
 8001f8e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b20      	cmp	r3, #32
 8001f9a:	f040 8208 	bne.w	80023ae <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	2319      	movs	r3, #25
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	497b      	ldr	r1, [pc, #492]	; (8002194 <HAL_I2C_Mem_Read+0x224>)
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f001 fe5e 	bl	8003c6a <I2C_WaitOnFlagUntilTimeout>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	e1fb      	b.n	80023b0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d101      	bne.n	8001fc6 <HAL_I2C_Mem_Read+0x56>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e1f4      	b.n	80023b0 <HAL_I2C_Mem_Read+0x440>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d007      	beq.n	8001fec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f042 0201 	orr.w	r2, r2, #1
 8001fea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ffa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2222      	movs	r2, #34	; 0x22
 8002000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2240      	movs	r2, #64	; 0x40
 8002008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002016:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800201c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002022:	b29a      	uxth	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4a5b      	ldr	r2, [pc, #364]	; (8002198 <HAL_I2C_Mem_Read+0x228>)
 800202c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800202e:	88f8      	ldrh	r0, [r7, #6]
 8002030:	893a      	ldrh	r2, [r7, #8]
 8002032:	8979      	ldrh	r1, [r7, #10]
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	9301      	str	r3, [sp, #4]
 8002038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	4603      	mov	r3, r0
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f001 fcae 	bl	80039a0 <I2C_RequestMemoryRead>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e1b0      	b.n	80023b0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002052:	2b00      	cmp	r3, #0
 8002054:	d113      	bne.n	800207e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002056:	2300      	movs	r3, #0
 8002058:	623b      	str	r3, [r7, #32]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	623b      	str	r3, [r7, #32]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	623b      	str	r3, [r7, #32]
 800206a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	e184      	b.n	8002388 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002082:	2b01      	cmp	r3, #1
 8002084:	d11b      	bne.n	80020be <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002094:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002096:	2300      	movs	r3, #0
 8002098:	61fb      	str	r3, [r7, #28]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	695b      	ldr	r3, [r3, #20]
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	61fb      	str	r3, [r7, #28]
 80020aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	e164      	b.n	8002388 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d11b      	bne.n	80020fe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020d4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020e6:	2300      	movs	r3, #0
 80020e8:	61bb      	str	r3, [r7, #24]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	61bb      	str	r3, [r7, #24]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	61bb      	str	r3, [r7, #24]
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	e144      	b.n	8002388 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	617b      	str	r3, [r7, #20]
 8002112:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002114:	e138      	b.n	8002388 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800211a:	2b03      	cmp	r3, #3
 800211c:	f200 80f1 	bhi.w	8002302 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002124:	2b01      	cmp	r3, #1
 8002126:	d123      	bne.n	8002170 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800212a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f001 fef4 	bl	8003f1a <I2C_WaitOnRXNEFlagUntilTimeout>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e139      	b.n	80023b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691a      	ldr	r2, [r3, #16]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002158:	3b01      	subs	r3, #1
 800215a:	b29a      	uxth	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002164:	b29b      	uxth	r3, r3
 8002166:	3b01      	subs	r3, #1
 8002168:	b29a      	uxth	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800216e:	e10b      	b.n	8002388 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002174:	2b02      	cmp	r3, #2
 8002176:	d14e      	bne.n	8002216 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800217e:	2200      	movs	r2, #0
 8002180:	4906      	ldr	r1, [pc, #24]	; (800219c <HAL_I2C_Mem_Read+0x22c>)
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f001 fd71 	bl	8003c6a <I2C_WaitOnFlagUntilTimeout>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d008      	beq.n	80021a0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e10e      	b.n	80023b0 <HAL_I2C_Mem_Read+0x440>
 8002192:	bf00      	nop
 8002194:	00100002 	.word	0x00100002
 8002198:	ffff0000 	.word	0xffff0000
 800219c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	691a      	ldr	r2, [r3, #16]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021cc:	3b01      	subs	r3, #1
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d8:	b29b      	uxth	r3, r3
 80021da:	3b01      	subs	r3, #1
 80021dc:	b29a      	uxth	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	691a      	ldr	r2, [r3, #16]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	1c5a      	adds	r2, r3, #1
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021fe:	3b01      	subs	r3, #1
 8002200:	b29a      	uxth	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220a:	b29b      	uxth	r3, r3
 800220c:	3b01      	subs	r3, #1
 800220e:	b29a      	uxth	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002214:	e0b8      	b.n	8002388 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800221c:	2200      	movs	r2, #0
 800221e:	4966      	ldr	r1, [pc, #408]	; (80023b8 <HAL_I2C_Mem_Read+0x448>)
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f001 fd22 	bl	8003c6a <I2C_WaitOnFlagUntilTimeout>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0bf      	b.n	80023b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800223e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	691a      	ldr	r2, [r3, #16]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225c:	3b01      	subs	r3, #1
 800225e:	b29a      	uxth	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002268:	b29b      	uxth	r3, r3
 800226a:	3b01      	subs	r3, #1
 800226c:	b29a      	uxth	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002278:	2200      	movs	r2, #0
 800227a:	494f      	ldr	r1, [pc, #316]	; (80023b8 <HAL_I2C_Mem_Read+0x448>)
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f001 fcf4 	bl	8003c6a <I2C_WaitOnFlagUntilTimeout>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e091      	b.n	80023b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800229a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	691a      	ldr	r2, [r3, #16]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ae:	1c5a      	adds	r2, r3, #1
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b8:	3b01      	subs	r3, #1
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	3b01      	subs	r3, #1
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	691a      	ldr	r2, [r3, #16]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e0:	1c5a      	adds	r2, r3, #1
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ea:	3b01      	subs	r3, #1
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	3b01      	subs	r3, #1
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002300:	e042      	b.n	8002388 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002304:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f001 fe07 	bl	8003f1a <I2C_WaitOnRXNEFlagUntilTimeout>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e04c      	b.n	80023b0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	691a      	ldr	r2, [r3, #16]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002332:	3b01      	subs	r3, #1
 8002334:	b29a      	uxth	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233e:	b29b      	uxth	r3, r3
 8002340:	3b01      	subs	r3, #1
 8002342:	b29a      	uxth	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	2b04      	cmp	r3, #4
 8002354:	d118      	bne.n	8002388 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	691a      	ldr	r2, [r3, #16]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	1c5a      	adds	r2, r3, #1
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002372:	3b01      	subs	r3, #1
 8002374:	b29a      	uxth	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237e:	b29b      	uxth	r3, r3
 8002380:	3b01      	subs	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238c:	2b00      	cmp	r3, #0
 800238e:	f47f aec2 	bne.w	8002116 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2220      	movs	r2, #32
 8002396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023aa:	2300      	movs	r3, #0
 80023ac:	e000      	b.n	80023b0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80023ae:	2302      	movs	r3, #2
  }
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3728      	adds	r7, #40	; 0x28
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	00010004 	.word	0x00010004

080023bc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b088      	sub	sp, #32
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023dc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
 80023e8:	2b10      	cmp	r3, #16
 80023ea:	d003      	beq.n	80023f4 <HAL_I2C_EV_IRQHandler+0x38>
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
 80023ee:	2b40      	cmp	r3, #64	; 0x40
 80023f0:	f040 80b6 	bne.w	8002560 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10d      	bne.n	800242a <HAL_I2C_EV_IRQHandler+0x6e>
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002414:	d003      	beq.n	800241e <HAL_I2C_EV_IRQHandler+0x62>
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800241c:	d101      	bne.n	8002422 <HAL_I2C_EV_IRQHandler+0x66>
 800241e:	2301      	movs	r3, #1
 8002420:	e000      	b.n	8002424 <HAL_I2C_EV_IRQHandler+0x68>
 8002422:	2300      	movs	r3, #0
 8002424:	2b01      	cmp	r3, #1
 8002426:	f000 8127 	beq.w	8002678 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00c      	beq.n	800244e <HAL_I2C_EV_IRQHandler+0x92>
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	0a5b      	lsrs	r3, r3, #9
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b00      	cmp	r3, #0
 800243e:	d006      	beq.n	800244e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f001 fdef 	bl	8004024 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 fc75 	bl	8002d36 <I2C_Master_SB>
 800244c:	e087      	b.n	800255e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	08db      	lsrs	r3, r3, #3
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d009      	beq.n	800246e <HAL_I2C_EV_IRQHandler+0xb2>
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	0a5b      	lsrs	r3, r3, #9
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 fceb 	bl	8002e42 <I2C_Master_ADD10>
 800246c:	e077      	b.n	800255e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	085b      	lsrs	r3, r3, #1
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d009      	beq.n	800248e <HAL_I2C_EV_IRQHandler+0xd2>
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	0a5b      	lsrs	r3, r3, #9
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 fd05 	bl	8002e96 <I2C_Master_ADDR>
 800248c:	e067      	b.n	800255e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	089b      	lsrs	r3, r3, #2
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d030      	beq.n	80024fc <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024a8:	f000 80e8 	beq.w	800267c <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	09db      	lsrs	r3, r3, #7
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00f      	beq.n	80024d8 <HAL_I2C_EV_IRQHandler+0x11c>
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	0a9b      	lsrs	r3, r3, #10
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d009      	beq.n	80024d8 <HAL_I2C_EV_IRQHandler+0x11c>
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	089b      	lsrs	r3, r3, #2
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d103      	bne.n	80024d8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 f941 	bl	8002758 <I2C_MasterTransmit_TXE>
 80024d6:	e042      	b.n	800255e <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	089b      	lsrs	r3, r3, #2
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 80cb 	beq.w	800267c <HAL_I2C_EV_IRQHandler+0x2c0>
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	0a5b      	lsrs	r3, r3, #9
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 80c4 	beq.w	800267c <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 f9cb 	bl	8002890 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024fa:	e0bf      	b.n	800267c <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002506:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800250a:	f000 80b7 	beq.w	800267c <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	099b      	lsrs	r3, r3, #6
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00f      	beq.n	800253a <HAL_I2C_EV_IRQHandler+0x17e>
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	0a9b      	lsrs	r3, r3, #10
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d009      	beq.n	800253a <HAL_I2C_EV_IRQHandler+0x17e>
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	089b      	lsrs	r3, r3, #2
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d103      	bne.n	800253a <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 fa93 	bl	8002a5e <I2C_MasterReceive_RXNE>
 8002538:	e011      	b.n	800255e <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	089b      	lsrs	r3, r3, #2
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 809a 	beq.w	800267c <HAL_I2C_EV_IRQHandler+0x2c0>
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	0a5b      	lsrs	r3, r3, #9
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 8093 	beq.w	800267c <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 fb03 	bl	8002b62 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800255c:	e08e      	b.n	800267c <HAL_I2C_EV_IRQHandler+0x2c0>
 800255e:	e08d      	b.n	800267c <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002564:	2b00      	cmp	r3, #0
 8002566:	d004      	beq.n	8002572 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	61fb      	str	r3, [r7, #28]
 8002570:	e007      	b.n	8002582 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	085b      	lsrs	r3, r3, #1
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d012      	beq.n	80025b4 <HAL_I2C_EV_IRQHandler+0x1f8>
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	0a5b      	lsrs	r3, r3, #9
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00c      	beq.n	80025b4 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80025aa:	69b9      	ldr	r1, [r7, #24]
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 fec1 	bl	8003334 <I2C_Slave_ADDR>
 80025b2:	e066      	b.n	8002682 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	091b      	lsrs	r3, r3, #4
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d009      	beq.n	80025d4 <HAL_I2C_EV_IRQHandler+0x218>
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	0a5b      	lsrs	r3, r3, #9
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 fef5 	bl	80033bc <I2C_Slave_STOPF>
 80025d2:	e056      	b.n	8002682 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80025d4:	7bbb      	ldrb	r3, [r7, #14]
 80025d6:	2b21      	cmp	r3, #33	; 0x21
 80025d8:	d002      	beq.n	80025e0 <HAL_I2C_EV_IRQHandler+0x224>
 80025da:	7bbb      	ldrb	r3, [r7, #14]
 80025dc:	2b29      	cmp	r3, #41	; 0x29
 80025de:	d125      	bne.n	800262c <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	09db      	lsrs	r3, r3, #7
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00f      	beq.n	800260c <HAL_I2C_EV_IRQHandler+0x250>
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	0a9b      	lsrs	r3, r3, #10
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d009      	beq.n	800260c <HAL_I2C_EV_IRQHandler+0x250>
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	089b      	lsrs	r3, r3, #2
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b00      	cmp	r3, #0
 8002602:	d103      	bne.n	800260c <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 fdd7 	bl	80031b8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800260a:	e039      	b.n	8002680 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	089b      	lsrs	r3, r3, #2
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b00      	cmp	r3, #0
 8002616:	d033      	beq.n	8002680 <HAL_I2C_EV_IRQHandler+0x2c4>
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	0a5b      	lsrs	r3, r3, #9
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	d02d      	beq.n	8002680 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 fe04 	bl	8003232 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800262a:	e029      	b.n	8002680 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	099b      	lsrs	r3, r3, #6
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00f      	beq.n	8002658 <HAL_I2C_EV_IRQHandler+0x29c>
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	0a9b      	lsrs	r3, r3, #10
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b00      	cmp	r3, #0
 8002642:	d009      	beq.n	8002658 <HAL_I2C_EV_IRQHandler+0x29c>
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	089b      	lsrs	r3, r3, #2
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b00      	cmp	r3, #0
 800264e:	d103      	bne.n	8002658 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 fe0f 	bl	8003274 <I2C_SlaveReceive_RXNE>
 8002656:	e014      	b.n	8002682 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	089b      	lsrs	r3, r3, #2
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00e      	beq.n	8002682 <HAL_I2C_EV_IRQHandler+0x2c6>
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	0a5b      	lsrs	r3, r3, #9
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b00      	cmp	r3, #0
 800266e:	d008      	beq.n	8002682 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 fe3d 	bl	80032f0 <I2C_SlaveReceive_BTF>
 8002676:	e004      	b.n	8002682 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8002678:	bf00      	nop
 800267a:	e002      	b.n	8002682 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800267c:	bf00      	nop
 800267e:	e000      	b.n	8002682 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002680:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002682:	3720      	adds	r7, #32
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	460b      	mov	r3, r1
 80026e2:	70fb      	strb	r3, [r7, #3]
 80026e4:	4613      	mov	r3, r2
 80026e6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002766:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800276e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002774:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277a:	2b00      	cmp	r3, #0
 800277c:	d150      	bne.n	8002820 <I2C_MasterTransmit_TXE+0xc8>
 800277e:	7bfb      	ldrb	r3, [r7, #15]
 8002780:	2b21      	cmp	r3, #33	; 0x21
 8002782:	d14d      	bne.n	8002820 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	2b08      	cmp	r3, #8
 8002788:	d01d      	beq.n	80027c6 <I2C_MasterTransmit_TXE+0x6e>
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2b20      	cmp	r3, #32
 800278e:	d01a      	beq.n	80027c6 <I2C_MasterTransmit_TXE+0x6e>
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002796:	d016      	beq.n	80027c6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80027a6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2211      	movs	r2, #17
 80027ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2220      	movs	r2, #32
 80027ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7ff ff62 	bl	8002688 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80027c4:	e060      	b.n	8002888 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80027d4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2220      	movs	r2, #32
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b40      	cmp	r3, #64	; 0x40
 80027fe:	d107      	bne.n	8002810 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7ff ff7d 	bl	8002708 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800280e:	e03b      	b.n	8002888 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7ff ff35 	bl	8002688 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800281e:	e033      	b.n	8002888 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	2b21      	cmp	r3, #33	; 0x21
 8002824:	d005      	beq.n	8002832 <I2C_MasterTransmit_TXE+0xda>
 8002826:	7bbb      	ldrb	r3, [r7, #14]
 8002828:	2b40      	cmp	r3, #64	; 0x40
 800282a:	d12d      	bne.n	8002888 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800282c:	7bfb      	ldrb	r3, [r7, #15]
 800282e:	2b22      	cmp	r3, #34	; 0x22
 8002830:	d12a      	bne.n	8002888 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002836:	b29b      	uxth	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	d108      	bne.n	800284e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800284a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800284c:	e01c      	b.n	8002888 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b40      	cmp	r3, #64	; 0x40
 8002858:	d103      	bne.n	8002862 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f898 	bl	8002990 <I2C_MemoryTransmit_TXE_BTF>
}
 8002860:	e012      	b.n	8002888 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	781a      	ldrb	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	1c5a      	adds	r2, r3, #1
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287c:	b29b      	uxth	r3, r3
 800287e:	3b01      	subs	r3, #1
 8002880:	b29a      	uxth	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002886:	e7ff      	b.n	8002888 <I2C_MasterTransmit_TXE+0x130>
 8002888:	bf00      	nop
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b21      	cmp	r3, #33	; 0x21
 80028a8:	d165      	bne.n	8002976 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d012      	beq.n	80028da <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	781a      	ldrb	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	1c5a      	adds	r2, r3, #1
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80028d8:	e056      	b.n	8002988 <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d01d      	beq.n	800291c <I2C_MasterTransmit_BTF+0x8c>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2b20      	cmp	r3, #32
 80028e4:	d01a      	beq.n	800291c <I2C_MasterTransmit_BTF+0x8c>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028ec:	d016      	beq.n	800291c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028fc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2211      	movs	r2, #17
 8002902:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2220      	movs	r2, #32
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7ff feb7 	bl	8002688 <HAL_I2C_MasterTxCpltCallback>
}
 800291a:	e035      	b.n	8002988 <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800292a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800293a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2220      	movs	r2, #32
 8002946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b40      	cmp	r3, #64	; 0x40
 8002954:	d107      	bne.n	8002966 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7ff fed2 	bl	8002708 <HAL_I2C_MemTxCpltCallback>
}
 8002964:	e010      	b.n	8002988 <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7ff fe8a 	bl	8002688 <HAL_I2C_MasterTxCpltCallback>
}
 8002974:	e008      	b.n	8002988 <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b40      	cmp	r3, #64	; 0x40
 8002980:	d102      	bne.n	8002988 <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f804 	bl	8002990 <I2C_MemoryTransmit_TXE_BTF>
}
 8002988:	bf00      	nop
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800299c:	2b00      	cmp	r3, #0
 800299e:	d11d      	bne.n	80029dc <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d10b      	bne.n	80029c0 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b8:	1c9a      	adds	r2, r3, #2
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80029be:	e048      	b.n	8002a52 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	121b      	asrs	r3, r3, #8
 80029c8:	b2da      	uxtb	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d4:	1c5a      	adds	r2, r3, #1
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80029da:	e03a      	b.n	8002a52 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d10b      	bne.n	80029fc <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029f4:	1c5a      	adds	r2, r3, #1
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80029fa:	e02a      	b.n	8002a52 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d126      	bne.n	8002a52 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b22      	cmp	r3, #34	; 0x22
 8002a0e:	d108      	bne.n	8002a22 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a1e:	601a      	str	r2, [r3, #0]
}
 8002a20:	e017      	b.n	8002a52 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b21      	cmp	r3, #33	; 0x21
 8002a2c:	d111      	bne.n	8002a52 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a32:	781a      	ldrb	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b084      	sub	sp, #16
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b22      	cmp	r3, #34	; 0x22
 8002a70:	d173      	bne.n	8002b5a <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2b03      	cmp	r3, #3
 8002a7e:	d920      	bls.n	8002ac2 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	691a      	ldr	r2, [r3, #16]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	1c5a      	adds	r2, r3, #1
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	2b03      	cmp	r3, #3
 8002aae:	d154      	bne.n	8002b5a <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002abe:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002ac0:	e04b      	b.n	8002b5a <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d047      	beq.n	8002b5a <I2C_MasterReceive_RXNE+0xfc>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d002      	beq.n	8002ad6 <I2C_MasterReceive_RXNE+0x78>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d141      	bne.n	8002b5a <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ae4:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002af4:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	691a      	ldr	r2, [r3, #16]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	1c5a      	adds	r2, r3, #1
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b40      	cmp	r3, #64	; 0x40
 8002b2e:	d10a      	bne.n	8002b46 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7ff fdec 	bl	800271c <HAL_I2C_MemRxCpltCallback>
}
 8002b44:	e009      	b.n	8002b5a <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2212      	movs	r2, #18
 8002b52:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7ff fda1 	bl	800269c <HAL_I2C_MasterRxCpltCallback>
}
 8002b5a:	bf00      	nop
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b084      	sub	sp, #16
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d11b      	bne.n	8002bb2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b88:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	691a      	ldr	r2, [r3, #16]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9c:	1c5a      	adds	r2, r3, #1
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002bb0:	e0bd      	b.n	8002d2e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	2b03      	cmp	r3, #3
 8002bba:	d129      	bne.n	8002c10 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bca:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d00a      	beq.n	8002be8 <I2C_MasterReceive_BTF+0x86>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d007      	beq.n	8002be8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002be6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	691a      	ldr	r2, [r3, #16]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	1c5a      	adds	r2, r3, #1
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	3b01      	subs	r3, #1
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002c0e:	e08e      	b.n	8002d2e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d176      	bne.n	8002d08 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d002      	beq.n	8002c26 <I2C_MasterReceive_BTF+0xc4>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2b10      	cmp	r3, #16
 8002c24:	d108      	bne.n	8002c38 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	e019      	b.n	8002c6c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d002      	beq.n	8002c44 <I2C_MasterReceive_BTF+0xe2>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d108      	bne.n	8002c56 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	e00a      	b.n	8002c6c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2b10      	cmp	r3, #16
 8002c5a:	d007      	beq.n	8002c6c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c6a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	691a      	ldr	r2, [r3, #16]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	1c5a      	adds	r2, r3, #1
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	691a      	ldr	r2, [r3, #16]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002cc6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b40      	cmp	r3, #64	; 0x40
 8002cda:	d10a      	bne.n	8002cf2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7ff fd16 	bl	800271c <HAL_I2C_MemRxCpltCallback>
}
 8002cf0:	e01d      	b.n	8002d2e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2212      	movs	r2, #18
 8002cfe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7ff fccb 	bl	800269c <HAL_I2C_MasterRxCpltCallback>
}
 8002d06:	e012      	b.n	8002d2e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	691a      	ldr	r2, [r3, #16]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	3b01      	subs	r3, #1
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002d2e:	bf00      	nop
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b40      	cmp	r3, #64	; 0x40
 8002d48:	d117      	bne.n	8002d7a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d109      	bne.n	8002d66 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	461a      	mov	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d62:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002d64:	e067      	b.n	8002e36 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	611a      	str	r2, [r3, #16]
}
 8002d78:	e05d      	b.n	8002e36 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d82:	d133      	bne.n	8002dec <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b21      	cmp	r3, #33	; 0x21
 8002d8e:	d109      	bne.n	8002da4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	461a      	mov	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002da0:	611a      	str	r2, [r3, #16]
 8002da2:	e008      	b.n	8002db6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d004      	beq.n	8002dc8 <I2C_Master_SB+0x92>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d108      	bne.n	8002dda <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d032      	beq.n	8002e36 <I2C_Master_SB+0x100>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d02d      	beq.n	8002e36 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002de8:	605a      	str	r2, [r3, #4]
}
 8002dea:	e024      	b.n	8002e36 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10e      	bne.n	8002e12 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	11db      	asrs	r3, r3, #7
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	f003 0306 	and.w	r3, r3, #6
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	f063 030f 	orn	r3, r3, #15
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	611a      	str	r2, [r3, #16]
}
 8002e10:	e011      	b.n	8002e36 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d10d      	bne.n	8002e36 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	11db      	asrs	r3, r3, #7
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	f003 0306 	and.w	r3, r3, #6
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	f063 030e 	orn	r3, r3, #14
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	611a      	str	r2, [r3, #16]
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d103      	bne.n	8002e66 <I2C_Master_ADD10+0x24>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d011      	beq.n	8002e8a <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d104      	bne.n	8002e7a <I2C_Master_ADD10+0x38>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d007      	beq.n	8002e8a <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e88:	605a      	str	r2, [r3, #4]
    }
  }
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b091      	sub	sp, #68	; 0x44
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ea4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eac:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b22      	cmp	r3, #34	; 0x22
 8002ebe:	f040 8169 	bne.w	8003194 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10f      	bne.n	8002eea <I2C_Master_ADDR+0x54>
 8002eca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002ece:	2b40      	cmp	r3, #64	; 0x40
 8002ed0:	d10b      	bne.n	8002eea <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	633b      	str	r3, [r7, #48]	; 0x30
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	633b      	str	r3, [r7, #48]	; 0x30
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	633b      	str	r3, [r7, #48]	; 0x30
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee8:	e160      	b.n	80031ac <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d11d      	bne.n	8002f2e <I2C_Master_ADDR+0x98>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002efa:	d118      	bne.n	8002f2e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002efc:	2300      	movs	r3, #0
 8002efe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f20:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f26:	1c5a      	adds	r2, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	651a      	str	r2, [r3, #80]	; 0x50
 8002f2c:	e13e      	b.n	80031ac <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d113      	bne.n	8002f60 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f38:	2300      	movs	r3, #0
 8002f3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	e115      	b.n	800318c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	f040 808a 	bne.w	8003080 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f72:	d137      	bne.n	8002fe4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f82:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f92:	d113      	bne.n	8002fbc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fa2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	e0e7      	b.n	800318c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	623b      	str	r3, [r7, #32]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	623b      	str	r3, [r7, #32]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	623b      	str	r3, [r7, #32]
 8002fd0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	e0d3      	b.n	800318c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe6:	2b08      	cmp	r3, #8
 8002fe8:	d02e      	beq.n	8003048 <I2C_Master_ADDR+0x1b2>
 8002fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fec:	2b20      	cmp	r3, #32
 8002fee:	d02b      	beq.n	8003048 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ff2:	2b12      	cmp	r3, #18
 8002ff4:	d102      	bne.n	8002ffc <I2C_Master_ADDR+0x166>
 8002ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d125      	bne.n	8003048 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d00e      	beq.n	8003020 <I2C_Master_ADDR+0x18a>
 8003002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003004:	2b02      	cmp	r3, #2
 8003006:	d00b      	beq.n	8003020 <I2C_Master_ADDR+0x18a>
 8003008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800300a:	2b10      	cmp	r3, #16
 800300c:	d008      	beq.n	8003020 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	e007      	b.n	8003030 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800302e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003030:	2300      	movs	r3, #0
 8003032:	61fb      	str	r3, [r7, #28]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	61fb      	str	r3, [r7, #28]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	61fb      	str	r3, [r7, #28]
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	e0a1      	b.n	800318c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003056:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003058:	2300      	movs	r3, #0
 800305a:	61bb      	str	r3, [r7, #24]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	61bb      	str	r3, [r7, #24]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	61bb      	str	r3, [r7, #24]
 800306c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	e085      	b.n	800318c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003084:	b29b      	uxth	r3, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d14d      	bne.n	8003126 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800308a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800308c:	2b04      	cmp	r3, #4
 800308e:	d016      	beq.n	80030be <I2C_Master_ADDR+0x228>
 8003090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003092:	2b02      	cmp	r3, #2
 8003094:	d013      	beq.n	80030be <I2C_Master_ADDR+0x228>
 8003096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003098:	2b10      	cmp	r3, #16
 800309a:	d010      	beq.n	80030be <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030aa:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	e007      	b.n	80030ce <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030cc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030dc:	d117      	bne.n	800310e <I2C_Master_ADDR+0x278>
 80030de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030e4:	d00b      	beq.n	80030fe <I2C_Master_ADDR+0x268>
 80030e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d008      	beq.n	80030fe <I2C_Master_ADDR+0x268>
 80030ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ee:	2b08      	cmp	r3, #8
 80030f0:	d005      	beq.n	80030fe <I2C_Master_ADDR+0x268>
 80030f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f4:	2b10      	cmp	r3, #16
 80030f6:	d002      	beq.n	80030fe <I2C_Master_ADDR+0x268>
 80030f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030fa:	2b20      	cmp	r3, #32
 80030fc:	d107      	bne.n	800310e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800310c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800310e:	2300      	movs	r3, #0
 8003110:	617b      	str	r3, [r7, #20]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	e032      	b.n	800318c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003134:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003140:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003144:	d117      	bne.n	8003176 <I2C_Master_ADDR+0x2e0>
 8003146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003148:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800314c:	d00b      	beq.n	8003166 <I2C_Master_ADDR+0x2d0>
 800314e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003150:	2b01      	cmp	r3, #1
 8003152:	d008      	beq.n	8003166 <I2C_Master_ADDR+0x2d0>
 8003154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003156:	2b08      	cmp	r3, #8
 8003158:	d005      	beq.n	8003166 <I2C_Master_ADDR+0x2d0>
 800315a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800315c:	2b10      	cmp	r3, #16
 800315e:	d002      	beq.n	8003166 <I2C_Master_ADDR+0x2d0>
 8003160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003162:	2b20      	cmp	r3, #32
 8003164:	d107      	bne.n	8003176 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003174:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003176:	2300      	movs	r3, #0
 8003178:	613b      	str	r3, [r7, #16]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	613b      	str	r3, [r7, #16]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003192:	e00b      	b.n	80031ac <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003194:	2300      	movs	r3, #0
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]
}
 80031aa:	e7ff      	b.n	80031ac <I2C_Master_ADDR+0x316>
 80031ac:	bf00      	nop
 80031ae:	3744      	adds	r7, #68	; 0x44
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d02b      	beq.n	800322a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	781a      	ldrb	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	1c5a      	adds	r2, r3, #1
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	3b01      	subs	r3, #1
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d114      	bne.n	800322a <I2C_SlaveTransmit_TXE+0x72>
 8003200:	7bfb      	ldrb	r3, [r7, #15]
 8003202:	2b29      	cmp	r3, #41	; 0x29
 8003204:	d111      	bne.n	800322a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003214:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2221      	movs	r2, #33	; 0x21
 800321a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2228      	movs	r2, #40	; 0x28
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7ff fa43 	bl	80026b0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800322a:	bf00      	nop
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003232:	b480      	push	{r7}
 8003234:	b083      	sub	sp, #12
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323e:	b29b      	uxth	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	d011      	beq.n	8003268 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	781a      	ldrb	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325e:	b29b      	uxth	r3, r3
 8003260:	3b01      	subs	r3, #1
 8003262:	b29a      	uxth	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003282:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003288:	b29b      	uxth	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d02c      	beq.n	80032e8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	691a      	ldr	r2, [r3, #16]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	b2d2      	uxtb	r2, r2
 800329a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	1c5a      	adds	r2, r3, #1
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d114      	bne.n	80032e8 <I2C_SlaveReceive_RXNE+0x74>
 80032be:	7bfb      	ldrb	r3, [r7, #15]
 80032c0:	2b2a      	cmp	r3, #42	; 0x2a
 80032c2:	d111      	bne.n	80032e8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032d2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2222      	movs	r2, #34	; 0x22
 80032d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2228      	movs	r2, #40	; 0x28
 80032de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7ff f9ee 	bl	80026c4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80032e8:	bf00      	nop
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d012      	beq.n	8003328 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331e:	b29b      	uxth	r3, r3
 8003320:	3b01      	subs	r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800333e:	2300      	movs	r3, #0
 8003340:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003348:	b2db      	uxtb	r3, r3
 800334a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800334e:	2b28      	cmp	r3, #40	; 0x28
 8003350:	d127      	bne.n	80033a2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003360:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	089b      	lsrs	r3, r3, #2
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800336e:	2301      	movs	r3, #1
 8003370:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	09db      	lsrs	r3, r3, #7
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d103      	bne.n	8003386 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	81bb      	strh	r3, [r7, #12]
 8003384:	e002      	b.n	800338c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003394:	89ba      	ldrh	r2, [r7, #12]
 8003396:	7bfb      	ldrb	r3, [r7, #15]
 8003398:	4619      	mov	r1, r3
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7ff f99c 	bl	80026d8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80033a0:	e008      	b.n	80033b4 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f06f 0202 	mvn.w	r2, #2
 80033aa:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80033b4:	bf00      	nop
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ca:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033da:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80033dc:	2300      	movs	r3, #0
 80033de:	60bb      	str	r3, [r7, #8]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	60bb      	str	r3, [r7, #8]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0201 	orr.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003408:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003414:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003418:	d172      	bne.n	8003500 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800341a:	7bfb      	ldrb	r3, [r7, #15]
 800341c:	2b22      	cmp	r3, #34	; 0x22
 800341e:	d002      	beq.n	8003426 <I2C_Slave_STOPF+0x6a>
 8003420:	7bfb      	ldrb	r3, [r7, #15]
 8003422:	2b2a      	cmp	r3, #42	; 0x2a
 8003424:	d135      	bne.n	8003492 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	b29a      	uxth	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003438:	b29b      	uxth	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d005      	beq.n	800344a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	f043 0204 	orr.w	r2, r3, #4
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003458:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345e:	4618      	mov	r0, r3
 8003460:	f7fe f914 	bl	800168c <HAL_DMA_GetState>
 8003464:	4603      	mov	r3, r0
 8003466:	2b01      	cmp	r3, #1
 8003468:	d049      	beq.n	80034fe <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346e:	4a69      	ldr	r2, [pc, #420]	; (8003614 <I2C_Slave_STOPF+0x258>)
 8003470:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003476:	4618      	mov	r0, r3
 8003478:	f7fd ff5c 	bl	8001334 <HAL_DMA_Abort_IT>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d03d      	beq.n	80034fe <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800348c:	4610      	mov	r0, r2
 800348e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003490:	e035      	b.n	80034fe <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	b29a      	uxth	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d005      	beq.n	80034b6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	f043 0204 	orr.w	r2, r3, #4
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034c4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fe f8de 	bl	800168c <HAL_DMA_GetState>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d014      	beq.n	8003500 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034da:	4a4e      	ldr	r2, [pc, #312]	; (8003614 <I2C_Slave_STOPF+0x258>)
 80034dc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fd ff26 	bl	8001334 <HAL_DMA_Abort_IT>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d008      	beq.n	8003500 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034f8:	4610      	mov	r0, r2
 80034fa:	4798      	blx	r3
 80034fc:	e000      	b.n	8003500 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034fe:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003504:	b29b      	uxth	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d03e      	beq.n	8003588 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b04      	cmp	r3, #4
 8003516:	d112      	bne.n	800353e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691a      	ldr	r2, [r3, #16]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	1c5a      	adds	r2, r3, #1
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003534:	b29b      	uxth	r3, r3
 8003536:	3b01      	subs	r3, #1
 8003538:	b29a      	uxth	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003548:	2b40      	cmp	r3, #64	; 0x40
 800354a:	d112      	bne.n	8003572 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	691a      	ldr	r2, [r3, #16]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	1c5a      	adds	r2, r3, #1
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003568:	b29b      	uxth	r3, r3
 800356a:	3b01      	subs	r3, #1
 800356c:	b29a      	uxth	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003576:	b29b      	uxth	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003580:	f043 0204 	orr.w	r2, r3, #4
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f843 	bl	800361c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003596:	e039      	b.n	800360c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003598:	7bfb      	ldrb	r3, [r7, #15]
 800359a:	2b2a      	cmp	r3, #42	; 0x2a
 800359c:	d109      	bne.n	80035b2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2228      	movs	r2, #40	; 0x28
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f7ff f889 	bl	80026c4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b28      	cmp	r3, #40	; 0x28
 80035bc:	d111      	bne.n	80035e2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a15      	ldr	r2, [pc, #84]	; (8003618 <I2C_Slave_STOPF+0x25c>)
 80035c2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2220      	movs	r2, #32
 80035ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7ff f88a 	bl	80026f4 <HAL_I2C_ListenCpltCallback>
}
 80035e0:	e014      	b.n	800360c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	2b22      	cmp	r3, #34	; 0x22
 80035e8:	d002      	beq.n	80035f0 <I2C_Slave_STOPF+0x234>
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	2b22      	cmp	r3, #34	; 0x22
 80035ee:	d10d      	bne.n	800360c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2220      	movs	r2, #32
 80035fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7ff f85c 	bl	80026c4 <HAL_I2C_SlaveRxCpltCallback>
}
 800360c:	bf00      	nop
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	08003b6d 	.word	0x08003b6d
 8003618:	ffff0000 	.word	0xffff0000

0800361c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800362a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b10      	cmp	r3, #16
 8003636:	d10a      	bne.n	800364e <I2C_ITError+0x32>
 8003638:	7bfb      	ldrb	r3, [r7, #15]
 800363a:	2b22      	cmp	r3, #34	; 0x22
 800363c:	d107      	bne.n	800364e <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800364c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800364e:	7bfb      	ldrb	r3, [r7, #15]
 8003650:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003654:	2b28      	cmp	r3, #40	; 0x28
 8003656:	d107      	bne.n	8003668 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2228      	movs	r2, #40	; 0x28
 8003662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003666:	e015      	b.n	8003694 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003672:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003676:	d006      	beq.n	8003686 <I2C_ITError+0x6a>
 8003678:	7bfb      	ldrb	r3, [r7, #15]
 800367a:	2b60      	cmp	r3, #96	; 0x60
 800367c:	d003      	beq.n	8003686 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2220      	movs	r2, #32
 8003682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800369e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036a2:	d162      	bne.n	800376a <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036b2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d020      	beq.n	8003704 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c6:	4a6a      	ldr	r2, [pc, #424]	; (8003870 <I2C_ITError+0x254>)
 80036c8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fd fe30 	bl	8001334 <HAL_DMA_Abort_IT>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 8089 	beq.w	80037ee <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0201 	bic.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2220      	movs	r2, #32
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036fe:	4610      	mov	r0, r2
 8003700:	4798      	blx	r3
 8003702:	e074      	b.n	80037ee <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003708:	4a59      	ldr	r2, [pc, #356]	; (8003870 <I2C_ITError+0x254>)
 800370a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003710:	4618      	mov	r0, r3
 8003712:	f7fd fe0f 	bl	8001334 <HAL_DMA_Abort_IT>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d068      	beq.n	80037ee <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003726:	2b40      	cmp	r3, #64	; 0x40
 8003728:	d10b      	bne.n	8003742 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	691a      	ldr	r2, [r3, #16]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0201 	bic.w	r2, r2, #1
 8003750:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2220      	movs	r2, #32
 8003756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003764:	4610      	mov	r0, r2
 8003766:	4798      	blx	r3
 8003768:	e041      	b.n	80037ee <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b60      	cmp	r3, #96	; 0x60
 8003774:	d125      	bne.n	80037c2 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2220      	movs	r2, #32
 800377a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378e:	2b40      	cmp	r3, #64	; 0x40
 8003790:	d10b      	bne.n	80037aa <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	691a      	ldr	r2, [r3, #16]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0201 	bic.w	r2, r2, #1
 80037b8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7fe ffc2 	bl	8002744 <HAL_I2C_AbortCpltCallback>
 80037c0:	e015      	b.n	80037ee <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037cc:	2b40      	cmp	r3, #64	; 0x40
 80037ce:	d10b      	bne.n	80037e8 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	691a      	ldr	r2, [r3, #16]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	b2d2      	uxtb	r2, r2
 80037dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	1c5a      	adds	r2, r3, #1
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7fe ffa1 	bl	8002730 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10e      	bne.n	800381c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003804:	2b00      	cmp	r3, #0
 8003806:	d109      	bne.n	800381c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800380e:	2b00      	cmp	r3, #0
 8003810:	d104      	bne.n	800381c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003818:	2b00      	cmp	r3, #0
 800381a:	d007      	beq.n	800382c <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800382a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003832:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b04      	cmp	r3, #4
 800383e:	d113      	bne.n	8003868 <I2C_ITError+0x24c>
 8003840:	7bfb      	ldrb	r3, [r7, #15]
 8003842:	2b28      	cmp	r3, #40	; 0x28
 8003844:	d110      	bne.n	8003868 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a0a      	ldr	r2, [pc, #40]	; (8003874 <I2C_ITError+0x258>)
 800384a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7fe ff46 	bl	80026f4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003868:	bf00      	nop
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	08003b6d 	.word	0x08003b6d
 8003874:	ffff0000 	.word	0xffff0000

08003878 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b088      	sub	sp, #32
 800387c:	af02      	add	r7, sp, #8
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	4608      	mov	r0, r1
 8003882:	4611      	mov	r1, r2
 8003884:	461a      	mov	r2, r3
 8003886:	4603      	mov	r3, r0
 8003888:	817b      	strh	r3, [r7, #10]
 800388a:	460b      	mov	r3, r1
 800388c:	813b      	strh	r3, [r7, #8]
 800388e:	4613      	mov	r3, r2
 8003890:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 f9db 	bl	8003c6a <I2C_WaitOnFlagUntilTimeout>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00c      	beq.n	80038d4 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e05f      	b.n	8003994 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038d4:	897b      	ldrh	r3, [r7, #10]
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	461a      	mov	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	6a3a      	ldr	r2, [r7, #32]
 80038e8:	492c      	ldr	r1, [pc, #176]	; (800399c <I2C_RequestMemoryWrite+0x124>)
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 fa14 	bl	8003d18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e04c      	b.n	8003994 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038fa:	2300      	movs	r3, #0
 80038fc:	617b      	str	r3, [r7, #20]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	617b      	str	r3, [r7, #20]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003912:	6a39      	ldr	r1, [r7, #32]
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 fa7e 	bl	8003e16 <I2C_WaitOnTXEFlagUntilTimeout>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00d      	beq.n	800393c <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	2b04      	cmp	r3, #4
 8003926:	d107      	bne.n	8003938 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003936:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e02b      	b.n	8003994 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800393c:	88fb      	ldrh	r3, [r7, #6]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d105      	bne.n	800394e <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003942:	893b      	ldrh	r3, [r7, #8]
 8003944:	b2da      	uxtb	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	611a      	str	r2, [r3, #16]
 800394c:	e021      	b.n	8003992 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800394e:	893b      	ldrh	r3, [r7, #8]
 8003950:	0a1b      	lsrs	r3, r3, #8
 8003952:	b29b      	uxth	r3, r3
 8003954:	b2da      	uxtb	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800395c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800395e:	6a39      	ldr	r1, [r7, #32]
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 fa58 	bl	8003e16 <I2C_WaitOnTXEFlagUntilTimeout>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00d      	beq.n	8003988 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	2b04      	cmp	r3, #4
 8003972:	d107      	bne.n	8003984 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003982:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e005      	b.n	8003994 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003988:	893b      	ldrh	r3, [r7, #8]
 800398a:	b2da      	uxtb	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	00010002 	.word	0x00010002

080039a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b088      	sub	sp, #32
 80039a4:	af02      	add	r7, sp, #8
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	4608      	mov	r0, r1
 80039aa:	4611      	mov	r1, r2
 80039ac:	461a      	mov	r2, r3
 80039ae:	4603      	mov	r3, r0
 80039b0:	817b      	strh	r3, [r7, #10]
 80039b2:	460b      	mov	r3, r1
 80039b4:	813b      	strh	r3, [r7, #8]
 80039b6:	4613      	mov	r3, r2
 80039b8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039c8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 f93f 	bl	8003c6a <I2C_WaitOnFlagUntilTimeout>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00c      	beq.n	8003a0c <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e0a9      	b.n	8003b60 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a0c:	897b      	ldrh	r3, [r7, #10]
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	461a      	mov	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a1a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	6a3a      	ldr	r2, [r7, #32]
 8003a20:	4951      	ldr	r1, [pc, #324]	; (8003b68 <I2C_RequestMemoryRead+0x1c8>)
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 f978 	bl	8003d18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e096      	b.n	8003b60 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a32:	2300      	movs	r3, #0
 8003a34:	617b      	str	r3, [r7, #20]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	617b      	str	r3, [r7, #20]
 8003a46:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a4a:	6a39      	ldr	r1, [r7, #32]
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f000 f9e2 	bl	8003e16 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00d      	beq.n	8003a74 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5c:	2b04      	cmp	r3, #4
 8003a5e:	d107      	bne.n	8003a70 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a6e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e075      	b.n	8003b60 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a74:	88fb      	ldrh	r3, [r7, #6]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d105      	bne.n	8003a86 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a7a:	893b      	ldrh	r3, [r7, #8]
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	611a      	str	r2, [r3, #16]
 8003a84:	e021      	b.n	8003aca <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a86:	893b      	ldrh	r3, [r7, #8]
 8003a88:	0a1b      	lsrs	r3, r3, #8
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a96:	6a39      	ldr	r1, [r7, #32]
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 f9bc 	bl	8003e16 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00d      	beq.n	8003ac0 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d107      	bne.n	8003abc <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e04f      	b.n	8003b60 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ac0:	893b      	ldrh	r3, [r7, #8]
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003acc:	6a39      	ldr	r1, [r7, #32]
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f000 f9a1 	bl	8003e16 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00d      	beq.n	8003af6 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d107      	bne.n	8003af2 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e034      	b.n	8003b60 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 f8a9 	bl	8003c6a <I2C_WaitOnFlagUntilTimeout>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00c      	beq.n	8003b38 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e013      	b.n	8003b60 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b38:	897b      	ldrh	r3, [r7, #10]
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	f043 0301 	orr.w	r3, r3, #1
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	6a3a      	ldr	r2, [r7, #32]
 8003b4c:	4906      	ldr	r1, [pc, #24]	; (8003b68 <I2C_RequestMemoryRead+0x1c8>)
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 f8e2 	bl	8003d18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e000      	b.n	8003b60 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	00010002 	.word	0x00010002

08003b6c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b78:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b80:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8e:	2200      	movs	r2, #0
 8003b90:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bb0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0201 	bic.w	r2, r2, #1
 8003be6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b60      	cmp	r3, #96	; 0x60
 8003bf2:	d10e      	bne.n	8003c12 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f7fe fd9a 	bl	8002744 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003c10:	e027      	b.n	8003c62 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c12:	7afb      	ldrb	r3, [r7, #11]
 8003c14:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c18:	2b28      	cmp	r3, #40	; 0x28
 8003c1a:	d117      	bne.n	8003c4c <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 0201 	orr.w	r2, r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c3a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2228      	movs	r2, #40	; 0x28
 8003c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003c4a:	e007      	b.n	8003c5c <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f7fe fd67 	bl	8002730 <HAL_I2C_ErrorCallback>
}
 8003c62:	bf00      	nop
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b084      	sub	sp, #16
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	60f8      	str	r0, [r7, #12]
 8003c72:	60b9      	str	r1, [r7, #8]
 8003c74:	603b      	str	r3, [r7, #0]
 8003c76:	4613      	mov	r3, r2
 8003c78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c7a:	e025      	b.n	8003cc8 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c82:	d021      	beq.n	8003cc8 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c84:	f7fd f968 	bl	8000f58 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d302      	bcc.n	8003c9a <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d116      	bne.n	8003cc8 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb4:	f043 0220 	orr.w	r2, r3, #32
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e023      	b.n	8003d10 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	0c1b      	lsrs	r3, r3, #16
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d10d      	bne.n	8003cee <I2C_WaitOnFlagUntilTimeout+0x84>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	43da      	mvns	r2, r3
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	bf0c      	ite	eq
 8003ce4:	2301      	moveq	r3, #1
 8003ce6:	2300      	movne	r3, #0
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	461a      	mov	r2, r3
 8003cec:	e00c      	b.n	8003d08 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	43da      	mvns	r2, r3
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	bf0c      	ite	eq
 8003d00:	2301      	moveq	r3, #1
 8003d02:	2300      	movne	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	461a      	mov	r2, r3
 8003d08:	79fb      	ldrb	r3, [r7, #7]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d0b6      	beq.n	8003c7c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
 8003d24:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d26:	e051      	b.n	8003dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d36:	d123      	bne.n	8003d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d46:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6c:	f043 0204 	orr.w	r2, r3, #4
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e046      	b.n	8003e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d86:	d021      	beq.n	8003dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d88:	f7fd f8e6 	bl	8000f58 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d302      	bcc.n	8003d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d116      	bne.n	8003dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2220      	movs	r2, #32
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	f043 0220 	orr.w	r2, r3, #32
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e020      	b.n	8003e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	0c1b      	lsrs	r3, r3, #16
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d10c      	bne.n	8003df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	43da      	mvns	r2, r3
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	4013      	ands	r3, r2
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	bf14      	ite	ne
 8003de8:	2301      	movne	r3, #1
 8003dea:	2300      	moveq	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	e00b      	b.n	8003e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	43da      	mvns	r2, r3
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	bf14      	ite	ne
 8003e02:	2301      	movne	r3, #1
 8003e04:	2300      	moveq	r3, #0
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d18d      	bne.n	8003d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b084      	sub	sp, #16
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	60f8      	str	r0, [r7, #12]
 8003e1e:	60b9      	str	r1, [r7, #8]
 8003e20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e22:	e02d      	b.n	8003e80 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 f8ce 	bl	8003fc6 <I2C_IsAcknowledgeFailed>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e02d      	b.n	8003e90 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3a:	d021      	beq.n	8003e80 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e3c:	f7fd f88c 	bl	8000f58 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d302      	bcc.n	8003e52 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d116      	bne.n	8003e80 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6c:	f043 0220 	orr.w	r2, r3, #32
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e007      	b.n	8003e90 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8a:	2b80      	cmp	r3, #128	; 0x80
 8003e8c:	d1ca      	bne.n	8003e24 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ea4:	e02d      	b.n	8003f02 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f000 f88d 	bl	8003fc6 <I2C_IsAcknowledgeFailed>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e02d      	b.n	8003f12 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ebc:	d021      	beq.n	8003f02 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ebe:	f7fd f84b 	bl	8000f58 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d302      	bcc.n	8003ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d116      	bne.n	8003f02 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2220      	movs	r2, #32
 8003ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	f043 0220 	orr.w	r2, r3, #32
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e007      	b.n	8003f12 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b04      	cmp	r3, #4
 8003f0e:	d1ca      	bne.n	8003ea6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	60f8      	str	r0, [r7, #12]
 8003f22:	60b9      	str	r1, [r7, #8]
 8003f24:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f26:	e042      	b.n	8003fae <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	f003 0310 	and.w	r3, r3, #16
 8003f32:	2b10      	cmp	r3, #16
 8003f34:	d119      	bne.n	8003f6a <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f06f 0210 	mvn.w	r2, #16
 8003f3e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e029      	b.n	8003fbe <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f6a:	f7fc fff5 	bl	8000f58 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d302      	bcc.n	8003f80 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d116      	bne.n	8003fae <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	f043 0220 	orr.w	r2, r3, #32
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e007      	b.n	8003fbe <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb8:	2b40      	cmp	r3, #64	; 0x40
 8003fba:	d1b5      	bne.n	8003f28 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fdc:	d11b      	bne.n	8004016 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fe6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	f043 0204 	orr.w	r2, r3, #4
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e000      	b.n	8004018 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004030:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004034:	d103      	bne.n	800403e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800403c:	e007      	b.n	800404e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004042:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004046:	d102      	bne.n	800404e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2208      	movs	r2, #8
 800404c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800405a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800405c:	b08f      	sub	sp, #60	; 0x3c
 800405e:	af0a      	add	r7, sp, #40	; 0x28
 8004060:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e10f      	b.n	800428c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d106      	bne.n	800408c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f005 fb16 	bl	80096b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2203      	movs	r2, #3
 8004090:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409c:	2b00      	cmp	r3, #0
 800409e:	d102      	bne.n	80040a6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f002 fab1 	bl	8006612 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	603b      	str	r3, [r7, #0]
 80040b6:	687e      	ldr	r6, [r7, #4]
 80040b8:	466d      	mov	r5, sp
 80040ba:	f106 0410 	add.w	r4, r6, #16
 80040be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80040ce:	1d33      	adds	r3, r6, #4
 80040d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040d2:	6838      	ldr	r0, [r7, #0]
 80040d4:	f002 f988 	bl	80063e8 <USB_CoreInit>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d005      	beq.n	80040ea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2202      	movs	r2, #2
 80040e2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e0d0      	b.n	800428c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2100      	movs	r1, #0
 80040f0:	4618      	mov	r0, r3
 80040f2:	f002 fa9f 	bl	8006634 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040f6:	2300      	movs	r3, #0
 80040f8:	73fb      	strb	r3, [r7, #15]
 80040fa:	e04a      	b.n	8004192 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80040fc:	7bfa      	ldrb	r2, [r7, #15]
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	4613      	mov	r3, r2
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	1a9b      	subs	r3, r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	440b      	add	r3, r1
 800410a:	333d      	adds	r3, #61	; 0x3d
 800410c:	2201      	movs	r2, #1
 800410e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004110:	7bfa      	ldrb	r2, [r7, #15]
 8004112:	6879      	ldr	r1, [r7, #4]
 8004114:	4613      	mov	r3, r2
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	1a9b      	subs	r3, r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	440b      	add	r3, r1
 800411e:	333c      	adds	r3, #60	; 0x3c
 8004120:	7bfa      	ldrb	r2, [r7, #15]
 8004122:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004124:	7bfa      	ldrb	r2, [r7, #15]
 8004126:	7bfb      	ldrb	r3, [r7, #15]
 8004128:	b298      	uxth	r0, r3
 800412a:	6879      	ldr	r1, [r7, #4]
 800412c:	4613      	mov	r3, r2
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	1a9b      	subs	r3, r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	440b      	add	r3, r1
 8004136:	3342      	adds	r3, #66	; 0x42
 8004138:	4602      	mov	r2, r0
 800413a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800413c:	7bfa      	ldrb	r2, [r7, #15]
 800413e:	6879      	ldr	r1, [r7, #4]
 8004140:	4613      	mov	r3, r2
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	1a9b      	subs	r3, r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	440b      	add	r3, r1
 800414a:	333f      	adds	r3, #63	; 0x3f
 800414c:	2200      	movs	r2, #0
 800414e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004150:	7bfa      	ldrb	r2, [r7, #15]
 8004152:	6879      	ldr	r1, [r7, #4]
 8004154:	4613      	mov	r3, r2
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	1a9b      	subs	r3, r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	440b      	add	r3, r1
 800415e:	3344      	adds	r3, #68	; 0x44
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004164:	7bfa      	ldrb	r2, [r7, #15]
 8004166:	6879      	ldr	r1, [r7, #4]
 8004168:	4613      	mov	r3, r2
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	1a9b      	subs	r3, r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	440b      	add	r3, r1
 8004172:	3348      	adds	r3, #72	; 0x48
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004178:	7bfa      	ldrb	r2, [r7, #15]
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	4613      	mov	r3, r2
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	1a9b      	subs	r3, r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	440b      	add	r3, r1
 8004186:	3350      	adds	r3, #80	; 0x50
 8004188:	2200      	movs	r2, #0
 800418a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800418c:	7bfb      	ldrb	r3, [r7, #15]
 800418e:	3301      	adds	r3, #1
 8004190:	73fb      	strb	r3, [r7, #15]
 8004192:	7bfa      	ldrb	r2, [r7, #15]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	429a      	cmp	r2, r3
 800419a:	d3af      	bcc.n	80040fc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800419c:	2300      	movs	r3, #0
 800419e:	73fb      	strb	r3, [r7, #15]
 80041a0:	e044      	b.n	800422c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80041a2:	7bfa      	ldrb	r2, [r7, #15]
 80041a4:	6879      	ldr	r1, [r7, #4]
 80041a6:	4613      	mov	r3, r2
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	1a9b      	subs	r3, r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	440b      	add	r3, r1
 80041b0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80041b4:	2200      	movs	r2, #0
 80041b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80041b8:	7bfa      	ldrb	r2, [r7, #15]
 80041ba:	6879      	ldr	r1, [r7, #4]
 80041bc:	4613      	mov	r3, r2
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	1a9b      	subs	r3, r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	440b      	add	r3, r1
 80041c6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80041ca:	7bfa      	ldrb	r2, [r7, #15]
 80041cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80041ce:	7bfa      	ldrb	r2, [r7, #15]
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	4613      	mov	r3, r2
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	1a9b      	subs	r3, r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	440b      	add	r3, r1
 80041dc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80041e0:	2200      	movs	r2, #0
 80041e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80041e4:	7bfa      	ldrb	r2, [r7, #15]
 80041e6:	6879      	ldr	r1, [r7, #4]
 80041e8:	4613      	mov	r3, r2
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	1a9b      	subs	r3, r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80041f6:	2200      	movs	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80041fa:	7bfa      	ldrb	r2, [r7, #15]
 80041fc:	6879      	ldr	r1, [r7, #4]
 80041fe:	4613      	mov	r3, r2
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	1a9b      	subs	r3, r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	440b      	add	r3, r1
 8004208:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800420c:	2200      	movs	r2, #0
 800420e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004210:	7bfa      	ldrb	r2, [r7, #15]
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	4613      	mov	r3, r2
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	1a9b      	subs	r3, r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	440b      	add	r3, r1
 800421e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004222:	2200      	movs	r2, #0
 8004224:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004226:	7bfb      	ldrb	r3, [r7, #15]
 8004228:	3301      	adds	r3, #1
 800422a:	73fb      	strb	r3, [r7, #15]
 800422c:	7bfa      	ldrb	r2, [r7, #15]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	429a      	cmp	r2, r3
 8004234:	d3b5      	bcc.n	80041a2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	603b      	str	r3, [r7, #0]
 800423c:	687e      	ldr	r6, [r7, #4]
 800423e:	466d      	mov	r5, sp
 8004240:	f106 0410 	add.w	r4, r6, #16
 8004244:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004246:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004248:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800424a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800424c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004250:	e885 0003 	stmia.w	r5, {r0, r1}
 8004254:	1d33      	adds	r3, r6, #4
 8004256:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004258:	6838      	ldr	r0, [r7, #0]
 800425a:	f002 fa15 	bl	8006688 <USB_DevInit>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e00d      	b.n	800428c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4618      	mov	r0, r3
 8004286:	f003 fa54 	bl	8007732 <USB_DevDisconnect>

  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3714      	adds	r7, #20
 8004290:	46bd      	mov	sp, r7
 8004292:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004294 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d101      	bne.n	80042b0 <HAL_PCD_Start+0x1c>
 80042ac:	2302      	movs	r3, #2
 80042ae:	e020      	b.n	80042f2 <HAL_PCD_Start+0x5e>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d109      	bne.n	80042d4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d005      	beq.n	80042d4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4618      	mov	r0, r3
 80042da:	f003 fa12 	bl	8007702 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f002 f984 	bl	80065f0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80042fa:	b590      	push	{r4, r7, lr}
 80042fc:	b08d      	sub	sp, #52	; 0x34
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004308:	6a3b      	ldr	r3, [r7, #32]
 800430a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4618      	mov	r0, r3
 8004312:	f003 fab9 	bl	8007888 <USB_GetMode>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	f040 839d 	bne.w	8004a58 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4618      	mov	r0, r3
 8004324:	f003 fa1d 	bl	8007762 <USB_ReadInterrupts>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	f000 8393 	beq.w	8004a56 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4618      	mov	r0, r3
 8004336:	f003 fa14 	bl	8007762 <USB_ReadInterrupts>
 800433a:	4603      	mov	r3, r0
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b02      	cmp	r3, #2
 8004342:	d107      	bne.n	8004354 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	695a      	ldr	r2, [r3, #20]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f002 0202 	and.w	r2, r2, #2
 8004352:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4618      	mov	r0, r3
 800435a:	f003 fa02 	bl	8007762 <USB_ReadInterrupts>
 800435e:	4603      	mov	r3, r0
 8004360:	f003 0310 	and.w	r3, r3, #16
 8004364:	2b10      	cmp	r3, #16
 8004366:	d161      	bne.n	800442c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	699a      	ldr	r2, [r3, #24]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0210 	bic.w	r2, r2, #16
 8004376:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	f003 020f 	and.w	r2, r3, #15
 8004384:	4613      	mov	r3, r2
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	1a9b      	subs	r3, r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	4413      	add	r3, r2
 8004394:	3304      	adds	r3, #4
 8004396:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	0c5b      	lsrs	r3, r3, #17
 800439c:	f003 030f 	and.w	r3, r3, #15
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d124      	bne.n	80043ee <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80043aa:	4013      	ands	r3, r2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d035      	beq.n	800441c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	091b      	lsrs	r3, r3, #4
 80043b8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80043ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043be:	b29b      	uxth	r3, r3
 80043c0:	461a      	mov	r2, r3
 80043c2:	6a38      	ldr	r0, [r7, #32]
 80043c4:	f003 f87a 	bl	80074bc <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	68da      	ldr	r2, [r3, #12]
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	091b      	lsrs	r3, r3, #4
 80043d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043d4:	441a      	add	r2, r3
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	699a      	ldr	r2, [r3, #24]
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	091b      	lsrs	r3, r3, #4
 80043e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043e6:	441a      	add	r2, r3
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	619a      	str	r2, [r3, #24]
 80043ec:	e016      	b.n	800441c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	0c5b      	lsrs	r3, r3, #17
 80043f2:	f003 030f 	and.w	r3, r3, #15
 80043f6:	2b06      	cmp	r3, #6
 80043f8:	d110      	bne.n	800441c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004400:	2208      	movs	r2, #8
 8004402:	4619      	mov	r1, r3
 8004404:	6a38      	ldr	r0, [r7, #32]
 8004406:	f003 f859 	bl	80074bc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	699a      	ldr	r2, [r3, #24]
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	091b      	lsrs	r3, r3, #4
 8004412:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004416:	441a      	add	r2, r3
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699a      	ldr	r2, [r3, #24]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 0210 	orr.w	r2, r2, #16
 800442a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4618      	mov	r0, r3
 8004432:	f003 f996 	bl	8007762 <USB_ReadInterrupts>
 8004436:	4603      	mov	r3, r0
 8004438:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800443c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004440:	d16e      	bne.n	8004520 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	f003 f99c 	bl	8007788 <USB_ReadDevAllOutEpInterrupt>
 8004450:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004452:	e062      	b.n	800451a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	d057      	beq.n	800450e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004464:	b2d2      	uxtb	r2, r2
 8004466:	4611      	mov	r1, r2
 8004468:	4618      	mov	r0, r3
 800446a:	f003 f9c1 	bl	80077f0 <USB_ReadDevOutEPInterrupt>
 800446e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00c      	beq.n	8004494 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	015a      	lsls	r2, r3, #5
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	4413      	add	r3, r2
 8004482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004486:	461a      	mov	r2, r3
 8004488:	2301      	movs	r3, #1
 800448a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800448c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 fdb0 	bl	8004ff4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	f003 0308 	and.w	r3, r3, #8
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00c      	beq.n	80044b8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a0:	015a      	lsls	r2, r3, #5
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044aa:	461a      	mov	r2, r3
 80044ac:	2308      	movs	r3, #8
 80044ae:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80044b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 feaa 	bl	800520c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	f003 0310 	and.w	r3, r3, #16
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d008      	beq.n	80044d4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ce:	461a      	mov	r2, r3
 80044d0:	2310      	movs	r3, #16
 80044d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f003 0320 	and.w	r3, r3, #32
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d008      	beq.n	80044f0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	015a      	lsls	r2, r3, #5
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	4413      	add	r3, r2
 80044e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ea:	461a      	mov	r2, r3
 80044ec:	2320      	movs	r3, #32
 80044ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d009      	beq.n	800450e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	015a      	lsls	r2, r3, #5
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	4413      	add	r3, r2
 8004502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004506:	461a      	mov	r2, r3
 8004508:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800450c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	3301      	adds	r3, #1
 8004512:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004516:	085b      	lsrs	r3, r3, #1
 8004518:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800451a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451c:	2b00      	cmp	r3, #0
 800451e:	d199      	bne.n	8004454 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4618      	mov	r0, r3
 8004526:	f003 f91c 	bl	8007762 <USB_ReadInterrupts>
 800452a:	4603      	mov	r3, r0
 800452c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004530:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004534:	f040 80c0 	bne.w	80046b8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4618      	mov	r0, r3
 800453e:	f003 f93d 	bl	80077bc <USB_ReadDevAllInEpInterrupt>
 8004542:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004548:	e0b2      	b.n	80046b0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800454a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 80a7 	beq.w	80046a4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800455c:	b2d2      	uxtb	r2, r2
 800455e:	4611      	mov	r1, r2
 8004560:	4618      	mov	r0, r3
 8004562:	f003 f963 	bl	800782c <USB_ReadDevInEPInterrupt>
 8004566:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d057      	beq.n	8004622 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	f003 030f 	and.w	r3, r3, #15
 8004578:	2201      	movs	r2, #1
 800457a:	fa02 f303 	lsl.w	r3, r2, r3
 800457e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	43db      	mvns	r3, r3
 800458c:	69f9      	ldr	r1, [r7, #28]
 800458e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004592:	4013      	ands	r3, r2
 8004594:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	015a      	lsls	r2, r3, #5
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	4413      	add	r3, r2
 800459e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a2:	461a      	mov	r2, r3
 80045a4:	2301      	movs	r3, #1
 80045a6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d132      	bne.n	8004616 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80045b0:	6879      	ldr	r1, [r7, #4]
 80045b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045b4:	4613      	mov	r3, r2
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	1a9b      	subs	r3, r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	440b      	add	r3, r1
 80045be:	3348      	adds	r3, #72	; 0x48
 80045c0:	6819      	ldr	r1, [r3, #0]
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c6:	4613      	mov	r3, r2
 80045c8:	00db      	lsls	r3, r3, #3
 80045ca:	1a9b      	subs	r3, r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4403      	add	r3, r0
 80045d0:	3344      	adds	r3, #68	; 0x44
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4419      	add	r1, r3
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045da:	4613      	mov	r3, r2
 80045dc:	00db      	lsls	r3, r3, #3
 80045de:	1a9b      	subs	r3, r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4403      	add	r3, r0
 80045e4:	3348      	adds	r3, #72	; 0x48
 80045e6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d113      	bne.n	8004616 <HAL_PCD_IRQHandler+0x31c>
 80045ee:	6879      	ldr	r1, [r7, #4]
 80045f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f2:	4613      	mov	r3, r2
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	1a9b      	subs	r3, r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	440b      	add	r3, r1
 80045fc:	3350      	adds	r3, #80	; 0x50
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d108      	bne.n	8004616 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6818      	ldr	r0, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800460e:	461a      	mov	r2, r3
 8004610:	2101      	movs	r1, #1
 8004612:	f003 f96b 	bl	80078ec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	b2db      	uxtb	r3, r3
 800461a:	4619      	mov	r1, r3
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f005 f8cc 	bl	80097ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	f003 0308 	and.w	r3, r3, #8
 8004628:	2b00      	cmp	r3, #0
 800462a:	d008      	beq.n	800463e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	4413      	add	r3, r2
 8004634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004638:	461a      	mov	r2, r3
 800463a:	2308      	movs	r3, #8
 800463c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	f003 0310 	and.w	r3, r3, #16
 8004644:	2b00      	cmp	r3, #0
 8004646:	d008      	beq.n	800465a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464a:	015a      	lsls	r2, r3, #5
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	4413      	add	r3, r2
 8004650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004654:	461a      	mov	r2, r3
 8004656:	2310      	movs	r3, #16
 8004658:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004660:	2b00      	cmp	r3, #0
 8004662:	d008      	beq.n	8004676 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	015a      	lsls	r2, r3, #5
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	4413      	add	r3, r2
 800466c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004670:	461a      	mov	r2, r3
 8004672:	2340      	movs	r3, #64	; 0x40
 8004674:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d008      	beq.n	8004692 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	015a      	lsls	r2, r3, #5
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	4413      	add	r3, r2
 8004688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800468c:	461a      	mov	r2, r3
 800468e:	2302      	movs	r3, #2
 8004690:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004698:	2b00      	cmp	r3, #0
 800469a:	d003      	beq.n	80046a4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800469c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 fc1b 	bl	8004eda <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80046a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a6:	3301      	adds	r3, #1
 80046a8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80046aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ac:	085b      	lsrs	r3, r3, #1
 80046ae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80046b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f47f af49 	bne.w	800454a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4618      	mov	r0, r3
 80046be:	f003 f850 	bl	8007762 <USB_ReadInterrupts>
 80046c2:	4603      	mov	r3, r0
 80046c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046cc:	d122      	bne.n	8004714 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	69fa      	ldr	r2, [r7, #28]
 80046d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046dc:	f023 0301 	bic.w	r3, r3, #1
 80046e0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d108      	bne.n	80046fe <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80046f4:	2100      	movs	r1, #0
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 fe26 	bl	8005348 <HAL_PCDEx_LPM_Callback>
 80046fc:	e002      	b.n	8004704 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f005 f8c8 	bl	8009894 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	695a      	ldr	r2, [r3, #20]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004712:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4618      	mov	r0, r3
 800471a:	f003 f822 	bl	8007762 <USB_ReadInterrupts>
 800471e:	4603      	mov	r3, r0
 8004720:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004724:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004728:	d112      	bne.n	8004750 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b01      	cmp	r3, #1
 8004738:	d102      	bne.n	8004740 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f005 f884 	bl	8009848 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	695a      	ldr	r2, [r3, #20]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800474e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4618      	mov	r0, r3
 8004756:	f003 f804 	bl	8007762 <USB_ReadInterrupts>
 800475a:	4603      	mov	r3, r0
 800475c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004764:	f040 80c7 	bne.w	80048f6 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	69fa      	ldr	r2, [r7, #28]
 8004772:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004776:	f023 0301 	bic.w	r3, r3, #1
 800477a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2110      	movs	r1, #16
 8004782:	4618      	mov	r0, r3
 8004784:	f002 f8e4 	bl	8006950 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004788:	2300      	movs	r3, #0
 800478a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800478c:	e056      	b.n	800483c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800478e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	4413      	add	r3, r2
 8004796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800479a:	461a      	mov	r2, r3
 800479c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047a0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80047a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a4:	015a      	lsls	r2, r3, #5
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047b2:	0151      	lsls	r1, r2, #5
 80047b4:	69fa      	ldr	r2, [r7, #28]
 80047b6:	440a      	add	r2, r1
 80047b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80047c0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80047c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047d2:	0151      	lsls	r1, r2, #5
 80047d4:	69fa      	ldr	r2, [r7, #28]
 80047d6:	440a      	add	r2, r1
 80047d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80047e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80047e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ee:	461a      	mov	r2, r3
 80047f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047f4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80047f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004806:	0151      	lsls	r1, r2, #5
 8004808:	69fa      	ldr	r2, [r7, #28]
 800480a:	440a      	add	r2, r1
 800480c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004810:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004814:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004818:	015a      	lsls	r2, r3, #5
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	4413      	add	r3, r2
 800481e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004826:	0151      	lsls	r1, r2, #5
 8004828:	69fa      	ldr	r2, [r7, #28]
 800482a:	440a      	add	r2, r1
 800482c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004830:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004834:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004838:	3301      	adds	r3, #1
 800483a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004842:	429a      	cmp	r2, r3
 8004844:	d3a3      	bcc.n	800478e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	69fa      	ldr	r2, [r7, #28]
 8004850:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004854:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004858:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485e:	2b00      	cmp	r3, #0
 8004860:	d016      	beq.n	8004890 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004868:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800486c:	69fa      	ldr	r2, [r7, #28]
 800486e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004872:	f043 030b 	orr.w	r3, r3, #11
 8004876:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004882:	69fa      	ldr	r2, [r7, #28]
 8004884:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004888:	f043 030b 	orr.w	r3, r3, #11
 800488c:	6453      	str	r3, [r2, #68]	; 0x44
 800488e:	e015      	b.n	80048bc <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	69fa      	ldr	r2, [r7, #28]
 800489a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800489e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80048a2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80048a6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	69fa      	ldr	r2, [r7, #28]
 80048b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048b6:	f043 030b 	orr.w	r3, r3, #11
 80048ba:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	69fa      	ldr	r2, [r7, #28]
 80048c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048ca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80048ce:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6818      	ldr	r0, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80048e0:	461a      	mov	r2, r3
 80048e2:	f003 f803 	bl	80078ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	695a      	ldr	r2, [r3, #20]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80048f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f002 ff31 	bl	8007762 <USB_ReadInterrupts>
 8004900:	4603      	mov	r3, r0
 8004902:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004906:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800490a:	d124      	bne.n	8004956 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4618      	mov	r0, r3
 8004912:	f002 ffc7 	bl	80078a4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4618      	mov	r0, r3
 800491c:	f002 f879 	bl	8006a12 <USB_GetDevSpeed>
 8004920:	4603      	mov	r3, r0
 8004922:	461a      	mov	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681c      	ldr	r4, [r3, #0]
 800492c:	f001 f920 	bl	8005b70 <HAL_RCC_GetHCLKFreq>
 8004930:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004936:	b2db      	uxtb	r3, r3
 8004938:	461a      	mov	r2, r3
 800493a:	4620      	mov	r0, r4
 800493c:	f001 fdb6 	bl	80064ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f004 ff62 	bl	800980a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	695a      	ldr	r2, [r3, #20]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004954:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4618      	mov	r0, r3
 800495c:	f002 ff01 	bl	8007762 <USB_ReadInterrupts>
 8004960:	4603      	mov	r3, r0
 8004962:	f003 0308 	and.w	r3, r3, #8
 8004966:	2b08      	cmp	r3, #8
 8004968:	d10a      	bne.n	8004980 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f004 ff3f 	bl	80097ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	695a      	ldr	r2, [r3, #20]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f002 0208 	and.w	r2, r2, #8
 800497e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4618      	mov	r0, r3
 8004986:	f002 feec 	bl	8007762 <USB_ReadInterrupts>
 800498a:	4603      	mov	r3, r0
 800498c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004990:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004994:	d10f      	bne.n	80049b6 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004996:	2300      	movs	r3, #0
 8004998:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	b2db      	uxtb	r3, r3
 800499e:	4619      	mov	r1, r3
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f004 ff97 	bl	80098d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	695a      	ldr	r2, [r3, #20]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80049b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f002 fed1 	bl	8007762 <USB_ReadInterrupts>
 80049c0:	4603      	mov	r3, r0
 80049c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049ca:	d10f      	bne.n	80049ec <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	4619      	mov	r1, r3
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f004 ff6a 	bl	80098b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	695a      	ldr	r2, [r3, #20]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80049ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f002 feb6 	bl	8007762 <USB_ReadInterrupts>
 80049f6:	4603      	mov	r3, r0
 80049f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80049fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a00:	d10a      	bne.n	8004a18 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f004 ff78 	bl	80098f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	695a      	ldr	r2, [r3, #20]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004a16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f002 fea0 	bl	8007762 <USB_ReadInterrupts>
 8004a22:	4603      	mov	r3, r0
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	d115      	bne.n	8004a58 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	f003 0304 	and.w	r3, r3, #4
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d002      	beq.n	8004a44 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f004 ff68 	bl	8009914 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6859      	ldr	r1, [r3, #4]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	430a      	orrs	r2, r1
 8004a52:	605a      	str	r2, [r3, #4]
 8004a54:	e000      	b.n	8004a58 <HAL_PCD_IRQHandler+0x75e>
      return;
 8004a56:	bf00      	nop
    }
  }
}
 8004a58:	3734      	adds	r7, #52	; 0x34
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd90      	pop	{r4, r7, pc}

08004a5e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b082      	sub	sp, #8
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
 8004a66:	460b      	mov	r3, r1
 8004a68:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d101      	bne.n	8004a78 <HAL_PCD_SetAddress+0x1a>
 8004a74:	2302      	movs	r3, #2
 8004a76:	e013      	b.n	8004aa0 <HAL_PCD_SetAddress+0x42>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	78fa      	ldrb	r2, [r7, #3]
 8004a84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	78fa      	ldrb	r2, [r7, #3]
 8004a8e:	4611      	mov	r1, r2
 8004a90:	4618      	mov	r0, r3
 8004a92:	f002 fe10 	bl	80076b6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	4608      	mov	r0, r1
 8004ab2:	4611      	mov	r1, r2
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	70fb      	strb	r3, [r7, #3]
 8004aba:	460b      	mov	r3, r1
 8004abc:	803b      	strh	r3, [r7, #0]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ac6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	da0f      	bge.n	8004aee <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ace:	78fb      	ldrb	r3, [r7, #3]
 8004ad0:	f003 020f 	and.w	r2, r3, #15
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	1a9b      	subs	r3, r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	3338      	adds	r3, #56	; 0x38
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	3304      	adds	r3, #4
 8004ae4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	705a      	strb	r2, [r3, #1]
 8004aec:	e00f      	b.n	8004b0e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004aee:	78fb      	ldrb	r3, [r7, #3]
 8004af0:	f003 020f 	and.w	r2, r3, #15
 8004af4:	4613      	mov	r3, r2
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	1a9b      	subs	r3, r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	4413      	add	r3, r2
 8004b04:	3304      	adds	r3, #4
 8004b06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004b0e:	78fb      	ldrb	r3, [r7, #3]
 8004b10:	f003 030f 	and.w	r3, r3, #15
 8004b14:	b2da      	uxtb	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004b1a:	883a      	ldrh	r2, [r7, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	78ba      	ldrb	r2, [r7, #2]
 8004b24:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	785b      	ldrb	r3, [r3, #1]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d004      	beq.n	8004b38 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004b38:	78bb      	ldrb	r3, [r7, #2]
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d102      	bne.n	8004b44 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d101      	bne.n	8004b52 <HAL_PCD_EP_Open+0xaa>
 8004b4e:	2302      	movs	r3, #2
 8004b50:	e00e      	b.n	8004b70 <HAL_PCD_EP_Open+0xc8>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68f9      	ldr	r1, [r7, #12]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f001 ff7b 	bl	8006a5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004b6e:	7afb      	ldrb	r3, [r7, #11]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	460b      	mov	r3, r1
 8004b82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	da0f      	bge.n	8004bac <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b8c:	78fb      	ldrb	r3, [r7, #3]
 8004b8e:	f003 020f 	and.w	r2, r3, #15
 8004b92:	4613      	mov	r3, r2
 8004b94:	00db      	lsls	r3, r3, #3
 8004b96:	1a9b      	subs	r3, r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	3338      	adds	r3, #56	; 0x38
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	3304      	adds	r3, #4
 8004ba2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	705a      	strb	r2, [r3, #1]
 8004baa:	e00f      	b.n	8004bcc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bac:	78fb      	ldrb	r3, [r7, #3]
 8004bae:	f003 020f 	and.w	r2, r3, #15
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	00db      	lsls	r3, r3, #3
 8004bb6:	1a9b      	subs	r3, r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004bcc:	78fb      	ldrb	r3, [r7, #3]
 8004bce:	f003 030f 	and.w	r3, r3, #15
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d101      	bne.n	8004be6 <HAL_PCD_EP_Close+0x6e>
 8004be2:	2302      	movs	r3, #2
 8004be4:	e00e      	b.n	8004c04 <HAL_PCD_EP_Close+0x8c>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68f9      	ldr	r1, [r7, #12]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f001 ffb9 	bl	8006b6c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	607a      	str	r2, [r7, #4]
 8004c16:	603b      	str	r3, [r7, #0]
 8004c18:	460b      	mov	r3, r1
 8004c1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c1c:	7afb      	ldrb	r3, [r7, #11]
 8004c1e:	f003 020f 	and.w	r2, r3, #15
 8004c22:	4613      	mov	r3, r2
 8004c24:	00db      	lsls	r3, r3, #3
 8004c26:	1a9b      	subs	r3, r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	4413      	add	r3, r2
 8004c32:	3304      	adds	r3, #4
 8004c34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	2200      	movs	r2, #0
 8004c46:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c4e:	7afb      	ldrb	r3, [r7, #11]
 8004c50:	f003 030f 	and.w	r3, r3, #15
 8004c54:	b2da      	uxtb	r2, r3
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d102      	bne.n	8004c68 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c68:	7afb      	ldrb	r3, [r7, #11]
 8004c6a:	f003 030f 	and.w	r3, r3, #15
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d109      	bne.n	8004c86 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6818      	ldr	r0, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	6979      	ldr	r1, [r7, #20]
 8004c80:	f002 fa94 	bl	80071ac <USB_EP0StartXfer>
 8004c84:	e008      	b.n	8004c98 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6818      	ldr	r0, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	461a      	mov	r2, r3
 8004c92:	6979      	ldr	r1, [r7, #20]
 8004c94:	f002 f846 	bl	8006d24 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3718      	adds	r7, #24
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b083      	sub	sp, #12
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
 8004caa:	460b      	mov	r3, r1
 8004cac:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004cae:	78fb      	ldrb	r3, [r7, #3]
 8004cb0:	f003 020f 	and.w	r2, r3, #15
 8004cb4:	6879      	ldr	r1, [r7, #4]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	00db      	lsls	r3, r3, #3
 8004cba:	1a9b      	subs	r3, r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	440b      	add	r3, r1
 8004cc0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004cc4:	681b      	ldr	r3, [r3, #0]
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b086      	sub	sp, #24
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	60f8      	str	r0, [r7, #12]
 8004cda:	607a      	str	r2, [r7, #4]
 8004cdc:	603b      	str	r3, [r7, #0]
 8004cde:	460b      	mov	r3, r1
 8004ce0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ce2:	7afb      	ldrb	r3, [r7, #11]
 8004ce4:	f003 020f 	and.w	r2, r3, #15
 8004ce8:	4613      	mov	r3, r2
 8004cea:	00db      	lsls	r3, r3, #3
 8004cec:	1a9b      	subs	r3, r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	3338      	adds	r3, #56	; 0x38
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	3304      	adds	r3, #4
 8004cf8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d12:	7afb      	ldrb	r3, [r7, #11]
 8004d14:	f003 030f 	and.w	r3, r3, #15
 8004d18:	b2da      	uxtb	r2, r3
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d102      	bne.n	8004d2c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d2c:	7afb      	ldrb	r3, [r7, #11]
 8004d2e:	f003 030f 	and.w	r3, r3, #15
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d109      	bne.n	8004d4a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6818      	ldr	r0, [r3, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	461a      	mov	r2, r3
 8004d42:	6979      	ldr	r1, [r7, #20]
 8004d44:	f002 fa32 	bl	80071ac <USB_EP0StartXfer>
 8004d48:	e008      	b.n	8004d5c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6818      	ldr	r0, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	461a      	mov	r2, r3
 8004d56:	6979      	ldr	r1, [r7, #20]
 8004d58:	f001 ffe4 	bl	8006d24 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3718      	adds	r7, #24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b084      	sub	sp, #16
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
 8004d6e:	460b      	mov	r3, r1
 8004d70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004d72:	78fb      	ldrb	r3, [r7, #3]
 8004d74:	f003 020f 	and.w	r2, r3, #15
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d901      	bls.n	8004d84 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e050      	b.n	8004e26 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	da0f      	bge.n	8004dac <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d8c:	78fb      	ldrb	r3, [r7, #3]
 8004d8e:	f003 020f 	and.w	r2, r3, #15
 8004d92:	4613      	mov	r3, r2
 8004d94:	00db      	lsls	r3, r3, #3
 8004d96:	1a9b      	subs	r3, r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	3338      	adds	r3, #56	; 0x38
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	4413      	add	r3, r2
 8004da0:	3304      	adds	r3, #4
 8004da2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2201      	movs	r2, #1
 8004da8:	705a      	strb	r2, [r3, #1]
 8004daa:	e00d      	b.n	8004dc8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004dac:	78fa      	ldrb	r2, [r7, #3]
 8004dae:	4613      	mov	r3, r2
 8004db0:	00db      	lsls	r3, r3, #3
 8004db2:	1a9b      	subs	r3, r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	3304      	adds	r3, #4
 8004dc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004dce:	78fb      	ldrb	r3, [r7, #3]
 8004dd0:	f003 030f 	and.w	r3, r3, #15
 8004dd4:	b2da      	uxtb	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d101      	bne.n	8004de8 <HAL_PCD_EP_SetStall+0x82>
 8004de4:	2302      	movs	r3, #2
 8004de6:	e01e      	b.n	8004e26 <HAL_PCD_EP_SetStall+0xc0>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68f9      	ldr	r1, [r7, #12]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f002 fb89 	bl	800750e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004dfc:	78fb      	ldrb	r3, [r7, #3]
 8004dfe:	f003 030f 	and.w	r3, r3, #15
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10a      	bne.n	8004e1c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6818      	ldr	r0, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	b2d9      	uxtb	r1, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004e16:	461a      	mov	r2, r3
 8004e18:	f002 fd68 	bl	80078ec <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b084      	sub	sp, #16
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
 8004e36:	460b      	mov	r3, r1
 8004e38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004e3a:	78fb      	ldrb	r3, [r7, #3]
 8004e3c:	f003 020f 	and.w	r2, r3, #15
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d901      	bls.n	8004e4c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e042      	b.n	8004ed2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	da0f      	bge.n	8004e74 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e54:	78fb      	ldrb	r3, [r7, #3]
 8004e56:	f003 020f 	and.w	r2, r3, #15
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	00db      	lsls	r3, r3, #3
 8004e5e:	1a9b      	subs	r3, r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	3338      	adds	r3, #56	; 0x38
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	4413      	add	r3, r2
 8004e68:	3304      	adds	r3, #4
 8004e6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	705a      	strb	r2, [r3, #1]
 8004e72:	e00f      	b.n	8004e94 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e74:	78fb      	ldrb	r3, [r7, #3]
 8004e76:	f003 020f 	and.w	r2, r3, #15
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	00db      	lsls	r3, r3, #3
 8004e7e:	1a9b      	subs	r3, r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	4413      	add	r3, r2
 8004e8a:	3304      	adds	r3, #4
 8004e8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e9a:	78fb      	ldrb	r3, [r7, #3]
 8004e9c:	f003 030f 	and.w	r3, r3, #15
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d101      	bne.n	8004eb4 <HAL_PCD_EP_ClrStall+0x86>
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	e00e      	b.n	8004ed2 <HAL_PCD_EP_ClrStall+0xa4>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68f9      	ldr	r1, [r7, #12]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f002 fb91 	bl	80075ea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b08a      	sub	sp, #40	; 0x28
 8004ede:	af02      	add	r7, sp, #8
 8004ee0:	6078      	str	r0, [r7, #4]
 8004ee2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	1a9b      	subs	r3, r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	3338      	adds	r3, #56	; 0x38
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	4413      	add	r3, r2
 8004efe:	3304      	adds	r3, #4
 8004f00:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	699a      	ldr	r2, [r3, #24]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d901      	bls.n	8004f12 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e06c      	b.n	8004fec <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	695a      	ldr	r2, [r3, #20]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	69fa      	ldr	r2, [r7, #28]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d902      	bls.n	8004f2e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	3303      	adds	r3, #3
 8004f32:	089b      	lsrs	r3, r3, #2
 8004f34:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f36:	e02b      	b.n	8004f90 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	695a      	ldr	r2, [r3, #20]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	69fa      	ldr	r2, [r7, #28]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d902      	bls.n	8004f54 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	3303      	adds	r3, #3
 8004f58:	089b      	lsrs	r3, r3, #2
 8004f5a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	68d9      	ldr	r1, [r3, #12]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	b2da      	uxtb	r2, r3
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	4603      	mov	r3, r0
 8004f72:	6978      	ldr	r0, [r7, #20]
 8004f74:	f002 fa6d 	bl	8007452 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	68da      	ldr	r2, [r3, #12]
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	441a      	add	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	699a      	ldr	r2, [r3, #24]
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	441a      	add	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d809      	bhi.n	8004fba <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	699a      	ldr	r2, [r3, #24]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d203      	bcs.n	8004fba <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1be      	bne.n	8004f38 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	695a      	ldr	r2, [r3, #20]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d811      	bhi.n	8004fea <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	f003 030f 	and.w	r3, r3, #15
 8004fcc:	2201      	movs	r2, #1
 8004fce:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	43db      	mvns	r3, r3
 8004fe0:	6939      	ldr	r1, [r7, #16]
 8004fe2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3720      	adds	r7, #32
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	333c      	adds	r3, #60	; 0x3c
 800500c:	3304      	adds	r3, #4
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	015a      	lsls	r2, r3, #5
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	4413      	add	r3, r2
 800501a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	2b01      	cmp	r3, #1
 8005028:	f040 80a0 	bne.w	800516c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	f003 0308 	and.w	r3, r3, #8
 8005032:	2b00      	cmp	r3, #0
 8005034:	d015      	beq.n	8005062 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	4a72      	ldr	r2, [pc, #456]	; (8005204 <PCD_EP_OutXfrComplete_int+0x210>)
 800503a:	4293      	cmp	r3, r2
 800503c:	f240 80dd 	bls.w	80051fa <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005046:	2b00      	cmp	r3, #0
 8005048:	f000 80d7 	beq.w	80051fa <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	015a      	lsls	r2, r3, #5
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	4413      	add	r3, r2
 8005054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005058:	461a      	mov	r2, r3
 800505a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800505e:	6093      	str	r3, [r2, #8]
 8005060:	e0cb      	b.n	80051fa <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	f003 0320 	and.w	r3, r3, #32
 8005068:	2b00      	cmp	r3, #0
 800506a:	d009      	beq.n	8005080 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	015a      	lsls	r2, r3, #5
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	4413      	add	r3, r2
 8005074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005078:	461a      	mov	r2, r3
 800507a:	2320      	movs	r3, #32
 800507c:	6093      	str	r3, [r2, #8]
 800507e:	e0bc      	b.n	80051fa <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005086:	2b00      	cmp	r3, #0
 8005088:	f040 80b7 	bne.w	80051fa <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4a5d      	ldr	r2, [pc, #372]	; (8005204 <PCD_EP_OutXfrComplete_int+0x210>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d90f      	bls.n	80050b4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	015a      	lsls	r2, r3, #5
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050aa:	461a      	mov	r2, r3
 80050ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050b0:	6093      	str	r3, [r2, #8]
 80050b2:	e0a2      	b.n	80051fa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80050b4:	6879      	ldr	r1, [r7, #4]
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	4613      	mov	r3, r2
 80050ba:	00db      	lsls	r3, r3, #3
 80050bc:	1a9b      	subs	r3, r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	440b      	add	r3, r1
 80050c2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80050c6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	0159      	lsls	r1, r3, #5
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	440b      	add	r3, r1
 80050d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80050da:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	4613      	mov	r3, r2
 80050e2:	00db      	lsls	r3, r3, #3
 80050e4:	1a9b      	subs	r3, r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4403      	add	r3, r0
 80050ea:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80050ee:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80050f0:	6879      	ldr	r1, [r7, #4]
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	4613      	mov	r3, r2
 80050f6:	00db      	lsls	r3, r3, #3
 80050f8:	1a9b      	subs	r3, r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	440b      	add	r3, r1
 80050fe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005102:	6819      	ldr	r1, [r3, #0]
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	683a      	ldr	r2, [r7, #0]
 8005108:	4613      	mov	r3, r2
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	1a9b      	subs	r3, r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	4403      	add	r3, r0
 8005112:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4419      	add	r1, r3
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	4613      	mov	r3, r2
 8005120:	00db      	lsls	r3, r3, #3
 8005122:	1a9b      	subs	r3, r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4403      	add	r3, r0
 8005128:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800512c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d114      	bne.n	800515e <PCD_EP_OutXfrComplete_int+0x16a>
 8005134:	6879      	ldr	r1, [r7, #4]
 8005136:	683a      	ldr	r2, [r7, #0]
 8005138:	4613      	mov	r3, r2
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	1a9b      	subs	r3, r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	440b      	add	r3, r1
 8005142:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d108      	bne.n	800515e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6818      	ldr	r0, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005156:	461a      	mov	r2, r3
 8005158:	2101      	movs	r1, #1
 800515a:	f002 fbc7 	bl	80078ec <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	b2db      	uxtb	r3, r3
 8005162:	4619      	mov	r1, r3
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f004 fb0d 	bl	8009784 <HAL_PCD_DataOutStageCallback>
 800516a:	e046      	b.n	80051fa <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4a26      	ldr	r2, [pc, #152]	; (8005208 <PCD_EP_OutXfrComplete_int+0x214>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d124      	bne.n	80051be <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00a      	beq.n	8005194 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	015a      	lsls	r2, r3, #5
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	4413      	add	r3, r2
 8005186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800518a:	461a      	mov	r2, r3
 800518c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005190:	6093      	str	r3, [r2, #8]
 8005192:	e032      	b.n	80051fa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	f003 0320 	and.w	r3, r3, #32
 800519a:	2b00      	cmp	r3, #0
 800519c:	d008      	beq.n	80051b0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051aa:	461a      	mov	r2, r3
 80051ac:	2320      	movs	r3, #32
 80051ae:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	4619      	mov	r1, r3
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f004 fae4 	bl	8009784 <HAL_PCD_DataOutStageCallback>
 80051bc:	e01d      	b.n	80051fa <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d114      	bne.n	80051ee <PCD_EP_OutXfrComplete_int+0x1fa>
 80051c4:	6879      	ldr	r1, [r7, #4]
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	4613      	mov	r3, r2
 80051ca:	00db      	lsls	r3, r3, #3
 80051cc:	1a9b      	subs	r3, r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	440b      	add	r3, r1
 80051d2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d108      	bne.n	80051ee <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6818      	ldr	r0, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80051e6:	461a      	mov	r2, r3
 80051e8:	2100      	movs	r1, #0
 80051ea:	f002 fb7f 	bl	80078ec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	4619      	mov	r1, r3
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f004 fac5 	bl	8009784 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3718      	adds	r7, #24
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	4f54300a 	.word	0x4f54300a
 8005208:	4f54310a 	.word	0x4f54310a

0800520c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	333c      	adds	r3, #60	; 0x3c
 8005224:	3304      	adds	r3, #4
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	015a      	lsls	r2, r3, #5
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	4413      	add	r3, r2
 8005232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	4a15      	ldr	r2, [pc, #84]	; (8005294 <PCD_EP_OutSetupPacket_int+0x88>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d90e      	bls.n	8005260 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005248:	2b00      	cmp	r3, #0
 800524a:	d009      	beq.n	8005260 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	4413      	add	r3, r2
 8005254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005258:	461a      	mov	r2, r3
 800525a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800525e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f004 fa7d 	bl	8009760 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	4a0a      	ldr	r2, [pc, #40]	; (8005294 <PCD_EP_OutSetupPacket_int+0x88>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d90c      	bls.n	8005288 <PCD_EP_OutSetupPacket_int+0x7c>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d108      	bne.n	8005288 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6818      	ldr	r0, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005280:	461a      	mov	r2, r3
 8005282:	2101      	movs	r1, #1
 8005284:	f002 fb32 	bl	80078ec <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3718      	adds	r7, #24
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	4f54300a 	.word	0x4f54300a

08005298 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	460b      	mov	r3, r1
 80052a2:	70fb      	strb	r3, [r7, #3]
 80052a4:	4613      	mov	r3, r2
 80052a6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80052b0:	78fb      	ldrb	r3, [r7, #3]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d107      	bne.n	80052c6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80052b6:	883b      	ldrh	r3, [r7, #0]
 80052b8:	0419      	lsls	r1, r3, #16
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	430a      	orrs	r2, r1
 80052c2:	629a      	str	r2, [r3, #40]	; 0x28
 80052c4:	e028      	b.n	8005318 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052cc:	0c1b      	lsrs	r3, r3, #16
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	4413      	add	r3, r2
 80052d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80052d4:	2300      	movs	r3, #0
 80052d6:	73fb      	strb	r3, [r7, #15]
 80052d8:	e00d      	b.n	80052f6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	7bfb      	ldrb	r3, [r7, #15]
 80052e0:	3340      	adds	r3, #64	; 0x40
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	0c1b      	lsrs	r3, r3, #16
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	4413      	add	r3, r2
 80052ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80052f0:	7bfb      	ldrb	r3, [r7, #15]
 80052f2:	3301      	adds	r3, #1
 80052f4:	73fb      	strb	r3, [r7, #15]
 80052f6:	7bfa      	ldrb	r2, [r7, #15]
 80052f8:	78fb      	ldrb	r3, [r7, #3]
 80052fa:	3b01      	subs	r3, #1
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d3ec      	bcc.n	80052da <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005300:	883b      	ldrh	r3, [r7, #0]
 8005302:	0418      	lsls	r0, r3, #16
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6819      	ldr	r1, [r3, #0]
 8005308:	78fb      	ldrb	r3, [r7, #3]
 800530a:	3b01      	subs	r3, #1
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	4302      	orrs	r2, r0
 8005310:	3340      	adds	r3, #64	; 0x40
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	440b      	add	r3, r1
 8005316:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
 800532e:	460b      	mov	r3, r1
 8005330:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	887a      	ldrh	r2, [r7, #2]
 8005338:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	460b      	mov	r3, r1
 8005352:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b086      	sub	sp, #24
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d101      	bne.n	8005372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e25b      	b.n	800582a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b00      	cmp	r3, #0
 800537c:	d075      	beq.n	800546a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800537e:	4ba3      	ldr	r3, [pc, #652]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f003 030c 	and.w	r3, r3, #12
 8005386:	2b04      	cmp	r3, #4
 8005388:	d00c      	beq.n	80053a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800538a:	4ba0      	ldr	r3, [pc, #640]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005392:	2b08      	cmp	r3, #8
 8005394:	d112      	bne.n	80053bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005396:	4b9d      	ldr	r3, [pc, #628]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800539e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053a2:	d10b      	bne.n	80053bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053a4:	4b99      	ldr	r3, [pc, #612]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d05b      	beq.n	8005468 <HAL_RCC_OscConfig+0x108>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d157      	bne.n	8005468 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e236      	b.n	800582a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053c4:	d106      	bne.n	80053d4 <HAL_RCC_OscConfig+0x74>
 80053c6:	4b91      	ldr	r3, [pc, #580]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a90      	ldr	r2, [pc, #576]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 80053cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053d0:	6013      	str	r3, [r2, #0]
 80053d2:	e01d      	b.n	8005410 <HAL_RCC_OscConfig+0xb0>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053dc:	d10c      	bne.n	80053f8 <HAL_RCC_OscConfig+0x98>
 80053de:	4b8b      	ldr	r3, [pc, #556]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a8a      	ldr	r2, [pc, #552]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 80053e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053e8:	6013      	str	r3, [r2, #0]
 80053ea:	4b88      	ldr	r3, [pc, #544]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a87      	ldr	r2, [pc, #540]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 80053f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053f4:	6013      	str	r3, [r2, #0]
 80053f6:	e00b      	b.n	8005410 <HAL_RCC_OscConfig+0xb0>
 80053f8:	4b84      	ldr	r3, [pc, #528]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a83      	ldr	r2, [pc, #524]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 80053fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005402:	6013      	str	r3, [r2, #0]
 8005404:	4b81      	ldr	r3, [pc, #516]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a80      	ldr	r2, [pc, #512]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 800540a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800540e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d013      	beq.n	8005440 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005418:	f7fb fd9e 	bl	8000f58 <HAL_GetTick>
 800541c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800541e:	e008      	b.n	8005432 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005420:	f7fb fd9a 	bl	8000f58 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b64      	cmp	r3, #100	; 0x64
 800542c:	d901      	bls.n	8005432 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e1fb      	b.n	800582a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005432:	4b76      	ldr	r3, [pc, #472]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d0f0      	beq.n	8005420 <HAL_RCC_OscConfig+0xc0>
 800543e:	e014      	b.n	800546a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005440:	f7fb fd8a 	bl	8000f58 <HAL_GetTick>
 8005444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005448:	f7fb fd86 	bl	8000f58 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b64      	cmp	r3, #100	; 0x64
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e1e7      	b.n	800582a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800545a:	4b6c      	ldr	r3, [pc, #432]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1f0      	bne.n	8005448 <HAL_RCC_OscConfig+0xe8>
 8005466:	e000      	b.n	800546a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d063      	beq.n	800553e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005476:	4b65      	ldr	r3, [pc, #404]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f003 030c 	and.w	r3, r3, #12
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00b      	beq.n	800549a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005482:	4b62      	ldr	r3, [pc, #392]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800548a:	2b08      	cmp	r3, #8
 800548c:	d11c      	bne.n	80054c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800548e:	4b5f      	ldr	r3, [pc, #380]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d116      	bne.n	80054c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800549a:	4b5c      	ldr	r3, [pc, #368]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d005      	beq.n	80054b2 <HAL_RCC_OscConfig+0x152>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d001      	beq.n	80054b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e1bb      	b.n	800582a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054b2:	4b56      	ldr	r3, [pc, #344]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	00db      	lsls	r3, r3, #3
 80054c0:	4952      	ldr	r1, [pc, #328]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054c6:	e03a      	b.n	800553e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d020      	beq.n	8005512 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054d0:	4b4f      	ldr	r3, [pc, #316]	; (8005610 <HAL_RCC_OscConfig+0x2b0>)
 80054d2:	2201      	movs	r2, #1
 80054d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d6:	f7fb fd3f 	bl	8000f58 <HAL_GetTick>
 80054da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054dc:	e008      	b.n	80054f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054de:	f7fb fd3b 	bl	8000f58 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d901      	bls.n	80054f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e19c      	b.n	800582a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054f0:	4b46      	ldr	r3, [pc, #280]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0302 	and.w	r3, r3, #2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d0f0      	beq.n	80054de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054fc:	4b43      	ldr	r3, [pc, #268]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	00db      	lsls	r3, r3, #3
 800550a:	4940      	ldr	r1, [pc, #256]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 800550c:	4313      	orrs	r3, r2
 800550e:	600b      	str	r3, [r1, #0]
 8005510:	e015      	b.n	800553e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005512:	4b3f      	ldr	r3, [pc, #252]	; (8005610 <HAL_RCC_OscConfig+0x2b0>)
 8005514:	2200      	movs	r2, #0
 8005516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005518:	f7fb fd1e 	bl	8000f58 <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800551e:	e008      	b.n	8005532 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005520:	f7fb fd1a 	bl	8000f58 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b02      	cmp	r3, #2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e17b      	b.n	800582a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005532:	4b36      	ldr	r3, [pc, #216]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1f0      	bne.n	8005520 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0308 	and.w	r3, r3, #8
 8005546:	2b00      	cmp	r3, #0
 8005548:	d030      	beq.n	80055ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d016      	beq.n	8005580 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005552:	4b30      	ldr	r3, [pc, #192]	; (8005614 <HAL_RCC_OscConfig+0x2b4>)
 8005554:	2201      	movs	r2, #1
 8005556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005558:	f7fb fcfe 	bl	8000f58 <HAL_GetTick>
 800555c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800555e:	e008      	b.n	8005572 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005560:	f7fb fcfa 	bl	8000f58 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b02      	cmp	r3, #2
 800556c:	d901      	bls.n	8005572 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e15b      	b.n	800582a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005572:	4b26      	ldr	r3, [pc, #152]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 8005574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d0f0      	beq.n	8005560 <HAL_RCC_OscConfig+0x200>
 800557e:	e015      	b.n	80055ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005580:	4b24      	ldr	r3, [pc, #144]	; (8005614 <HAL_RCC_OscConfig+0x2b4>)
 8005582:	2200      	movs	r2, #0
 8005584:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005586:	f7fb fce7 	bl	8000f58 <HAL_GetTick>
 800558a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800558c:	e008      	b.n	80055a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800558e:	f7fb fce3 	bl	8000f58 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	2b02      	cmp	r3, #2
 800559a:	d901      	bls.n	80055a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e144      	b.n	800582a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055a0:	4b1a      	ldr	r3, [pc, #104]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 80055a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055a4:	f003 0302 	and.w	r3, r3, #2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1f0      	bne.n	800558e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0304 	and.w	r3, r3, #4
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 80a0 	beq.w	80056fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055ba:	2300      	movs	r3, #0
 80055bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055be:	4b13      	ldr	r3, [pc, #76]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 80055c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10f      	bne.n	80055ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055ca:	2300      	movs	r3, #0
 80055cc:	60bb      	str	r3, [r7, #8]
 80055ce:	4b0f      	ldr	r3, [pc, #60]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 80055d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d2:	4a0e      	ldr	r2, [pc, #56]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 80055d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055d8:	6413      	str	r3, [r2, #64]	; 0x40
 80055da:	4b0c      	ldr	r3, [pc, #48]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 80055dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055e2:	60bb      	str	r3, [r7, #8]
 80055e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055e6:	2301      	movs	r3, #1
 80055e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055ea:	4b0b      	ldr	r3, [pc, #44]	; (8005618 <HAL_RCC_OscConfig+0x2b8>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d121      	bne.n	800563a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055f6:	4b08      	ldr	r3, [pc, #32]	; (8005618 <HAL_RCC_OscConfig+0x2b8>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a07      	ldr	r2, [pc, #28]	; (8005618 <HAL_RCC_OscConfig+0x2b8>)
 80055fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005600:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005602:	f7fb fca9 	bl	8000f58 <HAL_GetTick>
 8005606:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005608:	e011      	b.n	800562e <HAL_RCC_OscConfig+0x2ce>
 800560a:	bf00      	nop
 800560c:	40023800 	.word	0x40023800
 8005610:	42470000 	.word	0x42470000
 8005614:	42470e80 	.word	0x42470e80
 8005618:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800561c:	f7fb fc9c 	bl	8000f58 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b02      	cmp	r3, #2
 8005628:	d901      	bls.n	800562e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e0fd      	b.n	800582a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800562e:	4b81      	ldr	r3, [pc, #516]	; (8005834 <HAL_RCC_OscConfig+0x4d4>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005636:	2b00      	cmp	r3, #0
 8005638:	d0f0      	beq.n	800561c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d106      	bne.n	8005650 <HAL_RCC_OscConfig+0x2f0>
 8005642:	4b7d      	ldr	r3, [pc, #500]	; (8005838 <HAL_RCC_OscConfig+0x4d8>)
 8005644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005646:	4a7c      	ldr	r2, [pc, #496]	; (8005838 <HAL_RCC_OscConfig+0x4d8>)
 8005648:	f043 0301 	orr.w	r3, r3, #1
 800564c:	6713      	str	r3, [r2, #112]	; 0x70
 800564e:	e01c      	b.n	800568a <HAL_RCC_OscConfig+0x32a>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	2b05      	cmp	r3, #5
 8005656:	d10c      	bne.n	8005672 <HAL_RCC_OscConfig+0x312>
 8005658:	4b77      	ldr	r3, [pc, #476]	; (8005838 <HAL_RCC_OscConfig+0x4d8>)
 800565a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800565c:	4a76      	ldr	r2, [pc, #472]	; (8005838 <HAL_RCC_OscConfig+0x4d8>)
 800565e:	f043 0304 	orr.w	r3, r3, #4
 8005662:	6713      	str	r3, [r2, #112]	; 0x70
 8005664:	4b74      	ldr	r3, [pc, #464]	; (8005838 <HAL_RCC_OscConfig+0x4d8>)
 8005666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005668:	4a73      	ldr	r2, [pc, #460]	; (8005838 <HAL_RCC_OscConfig+0x4d8>)
 800566a:	f043 0301 	orr.w	r3, r3, #1
 800566e:	6713      	str	r3, [r2, #112]	; 0x70
 8005670:	e00b      	b.n	800568a <HAL_RCC_OscConfig+0x32a>
 8005672:	4b71      	ldr	r3, [pc, #452]	; (8005838 <HAL_RCC_OscConfig+0x4d8>)
 8005674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005676:	4a70      	ldr	r2, [pc, #448]	; (8005838 <HAL_RCC_OscConfig+0x4d8>)
 8005678:	f023 0301 	bic.w	r3, r3, #1
 800567c:	6713      	str	r3, [r2, #112]	; 0x70
 800567e:	4b6e      	ldr	r3, [pc, #440]	; (8005838 <HAL_RCC_OscConfig+0x4d8>)
 8005680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005682:	4a6d      	ldr	r2, [pc, #436]	; (8005838 <HAL_RCC_OscConfig+0x4d8>)
 8005684:	f023 0304 	bic.w	r3, r3, #4
 8005688:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d015      	beq.n	80056be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005692:	f7fb fc61 	bl	8000f58 <HAL_GetTick>
 8005696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005698:	e00a      	b.n	80056b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800569a:	f7fb fc5d 	bl	8000f58 <HAL_GetTick>
 800569e:	4602      	mov	r2, r0
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d901      	bls.n	80056b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e0bc      	b.n	800582a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056b0:	4b61      	ldr	r3, [pc, #388]	; (8005838 <HAL_RCC_OscConfig+0x4d8>)
 80056b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d0ee      	beq.n	800569a <HAL_RCC_OscConfig+0x33a>
 80056bc:	e014      	b.n	80056e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056be:	f7fb fc4b 	bl	8000f58 <HAL_GetTick>
 80056c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056c4:	e00a      	b.n	80056dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056c6:	f7fb fc47 	bl	8000f58 <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d901      	bls.n	80056dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e0a6      	b.n	800582a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056dc:	4b56      	ldr	r3, [pc, #344]	; (8005838 <HAL_RCC_OscConfig+0x4d8>)
 80056de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e0:	f003 0302 	and.w	r3, r3, #2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1ee      	bne.n	80056c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056e8:	7dfb      	ldrb	r3, [r7, #23]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d105      	bne.n	80056fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056ee:	4b52      	ldr	r3, [pc, #328]	; (8005838 <HAL_RCC_OscConfig+0x4d8>)
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	4a51      	ldr	r2, [pc, #324]	; (8005838 <HAL_RCC_OscConfig+0x4d8>)
 80056f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f000 8092 	beq.w	8005828 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005704:	4b4c      	ldr	r3, [pc, #304]	; (8005838 <HAL_RCC_OscConfig+0x4d8>)
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f003 030c 	and.w	r3, r3, #12
 800570c:	2b08      	cmp	r3, #8
 800570e:	d05c      	beq.n	80057ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	2b02      	cmp	r3, #2
 8005716:	d141      	bne.n	800579c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005718:	4b48      	ldr	r3, [pc, #288]	; (800583c <HAL_RCC_OscConfig+0x4dc>)
 800571a:	2200      	movs	r2, #0
 800571c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800571e:	f7fb fc1b 	bl	8000f58 <HAL_GetTick>
 8005722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005724:	e008      	b.n	8005738 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005726:	f7fb fc17 	bl	8000f58 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	2b02      	cmp	r3, #2
 8005732:	d901      	bls.n	8005738 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e078      	b.n	800582a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005738:	4b3f      	ldr	r3, [pc, #252]	; (8005838 <HAL_RCC_OscConfig+0x4d8>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1f0      	bne.n	8005726 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	69da      	ldr	r2, [r3, #28]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a1b      	ldr	r3, [r3, #32]
 800574c:	431a      	orrs	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005752:	019b      	lsls	r3, r3, #6
 8005754:	431a      	orrs	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575a:	085b      	lsrs	r3, r3, #1
 800575c:	3b01      	subs	r3, #1
 800575e:	041b      	lsls	r3, r3, #16
 8005760:	431a      	orrs	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005766:	061b      	lsls	r3, r3, #24
 8005768:	4933      	ldr	r1, [pc, #204]	; (8005838 <HAL_RCC_OscConfig+0x4d8>)
 800576a:	4313      	orrs	r3, r2
 800576c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800576e:	4b33      	ldr	r3, [pc, #204]	; (800583c <HAL_RCC_OscConfig+0x4dc>)
 8005770:	2201      	movs	r2, #1
 8005772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005774:	f7fb fbf0 	bl	8000f58 <HAL_GetTick>
 8005778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800577a:	e008      	b.n	800578e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800577c:	f7fb fbec 	bl	8000f58 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b02      	cmp	r3, #2
 8005788:	d901      	bls.n	800578e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e04d      	b.n	800582a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800578e:	4b2a      	ldr	r3, [pc, #168]	; (8005838 <HAL_RCC_OscConfig+0x4d8>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d0f0      	beq.n	800577c <HAL_RCC_OscConfig+0x41c>
 800579a:	e045      	b.n	8005828 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800579c:	4b27      	ldr	r3, [pc, #156]	; (800583c <HAL_RCC_OscConfig+0x4dc>)
 800579e:	2200      	movs	r2, #0
 80057a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a2:	f7fb fbd9 	bl	8000f58 <HAL_GetTick>
 80057a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057a8:	e008      	b.n	80057bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057aa:	f7fb fbd5 	bl	8000f58 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d901      	bls.n	80057bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e036      	b.n	800582a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057bc:	4b1e      	ldr	r3, [pc, #120]	; (8005838 <HAL_RCC_OscConfig+0x4d8>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1f0      	bne.n	80057aa <HAL_RCC_OscConfig+0x44a>
 80057c8:	e02e      	b.n	8005828 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d101      	bne.n	80057d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e029      	b.n	800582a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057d6:	4b18      	ldr	r3, [pc, #96]	; (8005838 <HAL_RCC_OscConfig+0x4d8>)
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	69db      	ldr	r3, [r3, #28]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d11c      	bne.n	8005824 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d115      	bne.n	8005824 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80057fe:	4013      	ands	r3, r2
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005804:	4293      	cmp	r3, r2
 8005806:	d10d      	bne.n	8005824 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005812:	429a      	cmp	r2, r3
 8005814:	d106      	bne.n	8005824 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005820:	429a      	cmp	r2, r3
 8005822:	d001      	beq.n	8005828 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e000      	b.n	800582a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3718      	adds	r7, #24
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	40007000 	.word	0x40007000
 8005838:	40023800 	.word	0x40023800
 800583c:	42470060 	.word	0x42470060

08005840 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d101      	bne.n	8005854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e0cc      	b.n	80059ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005854:	4b68      	ldr	r3, [pc, #416]	; (80059f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 030f 	and.w	r3, r3, #15
 800585c:	683a      	ldr	r2, [r7, #0]
 800585e:	429a      	cmp	r2, r3
 8005860:	d90c      	bls.n	800587c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005862:	4b65      	ldr	r3, [pc, #404]	; (80059f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005864:	683a      	ldr	r2, [r7, #0]
 8005866:	b2d2      	uxtb	r2, r2
 8005868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800586a:	4b63      	ldr	r3, [pc, #396]	; (80059f8 <HAL_RCC_ClockConfig+0x1b8>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 030f 	and.w	r3, r3, #15
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	429a      	cmp	r2, r3
 8005876:	d001      	beq.n	800587c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e0b8      	b.n	80059ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d020      	beq.n	80058ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0304 	and.w	r3, r3, #4
 8005890:	2b00      	cmp	r3, #0
 8005892:	d005      	beq.n	80058a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005894:	4b59      	ldr	r3, [pc, #356]	; (80059fc <HAL_RCC_ClockConfig+0x1bc>)
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	4a58      	ldr	r2, [pc, #352]	; (80059fc <HAL_RCC_ClockConfig+0x1bc>)
 800589a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800589e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0308 	and.w	r3, r3, #8
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d005      	beq.n	80058b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058ac:	4b53      	ldr	r3, [pc, #332]	; (80059fc <HAL_RCC_ClockConfig+0x1bc>)
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	4a52      	ldr	r2, [pc, #328]	; (80059fc <HAL_RCC_ClockConfig+0x1bc>)
 80058b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058b8:	4b50      	ldr	r3, [pc, #320]	; (80059fc <HAL_RCC_ClockConfig+0x1bc>)
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	494d      	ldr	r1, [pc, #308]	; (80059fc <HAL_RCC_ClockConfig+0x1bc>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d044      	beq.n	8005960 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d107      	bne.n	80058ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058de:	4b47      	ldr	r3, [pc, #284]	; (80059fc <HAL_RCC_ClockConfig+0x1bc>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d119      	bne.n	800591e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e07f      	b.n	80059ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d003      	beq.n	80058fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058fa:	2b03      	cmp	r3, #3
 80058fc:	d107      	bne.n	800590e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058fe:	4b3f      	ldr	r3, [pc, #252]	; (80059fc <HAL_RCC_ClockConfig+0x1bc>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d109      	bne.n	800591e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e06f      	b.n	80059ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800590e:	4b3b      	ldr	r3, [pc, #236]	; (80059fc <HAL_RCC_ClockConfig+0x1bc>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e067      	b.n	80059ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800591e:	4b37      	ldr	r3, [pc, #220]	; (80059fc <HAL_RCC_ClockConfig+0x1bc>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f023 0203 	bic.w	r2, r3, #3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	4934      	ldr	r1, [pc, #208]	; (80059fc <HAL_RCC_ClockConfig+0x1bc>)
 800592c:	4313      	orrs	r3, r2
 800592e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005930:	f7fb fb12 	bl	8000f58 <HAL_GetTick>
 8005934:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005936:	e00a      	b.n	800594e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005938:	f7fb fb0e 	bl	8000f58 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	f241 3288 	movw	r2, #5000	; 0x1388
 8005946:	4293      	cmp	r3, r2
 8005948:	d901      	bls.n	800594e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e04f      	b.n	80059ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800594e:	4b2b      	ldr	r3, [pc, #172]	; (80059fc <HAL_RCC_ClockConfig+0x1bc>)
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f003 020c 	and.w	r2, r3, #12
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	429a      	cmp	r2, r3
 800595e:	d1eb      	bne.n	8005938 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005960:	4b25      	ldr	r3, [pc, #148]	; (80059f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 030f 	and.w	r3, r3, #15
 8005968:	683a      	ldr	r2, [r7, #0]
 800596a:	429a      	cmp	r2, r3
 800596c:	d20c      	bcs.n	8005988 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800596e:	4b22      	ldr	r3, [pc, #136]	; (80059f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005970:	683a      	ldr	r2, [r7, #0]
 8005972:	b2d2      	uxtb	r2, r2
 8005974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005976:	4b20      	ldr	r3, [pc, #128]	; (80059f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 030f 	and.w	r3, r3, #15
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	429a      	cmp	r2, r3
 8005982:	d001      	beq.n	8005988 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e032      	b.n	80059ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0304 	and.w	r3, r3, #4
 8005990:	2b00      	cmp	r3, #0
 8005992:	d008      	beq.n	80059a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005994:	4b19      	ldr	r3, [pc, #100]	; (80059fc <HAL_RCC_ClockConfig+0x1bc>)
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	4916      	ldr	r1, [pc, #88]	; (80059fc <HAL_RCC_ClockConfig+0x1bc>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0308 	and.w	r3, r3, #8
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d009      	beq.n	80059c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059b2:	4b12      	ldr	r3, [pc, #72]	; (80059fc <HAL_RCC_ClockConfig+0x1bc>)
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	00db      	lsls	r3, r3, #3
 80059c0:	490e      	ldr	r1, [pc, #56]	; (80059fc <HAL_RCC_ClockConfig+0x1bc>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059c6:	f000 f821 	bl	8005a0c <HAL_RCC_GetSysClockFreq>
 80059ca:	4601      	mov	r1, r0
 80059cc:	4b0b      	ldr	r3, [pc, #44]	; (80059fc <HAL_RCC_ClockConfig+0x1bc>)
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	091b      	lsrs	r3, r3, #4
 80059d2:	f003 030f 	and.w	r3, r3, #15
 80059d6:	4a0a      	ldr	r2, [pc, #40]	; (8005a00 <HAL_RCC_ClockConfig+0x1c0>)
 80059d8:	5cd3      	ldrb	r3, [r2, r3]
 80059da:	fa21 f303 	lsr.w	r3, r1, r3
 80059de:	4a09      	ldr	r2, [pc, #36]	; (8005a04 <HAL_RCC_ClockConfig+0x1c4>)
 80059e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80059e2:	4b09      	ldr	r3, [pc, #36]	; (8005a08 <HAL_RCC_ClockConfig+0x1c8>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7fb fa72 	bl	8000ed0 <HAL_InitTick>

  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	40023c00 	.word	0x40023c00
 80059fc:	40023800 	.word	0x40023800
 8005a00:	0800a5a0 	.word	0x0800a5a0
 8005a04:	20000004 	.word	0x20000004
 8005a08:	20000008 	.word	0x20000008

08005a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a12:	2300      	movs	r3, #0
 8005a14:	607b      	str	r3, [r7, #4]
 8005a16:	2300      	movs	r3, #0
 8005a18:	60fb      	str	r3, [r7, #12]
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a22:	4b50      	ldr	r3, [pc, #320]	; (8005b64 <HAL_RCC_GetSysClockFreq+0x158>)
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f003 030c 	and.w	r3, r3, #12
 8005a2a:	2b04      	cmp	r3, #4
 8005a2c:	d007      	beq.n	8005a3e <HAL_RCC_GetSysClockFreq+0x32>
 8005a2e:	2b08      	cmp	r3, #8
 8005a30:	d008      	beq.n	8005a44 <HAL_RCC_GetSysClockFreq+0x38>
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f040 808d 	bne.w	8005b52 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a38:	4b4b      	ldr	r3, [pc, #300]	; (8005b68 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005a3a:	60bb      	str	r3, [r7, #8]
       break;
 8005a3c:	e08c      	b.n	8005b58 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a3e:	4b4b      	ldr	r3, [pc, #300]	; (8005b6c <HAL_RCC_GetSysClockFreq+0x160>)
 8005a40:	60bb      	str	r3, [r7, #8]
      break;
 8005a42:	e089      	b.n	8005b58 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a44:	4b47      	ldr	r3, [pc, #284]	; (8005b64 <HAL_RCC_GetSysClockFreq+0x158>)
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a4c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a4e:	4b45      	ldr	r3, [pc, #276]	; (8005b64 <HAL_RCC_GetSysClockFreq+0x158>)
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d023      	beq.n	8005aa2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a5a:	4b42      	ldr	r3, [pc, #264]	; (8005b64 <HAL_RCC_GetSysClockFreq+0x158>)
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	099b      	lsrs	r3, r3, #6
 8005a60:	f04f 0400 	mov.w	r4, #0
 8005a64:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005a68:	f04f 0200 	mov.w	r2, #0
 8005a6c:	ea03 0501 	and.w	r5, r3, r1
 8005a70:	ea04 0602 	and.w	r6, r4, r2
 8005a74:	4a3d      	ldr	r2, [pc, #244]	; (8005b6c <HAL_RCC_GetSysClockFreq+0x160>)
 8005a76:	fb02 f106 	mul.w	r1, r2, r6
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	fb02 f205 	mul.w	r2, r2, r5
 8005a80:	440a      	add	r2, r1
 8005a82:	493a      	ldr	r1, [pc, #232]	; (8005b6c <HAL_RCC_GetSysClockFreq+0x160>)
 8005a84:	fba5 0101 	umull	r0, r1, r5, r1
 8005a88:	1853      	adds	r3, r2, r1
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f04f 0400 	mov.w	r4, #0
 8005a92:	461a      	mov	r2, r3
 8005a94:	4623      	mov	r3, r4
 8005a96:	f7fa fbf3 	bl	8000280 <__aeabi_uldivmod>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	460c      	mov	r4, r1
 8005a9e:	60fb      	str	r3, [r7, #12]
 8005aa0:	e049      	b.n	8005b36 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aa2:	4b30      	ldr	r3, [pc, #192]	; (8005b64 <HAL_RCC_GetSysClockFreq+0x158>)
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	099b      	lsrs	r3, r3, #6
 8005aa8:	f04f 0400 	mov.w	r4, #0
 8005aac:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005ab0:	f04f 0200 	mov.w	r2, #0
 8005ab4:	ea03 0501 	and.w	r5, r3, r1
 8005ab8:	ea04 0602 	and.w	r6, r4, r2
 8005abc:	4629      	mov	r1, r5
 8005abe:	4632      	mov	r2, r6
 8005ac0:	f04f 0300 	mov.w	r3, #0
 8005ac4:	f04f 0400 	mov.w	r4, #0
 8005ac8:	0154      	lsls	r4, r2, #5
 8005aca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005ace:	014b      	lsls	r3, r1, #5
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	4622      	mov	r2, r4
 8005ad4:	1b49      	subs	r1, r1, r5
 8005ad6:	eb62 0206 	sbc.w	r2, r2, r6
 8005ada:	f04f 0300 	mov.w	r3, #0
 8005ade:	f04f 0400 	mov.w	r4, #0
 8005ae2:	0194      	lsls	r4, r2, #6
 8005ae4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005ae8:	018b      	lsls	r3, r1, #6
 8005aea:	1a5b      	subs	r3, r3, r1
 8005aec:	eb64 0402 	sbc.w	r4, r4, r2
 8005af0:	f04f 0100 	mov.w	r1, #0
 8005af4:	f04f 0200 	mov.w	r2, #0
 8005af8:	00e2      	lsls	r2, r4, #3
 8005afa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005afe:	00d9      	lsls	r1, r3, #3
 8005b00:	460b      	mov	r3, r1
 8005b02:	4614      	mov	r4, r2
 8005b04:	195b      	adds	r3, r3, r5
 8005b06:	eb44 0406 	adc.w	r4, r4, r6
 8005b0a:	f04f 0100 	mov.w	r1, #0
 8005b0e:	f04f 0200 	mov.w	r2, #0
 8005b12:	02a2      	lsls	r2, r4, #10
 8005b14:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005b18:	0299      	lsls	r1, r3, #10
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4614      	mov	r4, r2
 8005b1e:	4618      	mov	r0, r3
 8005b20:	4621      	mov	r1, r4
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f04f 0400 	mov.w	r4, #0
 8005b28:	461a      	mov	r2, r3
 8005b2a:	4623      	mov	r3, r4
 8005b2c:	f7fa fba8 	bl	8000280 <__aeabi_uldivmod>
 8005b30:	4603      	mov	r3, r0
 8005b32:	460c      	mov	r4, r1
 8005b34:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b36:	4b0b      	ldr	r3, [pc, #44]	; (8005b64 <HAL_RCC_GetSysClockFreq+0x158>)
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	0c1b      	lsrs	r3, r3, #16
 8005b3c:	f003 0303 	and.w	r3, r3, #3
 8005b40:	3301      	adds	r3, #1
 8005b42:	005b      	lsls	r3, r3, #1
 8005b44:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b4e:	60bb      	str	r3, [r7, #8]
      break;
 8005b50:	e002      	b.n	8005b58 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b52:	4b05      	ldr	r3, [pc, #20]	; (8005b68 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005b54:	60bb      	str	r3, [r7, #8]
      break;
 8005b56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b58:	68bb      	ldr	r3, [r7, #8]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b62:	bf00      	nop
 8005b64:	40023800 	.word	0x40023800
 8005b68:	00f42400 	.word	0x00f42400
 8005b6c:	017d7840 	.word	0x017d7840

08005b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b70:	b480      	push	{r7}
 8005b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b74:	4b03      	ldr	r3, [pc, #12]	; (8005b84 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b76:	681b      	ldr	r3, [r3, #0]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	20000004 	.word	0x20000004

08005b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b8c:	f7ff fff0 	bl	8005b70 <HAL_RCC_GetHCLKFreq>
 8005b90:	4601      	mov	r1, r0
 8005b92:	4b05      	ldr	r3, [pc, #20]	; (8005ba8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	0a9b      	lsrs	r3, r3, #10
 8005b98:	f003 0307 	and.w	r3, r3, #7
 8005b9c:	4a03      	ldr	r2, [pc, #12]	; (8005bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b9e:	5cd3      	ldrb	r3, [r2, r3]
 8005ba0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	40023800 	.word	0x40023800
 8005bac:	0800a5b0 	.word	0x0800a5b0

08005bb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d101      	bne.n	8005bc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e056      	b.n	8005c70 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d106      	bne.n	8005be2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f7fa ff5b 	bl	8000a98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2202      	movs	r2, #2
 8005be6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bf8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	431a      	orrs	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	431a      	orrs	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	431a      	orrs	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	431a      	orrs	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c1e:	431a      	orrs	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	69db      	ldr	r3, [r3, #28]
 8005c24:	431a      	orrs	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	ea42 0103 	orr.w	r1, r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	0c1b      	lsrs	r3, r3, #16
 8005c40:	f003 0104 	and.w	r1, r3, #4
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	69da      	ldr	r2, [r3, #28]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c5e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3708      	adds	r7, #8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e01d      	b.n	8005cc6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d106      	bne.n	8005ca4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7fb f8a2 	bl	8000de8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	3304      	adds	r3, #4
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	4610      	mov	r0, r2
 8005cb8:	f000 f9fa 	bl	80060b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3708      	adds	r7, #8
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b082      	sub	sp, #8
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	f003 0302 	and.w	r3, r3, #2
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d122      	bne.n	8005d2a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d11b      	bne.n	8005d2a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f06f 0202 	mvn.w	r2, #2
 8005cfa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	699b      	ldr	r3, [r3, #24]
 8005d08:	f003 0303 	and.w	r3, r3, #3
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d003      	beq.n	8005d18 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 f9af 	bl	8006074 <HAL_TIM_IC_CaptureCallback>
 8005d16:	e005      	b.n	8005d24 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 f9a1 	bl	8006060 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f9b2 	bl	8006088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	2b04      	cmp	r3, #4
 8005d36:	d122      	bne.n	8005d7e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	f003 0304 	and.w	r3, r3, #4
 8005d42:	2b04      	cmp	r3, #4
 8005d44:	d11b      	bne.n	8005d7e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f06f 0204 	mvn.w	r2, #4
 8005d4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2202      	movs	r2, #2
 8005d54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d003      	beq.n	8005d6c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 f985 	bl	8006074 <HAL_TIM_IC_CaptureCallback>
 8005d6a:	e005      	b.n	8005d78 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f977 	bl	8006060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f988 	bl	8006088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	f003 0308 	and.w	r3, r3, #8
 8005d88:	2b08      	cmp	r3, #8
 8005d8a:	d122      	bne.n	8005dd2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	f003 0308 	and.w	r3, r3, #8
 8005d96:	2b08      	cmp	r3, #8
 8005d98:	d11b      	bne.n	8005dd2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f06f 0208 	mvn.w	r2, #8
 8005da2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2204      	movs	r2, #4
 8005da8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	69db      	ldr	r3, [r3, #28]
 8005db0:	f003 0303 	and.w	r3, r3, #3
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d003      	beq.n	8005dc0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 f95b 	bl	8006074 <HAL_TIM_IC_CaptureCallback>
 8005dbe:	e005      	b.n	8005dcc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 f94d 	bl	8006060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 f95e 	bl	8006088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	f003 0310 	and.w	r3, r3, #16
 8005ddc:	2b10      	cmp	r3, #16
 8005dde:	d122      	bne.n	8005e26 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	f003 0310 	and.w	r3, r3, #16
 8005dea:	2b10      	cmp	r3, #16
 8005dec:	d11b      	bne.n	8005e26 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f06f 0210 	mvn.w	r2, #16
 8005df6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2208      	movs	r2, #8
 8005dfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	69db      	ldr	r3, [r3, #28]
 8005e04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d003      	beq.n	8005e14 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 f931 	bl	8006074 <HAL_TIM_IC_CaptureCallback>
 8005e12:	e005      	b.n	8005e20 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 f923 	bl	8006060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 f934 	bl	8006088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d10e      	bne.n	8005e52 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d107      	bne.n	8005e52 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f06f 0201 	mvn.w	r2, #1
 8005e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 f8fd 	bl	800604c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e5c:	2b80      	cmp	r3, #128	; 0x80
 8005e5e:	d10e      	bne.n	8005e7e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e6a:	2b80      	cmp	r3, #128	; 0x80
 8005e6c:	d107      	bne.n	8005e7e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 faab 	bl	80063d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e88:	2b40      	cmp	r3, #64	; 0x40
 8005e8a:	d10e      	bne.n	8005eaa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e96:	2b40      	cmp	r3, #64	; 0x40
 8005e98:	d107      	bne.n	8005eaa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 f8f9 	bl	800609c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	f003 0320 	and.w	r3, r3, #32
 8005eb4:	2b20      	cmp	r3, #32
 8005eb6:	d10e      	bne.n	8005ed6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	f003 0320 	and.w	r3, r3, #32
 8005ec2:	2b20      	cmp	r3, #32
 8005ec4:	d107      	bne.n	8005ed6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f06f 0220 	mvn.w	r2, #32
 8005ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 fa75 	bl	80063c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ed6:	bf00      	nop
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b084      	sub	sp, #16
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
 8005ee6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d101      	bne.n	8005ef6 <HAL_TIM_ConfigClockSource+0x18>
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	e0a6      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x166>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2202      	movs	r2, #2
 8005f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f14:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f1c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2b40      	cmp	r3, #64	; 0x40
 8005f2c:	d067      	beq.n	8005ffe <HAL_TIM_ConfigClockSource+0x120>
 8005f2e:	2b40      	cmp	r3, #64	; 0x40
 8005f30:	d80b      	bhi.n	8005f4a <HAL_TIM_ConfigClockSource+0x6c>
 8005f32:	2b10      	cmp	r3, #16
 8005f34:	d073      	beq.n	800601e <HAL_TIM_ConfigClockSource+0x140>
 8005f36:	2b10      	cmp	r3, #16
 8005f38:	d802      	bhi.n	8005f40 <HAL_TIM_ConfigClockSource+0x62>
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d06f      	beq.n	800601e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005f3e:	e078      	b.n	8006032 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005f40:	2b20      	cmp	r3, #32
 8005f42:	d06c      	beq.n	800601e <HAL_TIM_ConfigClockSource+0x140>
 8005f44:	2b30      	cmp	r3, #48	; 0x30
 8005f46:	d06a      	beq.n	800601e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005f48:	e073      	b.n	8006032 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005f4a:	2b70      	cmp	r3, #112	; 0x70
 8005f4c:	d00d      	beq.n	8005f6a <HAL_TIM_ConfigClockSource+0x8c>
 8005f4e:	2b70      	cmp	r3, #112	; 0x70
 8005f50:	d804      	bhi.n	8005f5c <HAL_TIM_ConfigClockSource+0x7e>
 8005f52:	2b50      	cmp	r3, #80	; 0x50
 8005f54:	d033      	beq.n	8005fbe <HAL_TIM_ConfigClockSource+0xe0>
 8005f56:	2b60      	cmp	r3, #96	; 0x60
 8005f58:	d041      	beq.n	8005fde <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005f5a:	e06a      	b.n	8006032 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f60:	d066      	beq.n	8006030 <HAL_TIM_ConfigClockSource+0x152>
 8005f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f66:	d017      	beq.n	8005f98 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005f68:	e063      	b.n	8006032 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6818      	ldr	r0, [r3, #0]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	6899      	ldr	r1, [r3, #8]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	685a      	ldr	r2, [r3, #4]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	f000 f993 	bl	80062a4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f8c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	609a      	str	r2, [r3, #8]
      break;
 8005f96:	e04c      	b.n	8006032 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6818      	ldr	r0, [r3, #0]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	6899      	ldr	r1, [r3, #8]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	f000 f97c 	bl	80062a4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	689a      	ldr	r2, [r3, #8]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fba:	609a      	str	r2, [r3, #8]
      break;
 8005fbc:	e039      	b.n	8006032 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6818      	ldr	r0, [r3, #0]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	6859      	ldr	r1, [r3, #4]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	461a      	mov	r2, r3
 8005fcc:	f000 f8f0 	bl	80061b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2150      	movs	r1, #80	; 0x50
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f000 f949 	bl	800626e <TIM_ITRx_SetConfig>
      break;
 8005fdc:	e029      	b.n	8006032 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6818      	ldr	r0, [r3, #0]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	6859      	ldr	r1, [r3, #4]
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	461a      	mov	r2, r3
 8005fec:	f000 f90f 	bl	800620e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2160      	movs	r1, #96	; 0x60
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f000 f939 	bl	800626e <TIM_ITRx_SetConfig>
      break;
 8005ffc:	e019      	b.n	8006032 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6818      	ldr	r0, [r3, #0]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	6859      	ldr	r1, [r3, #4]
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	461a      	mov	r2, r3
 800600c:	f000 f8d0 	bl	80061b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2140      	movs	r1, #64	; 0x40
 8006016:	4618      	mov	r0, r3
 8006018:	f000 f929 	bl	800626e <TIM_ITRx_SetConfig>
      break;
 800601c:	e009      	b.n	8006032 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4619      	mov	r1, r3
 8006028:	4610      	mov	r0, r2
 800602a:	f000 f920 	bl	800626e <TIM_ITRx_SetConfig>
      break;
 800602e:	e000      	b.n	8006032 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006030:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800607c:	bf00      	nop
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a34      	ldr	r2, [pc, #208]	; (8006194 <TIM_Base_SetConfig+0xe4>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d00f      	beq.n	80060e8 <TIM_Base_SetConfig+0x38>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ce:	d00b      	beq.n	80060e8 <TIM_Base_SetConfig+0x38>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a31      	ldr	r2, [pc, #196]	; (8006198 <TIM_Base_SetConfig+0xe8>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d007      	beq.n	80060e8 <TIM_Base_SetConfig+0x38>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a30      	ldr	r2, [pc, #192]	; (800619c <TIM_Base_SetConfig+0xec>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d003      	beq.n	80060e8 <TIM_Base_SetConfig+0x38>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a2f      	ldr	r2, [pc, #188]	; (80061a0 <TIM_Base_SetConfig+0xf0>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d108      	bne.n	80060fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a25      	ldr	r2, [pc, #148]	; (8006194 <TIM_Base_SetConfig+0xe4>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d01b      	beq.n	800613a <TIM_Base_SetConfig+0x8a>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006108:	d017      	beq.n	800613a <TIM_Base_SetConfig+0x8a>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a22      	ldr	r2, [pc, #136]	; (8006198 <TIM_Base_SetConfig+0xe8>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d013      	beq.n	800613a <TIM_Base_SetConfig+0x8a>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a21      	ldr	r2, [pc, #132]	; (800619c <TIM_Base_SetConfig+0xec>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d00f      	beq.n	800613a <TIM_Base_SetConfig+0x8a>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a20      	ldr	r2, [pc, #128]	; (80061a0 <TIM_Base_SetConfig+0xf0>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d00b      	beq.n	800613a <TIM_Base_SetConfig+0x8a>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a1f      	ldr	r2, [pc, #124]	; (80061a4 <TIM_Base_SetConfig+0xf4>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d007      	beq.n	800613a <TIM_Base_SetConfig+0x8a>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a1e      	ldr	r2, [pc, #120]	; (80061a8 <TIM_Base_SetConfig+0xf8>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d003      	beq.n	800613a <TIM_Base_SetConfig+0x8a>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a1d      	ldr	r2, [pc, #116]	; (80061ac <TIM_Base_SetConfig+0xfc>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d108      	bne.n	800614c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	4313      	orrs	r3, r2
 800614a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	4313      	orrs	r3, r2
 8006158:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	689a      	ldr	r2, [r3, #8]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a08      	ldr	r2, [pc, #32]	; (8006194 <TIM_Base_SetConfig+0xe4>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d103      	bne.n	8006180 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	691a      	ldr	r2, [r3, #16]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	615a      	str	r2, [r3, #20]
}
 8006186:	bf00      	nop
 8006188:	3714      	adds	r7, #20
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	40010000 	.word	0x40010000
 8006198:	40000400 	.word	0x40000400
 800619c:	40000800 	.word	0x40000800
 80061a0:	40000c00 	.word	0x40000c00
 80061a4:	40014000 	.word	0x40014000
 80061a8:	40014400 	.word	0x40014400
 80061ac:	40014800 	.word	0x40014800

080061b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b087      	sub	sp, #28
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6a1b      	ldr	r3, [r3, #32]
 80061c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	f023 0201 	bic.w	r2, r3, #1
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	011b      	lsls	r3, r3, #4
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f023 030a 	bic.w	r3, r3, #10
 80061ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	621a      	str	r2, [r3, #32]
}
 8006202:	bf00      	nop
 8006204:	371c      	adds	r7, #28
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800620e:	b480      	push	{r7}
 8006210:	b087      	sub	sp, #28
 8006212:	af00      	add	r7, sp, #0
 8006214:	60f8      	str	r0, [r7, #12]
 8006216:	60b9      	str	r1, [r7, #8]
 8006218:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	f023 0210 	bic.w	r2, r3, #16
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6a1b      	ldr	r3, [r3, #32]
 8006230:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006238:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	031b      	lsls	r3, r3, #12
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	4313      	orrs	r3, r2
 8006242:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800624a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	011b      	lsls	r3, r3, #4
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	4313      	orrs	r3, r2
 8006254:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	621a      	str	r2, [r3, #32]
}
 8006262:	bf00      	nop
 8006264:	371c      	adds	r7, #28
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800626e:	b480      	push	{r7}
 8006270:	b085      	sub	sp, #20
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
 8006276:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006284:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006286:	683a      	ldr	r2, [r7, #0]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	4313      	orrs	r3, r2
 800628c:	f043 0307 	orr.w	r3, r3, #7
 8006290:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	609a      	str	r2, [r3, #8]
}
 8006298:	bf00      	nop
 800629a:	3714      	adds	r7, #20
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b087      	sub	sp, #28
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
 80062b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	021a      	lsls	r2, r3, #8
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	431a      	orrs	r2, r3
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	609a      	str	r2, [r3, #8]
}
 80062d8:	bf00      	nop
 80062da:	371c      	adds	r7, #28
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d101      	bne.n	80062fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062f8:	2302      	movs	r3, #2
 80062fa:	e050      	b.n	800639e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2202      	movs	r2, #2
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006322:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	4313      	orrs	r3, r2
 800632c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a1c      	ldr	r2, [pc, #112]	; (80063ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d018      	beq.n	8006372 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006348:	d013      	beq.n	8006372 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a18      	ldr	r2, [pc, #96]	; (80063b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d00e      	beq.n	8006372 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a16      	ldr	r2, [pc, #88]	; (80063b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d009      	beq.n	8006372 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a15      	ldr	r2, [pc, #84]	; (80063b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d004      	beq.n	8006372 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a13      	ldr	r2, [pc, #76]	; (80063bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d10c      	bne.n	800638c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006378:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	68ba      	ldr	r2, [r7, #8]
 8006380:	4313      	orrs	r3, r2
 8006382:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3714      	adds	r7, #20
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	40010000 	.word	0x40010000
 80063b0:	40000400 	.word	0x40000400
 80063b4:	40000800 	.word	0x40000800
 80063b8:	40000c00 	.word	0x40000c00
 80063bc:	40014000 	.word	0x40014000

080063c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063e8:	b084      	sub	sp, #16
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b084      	sub	sp, #16
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
 80063f2:	f107 001c 	add.w	r0, r7, #28
 80063f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80063fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d122      	bne.n	8006446 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006404:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006414:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800642a:	2b01      	cmp	r3, #1
 800642c:	d105      	bne.n	800643a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f001 fab4 	bl	80079a8 <USB_CoreReset>
 8006440:	4603      	mov	r3, r0
 8006442:	73fb      	strb	r3, [r7, #15]
 8006444:	e01a      	b.n	800647c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f001 faa8 	bl	80079a8 <USB_CoreReset>
 8006458:	4603      	mov	r3, r0
 800645a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800645c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800645e:	2b00      	cmp	r3, #0
 8006460:	d106      	bne.n	8006470 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006466:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	639a      	str	r2, [r3, #56]	; 0x38
 800646e:	e005      	b.n	800647c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006474:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800647c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647e:	2b01      	cmp	r3, #1
 8006480:	d10b      	bne.n	800649a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	f043 0206 	orr.w	r2, r3, #6
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	f043 0220 	orr.w	r2, r3, #32
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800649a:	7bfb      	ldrb	r3, [r7, #15]
}
 800649c:	4618      	mov	r0, r3
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064a6:	b004      	add	sp, #16
 80064a8:	4770      	bx	lr
	...

080064ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b087      	sub	sp, #28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	4613      	mov	r3, r2
 80064b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80064ba:	79fb      	ldrb	r3, [r7, #7]
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d165      	bne.n	800658c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	4a41      	ldr	r2, [pc, #260]	; (80065c8 <USB_SetTurnaroundTime+0x11c>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d906      	bls.n	80064d6 <USB_SetTurnaroundTime+0x2a>
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	4a40      	ldr	r2, [pc, #256]	; (80065cc <USB_SetTurnaroundTime+0x120>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d802      	bhi.n	80064d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80064d0:	230f      	movs	r3, #15
 80064d2:	617b      	str	r3, [r7, #20]
 80064d4:	e062      	b.n	800659c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	4a3c      	ldr	r2, [pc, #240]	; (80065cc <USB_SetTurnaroundTime+0x120>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d906      	bls.n	80064ec <USB_SetTurnaroundTime+0x40>
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	4a3b      	ldr	r2, [pc, #236]	; (80065d0 <USB_SetTurnaroundTime+0x124>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d802      	bhi.n	80064ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80064e6:	230e      	movs	r3, #14
 80064e8:	617b      	str	r3, [r7, #20]
 80064ea:	e057      	b.n	800659c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	4a38      	ldr	r2, [pc, #224]	; (80065d0 <USB_SetTurnaroundTime+0x124>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d906      	bls.n	8006502 <USB_SetTurnaroundTime+0x56>
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	4a37      	ldr	r2, [pc, #220]	; (80065d4 <USB_SetTurnaroundTime+0x128>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d802      	bhi.n	8006502 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80064fc:	230d      	movs	r3, #13
 80064fe:	617b      	str	r3, [r7, #20]
 8006500:	e04c      	b.n	800659c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	4a33      	ldr	r2, [pc, #204]	; (80065d4 <USB_SetTurnaroundTime+0x128>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d906      	bls.n	8006518 <USB_SetTurnaroundTime+0x6c>
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	4a32      	ldr	r2, [pc, #200]	; (80065d8 <USB_SetTurnaroundTime+0x12c>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d802      	bhi.n	8006518 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006512:	230c      	movs	r3, #12
 8006514:	617b      	str	r3, [r7, #20]
 8006516:	e041      	b.n	800659c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	4a2f      	ldr	r2, [pc, #188]	; (80065d8 <USB_SetTurnaroundTime+0x12c>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d906      	bls.n	800652e <USB_SetTurnaroundTime+0x82>
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	4a2e      	ldr	r2, [pc, #184]	; (80065dc <USB_SetTurnaroundTime+0x130>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d802      	bhi.n	800652e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006528:	230b      	movs	r3, #11
 800652a:	617b      	str	r3, [r7, #20]
 800652c:	e036      	b.n	800659c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	4a2a      	ldr	r2, [pc, #168]	; (80065dc <USB_SetTurnaroundTime+0x130>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d906      	bls.n	8006544 <USB_SetTurnaroundTime+0x98>
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	4a29      	ldr	r2, [pc, #164]	; (80065e0 <USB_SetTurnaroundTime+0x134>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d802      	bhi.n	8006544 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800653e:	230a      	movs	r3, #10
 8006540:	617b      	str	r3, [r7, #20]
 8006542:	e02b      	b.n	800659c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	4a26      	ldr	r2, [pc, #152]	; (80065e0 <USB_SetTurnaroundTime+0x134>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d906      	bls.n	800655a <USB_SetTurnaroundTime+0xae>
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	4a25      	ldr	r2, [pc, #148]	; (80065e4 <USB_SetTurnaroundTime+0x138>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d802      	bhi.n	800655a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006554:	2309      	movs	r3, #9
 8006556:	617b      	str	r3, [r7, #20]
 8006558:	e020      	b.n	800659c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	4a21      	ldr	r2, [pc, #132]	; (80065e4 <USB_SetTurnaroundTime+0x138>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d906      	bls.n	8006570 <USB_SetTurnaroundTime+0xc4>
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	4a20      	ldr	r2, [pc, #128]	; (80065e8 <USB_SetTurnaroundTime+0x13c>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d802      	bhi.n	8006570 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800656a:	2308      	movs	r3, #8
 800656c:	617b      	str	r3, [r7, #20]
 800656e:	e015      	b.n	800659c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	4a1d      	ldr	r2, [pc, #116]	; (80065e8 <USB_SetTurnaroundTime+0x13c>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d906      	bls.n	8006586 <USB_SetTurnaroundTime+0xda>
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	4a1c      	ldr	r2, [pc, #112]	; (80065ec <USB_SetTurnaroundTime+0x140>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d802      	bhi.n	8006586 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006580:	2307      	movs	r3, #7
 8006582:	617b      	str	r3, [r7, #20]
 8006584:	e00a      	b.n	800659c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006586:	2306      	movs	r3, #6
 8006588:	617b      	str	r3, [r7, #20]
 800658a:	e007      	b.n	800659c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800658c:	79fb      	ldrb	r3, [r7, #7]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d102      	bne.n	8006598 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006592:	2309      	movs	r3, #9
 8006594:	617b      	str	r3, [r7, #20]
 8006596:	e001      	b.n	800659c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006598:	2309      	movs	r3, #9
 800659a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	68da      	ldr	r2, [r3, #12]
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	029b      	lsls	r3, r3, #10
 80065b0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80065b4:	431a      	orrs	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	371c      	adds	r7, #28
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr
 80065c8:	00d8acbf 	.word	0x00d8acbf
 80065cc:	00e4e1bf 	.word	0x00e4e1bf
 80065d0:	00f423ff 	.word	0x00f423ff
 80065d4:	0106737f 	.word	0x0106737f
 80065d8:	011a499f 	.word	0x011a499f
 80065dc:	01312cff 	.word	0x01312cff
 80065e0:	014ca43f 	.word	0x014ca43f
 80065e4:	016e35ff 	.word	0x016e35ff
 80065e8:	01a6ab1f 	.word	0x01a6ab1f
 80065ec:	01e847ff 	.word	0x01e847ff

080065f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	f043 0201 	orr.w	r2, r3, #1
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	370c      	adds	r7, #12
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr

08006612 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006612:	b480      	push	{r7}
 8006614:	b083      	sub	sp, #12
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f023 0201 	bic.w	r2, r3, #1
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	460b      	mov	r3, r1
 800663e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800664c:	78fb      	ldrb	r3, [r7, #3]
 800664e:	2b01      	cmp	r3, #1
 8006650:	d106      	bne.n	8006660 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	60da      	str	r2, [r3, #12]
 800665e:	e00b      	b.n	8006678 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006660:	78fb      	ldrb	r3, [r7, #3]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d106      	bne.n	8006674 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	60da      	str	r2, [r3, #12]
 8006672:	e001      	b.n	8006678 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e003      	b.n	8006680 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006678:	2032      	movs	r0, #50	; 0x32
 800667a:	f7fa fc79 	bl	8000f70 <HAL_Delay>

  return HAL_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3708      	adds	r7, #8
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006688:	b084      	sub	sp, #16
 800668a:	b580      	push	{r7, lr}
 800668c:	b086      	sub	sp, #24
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
 8006692:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006696:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800669a:	2300      	movs	r3, #0
 800669c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80066a2:	2300      	movs	r3, #0
 80066a4:	613b      	str	r3, [r7, #16]
 80066a6:	e009      	b.n	80066bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	3340      	adds	r3, #64	; 0x40
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	2200      	movs	r2, #0
 80066b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	3301      	adds	r3, #1
 80066ba:	613b      	str	r3, [r7, #16]
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	2b0e      	cmp	r3, #14
 80066c0:	d9f2      	bls.n	80066a8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80066c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d11c      	bne.n	8006702 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066d6:	f043 0302 	orr.w	r3, r3, #2
 80066da:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ec:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	639a      	str	r2, [r3, #56]	; 0x38
 8006700:	e00b      	b.n	800671a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006706:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006712:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006720:	461a      	mov	r2, r3
 8006722:	2300      	movs	r3, #0
 8006724:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800672c:	4619      	mov	r1, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006734:	461a      	mov	r2, r3
 8006736:	680b      	ldr	r3, [r1, #0]
 8006738:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800673a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673c:	2b01      	cmp	r3, #1
 800673e:	d10c      	bne.n	800675a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006742:	2b00      	cmp	r3, #0
 8006744:	d104      	bne.n	8006750 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006746:	2100      	movs	r1, #0
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 f949 	bl	80069e0 <USB_SetDevSpeed>
 800674e:	e008      	b.n	8006762 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006750:	2101      	movs	r1, #1
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f944 	bl	80069e0 <USB_SetDevSpeed>
 8006758:	e003      	b.n	8006762 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800675a:	2103      	movs	r1, #3
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 f93f 	bl	80069e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006762:	2110      	movs	r1, #16
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 f8f3 	bl	8006950 <USB_FlushTxFifo>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 f911 	bl	800699c <USB_FlushRxFifo>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d001      	beq.n	8006784 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800678a:	461a      	mov	r2, r3
 800678c:	2300      	movs	r3, #0
 800678e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006796:	461a      	mov	r2, r3
 8006798:	2300      	movs	r3, #0
 800679a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067a2:	461a      	mov	r2, r3
 80067a4:	2300      	movs	r3, #0
 80067a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067a8:	2300      	movs	r3, #0
 80067aa:	613b      	str	r3, [r7, #16]
 80067ac:	e043      	b.n	8006836 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	015a      	lsls	r2, r3, #5
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	4413      	add	r3, r2
 80067b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067c4:	d118      	bne.n	80067f8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d10a      	bne.n	80067e2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	015a      	lsls	r2, r3, #5
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	4413      	add	r3, r2
 80067d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d8:	461a      	mov	r2, r3
 80067da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80067de:	6013      	str	r3, [r2, #0]
 80067e0:	e013      	b.n	800680a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	015a      	lsls	r2, r3, #5
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	4413      	add	r3, r2
 80067ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ee:	461a      	mov	r2, r3
 80067f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80067f4:	6013      	str	r3, [r2, #0]
 80067f6:	e008      	b.n	800680a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	015a      	lsls	r2, r3, #5
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	4413      	add	r3, r2
 8006800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006804:	461a      	mov	r2, r3
 8006806:	2300      	movs	r3, #0
 8006808:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	4413      	add	r3, r2
 8006812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006816:	461a      	mov	r2, r3
 8006818:	2300      	movs	r3, #0
 800681a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	015a      	lsls	r2, r3, #5
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	4413      	add	r3, r2
 8006824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006828:	461a      	mov	r2, r3
 800682a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800682e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	3301      	adds	r3, #1
 8006834:	613b      	str	r3, [r7, #16]
 8006836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	429a      	cmp	r2, r3
 800683c:	d3b7      	bcc.n	80067ae <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800683e:	2300      	movs	r3, #0
 8006840:	613b      	str	r3, [r7, #16]
 8006842:	e043      	b.n	80068cc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	015a      	lsls	r2, r3, #5
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	4413      	add	r3, r2
 800684c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006856:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800685a:	d118      	bne.n	800688e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10a      	bne.n	8006878 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	015a      	lsls	r2, r3, #5
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	4413      	add	r3, r2
 800686a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800686e:	461a      	mov	r2, r3
 8006870:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006874:	6013      	str	r3, [r2, #0]
 8006876:	e013      	b.n	80068a0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	015a      	lsls	r2, r3, #5
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	4413      	add	r3, r2
 8006880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006884:	461a      	mov	r2, r3
 8006886:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800688a:	6013      	str	r3, [r2, #0]
 800688c:	e008      	b.n	80068a0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	015a      	lsls	r2, r3, #5
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	4413      	add	r3, r2
 8006896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800689a:	461a      	mov	r2, r3
 800689c:	2300      	movs	r3, #0
 800689e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	015a      	lsls	r2, r3, #5
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	4413      	add	r3, r2
 80068a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ac:	461a      	mov	r2, r3
 80068ae:	2300      	movs	r3, #0
 80068b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	015a      	lsls	r2, r3, #5
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	4413      	add	r3, r2
 80068ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068be:	461a      	mov	r2, r3
 80068c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80068c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	3301      	adds	r3, #1
 80068ca:	613b      	str	r3, [r7, #16]
 80068cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d3b7      	bcc.n	8006844 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80068f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80068f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d105      	bne.n	8006908 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	f043 0210 	orr.w	r2, r3, #16
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	699a      	ldr	r2, [r3, #24]
 800690c:	4b0f      	ldr	r3, [pc, #60]	; (800694c <USB_DevInit+0x2c4>)
 800690e:	4313      	orrs	r3, r2
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006916:	2b00      	cmp	r3, #0
 8006918:	d005      	beq.n	8006926 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	f043 0208 	orr.w	r2, r3, #8
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006928:	2b01      	cmp	r3, #1
 800692a:	d107      	bne.n	800693c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	699b      	ldr	r3, [r3, #24]
 8006930:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006934:	f043 0304 	orr.w	r3, r3, #4
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800693c:	7dfb      	ldrb	r3, [r7, #23]
}
 800693e:	4618      	mov	r0, r3
 8006940:	3718      	adds	r7, #24
 8006942:	46bd      	mov	sp, r7
 8006944:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006948:	b004      	add	sp, #16
 800694a:	4770      	bx	lr
 800694c:	803c3800 	.word	0x803c3800

08006950 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800695a:	2300      	movs	r3, #0
 800695c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	019b      	lsls	r3, r3, #6
 8006962:	f043 0220 	orr.w	r2, r3, #32
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	3301      	adds	r3, #1
 800696e:	60fb      	str	r3, [r7, #12]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	4a09      	ldr	r2, [pc, #36]	; (8006998 <USB_FlushTxFifo+0x48>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d901      	bls.n	800697c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e006      	b.n	800698a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	f003 0320 	and.w	r3, r3, #32
 8006984:	2b20      	cmp	r3, #32
 8006986:	d0f0      	beq.n	800696a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	00030d40 	.word	0x00030d40

0800699c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80069a4:	2300      	movs	r3, #0
 80069a6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2210      	movs	r2, #16
 80069ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	3301      	adds	r3, #1
 80069b2:	60fb      	str	r3, [r7, #12]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	4a09      	ldr	r2, [pc, #36]	; (80069dc <USB_FlushRxFifo+0x40>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d901      	bls.n	80069c0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	e006      	b.n	80069ce <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	f003 0310 	and.w	r3, r3, #16
 80069c8:	2b10      	cmp	r3, #16
 80069ca:	d0f0      	beq.n	80069ae <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3714      	adds	r7, #20
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	00030d40 	.word	0x00030d40

080069e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	460b      	mov	r3, r1
 80069ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	78fb      	ldrb	r3, [r7, #3]
 80069fa:	68f9      	ldr	r1, [r7, #12]
 80069fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a00:	4313      	orrs	r3, r2
 8006a02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3714      	adds	r7, #20
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr

08006a12 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006a12:	b480      	push	{r7}
 8006a14:	b087      	sub	sp, #28
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f003 0306 	and.w	r3, r3, #6
 8006a2a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d102      	bne.n	8006a38 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006a32:	2300      	movs	r3, #0
 8006a34:	75fb      	strb	r3, [r7, #23]
 8006a36:	e00a      	b.n	8006a4e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d002      	beq.n	8006a44 <USB_GetDevSpeed+0x32>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2b06      	cmp	r3, #6
 8006a42:	d102      	bne.n	8006a4a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006a44:	2302      	movs	r3, #2
 8006a46:	75fb      	strb	r3, [r7, #23]
 8006a48:	e001      	b.n	8006a4e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006a4a:	230f      	movs	r3, #15
 8006a4c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	371c      	adds	r7, #28
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	785b      	ldrb	r3, [r3, #1]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d13a      	bne.n	8006aee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a7e:	69da      	ldr	r2, [r3, #28]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	f003 030f 	and.w	r3, r3, #15
 8006a88:	2101      	movs	r1, #1
 8006a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	68f9      	ldr	r1, [r7, #12]
 8006a92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a96:	4313      	orrs	r3, r2
 8006a98:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d155      	bne.n	8006b5c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	015a      	lsls	r2, r3, #5
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	78db      	ldrb	r3, [r3, #3]
 8006aca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006acc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	059b      	lsls	r3, r3, #22
 8006ad2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	68ba      	ldr	r2, [r7, #8]
 8006ad8:	0151      	lsls	r1, r2, #5
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	440a      	add	r2, r1
 8006ade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aea:	6013      	str	r3, [r2, #0]
 8006aec:	e036      	b.n	8006b5c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006af4:	69da      	ldr	r2, [r3, #28]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	f003 030f 	and.w	r3, r3, #15
 8006afe:	2101      	movs	r1, #1
 8006b00:	fa01 f303 	lsl.w	r3, r1, r3
 8006b04:	041b      	lsls	r3, r3, #16
 8006b06:	68f9      	ldr	r1, [r7, #12]
 8006b08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	015a      	lsls	r2, r3, #5
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	4413      	add	r3, r2
 8006b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d11a      	bne.n	8006b5c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	015a      	lsls	r2, r3, #5
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	78db      	ldrb	r3, [r3, #3]
 8006b40:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b42:	430b      	orrs	r3, r1
 8006b44:	4313      	orrs	r3, r2
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	0151      	lsls	r1, r2, #5
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	440a      	add	r2, r1
 8006b4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b5a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3714      	adds	r7, #20
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
	...

08006b6c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	785b      	ldrb	r3, [r3, #1]
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d161      	bne.n	8006c4c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b9e:	d11f      	bne.n	8006be0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	015a      	lsls	r2, r3, #5
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68ba      	ldr	r2, [r7, #8]
 8006bb0:	0151      	lsls	r1, r2, #5
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	440a      	add	r2, r1
 8006bb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006bbe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	015a      	lsls	r2, r3, #5
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	0151      	lsls	r1, r2, #5
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	440a      	add	r2, r1
 8006bd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bde:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006be6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	f003 030f 	and.w	r3, r3, #15
 8006bf0:	2101      	movs	r1, #1
 8006bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	43db      	mvns	r3, r3
 8006bfa:	68f9      	ldr	r1, [r7, #12]
 8006bfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c00:	4013      	ands	r3, r2
 8006c02:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c0a:	69da      	ldr	r2, [r3, #28]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	f003 030f 	and.w	r3, r3, #15
 8006c14:	2101      	movs	r1, #1
 8006c16:	fa01 f303 	lsl.w	r3, r1, r3
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	43db      	mvns	r3, r3
 8006c1e:	68f9      	ldr	r1, [r7, #12]
 8006c20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c24:	4013      	ands	r3, r2
 8006c26:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	015a      	lsls	r2, r3, #5
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	4413      	add	r3, r2
 8006c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	0159      	lsls	r1, r3, #5
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	440b      	add	r3, r1
 8006c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c42:	4619      	mov	r1, r3
 8006c44:	4b35      	ldr	r3, [pc, #212]	; (8006d1c <USB_DeactivateEndpoint+0x1b0>)
 8006c46:	4013      	ands	r3, r2
 8006c48:	600b      	str	r3, [r1, #0]
 8006c4a:	e060      	b.n	8006d0e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c62:	d11f      	bne.n	8006ca4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	015a      	lsls	r2, r3, #5
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	0151      	lsls	r1, r2, #5
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	440a      	add	r2, r1
 8006c7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c82:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	015a      	lsls	r2, r3, #5
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68ba      	ldr	r2, [r7, #8]
 8006c94:	0151      	lsls	r1, r2, #5
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	440a      	add	r2, r1
 8006c9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ca2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006caa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	f003 030f 	and.w	r3, r3, #15
 8006cb4:	2101      	movs	r1, #1
 8006cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8006cba:	041b      	lsls	r3, r3, #16
 8006cbc:	43db      	mvns	r3, r3
 8006cbe:	68f9      	ldr	r1, [r7, #12]
 8006cc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cce:	69da      	ldr	r2, [r3, #28]
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	f003 030f 	and.w	r3, r3, #15
 8006cd8:	2101      	movs	r1, #1
 8006cda:	fa01 f303 	lsl.w	r3, r1, r3
 8006cde:	041b      	lsls	r3, r3, #16
 8006ce0:	43db      	mvns	r3, r3
 8006ce2:	68f9      	ldr	r1, [r7, #12]
 8006ce4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ce8:	4013      	ands	r3, r2
 8006cea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	015a      	lsls	r2, r3, #5
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	0159      	lsls	r1, r3, #5
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	440b      	add	r3, r1
 8006d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d06:	4619      	mov	r1, r3
 8006d08:	4b05      	ldr	r3, [pc, #20]	; (8006d20 <USB_DeactivateEndpoint+0x1b4>)
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3714      	adds	r7, #20
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr
 8006d1c:	ec337800 	.word	0xec337800
 8006d20:	eff37800 	.word	0xeff37800

08006d24 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b08a      	sub	sp, #40	; 0x28
 8006d28:	af02      	add	r7, sp, #8
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	785b      	ldrb	r3, [r3, #1]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	f040 815c 	bne.w	8006ffe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	695b      	ldr	r3, [r3, #20]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d132      	bne.n	8006db4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	015a      	lsls	r2, r3, #5
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	4413      	add	r3, r2
 8006d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	69ba      	ldr	r2, [r7, #24]
 8006d5e:	0151      	lsls	r1, r2, #5
 8006d60:	69fa      	ldr	r2, [r7, #28]
 8006d62:	440a      	add	r2, r1
 8006d64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	015a      	lsls	r2, r3, #5
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	4413      	add	r3, r2
 8006d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	69ba      	ldr	r2, [r7, #24]
 8006d82:	0151      	lsls	r1, r2, #5
 8006d84:	69fa      	ldr	r2, [r7, #28]
 8006d86:	440a      	add	r2, r1
 8006d88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	015a      	lsls	r2, r3, #5
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	4413      	add	r3, r2
 8006d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	69ba      	ldr	r2, [r7, #24]
 8006da2:	0151      	lsls	r1, r2, #5
 8006da4:	69fa      	ldr	r2, [r7, #28]
 8006da6:	440a      	add	r2, r1
 8006da8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dac:	0cdb      	lsrs	r3, r3, #19
 8006dae:	04db      	lsls	r3, r3, #19
 8006db0:	6113      	str	r3, [r2, #16]
 8006db2:	e074      	b.n	8006e9e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	015a      	lsls	r2, r3, #5
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	4413      	add	r3, r2
 8006dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	69ba      	ldr	r2, [r7, #24]
 8006dc4:	0151      	lsls	r1, r2, #5
 8006dc6:	69fa      	ldr	r2, [r7, #28]
 8006dc8:	440a      	add	r2, r1
 8006dca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dce:	0cdb      	lsrs	r3, r3, #19
 8006dd0:	04db      	lsls	r3, r3, #19
 8006dd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	015a      	lsls	r2, r3, #5
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	4413      	add	r3, r2
 8006ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	69ba      	ldr	r2, [r7, #24]
 8006de4:	0151      	lsls	r1, r2, #5
 8006de6:	69fa      	ldr	r2, [r7, #28]
 8006de8:	440a      	add	r2, r1
 8006dea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006df2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006df6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	015a      	lsls	r2, r3, #5
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	4413      	add	r3, r2
 8006e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e04:	691a      	ldr	r2, [r3, #16]
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	6959      	ldr	r1, [r3, #20]
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	440b      	add	r3, r1
 8006e10:	1e59      	subs	r1, r3, #1
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e1a:	04d9      	lsls	r1, r3, #19
 8006e1c:	4b9d      	ldr	r3, [pc, #628]	; (8007094 <USB_EPStartXfer+0x370>)
 8006e1e:	400b      	ands	r3, r1
 8006e20:	69b9      	ldr	r1, [r7, #24]
 8006e22:	0148      	lsls	r0, r1, #5
 8006e24:	69f9      	ldr	r1, [r7, #28]
 8006e26:	4401      	add	r1, r0
 8006e28:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	015a      	lsls	r2, r3, #5
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	4413      	add	r3, r2
 8006e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e3c:	691a      	ldr	r2, [r3, #16]
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	695b      	ldr	r3, [r3, #20]
 8006e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e46:	69b9      	ldr	r1, [r7, #24]
 8006e48:	0148      	lsls	r0, r1, #5
 8006e4a:	69f9      	ldr	r1, [r7, #28]
 8006e4c:	4401      	add	r1, r0
 8006e4e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e52:	4313      	orrs	r3, r2
 8006e54:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	78db      	ldrb	r3, [r3, #3]
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d11f      	bne.n	8006e9e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	015a      	lsls	r2, r3, #5
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	4413      	add	r3, r2
 8006e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	69ba      	ldr	r2, [r7, #24]
 8006e6e:	0151      	lsls	r1, r2, #5
 8006e70:	69fa      	ldr	r2, [r7, #28]
 8006e72:	440a      	add	r2, r1
 8006e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e78:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006e7c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	015a      	lsls	r2, r3, #5
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	4413      	add	r3, r2
 8006e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	69ba      	ldr	r2, [r7, #24]
 8006e8e:	0151      	lsls	r1, r2, #5
 8006e90:	69fa      	ldr	r2, [r7, #28]
 8006e92:	440a      	add	r2, r1
 8006e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e9c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006e9e:	79fb      	ldrb	r3, [r7, #7]
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d14b      	bne.n	8006f3c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d009      	beq.n	8006ec0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	015a      	lsls	r2, r3, #5
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb8:	461a      	mov	r2, r3
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	78db      	ldrb	r3, [r3, #3]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d128      	bne.n	8006f1a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d110      	bne.n	8006efa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	015a      	lsls	r2, r3, #5
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	4413      	add	r3, r2
 8006ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	69ba      	ldr	r2, [r7, #24]
 8006ee8:	0151      	lsls	r1, r2, #5
 8006eea:	69fa      	ldr	r2, [r7, #28]
 8006eec:	440a      	add	r2, r1
 8006eee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ef2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ef6:	6013      	str	r3, [r2, #0]
 8006ef8:	e00f      	b.n	8006f1a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	015a      	lsls	r2, r3, #5
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	4413      	add	r3, r2
 8006f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	69ba      	ldr	r2, [r7, #24]
 8006f0a:	0151      	lsls	r1, r2, #5
 8006f0c:	69fa      	ldr	r2, [r7, #28]
 8006f0e:	440a      	add	r2, r1
 8006f10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f18:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	015a      	lsls	r2, r3, #5
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	4413      	add	r3, r2
 8006f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	69ba      	ldr	r2, [r7, #24]
 8006f2a:	0151      	lsls	r1, r2, #5
 8006f2c:	69fa      	ldr	r2, [r7, #28]
 8006f2e:	440a      	add	r2, r1
 8006f30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f38:	6013      	str	r3, [r2, #0]
 8006f3a:	e12f      	b.n	800719c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	015a      	lsls	r2, r3, #5
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	4413      	add	r3, r2
 8006f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	69ba      	ldr	r2, [r7, #24]
 8006f4c:	0151      	lsls	r1, r2, #5
 8006f4e:	69fa      	ldr	r2, [r7, #28]
 8006f50:	440a      	add	r2, r1
 8006f52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f5a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	78db      	ldrb	r3, [r3, #3]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d015      	beq.n	8006f90 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	695b      	ldr	r3, [r3, #20]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 8117 	beq.w	800719c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	f003 030f 	and.w	r3, r3, #15
 8006f7e:	2101      	movs	r1, #1
 8006f80:	fa01 f303 	lsl.w	r3, r1, r3
 8006f84:	69f9      	ldr	r1, [r7, #28]
 8006f86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	634b      	str	r3, [r1, #52]	; 0x34
 8006f8e:	e105      	b.n	800719c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d110      	bne.n	8006fc2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	015a      	lsls	r2, r3, #5
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	69ba      	ldr	r2, [r7, #24]
 8006fb0:	0151      	lsls	r1, r2, #5
 8006fb2:	69fa      	ldr	r2, [r7, #28]
 8006fb4:	440a      	add	r2, r1
 8006fb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006fbe:	6013      	str	r3, [r2, #0]
 8006fc0:	e00f      	b.n	8006fe2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	015a      	lsls	r2, r3, #5
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	4413      	add	r3, r2
 8006fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	69ba      	ldr	r2, [r7, #24]
 8006fd2:	0151      	lsls	r1, r2, #5
 8006fd4:	69fa      	ldr	r2, [r7, #28]
 8006fd6:	440a      	add	r2, r1
 8006fd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fe0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	68d9      	ldr	r1, [r3, #12]
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	781a      	ldrb	r2, [r3, #0]
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	695b      	ldr	r3, [r3, #20]
 8006fee:	b298      	uxth	r0, r3
 8006ff0:	79fb      	ldrb	r3, [r7, #7]
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f000 fa2b 	bl	8007452 <USB_WritePacket>
 8006ffc:	e0ce      	b.n	800719c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	015a      	lsls	r2, r3, #5
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	4413      	add	r3, r2
 8007006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	69ba      	ldr	r2, [r7, #24]
 800700e:	0151      	lsls	r1, r2, #5
 8007010:	69fa      	ldr	r2, [r7, #28]
 8007012:	440a      	add	r2, r1
 8007014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007018:	0cdb      	lsrs	r3, r3, #19
 800701a:	04db      	lsls	r3, r3, #19
 800701c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	015a      	lsls	r2, r3, #5
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	4413      	add	r3, r2
 8007026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	69ba      	ldr	r2, [r7, #24]
 800702e:	0151      	lsls	r1, r2, #5
 8007030:	69fa      	ldr	r2, [r7, #28]
 8007032:	440a      	add	r2, r1
 8007034:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007038:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800703c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007040:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d126      	bne.n	8007098 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	015a      	lsls	r2, r3, #5
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	4413      	add	r3, r2
 8007052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007056:	691a      	ldr	r2, [r3, #16]
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007060:	69b9      	ldr	r1, [r7, #24]
 8007062:	0148      	lsls	r0, r1, #5
 8007064:	69f9      	ldr	r1, [r7, #28]
 8007066:	4401      	add	r1, r0
 8007068:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800706c:	4313      	orrs	r3, r2
 800706e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	015a      	lsls	r2, r3, #5
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	4413      	add	r3, r2
 8007078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	69ba      	ldr	r2, [r7, #24]
 8007080:	0151      	lsls	r1, r2, #5
 8007082:	69fa      	ldr	r2, [r7, #28]
 8007084:	440a      	add	r2, r1
 8007086:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800708a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800708e:	6113      	str	r3, [r2, #16]
 8007090:	e036      	b.n	8007100 <USB_EPStartXfer+0x3dc>
 8007092:	bf00      	nop
 8007094:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	695a      	ldr	r2, [r3, #20]
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	4413      	add	r3, r2
 80070a2:	1e5a      	subs	r2, r3, #1
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ac:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	015a      	lsls	r2, r3, #5
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	4413      	add	r3, r2
 80070b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ba:	691a      	ldr	r2, [r3, #16]
 80070bc:	8afb      	ldrh	r3, [r7, #22]
 80070be:	04d9      	lsls	r1, r3, #19
 80070c0:	4b39      	ldr	r3, [pc, #228]	; (80071a8 <USB_EPStartXfer+0x484>)
 80070c2:	400b      	ands	r3, r1
 80070c4:	69b9      	ldr	r1, [r7, #24]
 80070c6:	0148      	lsls	r0, r1, #5
 80070c8:	69f9      	ldr	r1, [r7, #28]
 80070ca:	4401      	add	r1, r0
 80070cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80070d0:	4313      	orrs	r3, r2
 80070d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e0:	691a      	ldr	r2, [r3, #16]
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	8af9      	ldrh	r1, [r7, #22]
 80070e8:	fb01 f303 	mul.w	r3, r1, r3
 80070ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070f0:	69b9      	ldr	r1, [r7, #24]
 80070f2:	0148      	lsls	r0, r1, #5
 80070f4:	69f9      	ldr	r1, [r7, #28]
 80070f6:	4401      	add	r1, r0
 80070f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80070fc:	4313      	orrs	r3, r2
 80070fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007100:	79fb      	ldrb	r3, [r7, #7]
 8007102:	2b01      	cmp	r3, #1
 8007104:	d10d      	bne.n	8007122 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d009      	beq.n	8007122 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	68d9      	ldr	r1, [r3, #12]
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	015a      	lsls	r2, r3, #5
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	4413      	add	r3, r2
 800711a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800711e:	460a      	mov	r2, r1
 8007120:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	78db      	ldrb	r3, [r3, #3]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d128      	bne.n	800717c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007136:	2b00      	cmp	r3, #0
 8007138:	d110      	bne.n	800715c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	015a      	lsls	r2, r3, #5
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	4413      	add	r3, r2
 8007142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	69ba      	ldr	r2, [r7, #24]
 800714a:	0151      	lsls	r1, r2, #5
 800714c:	69fa      	ldr	r2, [r7, #28]
 800714e:	440a      	add	r2, r1
 8007150:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007154:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007158:	6013      	str	r3, [r2, #0]
 800715a:	e00f      	b.n	800717c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	015a      	lsls	r2, r3, #5
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	4413      	add	r3, r2
 8007164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	69ba      	ldr	r2, [r7, #24]
 800716c:	0151      	lsls	r1, r2, #5
 800716e:	69fa      	ldr	r2, [r7, #28]
 8007170:	440a      	add	r2, r1
 8007172:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800717a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	015a      	lsls	r2, r3, #5
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	4413      	add	r3, r2
 8007184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	69ba      	ldr	r2, [r7, #24]
 800718c:	0151      	lsls	r1, r2, #5
 800718e:	69fa      	ldr	r2, [r7, #28]
 8007190:	440a      	add	r2, r1
 8007192:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007196:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800719a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3720      	adds	r7, #32
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	1ff80000 	.word	0x1ff80000

080071ac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b087      	sub	sp, #28
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	4613      	mov	r3, r2
 80071b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	785b      	ldrb	r3, [r3, #1]
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	f040 80cd 	bne.w	8007368 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d132      	bne.n	800723c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	015a      	lsls	r2, r3, #5
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	4413      	add	r3, r2
 80071de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	0151      	lsls	r1, r2, #5
 80071e8:	697a      	ldr	r2, [r7, #20]
 80071ea:	440a      	add	r2, r1
 80071ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	015a      	lsls	r2, r3, #5
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	4413      	add	r3, r2
 8007202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	0151      	lsls	r1, r2, #5
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	440a      	add	r2, r1
 8007210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007214:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007218:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	015a      	lsls	r2, r3, #5
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	4413      	add	r3, r2
 8007222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	0151      	lsls	r1, r2, #5
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	440a      	add	r2, r1
 8007230:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007234:	0cdb      	lsrs	r3, r3, #19
 8007236:	04db      	lsls	r3, r3, #19
 8007238:	6113      	str	r3, [r2, #16]
 800723a:	e04e      	b.n	80072da <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	015a      	lsls	r2, r3, #5
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	4413      	add	r3, r2
 8007244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	693a      	ldr	r2, [r7, #16]
 800724c:	0151      	lsls	r1, r2, #5
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	440a      	add	r2, r1
 8007252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007256:	0cdb      	lsrs	r3, r3, #19
 8007258:	04db      	lsls	r3, r3, #19
 800725a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	015a      	lsls	r2, r3, #5
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	4413      	add	r3, r2
 8007264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	693a      	ldr	r2, [r7, #16]
 800726c:	0151      	lsls	r1, r2, #5
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	440a      	add	r2, r1
 8007272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007276:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800727a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800727e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	695a      	ldr	r2, [r3, #20]
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	429a      	cmp	r2, r3
 800728a:	d903      	bls.n	8007294 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	689a      	ldr	r2, [r3, #8]
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	015a      	lsls	r2, r3, #5
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	4413      	add	r3, r2
 800729c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	693a      	ldr	r2, [r7, #16]
 80072a4:	0151      	lsls	r1, r2, #5
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	440a      	add	r2, r1
 80072aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	015a      	lsls	r2, r3, #5
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	4413      	add	r3, r2
 80072bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072c0:	691a      	ldr	r2, [r3, #16]
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	695b      	ldr	r3, [r3, #20]
 80072c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072ca:	6939      	ldr	r1, [r7, #16]
 80072cc:	0148      	lsls	r0, r1, #5
 80072ce:	6979      	ldr	r1, [r7, #20]
 80072d0:	4401      	add	r1, r0
 80072d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80072d6:	4313      	orrs	r3, r2
 80072d8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80072da:	79fb      	ldrb	r3, [r7, #7]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d11e      	bne.n	800731e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d009      	beq.n	80072fc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	015a      	lsls	r2, r3, #5
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	4413      	add	r3, r2
 80072f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f4:	461a      	mov	r2, r3
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	015a      	lsls	r2, r3, #5
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	4413      	add	r3, r2
 8007304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	693a      	ldr	r2, [r7, #16]
 800730c:	0151      	lsls	r1, r2, #5
 800730e:	697a      	ldr	r2, [r7, #20]
 8007310:	440a      	add	r2, r1
 8007312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007316:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800731a:	6013      	str	r3, [r2, #0]
 800731c:	e092      	b.n	8007444 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	015a      	lsls	r2, r3, #5
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	4413      	add	r3, r2
 8007326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	693a      	ldr	r2, [r7, #16]
 800732e:	0151      	lsls	r1, r2, #5
 8007330:	697a      	ldr	r2, [r7, #20]
 8007332:	440a      	add	r2, r1
 8007334:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007338:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800733c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	695b      	ldr	r3, [r3, #20]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d07e      	beq.n	8007444 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800734c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	f003 030f 	and.w	r3, r3, #15
 8007356:	2101      	movs	r1, #1
 8007358:	fa01 f303 	lsl.w	r3, r1, r3
 800735c:	6979      	ldr	r1, [r7, #20]
 800735e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007362:	4313      	orrs	r3, r2
 8007364:	634b      	str	r3, [r1, #52]	; 0x34
 8007366:	e06d      	b.n	8007444 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	015a      	lsls	r2, r3, #5
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	4413      	add	r3, r2
 8007370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007374:	691b      	ldr	r3, [r3, #16]
 8007376:	693a      	ldr	r2, [r7, #16]
 8007378:	0151      	lsls	r1, r2, #5
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	440a      	add	r2, r1
 800737e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007382:	0cdb      	lsrs	r3, r3, #19
 8007384:	04db      	lsls	r3, r3, #19
 8007386:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	015a      	lsls	r2, r3, #5
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	4413      	add	r3, r2
 8007390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	693a      	ldr	r2, [r7, #16]
 8007398:	0151      	lsls	r1, r2, #5
 800739a:	697a      	ldr	r2, [r7, #20]
 800739c:	440a      	add	r2, r1
 800739e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80073a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80073aa:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	695b      	ldr	r3, [r3, #20]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d003      	beq.n	80073bc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	689a      	ldr	r2, [r3, #8]
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	015a      	lsls	r2, r3, #5
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	4413      	add	r3, r2
 80073c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	0151      	lsls	r1, r2, #5
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	440a      	add	r2, r1
 80073d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	015a      	lsls	r2, r3, #5
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	4413      	add	r3, r2
 80073e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e8:	691a      	ldr	r2, [r3, #16]
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073f2:	6939      	ldr	r1, [r7, #16]
 80073f4:	0148      	lsls	r0, r1, #5
 80073f6:	6979      	ldr	r1, [r7, #20]
 80073f8:	4401      	add	r1, r0
 80073fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80073fe:	4313      	orrs	r3, r2
 8007400:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007402:	79fb      	ldrb	r3, [r7, #7]
 8007404:	2b01      	cmp	r3, #1
 8007406:	d10d      	bne.n	8007424 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d009      	beq.n	8007424 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	68d9      	ldr	r1, [r3, #12]
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	015a      	lsls	r2, r3, #5
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	4413      	add	r3, r2
 800741c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007420:	460a      	mov	r2, r1
 8007422:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	015a      	lsls	r2, r3, #5
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	4413      	add	r3, r2
 800742c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	693a      	ldr	r2, [r7, #16]
 8007434:	0151      	lsls	r1, r2, #5
 8007436:	697a      	ldr	r2, [r7, #20]
 8007438:	440a      	add	r2, r1
 800743a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800743e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007442:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	371c      	adds	r7, #28
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007452:	b480      	push	{r7}
 8007454:	b089      	sub	sp, #36	; 0x24
 8007456:	af00      	add	r7, sp, #0
 8007458:	60f8      	str	r0, [r7, #12]
 800745a:	60b9      	str	r1, [r7, #8]
 800745c:	4611      	mov	r1, r2
 800745e:	461a      	mov	r2, r3
 8007460:	460b      	mov	r3, r1
 8007462:	71fb      	strb	r3, [r7, #7]
 8007464:	4613      	mov	r3, r2
 8007466:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007470:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007474:	2b00      	cmp	r3, #0
 8007476:	d11a      	bne.n	80074ae <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007478:	88bb      	ldrh	r3, [r7, #4]
 800747a:	3303      	adds	r3, #3
 800747c:	089b      	lsrs	r3, r3, #2
 800747e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007480:	2300      	movs	r3, #0
 8007482:	61bb      	str	r3, [r7, #24]
 8007484:	e00f      	b.n	80074a6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007486:	79fb      	ldrb	r3, [r7, #7]
 8007488:	031a      	lsls	r2, r3, #12
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	4413      	add	r3, r2
 800748e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007492:	461a      	mov	r2, r3
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	6013      	str	r3, [r2, #0]
      pSrc++;
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	3304      	adds	r3, #4
 800749e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	3301      	adds	r3, #1
 80074a4:	61bb      	str	r3, [r7, #24]
 80074a6:	69ba      	ldr	r2, [r7, #24]
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d3eb      	bcc.n	8007486 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3724      	adds	r7, #36	; 0x24
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80074bc:	b480      	push	{r7}
 80074be:	b089      	sub	sp, #36	; 0x24
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	4613      	mov	r3, r2
 80074c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80074d2:	88fb      	ldrh	r3, [r7, #6]
 80074d4:	3303      	adds	r3, #3
 80074d6:	089b      	lsrs	r3, r3, #2
 80074d8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80074da:	2300      	movs	r3, #0
 80074dc:	61bb      	str	r3, [r7, #24]
 80074de:	e00b      	b.n	80074f8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	3304      	adds	r3, #4
 80074f0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	3301      	adds	r3, #1
 80074f6:	61bb      	str	r3, [r7, #24]
 80074f8:	69ba      	ldr	r2, [r7, #24]
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d3ef      	bcc.n	80074e0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007500:	69fb      	ldr	r3, [r7, #28]
}
 8007502:	4618      	mov	r0, r3
 8007504:	3724      	adds	r7, #36	; 0x24
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr

0800750e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800750e:	b480      	push	{r7}
 8007510:	b085      	sub	sp, #20
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
 8007516:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	785b      	ldrb	r3, [r3, #1]
 8007526:	2b01      	cmp	r3, #1
 8007528:	d12c      	bne.n	8007584 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	015a      	lsls	r2, r3, #5
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	4413      	add	r3, r2
 8007532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	db12      	blt.n	8007562 <USB_EPSetStall+0x54>
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00f      	beq.n	8007562 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	015a      	lsls	r2, r3, #5
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	4413      	add	r3, r2
 800754a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68ba      	ldr	r2, [r7, #8]
 8007552:	0151      	lsls	r1, r2, #5
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	440a      	add	r2, r1
 8007558:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800755c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007560:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	015a      	lsls	r2, r3, #5
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	4413      	add	r3, r2
 800756a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68ba      	ldr	r2, [r7, #8]
 8007572:	0151      	lsls	r1, r2, #5
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	440a      	add	r2, r1
 8007578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800757c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007580:	6013      	str	r3, [r2, #0]
 8007582:	e02b      	b.n	80075dc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	015a      	lsls	r2, r3, #5
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	4413      	add	r3, r2
 800758c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	db12      	blt.n	80075bc <USB_EPSetStall+0xae>
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00f      	beq.n	80075bc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	015a      	lsls	r2, r3, #5
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	4413      	add	r3, r2
 80075a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	68ba      	ldr	r2, [r7, #8]
 80075ac:	0151      	lsls	r1, r2, #5
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	440a      	add	r2, r1
 80075b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80075ba:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	015a      	lsls	r2, r3, #5
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	4413      	add	r3, r2
 80075c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68ba      	ldr	r2, [r7, #8]
 80075cc:	0151      	lsls	r1, r2, #5
 80075ce:	68fa      	ldr	r2, [r7, #12]
 80075d0:	440a      	add	r2, r1
 80075d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80075da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3714      	adds	r7, #20
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr

080075ea <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80075ea:	b480      	push	{r7}
 80075ec:	b085      	sub	sp, #20
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
 80075f2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	785b      	ldrb	r3, [r3, #1]
 8007602:	2b01      	cmp	r3, #1
 8007604:	d128      	bne.n	8007658 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	015a      	lsls	r2, r3, #5
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	4413      	add	r3, r2
 800760e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68ba      	ldr	r2, [r7, #8]
 8007616:	0151      	lsls	r1, r2, #5
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	440a      	add	r2, r1
 800761c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007620:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007624:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	78db      	ldrb	r3, [r3, #3]
 800762a:	2b03      	cmp	r3, #3
 800762c:	d003      	beq.n	8007636 <USB_EPClearStall+0x4c>
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	78db      	ldrb	r3, [r3, #3]
 8007632:	2b02      	cmp	r3, #2
 8007634:	d138      	bne.n	80076a8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	015a      	lsls	r2, r3, #5
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	4413      	add	r3, r2
 800763e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	0151      	lsls	r1, r2, #5
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	440a      	add	r2, r1
 800764c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007654:	6013      	str	r3, [r2, #0]
 8007656:	e027      	b.n	80076a8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	015a      	lsls	r2, r3, #5
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	4413      	add	r3, r2
 8007660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68ba      	ldr	r2, [r7, #8]
 8007668:	0151      	lsls	r1, r2, #5
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	440a      	add	r2, r1
 800766e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007672:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007676:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	78db      	ldrb	r3, [r3, #3]
 800767c:	2b03      	cmp	r3, #3
 800767e:	d003      	beq.n	8007688 <USB_EPClearStall+0x9e>
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	78db      	ldrb	r3, [r3, #3]
 8007684:	2b02      	cmp	r3, #2
 8007686:	d10f      	bne.n	80076a8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	015a      	lsls	r2, r3, #5
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	4413      	add	r3, r2
 8007690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68ba      	ldr	r2, [r7, #8]
 8007698:	0151      	lsls	r1, r2, #5
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	440a      	add	r2, r1
 800769e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076a6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3714      	adds	r7, #20
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80076b6:	b480      	push	{r7}
 80076b8:	b085      	sub	sp, #20
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	460b      	mov	r3, r1
 80076c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076d4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80076d8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	78fb      	ldrb	r3, [r7, #3]
 80076e4:	011b      	lsls	r3, r3, #4
 80076e6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80076ea:	68f9      	ldr	r1, [r7, #12]
 80076ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076f0:	4313      	orrs	r3, r2
 80076f2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3714      	adds	r7, #20
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr

08007702 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b084      	sub	sp, #16
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800771c:	f023 0302 	bic.w	r3, r3, #2
 8007720:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007722:	2003      	movs	r0, #3
 8007724:	f7f9 fc24 	bl	8000f70 <HAL_Delay>

  return HAL_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3710      	adds	r7, #16
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b084      	sub	sp, #16
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800774c:	f043 0302 	orr.w	r3, r3, #2
 8007750:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007752:	2003      	movs	r0, #3
 8007754:	f7f9 fc0c 	bl	8000f70 <HAL_Delay>

  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007762:	b480      	push	{r7}
 8007764:	b085      	sub	sp, #20
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	695b      	ldr	r3, [r3, #20]
 800776e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	699b      	ldr	r3, [r3, #24]
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	4013      	ands	r3, r2
 8007778:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800777a:	68fb      	ldr	r3, [r7, #12]
}
 800777c:	4618      	mov	r0, r3
 800777e:	3714      	adds	r7, #20
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800779a:	699b      	ldr	r3, [r3, #24]
 800779c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077a4:	69db      	ldr	r3, [r3, #28]
 80077a6:	68ba      	ldr	r2, [r7, #8]
 80077a8:	4013      	ands	r3, r2
 80077aa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	0c1b      	lsrs	r3, r3, #16
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3714      	adds	r7, #20
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80077bc:	b480      	push	{r7}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ce:	699b      	ldr	r3, [r3, #24]
 80077d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077d8:	69db      	ldr	r3, [r3, #28]
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	4013      	ands	r3, r2
 80077de:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	b29b      	uxth	r3, r3
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3714      	adds	r7, #20
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	460b      	mov	r3, r1
 80077fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007800:	78fb      	ldrb	r3, [r7, #3]
 8007802:	015a      	lsls	r2, r3, #5
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	4413      	add	r3, r2
 8007808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007816:	695b      	ldr	r3, [r3, #20]
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	4013      	ands	r3, r2
 800781c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800781e:	68bb      	ldr	r3, [r7, #8]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3714      	adds	r7, #20
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800782c:	b480      	push	{r7}
 800782e:	b087      	sub	sp, #28
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	460b      	mov	r3, r1
 8007836:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007842:	691b      	ldr	r3, [r3, #16]
 8007844:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800784c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800784e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007850:	78fb      	ldrb	r3, [r7, #3]
 8007852:	f003 030f 	and.w	r3, r3, #15
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	fa22 f303 	lsr.w	r3, r2, r3
 800785c:	01db      	lsls	r3, r3, #7
 800785e:	b2db      	uxtb	r3, r3
 8007860:	693a      	ldr	r2, [r7, #16]
 8007862:	4313      	orrs	r3, r2
 8007864:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007866:	78fb      	ldrb	r3, [r7, #3]
 8007868:	015a      	lsls	r2, r3, #5
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	4413      	add	r3, r2
 800786e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	693a      	ldr	r2, [r7, #16]
 8007876:	4013      	ands	r3, r2
 8007878:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800787a:	68bb      	ldr	r3, [r7, #8]
}
 800787c:	4618      	mov	r0, r3
 800787e:	371c      	adds	r7, #28
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	695b      	ldr	r3, [r3, #20]
 8007894:	f003 0301 	and.w	r3, r3, #1
}
 8007898:	4618      	mov	r0, r3
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80078c2:	f023 0307 	bic.w	r3, r3, #7
 80078c6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80078dc:	2300      	movs	r3, #0
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3714      	adds	r7, #20
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr
	...

080078ec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b087      	sub	sp, #28
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	460b      	mov	r3, r1
 80078f6:	607a      	str	r2, [r7, #4]
 80078f8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	333c      	adds	r3, #60	; 0x3c
 8007902:	3304      	adds	r3, #4
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	4a26      	ldr	r2, [pc, #152]	; (80079a4 <USB_EP0_OutStart+0xb8>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d90a      	bls.n	8007926 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800791c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007920:	d101      	bne.n	8007926 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007922:	2300      	movs	r3, #0
 8007924:	e037      	b.n	8007996 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800792c:	461a      	mov	r2, r3
 800792e:	2300      	movs	r3, #0
 8007930:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	697a      	ldr	r2, [r7, #20]
 800793c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007940:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007944:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007954:	f043 0318 	orr.w	r3, r3, #24
 8007958:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	697a      	ldr	r2, [r7, #20]
 8007964:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007968:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800796c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800796e:	7afb      	ldrb	r3, [r7, #11]
 8007970:	2b01      	cmp	r3, #1
 8007972:	d10f      	bne.n	8007994 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800797a:	461a      	mov	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800798e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007992:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	371c      	adds	r7, #28
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop
 80079a4:	4f54300a 	.word	0x4f54300a

080079a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80079b0:	2300      	movs	r3, #0
 80079b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	3301      	adds	r3, #1
 80079b8:	60fb      	str	r3, [r7, #12]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	4a13      	ldr	r2, [pc, #76]	; (8007a0c <USB_CoreReset+0x64>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d901      	bls.n	80079c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80079c2:	2303      	movs	r3, #3
 80079c4:	e01b      	b.n	80079fe <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	daf2      	bge.n	80079b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80079ce:	2300      	movs	r3, #0
 80079d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	f043 0201 	orr.w	r2, r3, #1
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	3301      	adds	r3, #1
 80079e2:	60fb      	str	r3, [r7, #12]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	4a09      	ldr	r2, [pc, #36]	; (8007a0c <USB_CoreReset+0x64>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d901      	bls.n	80079f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80079ec:	2303      	movs	r3, #3
 80079ee:	e006      	b.n	80079fe <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	f003 0301 	and.w	r3, r3, #1
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d0f0      	beq.n	80079de <USB_CoreReset+0x36>

  return HAL_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3714      	adds	r7, #20
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	00030d40 	.word	0x00030d40

08007a10 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	460b      	mov	r3, r1
 8007a1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007a1c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007a20:	f002 f966 	bl	8009cf0 <malloc>
 8007a24:	4603      	mov	r3, r0
 8007a26:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d105      	bne.n	8007a3a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007a36:	2302      	movs	r3, #2
 8007a38:	e066      	b.n	8007b08 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	7c1b      	ldrb	r3, [r3, #16]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d119      	bne.n	8007a7e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007a4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a4e:	2202      	movs	r2, #2
 8007a50:	2181      	movs	r1, #129	; 0x81
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f001 ffd3 	bl	80099fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007a5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a62:	2202      	movs	r2, #2
 8007a64:	2101      	movs	r1, #1
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f001 ffc9 	bl	80099fe <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2210      	movs	r2, #16
 8007a78:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007a7c:	e016      	b.n	8007aac <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007a7e:	2340      	movs	r3, #64	; 0x40
 8007a80:	2202      	movs	r2, #2
 8007a82:	2181      	movs	r1, #129	; 0x81
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f001 ffba 	bl	80099fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007a90:	2340      	movs	r3, #64	; 0x40
 8007a92:	2202      	movs	r2, #2
 8007a94:	2101      	movs	r1, #1
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f001 ffb1 	bl	80099fe <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2210      	movs	r2, #16
 8007aa8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007aac:	2308      	movs	r3, #8
 8007aae:	2203      	movs	r2, #3
 8007ab0:	2182      	movs	r1, #130	; 0x82
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f001 ffa3 	bl	80099fe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2200      	movs	r2, #0
 8007ace:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	7c1b      	ldrb	r3, [r3, #16]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d109      	bne.n	8007af6 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ae8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007aec:	2101      	movs	r1, #1
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f002 f874 	bl	8009bdc <USBD_LL_PrepareReceive>
 8007af4:	e007      	b.n	8007b06 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007afc:	2340      	movs	r3, #64	; 0x40
 8007afe:	2101      	movs	r1, #1
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f002 f86b 	bl	8009bdc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007b06:	2300      	movs	r3, #0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3710      	adds	r7, #16
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	460b      	mov	r3, r1
 8007b1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007b20:	2181      	movs	r1, #129	; 0x81
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f001 ff91 	bl	8009a4a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007b2e:	2101      	movs	r1, #1
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f001 ff8a 	bl	8009a4a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007b3e:	2182      	movs	r1, #130	; 0x82
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f001 ff82 	bl	8009a4a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00e      	beq.n	8007b7e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b70:	4618      	mov	r0, r3
 8007b72:	f002 f8c5 	bl	8009d00 <free>
    pdev->pClassData = NULL;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8007b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3710      	adds	r7, #16
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b086      	sub	sp, #24
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b98:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d03a      	beq.n	8007c28 <USBD_CDC_Setup+0xa0>
 8007bb2:	2b20      	cmp	r3, #32
 8007bb4:	f040 8097 	bne.w	8007ce6 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	88db      	ldrh	r3, [r3, #6]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d029      	beq.n	8007c14 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	b25b      	sxtb	r3, r3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	da11      	bge.n	8007bee <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	683a      	ldr	r2, [r7, #0]
 8007bd4:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8007bd6:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007bd8:	683a      	ldr	r2, [r7, #0]
 8007bda:	88d2      	ldrh	r2, [r2, #6]
 8007bdc:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007bde:	6939      	ldr	r1, [r7, #16]
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	88db      	ldrh	r3, [r3, #6]
 8007be4:	461a      	mov	r2, r3
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f001 fa9d 	bl	8009126 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8007bec:	e082      	b.n	8007cf4 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	785a      	ldrb	r2, [r3, #1]
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	88db      	ldrh	r3, [r3, #6]
 8007bfc:	b2da      	uxtb	r2, r3
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007c04:	6939      	ldr	r1, [r7, #16]
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	88db      	ldrh	r3, [r3, #6]
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f001 fab6 	bl	800917e <USBD_CtlPrepareRx>
    break;
 8007c12:	e06f      	b.n	8007cf4 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	683a      	ldr	r2, [r7, #0]
 8007c1e:	7850      	ldrb	r0, [r2, #1]
 8007c20:	2200      	movs	r2, #0
 8007c22:	6839      	ldr	r1, [r7, #0]
 8007c24:	4798      	blx	r3
    break;
 8007c26:	e065      	b.n	8007cf4 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	785b      	ldrb	r3, [r3, #1]
 8007c2c:	2b0b      	cmp	r3, #11
 8007c2e:	d84f      	bhi.n	8007cd0 <USBD_CDC_Setup+0x148>
 8007c30:	a201      	add	r2, pc, #4	; (adr r2, 8007c38 <USBD_CDC_Setup+0xb0>)
 8007c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c36:	bf00      	nop
 8007c38:	08007c69 	.word	0x08007c69
 8007c3c:	08007cdf 	.word	0x08007cdf
 8007c40:	08007cd1 	.word	0x08007cd1
 8007c44:	08007cd1 	.word	0x08007cd1
 8007c48:	08007cd1 	.word	0x08007cd1
 8007c4c:	08007cd1 	.word	0x08007cd1
 8007c50:	08007cd1 	.word	0x08007cd1
 8007c54:	08007cd1 	.word	0x08007cd1
 8007c58:	08007cd1 	.word	0x08007cd1
 8007c5c:	08007cd1 	.word	0x08007cd1
 8007c60:	08007c91 	.word	0x08007c91
 8007c64:	08007cb9 	.word	0x08007cb9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c6e:	2b03      	cmp	r3, #3
 8007c70:	d107      	bne.n	8007c82 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007c72:	f107 030c 	add.w	r3, r7, #12
 8007c76:	2202      	movs	r2, #2
 8007c78:	4619      	mov	r1, r3
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f001 fa53 	bl	8009126 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007c80:	e030      	b.n	8007ce4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007c82:	6839      	ldr	r1, [r7, #0]
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f001 f9dd 	bl	8009044 <USBD_CtlError>
        ret = USBD_FAIL;
 8007c8a:	2303      	movs	r3, #3
 8007c8c:	75fb      	strb	r3, [r7, #23]
      break;
 8007c8e:	e029      	b.n	8007ce4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c96:	2b03      	cmp	r3, #3
 8007c98:	d107      	bne.n	8007caa <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007c9a:	f107 030f 	add.w	r3, r7, #15
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f001 fa3f 	bl	8009126 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007ca8:	e01c      	b.n	8007ce4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007caa:	6839      	ldr	r1, [r7, #0]
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f001 f9c9 	bl	8009044 <USBD_CtlError>
        ret = USBD_FAIL;
 8007cb2:	2303      	movs	r3, #3
 8007cb4:	75fb      	strb	r3, [r7, #23]
      break;
 8007cb6:	e015      	b.n	8007ce4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cbe:	2b03      	cmp	r3, #3
 8007cc0:	d00f      	beq.n	8007ce2 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8007cc2:	6839      	ldr	r1, [r7, #0]
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f001 f9bd 	bl	8009044 <USBD_CtlError>
        ret = USBD_FAIL;
 8007cca:	2303      	movs	r3, #3
 8007ccc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007cce:	e008      	b.n	8007ce2 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8007cd0:	6839      	ldr	r1, [r7, #0]
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f001 f9b6 	bl	8009044 <USBD_CtlError>
      ret = USBD_FAIL;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	75fb      	strb	r3, [r7, #23]
      break;
 8007cdc:	e002      	b.n	8007ce4 <USBD_CDC_Setup+0x15c>
      break;
 8007cde:	bf00      	nop
 8007ce0:	e008      	b.n	8007cf4 <USBD_CDC_Setup+0x16c>
      break;
 8007ce2:	bf00      	nop
    }
    break;
 8007ce4:	e006      	b.n	8007cf4 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8007ce6:	6839      	ldr	r1, [r7, #0]
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f001 f9ab 	bl	8009044 <USBD_CtlError>
    ret = USBD_FAIL;
 8007cee:	2303      	movs	r3, #3
 8007cf0:	75fb      	strb	r3, [r7, #23]
    break;
 8007cf2:	bf00      	nop
  }

  return (uint8_t)ret;
 8007cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3718      	adds	r7, #24
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop

08007d00 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	460b      	mov	r3, r1
 8007d0a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d12:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d101      	bne.n	8007d22 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007d1e:	2303      	movs	r3, #3
 8007d20:	e049      	b.n	8007db6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d28:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007d2a:	78fa      	ldrb	r2, [r7, #3]
 8007d2c:	6879      	ldr	r1, [r7, #4]
 8007d2e:	4613      	mov	r3, r2
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	4413      	add	r3, r2
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	440b      	add	r3, r1
 8007d38:	3318      	adds	r3, #24
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d029      	beq.n	8007d94 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007d40:	78fa      	ldrb	r2, [r7, #3]
 8007d42:	6879      	ldr	r1, [r7, #4]
 8007d44:	4613      	mov	r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	4413      	add	r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	440b      	add	r3, r1
 8007d4e:	3318      	adds	r3, #24
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	78f9      	ldrb	r1, [r7, #3]
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	460b      	mov	r3, r1
 8007d58:	00db      	lsls	r3, r3, #3
 8007d5a:	1a5b      	subs	r3, r3, r1
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	4403      	add	r3, r0
 8007d60:	3344      	adds	r3, #68	; 0x44
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	fbb2 f1f3 	udiv	r1, r2, r3
 8007d68:	fb03 f301 	mul.w	r3, r3, r1
 8007d6c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d110      	bne.n	8007d94 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007d72:	78fa      	ldrb	r2, [r7, #3]
 8007d74:	6879      	ldr	r1, [r7, #4]
 8007d76:	4613      	mov	r3, r2
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	4413      	add	r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	440b      	add	r3, r1
 8007d80:	3318      	adds	r3, #24
 8007d82:	2200      	movs	r2, #0
 8007d84:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007d86:	78f9      	ldrb	r1, [r7, #3]
 8007d88:	2300      	movs	r3, #0
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f001 ff04 	bl	8009b9a <USBD_LL_Transmit>
 8007d92:	e00f      	b.n	8007db4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	68ba      	ldr	r2, [r7, #8]
 8007da6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007daa:	68ba      	ldr	r2, [r7, #8]
 8007dac:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007db0:	78fa      	ldrb	r2, [r7, #3]
 8007db2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b084      	sub	sp, #16
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dd0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d101      	bne.n	8007de0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007ddc:	2303      	movs	r3, #3
 8007dde:	e015      	b.n	8007e0c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007de0:	78fb      	ldrb	r3, [r7, #3]
 8007de2:	4619      	mov	r1, r3
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f001 ff1a 	bl	8009c1e <USBD_LL_GetRxDataSize>
 8007dea:	4602      	mov	r2, r0
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007e06:	4611      	mov	r1, r2
 8007e08:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3710      	adds	r7, #16
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e22:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d015      	beq.n	8007e5a <USBD_CDC_EP0_RxReady+0x46>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007e34:	2bff      	cmp	r3, #255	; 0xff
 8007e36:	d010      	beq.n	8007e5a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007e46:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007e4e:	b292      	uxth	r2, r2
 8007e50:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	22ff      	movs	r2, #255	; 0xff
 8007e56:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2243      	movs	r2, #67	; 0x43
 8007e70:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007e72:	4b03      	ldr	r3, [pc, #12]	; (8007e80 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr
 8007e80:	20000098 	.word	0x20000098

08007e84 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2243      	movs	r2, #67	; 0x43
 8007e90:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007e92:	4b03      	ldr	r3, [pc, #12]	; (8007ea0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr
 8007ea0:	20000054 	.word	0x20000054

08007ea4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2243      	movs	r2, #67	; 0x43
 8007eb0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007eb2:	4b03      	ldr	r3, [pc, #12]	; (8007ec0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr
 8007ec0:	200000dc 	.word	0x200000dc

08007ec4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	220a      	movs	r2, #10
 8007ed0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007ed2:	4b03      	ldr	r3, [pc, #12]	; (8007ee0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr
 8007ee0:	20000010 	.word	0x20000010

08007ee4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d101      	bne.n	8007ef8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	e004      	b.n	8007f02 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	683a      	ldr	r2, [r7, #0]
 8007efc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	370c      	adds	r7, #12
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr

08007f0e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007f0e:	b480      	push	{r7}
 8007f10:	b087      	sub	sp, #28
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	60f8      	str	r0, [r7, #12]
 8007f16:	60b9      	str	r1, [r7, #8]
 8007f18:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f20:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	68ba      	ldr	r2, [r7, #8]
 8007f26:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	371c      	adds	r7, #28
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f50:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	683a      	ldr	r2, [r7, #0]
 8007f56:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3714      	adds	r7, #20
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f76:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d101      	bne.n	8007f8a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007f86:	2303      	movs	r3, #3
 8007f88:	e01a      	b.n	8007fc0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d114      	bne.n	8007fbe <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007fb2:	2181      	movs	r1, #129	; 0x81
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f001 fdf0 	bl	8009b9a <USBD_LL_Transmit>

    ret = USBD_OK;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3710      	adds	r7, #16
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fd6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d101      	bne.n	8007fe6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	e016      	b.n	8008014 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	7c1b      	ldrb	r3, [r3, #16]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d109      	bne.n	8008002 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ff4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ff8:	2101      	movs	r1, #1
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f001 fdee 	bl	8009bdc <USBD_LL_PrepareReceive>
 8008000:	e007      	b.n	8008012 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008008:	2340      	movs	r3, #64	; 0x40
 800800a:	2101      	movs	r1, #1
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f001 fde5 	bl	8009bdc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b086      	sub	sp, #24
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	4613      	mov	r3, r2
 8008028:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d101      	bne.n	8008034 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008030:	2303      	movs	r3, #3
 8008032:	e025      	b.n	8008080 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800803a:	2b00      	cmp	r3, #0
 800803c:	d003      	beq.n	8008046 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2200      	movs	r2, #0
 8008042:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800804c:	2b00      	cmp	r3, #0
 800804e:	d003      	beq.n	8008058 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2200      	movs	r2, #0
 8008054:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d003      	beq.n	8008066 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	68ba      	ldr	r2, [r7, #8]
 8008062:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2201      	movs	r2, #1
 800806a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	79fa      	ldrb	r2, [r7, #7]
 8008072:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f001 fc5b 	bl	8009930 <USBD_LL_Init>
 800807a:	4603      	mov	r3, r0
 800807c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800807e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008080:	4618      	mov	r0, r3
 8008082:	3718      	adds	r7, #24
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008092:	2300      	movs	r3, #0
 8008094:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d101      	bne.n	80080a0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800809c:	2303      	movs	r3, #3
 800809e:	e010      	b.n	80080c2 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	683a      	ldr	r2, [r7, #0]
 80080a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b0:	f107 020e 	add.w	r2, r7, #14
 80080b4:	4610      	mov	r0, r2
 80080b6:	4798      	blx	r3
 80080b8:	4602      	mov	r2, r0
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3710      	adds	r7, #16
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b082      	sub	sp, #8
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f001 fc78 	bl	80099c8 <USBD_LL_Start>
 80080d8:	4603      	mov	r3, r0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3708      	adds	r7, #8
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80080e2:	b480      	push	{r7}
 80080e4:	b083      	sub	sp, #12
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	370c      	adds	r7, #12
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	460b      	mov	r3, r1
 8008102:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008104:	2303      	movs	r3, #3
 8008106:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800810e:	2b00      	cmp	r3, #0
 8008110:	d009      	beq.n	8008126 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	78fa      	ldrb	r2, [r7, #3]
 800811c:	4611      	mov	r1, r2
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	4798      	blx	r3
 8008122:	4603      	mov	r3, r0
 8008124:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008126:	7bfb      	ldrb	r3, [r7, #15]
}
 8008128:	4618      	mov	r0, r3
 800812a:	3710      	adds	r7, #16
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	460b      	mov	r3, r1
 800813a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008142:	2b00      	cmp	r3, #0
 8008144:	d007      	beq.n	8008156 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	78fa      	ldrb	r2, [r7, #3]
 8008150:	4611      	mov	r1, r2
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	4798      	blx	r3
  }

  return USBD_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008170:	6839      	ldr	r1, [r7, #0]
 8008172:	4618      	mov	r0, r3
 8008174:	f000 ff2c 	bl	8008fd0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008186:	461a      	mov	r2, r3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008194:	f003 031f 	and.w	r3, r3, #31
 8008198:	2b01      	cmp	r3, #1
 800819a:	d00e      	beq.n	80081ba <USBD_LL_SetupStage+0x5a>
 800819c:	2b01      	cmp	r3, #1
 800819e:	d302      	bcc.n	80081a6 <USBD_LL_SetupStage+0x46>
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	d014      	beq.n	80081ce <USBD_LL_SetupStage+0x6e>
 80081a4:	e01d      	b.n	80081e2 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80081ac:	4619      	mov	r1, r3
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 fa18 	bl	80085e4 <USBD_StdDevReq>
 80081b4:	4603      	mov	r3, r0
 80081b6:	73fb      	strb	r3, [r7, #15]
      break;
 80081b8:	e020      	b.n	80081fc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80081c0:	4619      	mov	r1, r3
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 fa7c 	bl	80086c0 <USBD_StdItfReq>
 80081c8:	4603      	mov	r3, r0
 80081ca:	73fb      	strb	r3, [r7, #15]
      break;
 80081cc:	e016      	b.n	80081fc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80081d4:	4619      	mov	r1, r3
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fab8 	bl	800874c <USBD_StdEPReq>
 80081dc:	4603      	mov	r3, r0
 80081de:	73fb      	strb	r3, [r7, #15]
      break;
 80081e0:	e00c      	b.n	80081fc <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80081e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	4619      	mov	r1, r3
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f001 fc49 	bl	8009a88 <USBD_LL_StallEP>
 80081f6:	4603      	mov	r3, r0
 80081f8:	73fb      	strb	r3, [r7, #15]
      break;
 80081fa:	bf00      	nop
  }

  return ret;
 80081fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3710      	adds	r7, #16
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008206:	b580      	push	{r7, lr}
 8008208:	b086      	sub	sp, #24
 800820a:	af00      	add	r7, sp, #0
 800820c:	60f8      	str	r0, [r7, #12]
 800820e:	460b      	mov	r3, r1
 8008210:	607a      	str	r2, [r7, #4]
 8008212:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008214:	7afb      	ldrb	r3, [r7, #11]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d137      	bne.n	800828a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008220:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008228:	2b03      	cmp	r3, #3
 800822a:	d14a      	bne.n	80082c2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	689a      	ldr	r2, [r3, #8]
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	429a      	cmp	r2, r3
 8008236:	d913      	bls.n	8008260 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	689a      	ldr	r2, [r3, #8]
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	1ad2      	subs	r2, r2, r3
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	68da      	ldr	r2, [r3, #12]
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	4293      	cmp	r3, r2
 8008250:	bf28      	it	cs
 8008252:	4613      	movcs	r3, r2
 8008254:	461a      	mov	r2, r3
 8008256:	6879      	ldr	r1, [r7, #4]
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f000 ffad 	bl	80091b8 <USBD_CtlContinueRx>
 800825e:	e030      	b.n	80082c2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d00a      	beq.n	8008282 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008272:	2b03      	cmp	r3, #3
 8008274:	d105      	bne.n	8008282 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	f000 ffa9 	bl	80091da <USBD_CtlSendStatus>
 8008288:	e01b      	b.n	80082c2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008290:	699b      	ldr	r3, [r3, #24]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d013      	beq.n	80082be <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800829c:	2b03      	cmp	r3, #3
 800829e:	d10e      	bne.n	80082be <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082a6:	699b      	ldr	r3, [r3, #24]
 80082a8:	7afa      	ldrb	r2, [r7, #11]
 80082aa:	4611      	mov	r1, r2
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	4798      	blx	r3
 80082b0:	4603      	mov	r3, r0
 80082b2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80082b4:	7dfb      	ldrb	r3, [r7, #23]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d003      	beq.n	80082c2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80082ba:	7dfb      	ldrb	r3, [r7, #23]
 80082bc:	e002      	b.n	80082c4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80082be:	2303      	movs	r3, #3
 80082c0:	e000      	b.n	80082c4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80082c2:	2300      	movs	r3, #0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3718      	adds	r7, #24
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b086      	sub	sp, #24
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	460b      	mov	r3, r1
 80082d6:	607a      	str	r2, [r7, #4]
 80082d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80082da:	7afb      	ldrb	r3, [r7, #11]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d16a      	bne.n	80083b6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	3314      	adds	r3, #20
 80082e4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80082ec:	2b02      	cmp	r3, #2
 80082ee:	d155      	bne.n	800839c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	689a      	ldr	r2, [r3, #8]
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d914      	bls.n	8008326 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	689a      	ldr	r2, [r3, #8]
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	1ad2      	subs	r2, r2, r3
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	461a      	mov	r2, r3
 8008310:	6879      	ldr	r1, [r7, #4]
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f000 ff22 	bl	800915c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008318:	2300      	movs	r3, #0
 800831a:	2200      	movs	r2, #0
 800831c:	2100      	movs	r1, #0
 800831e:	68f8      	ldr	r0, [r7, #12]
 8008320:	f001 fc5c 	bl	8009bdc <USBD_LL_PrepareReceive>
 8008324:	e03a      	b.n	800839c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	68da      	ldr	r2, [r3, #12]
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	429a      	cmp	r2, r3
 8008330:	d11c      	bne.n	800836c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	685a      	ldr	r2, [r3, #4]
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800833a:	429a      	cmp	r2, r3
 800833c:	d316      	bcc.n	800836c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	685a      	ldr	r2, [r3, #4]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008348:	429a      	cmp	r2, r3
 800834a:	d20f      	bcs.n	800836c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800834c:	2200      	movs	r2, #0
 800834e:	2100      	movs	r1, #0
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f000 ff03 	bl	800915c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2200      	movs	r2, #0
 800835a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800835e:	2300      	movs	r3, #0
 8008360:	2200      	movs	r2, #0
 8008362:	2100      	movs	r1, #0
 8008364:	68f8      	ldr	r0, [r7, #12]
 8008366:	f001 fc39 	bl	8009bdc <USBD_LL_PrepareReceive>
 800836a:	e017      	b.n	800839c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00a      	beq.n	800838e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800837e:	2b03      	cmp	r3, #3
 8008380:	d105      	bne.n	800838e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800838e:	2180      	movs	r1, #128	; 0x80
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f001 fb79 	bl	8009a88 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008396:	68f8      	ldr	r0, [r7, #12]
 8008398:	f000 ff32 	bl	8009200 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d123      	bne.n	80083ee <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f7ff fe9b 	bl	80080e2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80083b4:	e01b      	b.n	80083ee <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083bc:	695b      	ldr	r3, [r3, #20]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d013      	beq.n	80083ea <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80083c8:	2b03      	cmp	r3, #3
 80083ca:	d10e      	bne.n	80083ea <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083d2:	695b      	ldr	r3, [r3, #20]
 80083d4:	7afa      	ldrb	r2, [r7, #11]
 80083d6:	4611      	mov	r1, r2
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	4798      	blx	r3
 80083dc:	4603      	mov	r3, r0
 80083de:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80083e0:	7dfb      	ldrb	r3, [r7, #23]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d003      	beq.n	80083ee <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80083e6:	7dfb      	ldrb	r3, [r7, #23]
 80083e8:	e002      	b.n	80083f0 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80083ea:	2303      	movs	r3, #3
 80083ec:	e000      	b.n	80083f0 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3718      	adds	r7, #24
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008424:	2b00      	cmp	r3, #0
 8008426:	d009      	beq.n	800843c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	6852      	ldr	r2, [r2, #4]
 8008434:	b2d2      	uxtb	r2, r2
 8008436:	4611      	mov	r1, r2
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800843c:	2340      	movs	r3, #64	; 0x40
 800843e:	2200      	movs	r2, #0
 8008440:	2100      	movs	r1, #0
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f001 fadb 	bl	80099fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2240      	movs	r2, #64	; 0x40
 8008454:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008458:	2340      	movs	r3, #64	; 0x40
 800845a:	2200      	movs	r2, #0
 800845c:	2180      	movs	r1, #128	; 0x80
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f001 facd 	bl	80099fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2201      	movs	r2, #1
 8008468:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2240      	movs	r2, #64	; 0x40
 800846e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	3708      	adds	r7, #8
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800847a:	b480      	push	{r7}
 800847c:	b083      	sub	sp, #12
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
 8008482:	460b      	mov	r3, r1
 8008484:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	78fa      	ldrb	r2, [r7, #3]
 800848a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	370c      	adds	r7, #12
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr

0800849a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800849a:	b480      	push	{r7}
 800849c:	b083      	sub	sp, #12
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2204      	movs	r2, #4
 80084b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	370c      	adds	r7, #12
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084d2:	2b04      	cmp	r3, #4
 80084d4:	d105      	bne.n	80084e2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80084e2:	2300      	movs	r3, #0
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084fe:	2b03      	cmp	r3, #3
 8008500:	d10b      	bne.n	800851a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008508:	69db      	ldr	r3, [r3, #28]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d005      	beq.n	800851a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008514:	69db      	ldr	r3, [r3, #28]
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800851a:	2300      	movs	r3, #0
}
 800851c:	4618      	mov	r0, r3
 800851e:	3708      	adds	r7, #8
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	460b      	mov	r3, r1
 800852e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	370c      	adds	r7, #12
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr

0800853e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800853e:	b480      	push	{r7}
 8008540:	b083      	sub	sp, #12
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
 8008546:	460b      	mov	r3, r1
 8008548:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	370c      	adds	r7, #12
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr

0800856e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b082      	sub	sp, #8
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2201      	movs	r2, #1
 800857a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008584:	2b00      	cmp	r3, #0
 8008586:	d009      	beq.n	800859c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	6852      	ldr	r2, [r2, #4]
 8008594:	b2d2      	uxtb	r2, r2
 8008596:	4611      	mov	r1, r2
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	4798      	blx	r3
  }

  return USBD_OK;
 800859c:	2300      	movs	r3, #0
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80085a6:	b480      	push	{r7}
 80085a8:	b087      	sub	sp, #28
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	3301      	adds	r3, #1
 80085bc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80085c4:	8a3b      	ldrh	r3, [r7, #16]
 80085c6:	021b      	lsls	r3, r3, #8
 80085c8:	b21a      	sxth	r2, r3
 80085ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	b21b      	sxth	r3, r3
 80085d2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80085d4:	89fb      	ldrh	r3, [r7, #14]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	371c      	adds	r7, #28
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr
	...

080085e4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085ee:	2300      	movs	r3, #0
 80085f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085fa:	2b20      	cmp	r3, #32
 80085fc:	d004      	beq.n	8008608 <USBD_StdDevReq+0x24>
 80085fe:	2b40      	cmp	r3, #64	; 0x40
 8008600:	d002      	beq.n	8008608 <USBD_StdDevReq+0x24>
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00a      	beq.n	800861c <USBD_StdDevReq+0x38>
 8008606:	e050      	b.n	80086aa <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	6839      	ldr	r1, [r7, #0]
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	4798      	blx	r3
 8008616:	4603      	mov	r3, r0
 8008618:	73fb      	strb	r3, [r7, #15]
    break;
 800861a:	e04b      	b.n	80086b4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	785b      	ldrb	r3, [r3, #1]
 8008620:	2b09      	cmp	r3, #9
 8008622:	d83c      	bhi.n	800869e <USBD_StdDevReq+0xba>
 8008624:	a201      	add	r2, pc, #4	; (adr r2, 800862c <USBD_StdDevReq+0x48>)
 8008626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800862a:	bf00      	nop
 800862c:	08008681 	.word	0x08008681
 8008630:	08008695 	.word	0x08008695
 8008634:	0800869f 	.word	0x0800869f
 8008638:	0800868b 	.word	0x0800868b
 800863c:	0800869f 	.word	0x0800869f
 8008640:	0800865f 	.word	0x0800865f
 8008644:	08008655 	.word	0x08008655
 8008648:	0800869f 	.word	0x0800869f
 800864c:	08008677 	.word	0x08008677
 8008650:	08008669 	.word	0x08008669
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008654:	6839      	ldr	r1, [r7, #0]
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 f9ce 	bl	80089f8 <USBD_GetDescriptor>
      break;
 800865c:	e024      	b.n	80086a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800865e:	6839      	ldr	r1, [r7, #0]
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 fb33 	bl	8008ccc <USBD_SetAddress>
      break;
 8008666:	e01f      	b.n	80086a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008668:	6839      	ldr	r1, [r7, #0]
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 fb70 	bl	8008d50 <USBD_SetConfig>
 8008670:	4603      	mov	r3, r0
 8008672:	73fb      	strb	r3, [r7, #15]
      break;
 8008674:	e018      	b.n	80086a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8008676:	6839      	ldr	r1, [r7, #0]
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 fc0d 	bl	8008e98 <USBD_GetConfig>
      break;
 800867e:	e013      	b.n	80086a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008680:	6839      	ldr	r1, [r7, #0]
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 fc3c 	bl	8008f00 <USBD_GetStatus>
      break;
 8008688:	e00e      	b.n	80086a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800868a:	6839      	ldr	r1, [r7, #0]
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 fc6a 	bl	8008f66 <USBD_SetFeature>
      break;
 8008692:	e009      	b.n	80086a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008694:	6839      	ldr	r1, [r7, #0]
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fc79 	bl	8008f8e <USBD_ClrFeature>
      break;
 800869c:	e004      	b.n	80086a8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800869e:	6839      	ldr	r1, [r7, #0]
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 fccf 	bl	8009044 <USBD_CtlError>
      break;
 80086a6:	bf00      	nop
    }
    break;
 80086a8:	e004      	b.n	80086b4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80086aa:	6839      	ldr	r1, [r7, #0]
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 fcc9 	bl	8009044 <USBD_CtlError>
    break;
 80086b2:	bf00      	nop
  }

  return ret;
 80086b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3710      	adds	r7, #16
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop

080086c0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086ca:	2300      	movs	r3, #0
 80086cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80086d6:	2b20      	cmp	r3, #32
 80086d8:	d003      	beq.n	80086e2 <USBD_StdItfReq+0x22>
 80086da:	2b40      	cmp	r3, #64	; 0x40
 80086dc:	d001      	beq.n	80086e2 <USBD_StdItfReq+0x22>
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d12a      	bne.n	8008738 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086e8:	3b01      	subs	r3, #1
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	d81d      	bhi.n	800872a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	889b      	ldrh	r3, [r3, #4]
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d813      	bhi.n	8008720 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	6839      	ldr	r1, [r7, #0]
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	4798      	blx	r3
 8008706:	4603      	mov	r3, r0
 8008708:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	88db      	ldrh	r3, [r3, #6]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d110      	bne.n	8008734 <USBD_StdItfReq+0x74>
 8008712:	7bfb      	ldrb	r3, [r7, #15]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d10d      	bne.n	8008734 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fd5e 	bl	80091da <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800871e:	e009      	b.n	8008734 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008720:	6839      	ldr	r1, [r7, #0]
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 fc8e 	bl	8009044 <USBD_CtlError>
      break;
 8008728:	e004      	b.n	8008734 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800872a:	6839      	ldr	r1, [r7, #0]
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 fc89 	bl	8009044 <USBD_CtlError>
      break;
 8008732:	e000      	b.n	8008736 <USBD_StdItfReq+0x76>
      break;
 8008734:	bf00      	nop
    }
    break;
 8008736:	e004      	b.n	8008742 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008738:	6839      	ldr	r1, [r7, #0]
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 fc82 	bl	8009044 <USBD_CtlError>
    break;
 8008740:	bf00      	nop
  }

  return ret;
 8008742:	7bfb      	ldrb	r3, [r7, #15]
}
 8008744:	4618      	mov	r0, r3
 8008746:	3710      	adds	r7, #16
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008756:	2300      	movs	r3, #0
 8008758:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	889b      	ldrh	r3, [r3, #4]
 800875e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008768:	2b20      	cmp	r3, #32
 800876a:	d004      	beq.n	8008776 <USBD_StdEPReq+0x2a>
 800876c:	2b40      	cmp	r3, #64	; 0x40
 800876e:	d002      	beq.n	8008776 <USBD_StdEPReq+0x2a>
 8008770:	2b00      	cmp	r3, #0
 8008772:	d00a      	beq.n	800878a <USBD_StdEPReq+0x3e>
 8008774:	e135      	b.n	80089e2 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	6839      	ldr	r1, [r7, #0]
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	4798      	blx	r3
 8008784:	4603      	mov	r3, r0
 8008786:	73fb      	strb	r3, [r7, #15]
    break;
 8008788:	e130      	b.n	80089ec <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	785b      	ldrb	r3, [r3, #1]
 800878e:	2b01      	cmp	r3, #1
 8008790:	d03e      	beq.n	8008810 <USBD_StdEPReq+0xc4>
 8008792:	2b03      	cmp	r3, #3
 8008794:	d002      	beq.n	800879c <USBD_StdEPReq+0x50>
 8008796:	2b00      	cmp	r3, #0
 8008798:	d077      	beq.n	800888a <USBD_StdEPReq+0x13e>
 800879a:	e11c      	b.n	80089d6 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	d002      	beq.n	80087ac <USBD_StdEPReq+0x60>
 80087a6:	2b03      	cmp	r3, #3
 80087a8:	d015      	beq.n	80087d6 <USBD_StdEPReq+0x8a>
 80087aa:	e02b      	b.n	8008804 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087ac:	7bbb      	ldrb	r3, [r7, #14]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00c      	beq.n	80087cc <USBD_StdEPReq+0x80>
 80087b2:	7bbb      	ldrb	r3, [r7, #14]
 80087b4:	2b80      	cmp	r3, #128	; 0x80
 80087b6:	d009      	beq.n	80087cc <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80087b8:	7bbb      	ldrb	r3, [r7, #14]
 80087ba:	4619      	mov	r1, r3
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f001 f963 	bl	8009a88 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80087c2:	2180      	movs	r1, #128	; 0x80
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f001 f95f 	bl	8009a88 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80087ca:	e020      	b.n	800880e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80087cc:	6839      	ldr	r1, [r7, #0]
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 fc38 	bl	8009044 <USBD_CtlError>
        break;
 80087d4:	e01b      	b.n	800880e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	885b      	ldrh	r3, [r3, #2]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d10e      	bne.n	80087fc <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80087de:	7bbb      	ldrb	r3, [r7, #14]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00b      	beq.n	80087fc <USBD_StdEPReq+0xb0>
 80087e4:	7bbb      	ldrb	r3, [r7, #14]
 80087e6:	2b80      	cmp	r3, #128	; 0x80
 80087e8:	d008      	beq.n	80087fc <USBD_StdEPReq+0xb0>
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	88db      	ldrh	r3, [r3, #6]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d104      	bne.n	80087fc <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80087f2:	7bbb      	ldrb	r3, [r7, #14]
 80087f4:	4619      	mov	r1, r3
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f001 f946 	bl	8009a88 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 fcec 	bl	80091da <USBD_CtlSendStatus>

        break;
 8008802:	e004      	b.n	800880e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008804:	6839      	ldr	r1, [r7, #0]
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 fc1c 	bl	8009044 <USBD_CtlError>
        break;
 800880c:	bf00      	nop
      }
      break;
 800880e:	e0e7      	b.n	80089e0 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008816:	2b02      	cmp	r3, #2
 8008818:	d002      	beq.n	8008820 <USBD_StdEPReq+0xd4>
 800881a:	2b03      	cmp	r3, #3
 800881c:	d015      	beq.n	800884a <USBD_StdEPReq+0xfe>
 800881e:	e02d      	b.n	800887c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008820:	7bbb      	ldrb	r3, [r7, #14]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d00c      	beq.n	8008840 <USBD_StdEPReq+0xf4>
 8008826:	7bbb      	ldrb	r3, [r7, #14]
 8008828:	2b80      	cmp	r3, #128	; 0x80
 800882a:	d009      	beq.n	8008840 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800882c:	7bbb      	ldrb	r3, [r7, #14]
 800882e:	4619      	mov	r1, r3
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f001 f929 	bl	8009a88 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008836:	2180      	movs	r1, #128	; 0x80
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f001 f925 	bl	8009a88 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800883e:	e023      	b.n	8008888 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8008840:	6839      	ldr	r1, [r7, #0]
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 fbfe 	bl	8009044 <USBD_CtlError>
        break;
 8008848:	e01e      	b.n	8008888 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	885b      	ldrh	r3, [r3, #2]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d119      	bne.n	8008886 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008852:	7bbb      	ldrb	r3, [r7, #14]
 8008854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008858:	2b00      	cmp	r3, #0
 800885a:	d004      	beq.n	8008866 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800885c:	7bbb      	ldrb	r3, [r7, #14]
 800885e:	4619      	mov	r1, r3
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f001 f930 	bl	8009ac6 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 fcb7 	bl	80091da <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	6839      	ldr	r1, [r7, #0]
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	4798      	blx	r3
        }
        break;
 800887a:	e004      	b.n	8008886 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800887c:	6839      	ldr	r1, [r7, #0]
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 fbe0 	bl	8009044 <USBD_CtlError>
        break;
 8008884:	e000      	b.n	8008888 <USBD_StdEPReq+0x13c>
        break;
 8008886:	bf00      	nop
      }
      break;
 8008888:	e0aa      	b.n	80089e0 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008890:	2b02      	cmp	r3, #2
 8008892:	d002      	beq.n	800889a <USBD_StdEPReq+0x14e>
 8008894:	2b03      	cmp	r3, #3
 8008896:	d032      	beq.n	80088fe <USBD_StdEPReq+0x1b2>
 8008898:	e097      	b.n	80089ca <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800889a:	7bbb      	ldrb	r3, [r7, #14]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d007      	beq.n	80088b0 <USBD_StdEPReq+0x164>
 80088a0:	7bbb      	ldrb	r3, [r7, #14]
 80088a2:	2b80      	cmp	r3, #128	; 0x80
 80088a4:	d004      	beq.n	80088b0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80088a6:	6839      	ldr	r1, [r7, #0]
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 fbcb 	bl	8009044 <USBD_CtlError>
          break;
 80088ae:	e091      	b.n	80089d4 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	da0b      	bge.n	80088d0 <USBD_StdEPReq+0x184>
 80088b8:	7bbb      	ldrb	r3, [r7, #14]
 80088ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088be:	4613      	mov	r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4413      	add	r3, r2
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	3310      	adds	r3, #16
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	4413      	add	r3, r2
 80088cc:	3304      	adds	r3, #4
 80088ce:	e00b      	b.n	80088e8 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80088d0:	7bbb      	ldrb	r3, [r7, #14]
 80088d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088d6:	4613      	mov	r3, r2
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	4413      	add	r3, r2
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	4413      	add	r3, r2
 80088e6:	3304      	adds	r3, #4
 80088e8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	2200      	movs	r2, #0
 80088ee:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	2202      	movs	r2, #2
 80088f4:	4619      	mov	r1, r3
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 fc15 	bl	8009126 <USBD_CtlSendData>
        break;
 80088fc:	e06a      	b.n	80089d4 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80088fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008902:	2b00      	cmp	r3, #0
 8008904:	da11      	bge.n	800892a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008906:	7bbb      	ldrb	r3, [r7, #14]
 8008908:	f003 020f 	and.w	r2, r3, #15
 800890c:	6879      	ldr	r1, [r7, #4]
 800890e:	4613      	mov	r3, r2
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	4413      	add	r3, r2
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	440b      	add	r3, r1
 8008918:	3324      	adds	r3, #36	; 0x24
 800891a:	881b      	ldrh	r3, [r3, #0]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d117      	bne.n	8008950 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008920:	6839      	ldr	r1, [r7, #0]
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 fb8e 	bl	8009044 <USBD_CtlError>
            break;
 8008928:	e054      	b.n	80089d4 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800892a:	7bbb      	ldrb	r3, [r7, #14]
 800892c:	f003 020f 	and.w	r2, r3, #15
 8008930:	6879      	ldr	r1, [r7, #4]
 8008932:	4613      	mov	r3, r2
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	4413      	add	r3, r2
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	440b      	add	r3, r1
 800893c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008940:	881b      	ldrh	r3, [r3, #0]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d104      	bne.n	8008950 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008946:	6839      	ldr	r1, [r7, #0]
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 fb7b 	bl	8009044 <USBD_CtlError>
            break;
 800894e:	e041      	b.n	80089d4 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008950:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008954:	2b00      	cmp	r3, #0
 8008956:	da0b      	bge.n	8008970 <USBD_StdEPReq+0x224>
 8008958:	7bbb      	ldrb	r3, [r7, #14]
 800895a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800895e:	4613      	mov	r3, r2
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	4413      	add	r3, r2
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	3310      	adds	r3, #16
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	4413      	add	r3, r2
 800896c:	3304      	adds	r3, #4
 800896e:	e00b      	b.n	8008988 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008970:	7bbb      	ldrb	r3, [r7, #14]
 8008972:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008976:	4613      	mov	r3, r2
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	4413      	add	r3, r2
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	4413      	add	r3, r2
 8008986:	3304      	adds	r3, #4
 8008988:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800898a:	7bbb      	ldrb	r3, [r7, #14]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d002      	beq.n	8008996 <USBD_StdEPReq+0x24a>
 8008990:	7bbb      	ldrb	r3, [r7, #14]
 8008992:	2b80      	cmp	r3, #128	; 0x80
 8008994:	d103      	bne.n	800899e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	2200      	movs	r2, #0
 800899a:	601a      	str	r2, [r3, #0]
 800899c:	e00e      	b.n	80089bc <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800899e:	7bbb      	ldrb	r3, [r7, #14]
 80089a0:	4619      	mov	r1, r3
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f001 f8ae 	bl	8009b04 <USBD_LL_IsStallEP>
 80089a8:	4603      	mov	r3, r0
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d003      	beq.n	80089b6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	2201      	movs	r2, #1
 80089b2:	601a      	str	r2, [r3, #0]
 80089b4:	e002      	b.n	80089bc <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	2200      	movs	r2, #0
 80089ba:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	2202      	movs	r2, #2
 80089c0:	4619      	mov	r1, r3
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fbaf 	bl	8009126 <USBD_CtlSendData>
          break;
 80089c8:	e004      	b.n	80089d4 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80089ca:	6839      	ldr	r1, [r7, #0]
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 fb39 	bl	8009044 <USBD_CtlError>
        break;
 80089d2:	bf00      	nop
      }
      break;
 80089d4:	e004      	b.n	80089e0 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80089d6:	6839      	ldr	r1, [r7, #0]
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 fb33 	bl	8009044 <USBD_CtlError>
      break;
 80089de:	bf00      	nop
    }
    break;
 80089e0:	e004      	b.n	80089ec <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80089e2:	6839      	ldr	r1, [r7, #0]
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 fb2d 	bl	8009044 <USBD_CtlError>
    break;
 80089ea:	bf00      	nop
  }

  return ret;
 80089ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3710      	adds	r7, #16
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
	...

080089f8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a02:	2300      	movs	r3, #0
 8008a04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008a06:	2300      	movs	r3, #0
 8008a08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	885b      	ldrh	r3, [r3, #2]
 8008a12:	0a1b      	lsrs	r3, r3, #8
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	3b01      	subs	r3, #1
 8008a18:	2b06      	cmp	r3, #6
 8008a1a:	f200 8128 	bhi.w	8008c6e <USBD_GetDescriptor+0x276>
 8008a1e:	a201      	add	r2, pc, #4	; (adr r2, 8008a24 <USBD_GetDescriptor+0x2c>)
 8008a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a24:	08008a41 	.word	0x08008a41
 8008a28:	08008a59 	.word	0x08008a59
 8008a2c:	08008a99 	.word	0x08008a99
 8008a30:	08008c6f 	.word	0x08008c6f
 8008a34:	08008c6f 	.word	0x08008c6f
 8008a38:	08008c0f 	.word	0x08008c0f
 8008a3c:	08008c3b 	.word	0x08008c3b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	7c12      	ldrb	r2, [r2, #16]
 8008a4c:	f107 0108 	add.w	r1, r7, #8
 8008a50:	4610      	mov	r0, r2
 8008a52:	4798      	blx	r3
 8008a54:	60f8      	str	r0, [r7, #12]
    break;
 8008a56:	e112      	b.n	8008c7e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	7c1b      	ldrb	r3, [r3, #16]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d10d      	bne.n	8008a7c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a68:	f107 0208 	add.w	r2, r7, #8
 8008a6c:	4610      	mov	r0, r2
 8008a6e:	4798      	blx	r3
 8008a70:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	3301      	adds	r3, #1
 8008a76:	2202      	movs	r2, #2
 8008a78:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008a7a:	e100      	b.n	8008c7e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a84:	f107 0208 	add.w	r2, r7, #8
 8008a88:	4610      	mov	r0, r2
 8008a8a:	4798      	blx	r3
 8008a8c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	3301      	adds	r3, #1
 8008a92:	2202      	movs	r2, #2
 8008a94:	701a      	strb	r2, [r3, #0]
    break;
 8008a96:	e0f2      	b.n	8008c7e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	885b      	ldrh	r3, [r3, #2]
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	2b05      	cmp	r3, #5
 8008aa0:	f200 80ac 	bhi.w	8008bfc <USBD_GetDescriptor+0x204>
 8008aa4:	a201      	add	r2, pc, #4	; (adr r2, 8008aac <USBD_GetDescriptor+0xb4>)
 8008aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aaa:	bf00      	nop
 8008aac:	08008ac5 	.word	0x08008ac5
 8008ab0:	08008af9 	.word	0x08008af9
 8008ab4:	08008b2d 	.word	0x08008b2d
 8008ab8:	08008b61 	.word	0x08008b61
 8008abc:	08008b95 	.word	0x08008b95
 8008ac0:	08008bc9 	.word	0x08008bc9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d00b      	beq.n	8008ae8 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	7c12      	ldrb	r2, [r2, #16]
 8008adc:	f107 0108 	add.w	r1, r7, #8
 8008ae0:	4610      	mov	r0, r2
 8008ae2:	4798      	blx	r3
 8008ae4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ae6:	e091      	b.n	8008c0c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008ae8:	6839      	ldr	r1, [r7, #0]
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 faaa 	bl	8009044 <USBD_CtlError>
        err++;
 8008af0:	7afb      	ldrb	r3, [r7, #11]
 8008af2:	3301      	adds	r3, #1
 8008af4:	72fb      	strb	r3, [r7, #11]
      break;
 8008af6:	e089      	b.n	8008c0c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d00b      	beq.n	8008b1c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	7c12      	ldrb	r2, [r2, #16]
 8008b10:	f107 0108 	add.w	r1, r7, #8
 8008b14:	4610      	mov	r0, r2
 8008b16:	4798      	blx	r3
 8008b18:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b1a:	e077      	b.n	8008c0c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008b1c:	6839      	ldr	r1, [r7, #0]
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 fa90 	bl	8009044 <USBD_CtlError>
        err++;
 8008b24:	7afb      	ldrb	r3, [r7, #11]
 8008b26:	3301      	adds	r3, #1
 8008b28:	72fb      	strb	r3, [r7, #11]
      break;
 8008b2a:	e06f      	b.n	8008c0c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d00b      	beq.n	8008b50 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	7c12      	ldrb	r2, [r2, #16]
 8008b44:	f107 0108 	add.w	r1, r7, #8
 8008b48:	4610      	mov	r0, r2
 8008b4a:	4798      	blx	r3
 8008b4c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b4e:	e05d      	b.n	8008c0c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008b50:	6839      	ldr	r1, [r7, #0]
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 fa76 	bl	8009044 <USBD_CtlError>
        err++;
 8008b58:	7afb      	ldrb	r3, [r7, #11]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	72fb      	strb	r3, [r7, #11]
      break;
 8008b5e:	e055      	b.n	8008c0c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b66:	691b      	ldr	r3, [r3, #16]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d00b      	beq.n	8008b84 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	7c12      	ldrb	r2, [r2, #16]
 8008b78:	f107 0108 	add.w	r1, r7, #8
 8008b7c:	4610      	mov	r0, r2
 8008b7e:	4798      	blx	r3
 8008b80:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b82:	e043      	b.n	8008c0c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008b84:	6839      	ldr	r1, [r7, #0]
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 fa5c 	bl	8009044 <USBD_CtlError>
        err++;
 8008b8c:	7afb      	ldrb	r3, [r7, #11]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	72fb      	strb	r3, [r7, #11]
      break;
 8008b92:	e03b      	b.n	8008c0c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b9a:	695b      	ldr	r3, [r3, #20]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d00b      	beq.n	8008bb8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ba6:	695b      	ldr	r3, [r3, #20]
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	7c12      	ldrb	r2, [r2, #16]
 8008bac:	f107 0108 	add.w	r1, r7, #8
 8008bb0:	4610      	mov	r0, r2
 8008bb2:	4798      	blx	r3
 8008bb4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008bb6:	e029      	b.n	8008c0c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008bb8:	6839      	ldr	r1, [r7, #0]
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 fa42 	bl	8009044 <USBD_CtlError>
        err++;
 8008bc0:	7afb      	ldrb	r3, [r7, #11]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	72fb      	strb	r3, [r7, #11]
      break;
 8008bc6:	e021      	b.n	8008c0c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bce:	699b      	ldr	r3, [r3, #24]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d00b      	beq.n	8008bec <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bda:	699b      	ldr	r3, [r3, #24]
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	7c12      	ldrb	r2, [r2, #16]
 8008be0:	f107 0108 	add.w	r1, r7, #8
 8008be4:	4610      	mov	r0, r2
 8008be6:	4798      	blx	r3
 8008be8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008bea:	e00f      	b.n	8008c0c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008bec:	6839      	ldr	r1, [r7, #0]
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 fa28 	bl	8009044 <USBD_CtlError>
        err++;
 8008bf4:	7afb      	ldrb	r3, [r7, #11]
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	72fb      	strb	r3, [r7, #11]
      break;
 8008bfa:	e007      	b.n	8008c0c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008bfc:	6839      	ldr	r1, [r7, #0]
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 fa20 	bl	8009044 <USBD_CtlError>
      err++;
 8008c04:	7afb      	ldrb	r3, [r7, #11]
 8008c06:	3301      	adds	r3, #1
 8008c08:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008c0a:	bf00      	nop
    }
    break;
 8008c0c:	e037      	b.n	8008c7e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	7c1b      	ldrb	r3, [r3, #16]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d109      	bne.n	8008c2a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c1e:	f107 0208 	add.w	r2, r7, #8
 8008c22:	4610      	mov	r0, r2
 8008c24:	4798      	blx	r3
 8008c26:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008c28:	e029      	b.n	8008c7e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008c2a:	6839      	ldr	r1, [r7, #0]
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 fa09 	bl	8009044 <USBD_CtlError>
      err++;
 8008c32:	7afb      	ldrb	r3, [r7, #11]
 8008c34:	3301      	adds	r3, #1
 8008c36:	72fb      	strb	r3, [r7, #11]
    break;
 8008c38:	e021      	b.n	8008c7e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	7c1b      	ldrb	r3, [r3, #16]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d10d      	bne.n	8008c5e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c4a:	f107 0208 	add.w	r2, r7, #8
 8008c4e:	4610      	mov	r0, r2
 8008c50:	4798      	blx	r3
 8008c52:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	3301      	adds	r3, #1
 8008c58:	2207      	movs	r2, #7
 8008c5a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008c5c:	e00f      	b.n	8008c7e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008c5e:	6839      	ldr	r1, [r7, #0]
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 f9ef 	bl	8009044 <USBD_CtlError>
      err++;
 8008c66:	7afb      	ldrb	r3, [r7, #11]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	72fb      	strb	r3, [r7, #11]
    break;
 8008c6c:	e007      	b.n	8008c7e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8008c6e:	6839      	ldr	r1, [r7, #0]
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 f9e7 	bl	8009044 <USBD_CtlError>
    err++;
 8008c76:	7afb      	ldrb	r3, [r7, #11]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	72fb      	strb	r3, [r7, #11]
    break;
 8008c7c:	bf00      	nop
  }

  if (err != 0U)
 8008c7e:	7afb      	ldrb	r3, [r7, #11]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d11e      	bne.n	8008cc2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	88db      	ldrh	r3, [r3, #6]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d016      	beq.n	8008cba <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8008c8c:	893b      	ldrh	r3, [r7, #8]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d00e      	beq.n	8008cb0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	88da      	ldrh	r2, [r3, #6]
 8008c96:	893b      	ldrh	r3, [r7, #8]
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	bf28      	it	cs
 8008c9c:	4613      	movcs	r3, r2
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008ca2:	893b      	ldrh	r3, [r7, #8]
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	68f9      	ldr	r1, [r7, #12]
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 fa3c 	bl	8009126 <USBD_CtlSendData>
 8008cae:	e009      	b.n	8008cc4 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008cb0:	6839      	ldr	r1, [r7, #0]
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 f9c6 	bl	8009044 <USBD_CtlError>
 8008cb8:	e004      	b.n	8008cc4 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 fa8d 	bl	80091da <USBD_CtlSendStatus>
 8008cc0:	e000      	b.n	8008cc4 <USBD_GetDescriptor+0x2cc>
    return;
 8008cc2:	bf00      	nop
    }
  }
}
 8008cc4:	3710      	adds	r7, #16
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	bf00      	nop

08008ccc <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	889b      	ldrh	r3, [r3, #4]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d130      	bne.n	8008d40 <USBD_SetAddress+0x74>
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	88db      	ldrh	r3, [r3, #6]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d12c      	bne.n	8008d40 <USBD_SetAddress+0x74>
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	885b      	ldrh	r3, [r3, #2]
 8008cea:	2b7f      	cmp	r3, #127	; 0x7f
 8008cec:	d828      	bhi.n	8008d40 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	885b      	ldrh	r3, [r3, #2]
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cf8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d00:	2b03      	cmp	r3, #3
 8008d02:	d104      	bne.n	8008d0e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008d04:	6839      	ldr	r1, [r7, #0]
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 f99c 	bl	8009044 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d0c:	e01c      	b.n	8008d48 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	7bfa      	ldrb	r2, [r7, #15]
 8008d12:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008d16:	7bfb      	ldrb	r3, [r7, #15]
 8008d18:	4619      	mov	r1, r3
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 ff1e 	bl	8009b5c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 fa5a 	bl	80091da <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008d26:	7bfb      	ldrb	r3, [r7, #15]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d004      	beq.n	8008d36 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2202      	movs	r2, #2
 8008d30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d34:	e008      	b.n	8008d48 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d3e:	e003      	b.n	8008d48 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008d40:	6839      	ldr	r1, [r7, #0]
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 f97e 	bl	8009044 <USBD_CtlError>
  }
}
 8008d48:	bf00      	nop
 8008d4a:	3710      	adds	r7, #16
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	885b      	ldrh	r3, [r3, #2]
 8008d62:	b2da      	uxtb	r2, r3
 8008d64:	4b4b      	ldr	r3, [pc, #300]	; (8008e94 <USBD_SetConfig+0x144>)
 8008d66:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008d68:	4b4a      	ldr	r3, [pc, #296]	; (8008e94 <USBD_SetConfig+0x144>)
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d905      	bls.n	8008d7c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008d70:	6839      	ldr	r1, [r7, #0]
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 f966 	bl	8009044 <USBD_CtlError>
    return USBD_FAIL;
 8008d78:	2303      	movs	r3, #3
 8008d7a:	e087      	b.n	8008e8c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d82:	2b02      	cmp	r3, #2
 8008d84:	d002      	beq.n	8008d8c <USBD_SetConfig+0x3c>
 8008d86:	2b03      	cmp	r3, #3
 8008d88:	d025      	beq.n	8008dd6 <USBD_SetConfig+0x86>
 8008d8a:	e071      	b.n	8008e70 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008d8c:	4b41      	ldr	r3, [pc, #260]	; (8008e94 <USBD_SetConfig+0x144>)
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d01c      	beq.n	8008dce <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008d94:	4b3f      	ldr	r3, [pc, #252]	; (8008e94 <USBD_SetConfig+0x144>)
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	461a      	mov	r2, r3
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008d9e:	4b3d      	ldr	r3, [pc, #244]	; (8008e94 <USBD_SetConfig+0x144>)
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	4619      	mov	r1, r3
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f7ff f9a7 	bl	80080f8 <USBD_SetClassConfig>
 8008daa:	4603      	mov	r3, r0
 8008dac:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008dae:	7bfb      	ldrb	r3, [r7, #15]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d004      	beq.n	8008dbe <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008db4:	6839      	ldr	r1, [r7, #0]
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 f944 	bl	8009044 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008dbc:	e065      	b.n	8008e8a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 fa0b 	bl	80091da <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2203      	movs	r2, #3
 8008dc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008dcc:	e05d      	b.n	8008e8a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 fa03 	bl	80091da <USBD_CtlSendStatus>
    break;
 8008dd4:	e059      	b.n	8008e8a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008dd6:	4b2f      	ldr	r3, [pc, #188]	; (8008e94 <USBD_SetConfig+0x144>)
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d112      	bne.n	8008e04 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2202      	movs	r2, #2
 8008de2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008de6:	4b2b      	ldr	r3, [pc, #172]	; (8008e94 <USBD_SetConfig+0x144>)
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	461a      	mov	r2, r3
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008df0:	4b28      	ldr	r3, [pc, #160]	; (8008e94 <USBD_SetConfig+0x144>)
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	4619      	mov	r1, r3
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f7ff f99a 	bl	8008130 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 f9ec 	bl	80091da <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008e02:	e042      	b.n	8008e8a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008e04:	4b23      	ldr	r3, [pc, #140]	; (8008e94 <USBD_SetConfig+0x144>)
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	461a      	mov	r2, r3
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d02a      	beq.n	8008e68 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	4619      	mov	r1, r3
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f7ff f988 	bl	8008130 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008e20:	4b1c      	ldr	r3, [pc, #112]	; (8008e94 <USBD_SetConfig+0x144>)
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	461a      	mov	r2, r3
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008e2a:	4b1a      	ldr	r3, [pc, #104]	; (8008e94 <USBD_SetConfig+0x144>)
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	4619      	mov	r1, r3
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f7ff f961 	bl	80080f8 <USBD_SetClassConfig>
 8008e36:	4603      	mov	r3, r0
 8008e38:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008e3a:	7bfb      	ldrb	r3, [r7, #15]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d00f      	beq.n	8008e60 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008e40:	6839      	ldr	r1, [r7, #0]
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 f8fe 	bl	8009044 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	4619      	mov	r1, r3
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f7ff f96d 	bl	8008130 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2202      	movs	r2, #2
 8008e5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008e5e:	e014      	b.n	8008e8a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 f9ba 	bl	80091da <USBD_CtlSendStatus>
    break;
 8008e66:	e010      	b.n	8008e8a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 f9b6 	bl	80091da <USBD_CtlSendStatus>
    break;
 8008e6e:	e00c      	b.n	8008e8a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008e70:	6839      	ldr	r1, [r7, #0]
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 f8e6 	bl	8009044 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008e78:	4b06      	ldr	r3, [pc, #24]	; (8008e94 <USBD_SetConfig+0x144>)
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f7ff f956 	bl	8008130 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008e84:	2303      	movs	r3, #3
 8008e86:	73fb      	strb	r3, [r7, #15]
    break;
 8008e88:	bf00      	nop
  }

  return ret;
 8008e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3710      	adds	r7, #16
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	20000208 	.word	0x20000208

08008e98 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	88db      	ldrh	r3, [r3, #6]
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d004      	beq.n	8008eb4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008eaa:	6839      	ldr	r1, [r7, #0]
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 f8c9 	bl	8009044 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008eb2:	e021      	b.n	8008ef8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	db17      	blt.n	8008eee <USBD_GetConfig+0x56>
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	dd02      	ble.n	8008ec8 <USBD_GetConfig+0x30>
 8008ec2:	2b03      	cmp	r3, #3
 8008ec4:	d00b      	beq.n	8008ede <USBD_GetConfig+0x46>
 8008ec6:	e012      	b.n	8008eee <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	3308      	adds	r3, #8
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 f925 	bl	8009126 <USBD_CtlSendData>
      break;
 8008edc:	e00c      	b.n	8008ef8 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	3304      	adds	r3, #4
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 f91d 	bl	8009126 <USBD_CtlSendData>
      break;
 8008eec:	e004      	b.n	8008ef8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008eee:	6839      	ldr	r1, [r7, #0]
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 f8a7 	bl	8009044 <USBD_CtlError>
      break;
 8008ef6:	bf00      	nop
}
 8008ef8:	bf00      	nop
 8008efa:	3708      	adds	r7, #8
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f10:	3b01      	subs	r3, #1
 8008f12:	2b02      	cmp	r3, #2
 8008f14:	d81e      	bhi.n	8008f54 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	88db      	ldrh	r3, [r3, #6]
 8008f1a:	2b02      	cmp	r3, #2
 8008f1c:	d004      	beq.n	8008f28 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008f1e:	6839      	ldr	r1, [r7, #0]
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 f88f 	bl	8009044 <USBD_CtlError>
      break;
 8008f26:	e01a      	b.n	8008f5e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d005      	beq.n	8008f44 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	f043 0202 	orr.w	r2, r3, #2
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	330c      	adds	r3, #12
 8008f48:	2202      	movs	r2, #2
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 f8ea 	bl	8009126 <USBD_CtlSendData>
    break;
 8008f52:	e004      	b.n	8008f5e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008f54:	6839      	ldr	r1, [r7, #0]
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 f874 	bl	8009044 <USBD_CtlError>
    break;
 8008f5c:	bf00      	nop
  }
}
 8008f5e:	bf00      	nop
 8008f60:	3708      	adds	r7, #8
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b082      	sub	sp, #8
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
 8008f6e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	885b      	ldrh	r3, [r3, #2]
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d106      	bne.n	8008f86 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 f92a 	bl	80091da <USBD_CtlSendStatus>
  }
}
 8008f86:	bf00      	nop
 8008f88:	3708      	adds	r7, #8
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b082      	sub	sp, #8
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
 8008f96:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f9e:	3b01      	subs	r3, #1
 8008fa0:	2b02      	cmp	r3, #2
 8008fa2:	d80b      	bhi.n	8008fbc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	885b      	ldrh	r3, [r3, #2]
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d10c      	bne.n	8008fc6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 f910 	bl	80091da <USBD_CtlSendStatus>
      }
      break;
 8008fba:	e004      	b.n	8008fc6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008fbc:	6839      	ldr	r1, [r7, #0]
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f840 	bl	8009044 <USBD_CtlError>
      break;
 8008fc4:	e000      	b.n	8008fc8 <USBD_ClrFeature+0x3a>
      break;
 8008fc6:	bf00      	nop
  }
}
 8008fc8:	bf00      	nop
 8008fca:	3708      	adds	r7, #8
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	781a      	ldrb	r2, [r3, #0]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	3301      	adds	r3, #1
 8008fea:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	781a      	ldrb	r2, [r3, #0]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008ffa:	68f8      	ldr	r0, [r7, #12]
 8008ffc:	f7ff fad3 	bl	80085a6 <SWAPBYTE>
 8009000:	4603      	mov	r3, r0
 8009002:	461a      	mov	r2, r3
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	3301      	adds	r3, #1
 800900c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	3301      	adds	r3, #1
 8009012:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009014:	68f8      	ldr	r0, [r7, #12]
 8009016:	f7ff fac6 	bl	80085a6 <SWAPBYTE>
 800901a:	4603      	mov	r3, r0
 800901c:	461a      	mov	r2, r3
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	3301      	adds	r3, #1
 8009026:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	3301      	adds	r3, #1
 800902c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800902e:	68f8      	ldr	r0, [r7, #12]
 8009030:	f7ff fab9 	bl	80085a6 <SWAPBYTE>
 8009034:	4603      	mov	r3, r0
 8009036:	461a      	mov	r2, r3
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	80da      	strh	r2, [r3, #6]
}
 800903c:	bf00      	nop
 800903e:	3710      	adds	r7, #16
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800904e:	2180      	movs	r1, #128	; 0x80
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 fd19 	bl	8009a88 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009056:	2100      	movs	r1, #0
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 fd15 	bl	8009a88 <USBD_LL_StallEP>
}
 800905e:	bf00      	nop
 8009060:	3708      	adds	r7, #8
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b086      	sub	sp, #24
 800906a:	af00      	add	r7, sp, #0
 800906c:	60f8      	str	r0, [r7, #12]
 800906e:	60b9      	str	r1, [r7, #8]
 8009070:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009072:	2300      	movs	r3, #0
 8009074:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d036      	beq.n	80090ea <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009080:	6938      	ldr	r0, [r7, #16]
 8009082:	f000 f836 	bl	80090f2 <USBD_GetLen>
 8009086:	4603      	mov	r3, r0
 8009088:	3301      	adds	r3, #1
 800908a:	b29b      	uxth	r3, r3
 800908c:	005b      	lsls	r3, r3, #1
 800908e:	b29a      	uxth	r2, r3
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009094:	7dfb      	ldrb	r3, [r7, #23]
 8009096:	68ba      	ldr	r2, [r7, #8]
 8009098:	4413      	add	r3, r2
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	7812      	ldrb	r2, [r2, #0]
 800909e:	701a      	strb	r2, [r3, #0]
  idx++;
 80090a0:	7dfb      	ldrb	r3, [r7, #23]
 80090a2:	3301      	adds	r3, #1
 80090a4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80090a6:	7dfb      	ldrb	r3, [r7, #23]
 80090a8:	68ba      	ldr	r2, [r7, #8]
 80090aa:	4413      	add	r3, r2
 80090ac:	2203      	movs	r2, #3
 80090ae:	701a      	strb	r2, [r3, #0]
  idx++;
 80090b0:	7dfb      	ldrb	r3, [r7, #23]
 80090b2:	3301      	adds	r3, #1
 80090b4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80090b6:	e013      	b.n	80090e0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80090b8:	7dfb      	ldrb	r3, [r7, #23]
 80090ba:	68ba      	ldr	r2, [r7, #8]
 80090bc:	4413      	add	r3, r2
 80090be:	693a      	ldr	r2, [r7, #16]
 80090c0:	7812      	ldrb	r2, [r2, #0]
 80090c2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	3301      	adds	r3, #1
 80090c8:	613b      	str	r3, [r7, #16]
    idx++;
 80090ca:	7dfb      	ldrb	r3, [r7, #23]
 80090cc:	3301      	adds	r3, #1
 80090ce:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80090d0:	7dfb      	ldrb	r3, [r7, #23]
 80090d2:	68ba      	ldr	r2, [r7, #8]
 80090d4:	4413      	add	r3, r2
 80090d6:	2200      	movs	r2, #0
 80090d8:	701a      	strb	r2, [r3, #0]
    idx++;
 80090da:	7dfb      	ldrb	r3, [r7, #23]
 80090dc:	3301      	adds	r3, #1
 80090de:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d1e7      	bne.n	80090b8 <USBD_GetString+0x52>
 80090e8:	e000      	b.n	80090ec <USBD_GetString+0x86>
    return;
 80090ea:	bf00      	nop
  }
}
 80090ec:	3718      	adds	r7, #24
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80090f2:	b480      	push	{r7}
 80090f4:	b085      	sub	sp, #20
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80090fa:	2300      	movs	r3, #0
 80090fc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009102:	e005      	b.n	8009110 <USBD_GetLen+0x1e>
  {
    len++;
 8009104:	7bfb      	ldrb	r3, [r7, #15]
 8009106:	3301      	adds	r3, #1
 8009108:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	3301      	adds	r3, #1
 800910e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d1f5      	bne.n	8009104 <USBD_GetLen+0x12>
  }

  return len;
 8009118:	7bfb      	ldrb	r3, [r7, #15]
}
 800911a:	4618      	mov	r0, r3
 800911c:	3714      	adds	r7, #20
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr

08009126 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b084      	sub	sp, #16
 800912a:	af00      	add	r7, sp, #0
 800912c:	60f8      	str	r0, [r7, #12]
 800912e:	60b9      	str	r1, [r7, #8]
 8009130:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2202      	movs	r2, #2
 8009136:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	68ba      	ldr	r2, [r7, #8]
 800914a:	2100      	movs	r1, #0
 800914c:	68f8      	ldr	r0, [r7, #12]
 800914e:	f000 fd24 	bl	8009b9a <USBD_LL_Transmit>

  return USBD_OK;
 8009152:	2300      	movs	r3, #0
}
 8009154:	4618      	mov	r0, r3
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	60b9      	str	r1, [r7, #8]
 8009166:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	68ba      	ldr	r2, [r7, #8]
 800916c:	2100      	movs	r1, #0
 800916e:	68f8      	ldr	r0, [r7, #12]
 8009170:	f000 fd13 	bl	8009b9a <USBD_LL_Transmit>

  return USBD_OK;
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	3710      	adds	r7, #16
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b084      	sub	sp, #16
 8009182:	af00      	add	r7, sp, #0
 8009184:	60f8      	str	r0, [r7, #12]
 8009186:	60b9      	str	r1, [r7, #8]
 8009188:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2203      	movs	r2, #3
 800918e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	68ba      	ldr	r2, [r7, #8]
 80091a6:	2100      	movs	r1, #0
 80091a8:	68f8      	ldr	r0, [r7, #12]
 80091aa:	f000 fd17 	bl	8009bdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091ae:	2300      	movs	r3, #0
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3710      	adds	r7, #16
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	68ba      	ldr	r2, [r7, #8]
 80091c8:	2100      	movs	r1, #0
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f000 fd06 	bl	8009bdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b082      	sub	sp, #8
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2204      	movs	r2, #4
 80091e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80091ea:	2300      	movs	r3, #0
 80091ec:	2200      	movs	r2, #0
 80091ee:	2100      	movs	r1, #0
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 fcd2 	bl	8009b9a <USBD_LL_Transmit>

  return USBD_OK;
 80091f6:	2300      	movs	r3, #0
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3708      	adds	r7, #8
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2205      	movs	r2, #5
 800920c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009210:	2300      	movs	r3, #0
 8009212:	2200      	movs	r2, #0
 8009214:	2100      	movs	r1, #0
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 fce0 	bl	8009bdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3708      	adds	r7, #8
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
	...

08009228 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800922c:	2200      	movs	r2, #0
 800922e:	4912      	ldr	r1, [pc, #72]	; (8009278 <MX_USB_DEVICE_Init+0x50>)
 8009230:	4812      	ldr	r0, [pc, #72]	; (800927c <MX_USB_DEVICE_Init+0x54>)
 8009232:	f7fe fef3 	bl	800801c <USBD_Init>
 8009236:	4603      	mov	r3, r0
 8009238:	2b00      	cmp	r3, #0
 800923a:	d001      	beq.n	8009240 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800923c:	f7f7 fbee 	bl	8000a1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009240:	490f      	ldr	r1, [pc, #60]	; (8009280 <MX_USB_DEVICE_Init+0x58>)
 8009242:	480e      	ldr	r0, [pc, #56]	; (800927c <MX_USB_DEVICE_Init+0x54>)
 8009244:	f7fe ff20 	bl	8008088 <USBD_RegisterClass>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d001      	beq.n	8009252 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800924e:	f7f7 fbe5 	bl	8000a1c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009252:	490c      	ldr	r1, [pc, #48]	; (8009284 <MX_USB_DEVICE_Init+0x5c>)
 8009254:	4809      	ldr	r0, [pc, #36]	; (800927c <MX_USB_DEVICE_Init+0x54>)
 8009256:	f7fe fe45 	bl	8007ee4 <USBD_CDC_RegisterInterface>
 800925a:	4603      	mov	r3, r0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d001      	beq.n	8009264 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009260:	f7f7 fbdc 	bl	8000a1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009264:	4805      	ldr	r0, [pc, #20]	; (800927c <MX_USB_DEVICE_Init+0x54>)
 8009266:	f7fe ff30 	bl	80080ca <USBD_Start>
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d001      	beq.n	8009274 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009270:	f7f7 fbd4 	bl	8000a1c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009274:	bf00      	nop
 8009276:	bd80      	pop	{r7, pc}
 8009278:	20000134 	.word	0x20000134
 800927c:	20001424 	.word	0x20001424
 8009280:	2000001c 	.word	0x2000001c
 8009284:	20000120 	.word	0x20000120

08009288 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800928c:	2200      	movs	r2, #0
 800928e:	4905      	ldr	r1, [pc, #20]	; (80092a4 <CDC_Init_FS+0x1c>)
 8009290:	4805      	ldr	r0, [pc, #20]	; (80092a8 <CDC_Init_FS+0x20>)
 8009292:	f7fe fe3c 	bl	8007f0e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009296:	4905      	ldr	r1, [pc, #20]	; (80092ac <CDC_Init_FS+0x24>)
 8009298:	4803      	ldr	r0, [pc, #12]	; (80092a8 <CDC_Init_FS+0x20>)
 800929a:	f7fe fe51 	bl	8007f40 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800929e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	20001adc 	.word	0x20001adc
 80092a8:	20001424 	.word	0x20001424
 80092ac:	200016f4 	.word	0x200016f4

080092b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80092b0:	b480      	push	{r7}
 80092b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80092b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr

080092c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	4603      	mov	r3, r0
 80092c8:	6039      	str	r1, [r7, #0]
 80092ca:	71fb      	strb	r3, [r7, #7]
 80092cc:	4613      	mov	r3, r2
 80092ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80092d0:	79fb      	ldrb	r3, [r7, #7]
 80092d2:	2b23      	cmp	r3, #35	; 0x23
 80092d4:	f200 808c 	bhi.w	80093f0 <CDC_Control_FS+0x130>
 80092d8:	a201      	add	r2, pc, #4	; (adr r2, 80092e0 <CDC_Control_FS+0x20>)
 80092da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092de:	bf00      	nop
 80092e0:	080093f1 	.word	0x080093f1
 80092e4:	080093f1 	.word	0x080093f1
 80092e8:	080093f1 	.word	0x080093f1
 80092ec:	080093f1 	.word	0x080093f1
 80092f0:	080093f1 	.word	0x080093f1
 80092f4:	080093f1 	.word	0x080093f1
 80092f8:	080093f1 	.word	0x080093f1
 80092fc:	080093f1 	.word	0x080093f1
 8009300:	080093f1 	.word	0x080093f1
 8009304:	080093f1 	.word	0x080093f1
 8009308:	080093f1 	.word	0x080093f1
 800930c:	080093f1 	.word	0x080093f1
 8009310:	080093f1 	.word	0x080093f1
 8009314:	080093f1 	.word	0x080093f1
 8009318:	080093f1 	.word	0x080093f1
 800931c:	080093f1 	.word	0x080093f1
 8009320:	080093f1 	.word	0x080093f1
 8009324:	080093f1 	.word	0x080093f1
 8009328:	080093f1 	.word	0x080093f1
 800932c:	080093f1 	.word	0x080093f1
 8009330:	080093f1 	.word	0x080093f1
 8009334:	080093f1 	.word	0x080093f1
 8009338:	080093f1 	.word	0x080093f1
 800933c:	080093f1 	.word	0x080093f1
 8009340:	080093f1 	.word	0x080093f1
 8009344:	080093f1 	.word	0x080093f1
 8009348:	080093f1 	.word	0x080093f1
 800934c:	080093f1 	.word	0x080093f1
 8009350:	080093f1 	.word	0x080093f1
 8009354:	080093f1 	.word	0x080093f1
 8009358:	080093f1 	.word	0x080093f1
 800935c:	080093f1 	.word	0x080093f1
 8009360:	08009371 	.word	0x08009371
 8009364:	080093ab 	.word	0x080093ab
 8009368:	080093f1 	.word	0x080093f1
 800936c:	080093f1 	.word	0x080093f1
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	tempbuf[0] = pbuf[0];
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	781a      	ldrb	r2, [r3, #0]
 8009374:	4b22      	ldr	r3, [pc, #136]	; (8009400 <CDC_Control_FS+0x140>)
 8009376:	701a      	strb	r2, [r3, #0]
    	tempbuf[1] = pbuf[1];
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	785a      	ldrb	r2, [r3, #1]
 800937c:	4b20      	ldr	r3, [pc, #128]	; (8009400 <CDC_Control_FS+0x140>)
 800937e:	705a      	strb	r2, [r3, #1]
    	tempbuf[2] = pbuf[2];
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	789a      	ldrb	r2, [r3, #2]
 8009384:	4b1e      	ldr	r3, [pc, #120]	; (8009400 <CDC_Control_FS+0x140>)
 8009386:	709a      	strb	r2, [r3, #2]
    	tempbuf[3] = pbuf[3];
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	78da      	ldrb	r2, [r3, #3]
 800938c:	4b1c      	ldr	r3, [pc, #112]	; (8009400 <CDC_Control_FS+0x140>)
 800938e:	70da      	strb	r2, [r3, #3]
    	tempbuf[4] = pbuf[4];
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	791a      	ldrb	r2, [r3, #4]
 8009394:	4b1a      	ldr	r3, [pc, #104]	; (8009400 <CDC_Control_FS+0x140>)
 8009396:	711a      	strb	r2, [r3, #4]
    	tempbuf[5] = pbuf[5];
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	795a      	ldrb	r2, [r3, #5]
 800939c:	4b18      	ldr	r3, [pc, #96]	; (8009400 <CDC_Control_FS+0x140>)
 800939e:	715a      	strb	r2, [r3, #5]
    	tempbuf[6] = pbuf[6];
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	799a      	ldrb	r2, [r3, #6]
 80093a4:	4b16      	ldr	r3, [pc, #88]	; (8009400 <CDC_Control_FS+0x140>)
 80093a6:	719a      	strb	r2, [r3, #6]
    break;
 80093a8:	e023      	b.n	80093f2 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = tempbuf[0];
 80093aa:	4b15      	ldr	r3, [pc, #84]	; (8009400 <CDC_Control_FS+0x140>)
 80093ac:	781a      	ldrb	r2, [r3, #0]
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = tempbuf[1];
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	3301      	adds	r3, #1
 80093b6:	4a12      	ldr	r2, [pc, #72]	; (8009400 <CDC_Control_FS+0x140>)
 80093b8:	7852      	ldrb	r2, [r2, #1]
 80093ba:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = tempbuf[2];
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	3302      	adds	r3, #2
 80093c0:	4a0f      	ldr	r2, [pc, #60]	; (8009400 <CDC_Control_FS+0x140>)
 80093c2:	7892      	ldrb	r2, [r2, #2]
 80093c4:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = tempbuf[3];
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	3303      	adds	r3, #3
 80093ca:	4a0d      	ldr	r2, [pc, #52]	; (8009400 <CDC_Control_FS+0x140>)
 80093cc:	78d2      	ldrb	r2, [r2, #3]
 80093ce:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = tempbuf[4];
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	3304      	adds	r3, #4
 80093d4:	4a0a      	ldr	r2, [pc, #40]	; (8009400 <CDC_Control_FS+0x140>)
 80093d6:	7912      	ldrb	r2, [r2, #4]
 80093d8:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = tempbuf[5];
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	3305      	adds	r3, #5
 80093de:	4a08      	ldr	r2, [pc, #32]	; (8009400 <CDC_Control_FS+0x140>)
 80093e0:	7952      	ldrb	r2, [r2, #5]
 80093e2:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = tempbuf[6];
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	3306      	adds	r3, #6
 80093e8:	4a05      	ldr	r2, [pc, #20]	; (8009400 <CDC_Control_FS+0x140>)
 80093ea:	7992      	ldrb	r2, [r2, #6]
 80093ec:	701a      	strb	r2, [r3, #0]
    break;
 80093ee:	e000      	b.n	80093f2 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80093f0:	bf00      	nop
  }

  return (USBD_OK);
 80093f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	370c      	adds	r7, #12
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr
 8009400:	2000020c 	.word	0x2000020c

08009404 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800940e:	6879      	ldr	r1, [r7, #4]
 8009410:	4805      	ldr	r0, [pc, #20]	; (8009428 <CDC_Receive_FS+0x24>)
 8009412:	f7fe fd95 	bl	8007f40 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009416:	4804      	ldr	r0, [pc, #16]	; (8009428 <CDC_Receive_FS+0x24>)
 8009418:	f7fe fdd6 	bl	8007fc8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800941c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800941e:	4618      	mov	r0, r3
 8009420:	3708      	adds	r7, #8
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	20001424 	.word	0x20001424

0800942c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	460b      	mov	r3, r1
 8009436:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009438:	2300      	movs	r3, #0
 800943a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800943c:	4b0d      	ldr	r3, [pc, #52]	; (8009474 <CDC_Transmit_FS+0x48>)
 800943e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009442:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800944a:	2b00      	cmp	r3, #0
 800944c:	d001      	beq.n	8009452 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800944e:	2301      	movs	r3, #1
 8009450:	e00b      	b.n	800946a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009452:	887b      	ldrh	r3, [r7, #2]
 8009454:	461a      	mov	r2, r3
 8009456:	6879      	ldr	r1, [r7, #4]
 8009458:	4806      	ldr	r0, [pc, #24]	; (8009474 <CDC_Transmit_FS+0x48>)
 800945a:	f7fe fd58 	bl	8007f0e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800945e:	4805      	ldr	r0, [pc, #20]	; (8009474 <CDC_Transmit_FS+0x48>)
 8009460:	f7fe fd82 	bl	8007f68 <USBD_CDC_TransmitPacket>
 8009464:	4603      	mov	r3, r0
 8009466:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009468:	7bfb      	ldrb	r3, [r7, #15]
}
 800946a:	4618      	mov	r0, r3
 800946c:	3710      	adds	r7, #16
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	20001424 	.word	0x20001424

08009478 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009478:	b480      	push	{r7}
 800947a:	b087      	sub	sp, #28
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	4613      	mov	r3, r2
 8009484:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009486:	2300      	movs	r3, #0
 8009488:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800948a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800948e:	4618      	mov	r0, r3
 8009490:	371c      	adds	r7, #28
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr
	...

0800949c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	4603      	mov	r3, r0
 80094a4:	6039      	str	r1, [r7, #0]
 80094a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	2212      	movs	r2, #18
 80094ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80094ae:	4b03      	ldr	r3, [pc, #12]	; (80094bc <USBD_FS_DeviceDescriptor+0x20>)
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr
 80094bc:	20000150 	.word	0x20000150

080094c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	4603      	mov	r3, r0
 80094c8:	6039      	str	r1, [r7, #0]
 80094ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	2204      	movs	r2, #4
 80094d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80094d2:	4b03      	ldr	r3, [pc, #12]	; (80094e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr
 80094e0:	20000164 	.word	0x20000164

080094e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b082      	sub	sp, #8
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	4603      	mov	r3, r0
 80094ec:	6039      	str	r1, [r7, #0]
 80094ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80094f0:	79fb      	ldrb	r3, [r7, #7]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d105      	bne.n	8009502 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80094f6:	683a      	ldr	r2, [r7, #0]
 80094f8:	4907      	ldr	r1, [pc, #28]	; (8009518 <USBD_FS_ProductStrDescriptor+0x34>)
 80094fa:	4808      	ldr	r0, [pc, #32]	; (800951c <USBD_FS_ProductStrDescriptor+0x38>)
 80094fc:	f7ff fdb3 	bl	8009066 <USBD_GetString>
 8009500:	e004      	b.n	800950c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009502:	683a      	ldr	r2, [r7, #0]
 8009504:	4904      	ldr	r1, [pc, #16]	; (8009518 <USBD_FS_ProductStrDescriptor+0x34>)
 8009506:	4805      	ldr	r0, [pc, #20]	; (800951c <USBD_FS_ProductStrDescriptor+0x38>)
 8009508:	f7ff fdad 	bl	8009066 <USBD_GetString>
  }
  return USBD_StrDesc;
 800950c:	4b02      	ldr	r3, [pc, #8]	; (8009518 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800950e:	4618      	mov	r0, r3
 8009510:	3708      	adds	r7, #8
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	20001ec4 	.word	0x20001ec4
 800951c:	0800a558 	.word	0x0800a558

08009520 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
 8009526:	4603      	mov	r3, r0
 8009528:	6039      	str	r1, [r7, #0]
 800952a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800952c:	683a      	ldr	r2, [r7, #0]
 800952e:	4904      	ldr	r1, [pc, #16]	; (8009540 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009530:	4804      	ldr	r0, [pc, #16]	; (8009544 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009532:	f7ff fd98 	bl	8009066 <USBD_GetString>
  return USBD_StrDesc;
 8009536:	4b02      	ldr	r3, [pc, #8]	; (8009540 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009538:	4618      	mov	r0, r3
 800953a:	3708      	adds	r7, #8
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}
 8009540:	20001ec4 	.word	0x20001ec4
 8009544:	0800a570 	.word	0x0800a570

08009548 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
 800954e:	4603      	mov	r3, r0
 8009550:	6039      	str	r1, [r7, #0]
 8009552:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	221a      	movs	r2, #26
 8009558:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800955a:	f000 f843 	bl	80095e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800955e:	4b02      	ldr	r3, [pc, #8]	; (8009568 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009560:	4618      	mov	r0, r3
 8009562:	3708      	adds	r7, #8
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	20000168 	.word	0x20000168

0800956c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	4603      	mov	r3, r0
 8009574:	6039      	str	r1, [r7, #0]
 8009576:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009578:	79fb      	ldrb	r3, [r7, #7]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d105      	bne.n	800958a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800957e:	683a      	ldr	r2, [r7, #0]
 8009580:	4907      	ldr	r1, [pc, #28]	; (80095a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009582:	4808      	ldr	r0, [pc, #32]	; (80095a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009584:	f7ff fd6f 	bl	8009066 <USBD_GetString>
 8009588:	e004      	b.n	8009594 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800958a:	683a      	ldr	r2, [r7, #0]
 800958c:	4904      	ldr	r1, [pc, #16]	; (80095a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800958e:	4805      	ldr	r0, [pc, #20]	; (80095a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009590:	f7ff fd69 	bl	8009066 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009594:	4b02      	ldr	r3, [pc, #8]	; (80095a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009596:	4618      	mov	r0, r3
 8009598:	3708      	adds	r7, #8
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	20001ec4 	.word	0x20001ec4
 80095a4:	0800a584 	.word	0x0800a584

080095a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	4603      	mov	r3, r0
 80095b0:	6039      	str	r1, [r7, #0]
 80095b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095b4:	79fb      	ldrb	r3, [r7, #7]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d105      	bne.n	80095c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095ba:	683a      	ldr	r2, [r7, #0]
 80095bc:	4907      	ldr	r1, [pc, #28]	; (80095dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80095be:	4808      	ldr	r0, [pc, #32]	; (80095e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80095c0:	f7ff fd51 	bl	8009066 <USBD_GetString>
 80095c4:	e004      	b.n	80095d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095c6:	683a      	ldr	r2, [r7, #0]
 80095c8:	4904      	ldr	r1, [pc, #16]	; (80095dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80095ca:	4805      	ldr	r0, [pc, #20]	; (80095e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80095cc:	f7ff fd4b 	bl	8009066 <USBD_GetString>
  }
  return USBD_StrDesc;
 80095d0:	4b02      	ldr	r3, [pc, #8]	; (80095dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3708      	adds	r7, #8
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop
 80095dc:	20001ec4 	.word	0x20001ec4
 80095e0:	0800a590 	.word	0x0800a590

080095e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80095ea:	4b0f      	ldr	r3, [pc, #60]	; (8009628 <Get_SerialNum+0x44>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80095f0:	4b0e      	ldr	r3, [pc, #56]	; (800962c <Get_SerialNum+0x48>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80095f6:	4b0e      	ldr	r3, [pc, #56]	; (8009630 <Get_SerialNum+0x4c>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80095fc:	68fa      	ldr	r2, [r7, #12]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4413      	add	r3, r2
 8009602:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d009      	beq.n	800961e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800960a:	2208      	movs	r2, #8
 800960c:	4909      	ldr	r1, [pc, #36]	; (8009634 <Get_SerialNum+0x50>)
 800960e:	68f8      	ldr	r0, [r7, #12]
 8009610:	f000 f814 	bl	800963c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009614:	2204      	movs	r2, #4
 8009616:	4908      	ldr	r1, [pc, #32]	; (8009638 <Get_SerialNum+0x54>)
 8009618:	68b8      	ldr	r0, [r7, #8]
 800961a:	f000 f80f 	bl	800963c <IntToUnicode>
  }
}
 800961e:	bf00      	nop
 8009620:	3710      	adds	r7, #16
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	1fff7a10 	.word	0x1fff7a10
 800962c:	1fff7a14 	.word	0x1fff7a14
 8009630:	1fff7a18 	.word	0x1fff7a18
 8009634:	2000016a 	.word	0x2000016a
 8009638:	2000017a 	.word	0x2000017a

0800963c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800963c:	b480      	push	{r7}
 800963e:	b087      	sub	sp, #28
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	60b9      	str	r1, [r7, #8]
 8009646:	4613      	mov	r3, r2
 8009648:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800964a:	2300      	movs	r3, #0
 800964c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800964e:	2300      	movs	r3, #0
 8009650:	75fb      	strb	r3, [r7, #23]
 8009652:	e027      	b.n	80096a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	0f1b      	lsrs	r3, r3, #28
 8009658:	2b09      	cmp	r3, #9
 800965a:	d80b      	bhi.n	8009674 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	0f1b      	lsrs	r3, r3, #28
 8009660:	b2da      	uxtb	r2, r3
 8009662:	7dfb      	ldrb	r3, [r7, #23]
 8009664:	005b      	lsls	r3, r3, #1
 8009666:	4619      	mov	r1, r3
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	440b      	add	r3, r1
 800966c:	3230      	adds	r2, #48	; 0x30
 800966e:	b2d2      	uxtb	r2, r2
 8009670:	701a      	strb	r2, [r3, #0]
 8009672:	e00a      	b.n	800968a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	0f1b      	lsrs	r3, r3, #28
 8009678:	b2da      	uxtb	r2, r3
 800967a:	7dfb      	ldrb	r3, [r7, #23]
 800967c:	005b      	lsls	r3, r3, #1
 800967e:	4619      	mov	r1, r3
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	440b      	add	r3, r1
 8009684:	3237      	adds	r2, #55	; 0x37
 8009686:	b2d2      	uxtb	r2, r2
 8009688:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	011b      	lsls	r3, r3, #4
 800968e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009690:	7dfb      	ldrb	r3, [r7, #23]
 8009692:	005b      	lsls	r3, r3, #1
 8009694:	3301      	adds	r3, #1
 8009696:	68ba      	ldr	r2, [r7, #8]
 8009698:	4413      	add	r3, r2
 800969a:	2200      	movs	r2, #0
 800969c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800969e:	7dfb      	ldrb	r3, [r7, #23]
 80096a0:	3301      	adds	r3, #1
 80096a2:	75fb      	strb	r3, [r7, #23]
 80096a4:	7dfa      	ldrb	r2, [r7, #23]
 80096a6:	79fb      	ldrb	r3, [r7, #7]
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d3d3      	bcc.n	8009654 <IntToUnicode+0x18>
  }
}
 80096ac:	bf00      	nop
 80096ae:	371c      	adds	r7, #28
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b08a      	sub	sp, #40	; 0x28
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096c0:	f107 0314 	add.w	r3, r7, #20
 80096c4:	2200      	movs	r2, #0
 80096c6:	601a      	str	r2, [r3, #0]
 80096c8:	605a      	str	r2, [r3, #4]
 80096ca:	609a      	str	r2, [r3, #8]
 80096cc:	60da      	str	r2, [r3, #12]
 80096ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096d8:	d13a      	bne.n	8009750 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80096da:	2300      	movs	r3, #0
 80096dc:	613b      	str	r3, [r7, #16]
 80096de:	4b1e      	ldr	r3, [pc, #120]	; (8009758 <HAL_PCD_MspInit+0xa0>)
 80096e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096e2:	4a1d      	ldr	r2, [pc, #116]	; (8009758 <HAL_PCD_MspInit+0xa0>)
 80096e4:	f043 0301 	orr.w	r3, r3, #1
 80096e8:	6313      	str	r3, [r2, #48]	; 0x30
 80096ea:	4b1b      	ldr	r3, [pc, #108]	; (8009758 <HAL_PCD_MspInit+0xa0>)
 80096ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ee:	f003 0301 	and.w	r3, r3, #1
 80096f2:	613b      	str	r3, [r7, #16]
 80096f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80096f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80096fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096fc:	2302      	movs	r3, #2
 80096fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009700:	2300      	movs	r3, #0
 8009702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009704:	2303      	movs	r3, #3
 8009706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009708:	230a      	movs	r3, #10
 800970a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800970c:	f107 0314 	add.w	r3, r7, #20
 8009710:	4619      	mov	r1, r3
 8009712:	4812      	ldr	r0, [pc, #72]	; (800975c <HAL_PCD_MspInit+0xa4>)
 8009714:	f7f8 f878 	bl	8001808 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009718:	4b0f      	ldr	r3, [pc, #60]	; (8009758 <HAL_PCD_MspInit+0xa0>)
 800971a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800971c:	4a0e      	ldr	r2, [pc, #56]	; (8009758 <HAL_PCD_MspInit+0xa0>)
 800971e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009722:	6353      	str	r3, [r2, #52]	; 0x34
 8009724:	2300      	movs	r3, #0
 8009726:	60fb      	str	r3, [r7, #12]
 8009728:	4b0b      	ldr	r3, [pc, #44]	; (8009758 <HAL_PCD_MspInit+0xa0>)
 800972a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800972c:	4a0a      	ldr	r2, [pc, #40]	; (8009758 <HAL_PCD_MspInit+0xa0>)
 800972e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009732:	6453      	str	r3, [r2, #68]	; 0x44
 8009734:	4b08      	ldr	r3, [pc, #32]	; (8009758 <HAL_PCD_MspInit+0xa0>)
 8009736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800973c:	60fb      	str	r3, [r7, #12]
 800973e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009740:	2200      	movs	r2, #0
 8009742:	2100      	movs	r1, #0
 8009744:	2043      	movs	r0, #67	; 0x43
 8009746:	f7f7 fd10 	bl	800116a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800974a:	2043      	movs	r0, #67	; 0x43
 800974c:	f7f7 fd29 	bl	80011a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009750:	bf00      	nop
 8009752:	3728      	adds	r7, #40	; 0x28
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	40023800 	.word	0x40023800
 800975c:	40020000 	.word	0x40020000

08009760 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009774:	4619      	mov	r1, r3
 8009776:	4610      	mov	r0, r2
 8009778:	f7fe fcf2 	bl	8008160 <USBD_LL_SetupStage>
}
 800977c:	bf00      	nop
 800977e:	3708      	adds	r7, #8
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	460b      	mov	r3, r1
 800978e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009796:	78fa      	ldrb	r2, [r7, #3]
 8009798:	6879      	ldr	r1, [r7, #4]
 800979a:	4613      	mov	r3, r2
 800979c:	00db      	lsls	r3, r3, #3
 800979e:	1a9b      	subs	r3, r3, r2
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	440b      	add	r3, r1
 80097a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	78fb      	ldrb	r3, [r7, #3]
 80097ac:	4619      	mov	r1, r3
 80097ae:	f7fe fd2a 	bl	8008206 <USBD_LL_DataOutStage>
}
 80097b2:	bf00      	nop
 80097b4:	3708      	adds	r7, #8
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}

080097ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b082      	sub	sp, #8
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
 80097c2:	460b      	mov	r3, r1
 80097c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80097cc:	78fa      	ldrb	r2, [r7, #3]
 80097ce:	6879      	ldr	r1, [r7, #4]
 80097d0:	4613      	mov	r3, r2
 80097d2:	00db      	lsls	r3, r3, #3
 80097d4:	1a9b      	subs	r3, r3, r2
 80097d6:	009b      	lsls	r3, r3, #2
 80097d8:	440b      	add	r3, r1
 80097da:	3348      	adds	r3, #72	; 0x48
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	78fb      	ldrb	r3, [r7, #3]
 80097e0:	4619      	mov	r1, r3
 80097e2:	f7fe fd73 	bl	80082cc <USBD_LL_DataInStage>
}
 80097e6:	bf00      	nop
 80097e8:	3708      	adds	r7, #8
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b082      	sub	sp, #8
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7fe fe77 	bl	80084f0 <USBD_LL_SOF>
}
 8009802:	bf00      	nop
 8009804:	3708      	adds	r7, #8
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b084      	sub	sp, #16
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009812:	2301      	movs	r3, #1
 8009814:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	2b02      	cmp	r3, #2
 800981c:	d001      	beq.n	8009822 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800981e:	f7f7 f8fd 	bl	8000a1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009828:	7bfa      	ldrb	r2, [r7, #15]
 800982a:	4611      	mov	r1, r2
 800982c:	4618      	mov	r0, r3
 800982e:	f7fe fe24 	bl	800847a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009838:	4618      	mov	r0, r3
 800983a:	f7fe fddd 	bl	80083f8 <USBD_LL_Reset>
}
 800983e:	bf00      	nop
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
	...

08009848 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b082      	sub	sp, #8
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009856:	4618      	mov	r0, r3
 8009858:	f7fe fe1f 	bl	800849a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	6812      	ldr	r2, [r2, #0]
 800986a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800986e:	f043 0301 	orr.w	r3, r3, #1
 8009872:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6a1b      	ldr	r3, [r3, #32]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d005      	beq.n	8009888 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800987c:	4b04      	ldr	r3, [pc, #16]	; (8009890 <HAL_PCD_SuspendCallback+0x48>)
 800987e:	691b      	ldr	r3, [r3, #16]
 8009880:	4a03      	ldr	r2, [pc, #12]	; (8009890 <HAL_PCD_SuspendCallback+0x48>)
 8009882:	f043 0306 	orr.w	r3, r3, #6
 8009886:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009888:	bf00      	nop
 800988a:	3708      	adds	r7, #8
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	e000ed00 	.word	0xe000ed00

08009894 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7fe fe0e 	bl	80084c4 <USBD_LL_Resume>
}
 80098a8:	bf00      	nop
 80098aa:	3708      	adds	r7, #8
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	460b      	mov	r3, r1
 80098ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80098c2:	78fa      	ldrb	r2, [r7, #3]
 80098c4:	4611      	mov	r1, r2
 80098c6:	4618      	mov	r0, r3
 80098c8:	f7fe fe39 	bl	800853e <USBD_LL_IsoOUTIncomplete>
}
 80098cc:	bf00      	nop
 80098ce:	3708      	adds	r7, #8
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b082      	sub	sp, #8
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	460b      	mov	r3, r1
 80098de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80098e6:	78fa      	ldrb	r2, [r7, #3]
 80098e8:	4611      	mov	r1, r2
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7fe fe1a 	bl	8008524 <USBD_LL_IsoINIncomplete>
}
 80098f0:	bf00      	nop
 80098f2:	3708      	adds	r7, #8
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009906:	4618      	mov	r0, r3
 8009908:	f7fe fe26 	bl	8008558 <USBD_LL_DevConnected>
}
 800990c:	bf00      	nop
 800990e:	3708      	adds	r7, #8
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009922:	4618      	mov	r0, r3
 8009924:	f7fe fe23 	bl	800856e <USBD_LL_DevDisconnected>
}
 8009928:	bf00      	nop
 800992a:	3708      	adds	r7, #8
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d13c      	bne.n	80099ba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009940:	4a20      	ldr	r2, [pc, #128]	; (80099c4 <USBD_LL_Init+0x94>)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4a1e      	ldr	r2, [pc, #120]	; (80099c4 <USBD_LL_Init+0x94>)
 800994c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009950:	4b1c      	ldr	r3, [pc, #112]	; (80099c4 <USBD_LL_Init+0x94>)
 8009952:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009956:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009958:	4b1a      	ldr	r3, [pc, #104]	; (80099c4 <USBD_LL_Init+0x94>)
 800995a:	2204      	movs	r2, #4
 800995c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800995e:	4b19      	ldr	r3, [pc, #100]	; (80099c4 <USBD_LL_Init+0x94>)
 8009960:	2202      	movs	r2, #2
 8009962:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009964:	4b17      	ldr	r3, [pc, #92]	; (80099c4 <USBD_LL_Init+0x94>)
 8009966:	2200      	movs	r2, #0
 8009968:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800996a:	4b16      	ldr	r3, [pc, #88]	; (80099c4 <USBD_LL_Init+0x94>)
 800996c:	2202      	movs	r2, #2
 800996e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009970:	4b14      	ldr	r3, [pc, #80]	; (80099c4 <USBD_LL_Init+0x94>)
 8009972:	2200      	movs	r2, #0
 8009974:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009976:	4b13      	ldr	r3, [pc, #76]	; (80099c4 <USBD_LL_Init+0x94>)
 8009978:	2200      	movs	r2, #0
 800997a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800997c:	4b11      	ldr	r3, [pc, #68]	; (80099c4 <USBD_LL_Init+0x94>)
 800997e:	2200      	movs	r2, #0
 8009980:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009982:	4b10      	ldr	r3, [pc, #64]	; (80099c4 <USBD_LL_Init+0x94>)
 8009984:	2200      	movs	r2, #0
 8009986:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009988:	4b0e      	ldr	r3, [pc, #56]	; (80099c4 <USBD_LL_Init+0x94>)
 800998a:	2200      	movs	r2, #0
 800998c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800998e:	480d      	ldr	r0, [pc, #52]	; (80099c4 <USBD_LL_Init+0x94>)
 8009990:	f7fa fb63 	bl	800405a <HAL_PCD_Init>
 8009994:	4603      	mov	r3, r0
 8009996:	2b00      	cmp	r3, #0
 8009998:	d001      	beq.n	800999e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800999a:	f7f7 f83f 	bl	8000a1c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800999e:	2180      	movs	r1, #128	; 0x80
 80099a0:	4808      	ldr	r0, [pc, #32]	; (80099c4 <USBD_LL_Init+0x94>)
 80099a2:	f7fb fcc0 	bl	8005326 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80099a6:	2240      	movs	r2, #64	; 0x40
 80099a8:	2100      	movs	r1, #0
 80099aa:	4806      	ldr	r0, [pc, #24]	; (80099c4 <USBD_LL_Init+0x94>)
 80099ac:	f7fb fc74 	bl	8005298 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80099b0:	2280      	movs	r2, #128	; 0x80
 80099b2:	2101      	movs	r1, #1
 80099b4:	4803      	ldr	r0, [pc, #12]	; (80099c4 <USBD_LL_Init+0x94>)
 80099b6:	f7fb fc6f 	bl	8005298 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3708      	adds	r7, #8
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	200020c4 	.word	0x200020c4

080099c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b084      	sub	sp, #16
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099d0:	2300      	movs	r3, #0
 80099d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099d4:	2300      	movs	r3, #0
 80099d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80099de:	4618      	mov	r0, r3
 80099e0:	f7fa fc58 	bl	8004294 <HAL_PCD_Start>
 80099e4:	4603      	mov	r3, r0
 80099e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099e8:	7bfb      	ldrb	r3, [r7, #15]
 80099ea:	4618      	mov	r0, r3
 80099ec:	f000 f92a 	bl	8009c44 <USBD_Get_USB_Status>
 80099f0:	4603      	mov	r3, r0
 80099f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3710      	adds	r7, #16
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}

080099fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80099fe:	b580      	push	{r7, lr}
 8009a00:	b084      	sub	sp, #16
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
 8009a06:	4608      	mov	r0, r1
 8009a08:	4611      	mov	r1, r2
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	70fb      	strb	r3, [r7, #3]
 8009a10:	460b      	mov	r3, r1
 8009a12:	70bb      	strb	r3, [r7, #2]
 8009a14:	4613      	mov	r3, r2
 8009a16:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009a26:	78bb      	ldrb	r3, [r7, #2]
 8009a28:	883a      	ldrh	r2, [r7, #0]
 8009a2a:	78f9      	ldrb	r1, [r7, #3]
 8009a2c:	f7fb f83c 	bl	8004aa8 <HAL_PCD_EP_Open>
 8009a30:	4603      	mov	r3, r0
 8009a32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a34:	7bfb      	ldrb	r3, [r7, #15]
 8009a36:	4618      	mov	r0, r3
 8009a38:	f000 f904 	bl	8009c44 <USBD_Get_USB_Status>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a40:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3710      	adds	r7, #16
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}

08009a4a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b084      	sub	sp, #16
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
 8009a52:	460b      	mov	r3, r1
 8009a54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a56:	2300      	movs	r3, #0
 8009a58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009a64:	78fa      	ldrb	r2, [r7, #3]
 8009a66:	4611      	mov	r1, r2
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f7fb f885 	bl	8004b78 <HAL_PCD_EP_Close>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a72:	7bfb      	ldrb	r3, [r7, #15]
 8009a74:	4618      	mov	r0, r3
 8009a76:	f000 f8e5 	bl	8009c44 <USBD_Get_USB_Status>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3710      	adds	r7, #16
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b084      	sub	sp, #16
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	460b      	mov	r3, r1
 8009a92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a94:	2300      	movs	r3, #0
 8009a96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009aa2:	78fa      	ldrb	r2, [r7, #3]
 8009aa4:	4611      	mov	r1, r2
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7fb f95d 	bl	8004d66 <HAL_PCD_EP_SetStall>
 8009aac:	4603      	mov	r3, r0
 8009aae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ab0:	7bfb      	ldrb	r3, [r7, #15]
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f000 f8c6 	bl	8009c44 <USBD_Get_USB_Status>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009abc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3710      	adds	r7, #16
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b084      	sub	sp, #16
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
 8009ace:	460b      	mov	r3, r1
 8009ad0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ae0:	78fa      	ldrb	r2, [r7, #3]
 8009ae2:	4611      	mov	r1, r2
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f7fb f9a2 	bl	8004e2e <HAL_PCD_EP_ClrStall>
 8009aea:	4603      	mov	r3, r0
 8009aec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009aee:	7bfb      	ldrb	r3, [r7, #15]
 8009af0:	4618      	mov	r0, r3
 8009af2:	f000 f8a7 	bl	8009c44 <USBD_Get_USB_Status>
 8009af6:	4603      	mov	r3, r0
 8009af8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009afa:	7bbb      	ldrb	r3, [r7, #14]
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3710      	adds	r7, #16
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b085      	sub	sp, #20
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b16:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009b18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	da0b      	bge.n	8009b38 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009b20:	78fb      	ldrb	r3, [r7, #3]
 8009b22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b26:	68f9      	ldr	r1, [r7, #12]
 8009b28:	4613      	mov	r3, r2
 8009b2a:	00db      	lsls	r3, r3, #3
 8009b2c:	1a9b      	subs	r3, r3, r2
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	440b      	add	r3, r1
 8009b32:	333e      	adds	r3, #62	; 0x3e
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	e00b      	b.n	8009b50 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009b38:	78fb      	ldrb	r3, [r7, #3]
 8009b3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b3e:	68f9      	ldr	r1, [r7, #12]
 8009b40:	4613      	mov	r3, r2
 8009b42:	00db      	lsls	r3, r3, #3
 8009b44:	1a9b      	subs	r3, r3, r2
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	440b      	add	r3, r1
 8009b4a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009b4e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3714      	adds	r7, #20
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b084      	sub	sp, #16
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	460b      	mov	r3, r1
 8009b66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b76:	78fa      	ldrb	r2, [r7, #3]
 8009b78:	4611      	mov	r1, r2
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7fa ff6f 	bl	8004a5e <HAL_PCD_SetAddress>
 8009b80:	4603      	mov	r3, r0
 8009b82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b84:	7bfb      	ldrb	r3, [r7, #15]
 8009b86:	4618      	mov	r0, r3
 8009b88:	f000 f85c 	bl	8009c44 <USBD_Get_USB_Status>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b90:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3710      	adds	r7, #16
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}

08009b9a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009b9a:	b580      	push	{r7, lr}
 8009b9c:	b086      	sub	sp, #24
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	60f8      	str	r0, [r7, #12]
 8009ba2:	607a      	str	r2, [r7, #4]
 8009ba4:	603b      	str	r3, [r7, #0]
 8009ba6:	460b      	mov	r3, r1
 8009ba8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009baa:	2300      	movs	r3, #0
 8009bac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009bb8:	7af9      	ldrb	r1, [r7, #11]
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	f7fb f888 	bl	8004cd2 <HAL_PCD_EP_Transmit>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bc6:	7dfb      	ldrb	r3, [r7, #23]
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f000 f83b 	bl	8009c44 <USBD_Get_USB_Status>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009bd2:	7dbb      	ldrb	r3, [r7, #22]
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3718      	adds	r7, #24
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b086      	sub	sp, #24
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	607a      	str	r2, [r7, #4]
 8009be6:	603b      	str	r3, [r7, #0]
 8009be8:	460b      	mov	r3, r1
 8009bea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bec:	2300      	movs	r3, #0
 8009bee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009bfa:	7af9      	ldrb	r1, [r7, #11]
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	f7fb f804 	bl	8004c0c <HAL_PCD_EP_Receive>
 8009c04:	4603      	mov	r3, r0
 8009c06:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c08:	7dfb      	ldrb	r3, [r7, #23]
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f000 f81a 	bl	8009c44 <USBD_Get_USB_Status>
 8009c10:	4603      	mov	r3, r0
 8009c12:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009c14:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3718      	adds	r7, #24
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}

08009c1e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c1e:	b580      	push	{r7, lr}
 8009c20:	b082      	sub	sp, #8
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
 8009c26:	460b      	mov	r3, r1
 8009c28:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c30:	78fa      	ldrb	r2, [r7, #3]
 8009c32:	4611      	mov	r1, r2
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7fb f834 	bl	8004ca2 <HAL_PCD_EP_GetRxCount>
 8009c3a:	4603      	mov	r3, r0
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3708      	adds	r7, #8
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b085      	sub	sp, #20
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009c52:	79fb      	ldrb	r3, [r7, #7]
 8009c54:	2b03      	cmp	r3, #3
 8009c56:	d817      	bhi.n	8009c88 <USBD_Get_USB_Status+0x44>
 8009c58:	a201      	add	r2, pc, #4	; (adr r2, 8009c60 <USBD_Get_USB_Status+0x1c>)
 8009c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c5e:	bf00      	nop
 8009c60:	08009c71 	.word	0x08009c71
 8009c64:	08009c77 	.word	0x08009c77
 8009c68:	08009c7d 	.word	0x08009c7d
 8009c6c:	08009c83 	.word	0x08009c83
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009c70:	2300      	movs	r3, #0
 8009c72:	73fb      	strb	r3, [r7, #15]
    break;
 8009c74:	e00b      	b.n	8009c8e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c76:	2303      	movs	r3, #3
 8009c78:	73fb      	strb	r3, [r7, #15]
    break;
 8009c7a:	e008      	b.n	8009c8e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	73fb      	strb	r3, [r7, #15]
    break;
 8009c80:	e005      	b.n	8009c8e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009c82:	2303      	movs	r3, #3
 8009c84:	73fb      	strb	r3, [r7, #15]
    break;
 8009c86:	e002      	b.n	8009c8e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009c88:	2303      	movs	r3, #3
 8009c8a:	73fb      	strb	r3, [r7, #15]
    break;
 8009c8c:	bf00      	nop
  }
  return usb_status;
 8009c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3714      	adds	r7, #20
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <__errno>:
 8009c9c:	4b01      	ldr	r3, [pc, #4]	; (8009ca4 <__errno+0x8>)
 8009c9e:	6818      	ldr	r0, [r3, #0]
 8009ca0:	4770      	bx	lr
 8009ca2:	bf00      	nop
 8009ca4:	20000184 	.word	0x20000184

08009ca8 <__libc_init_array>:
 8009ca8:	b570      	push	{r4, r5, r6, lr}
 8009caa:	4e0d      	ldr	r6, [pc, #52]	; (8009ce0 <__libc_init_array+0x38>)
 8009cac:	4c0d      	ldr	r4, [pc, #52]	; (8009ce4 <__libc_init_array+0x3c>)
 8009cae:	1ba4      	subs	r4, r4, r6
 8009cb0:	10a4      	asrs	r4, r4, #2
 8009cb2:	2500      	movs	r5, #0
 8009cb4:	42a5      	cmp	r5, r4
 8009cb6:	d109      	bne.n	8009ccc <__libc_init_array+0x24>
 8009cb8:	4e0b      	ldr	r6, [pc, #44]	; (8009ce8 <__libc_init_array+0x40>)
 8009cba:	4c0c      	ldr	r4, [pc, #48]	; (8009cec <__libc_init_array+0x44>)
 8009cbc:	f000 fc36 	bl	800a52c <_init>
 8009cc0:	1ba4      	subs	r4, r4, r6
 8009cc2:	10a4      	asrs	r4, r4, #2
 8009cc4:	2500      	movs	r5, #0
 8009cc6:	42a5      	cmp	r5, r4
 8009cc8:	d105      	bne.n	8009cd6 <__libc_init_array+0x2e>
 8009cca:	bd70      	pop	{r4, r5, r6, pc}
 8009ccc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009cd0:	4798      	blx	r3
 8009cd2:	3501      	adds	r5, #1
 8009cd4:	e7ee      	b.n	8009cb4 <__libc_init_array+0xc>
 8009cd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009cda:	4798      	blx	r3
 8009cdc:	3501      	adds	r5, #1
 8009cde:	e7f2      	b.n	8009cc6 <__libc_init_array+0x1e>
 8009ce0:	0800a5fc 	.word	0x0800a5fc
 8009ce4:	0800a5fc 	.word	0x0800a5fc
 8009ce8:	0800a5fc 	.word	0x0800a5fc
 8009cec:	0800a600 	.word	0x0800a600

08009cf0 <malloc>:
 8009cf0:	4b02      	ldr	r3, [pc, #8]	; (8009cfc <malloc+0xc>)
 8009cf2:	4601      	mov	r1, r0
 8009cf4:	6818      	ldr	r0, [r3, #0]
 8009cf6:	f000 b861 	b.w	8009dbc <_malloc_r>
 8009cfa:	bf00      	nop
 8009cfc:	20000184 	.word	0x20000184

08009d00 <free>:
 8009d00:	4b02      	ldr	r3, [pc, #8]	; (8009d0c <free+0xc>)
 8009d02:	4601      	mov	r1, r0
 8009d04:	6818      	ldr	r0, [r3, #0]
 8009d06:	f000 b80b 	b.w	8009d20 <_free_r>
 8009d0a:	bf00      	nop
 8009d0c:	20000184 	.word	0x20000184

08009d10 <memset>:
 8009d10:	4402      	add	r2, r0
 8009d12:	4603      	mov	r3, r0
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d100      	bne.n	8009d1a <memset+0xa>
 8009d18:	4770      	bx	lr
 8009d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8009d1e:	e7f9      	b.n	8009d14 <memset+0x4>

08009d20 <_free_r>:
 8009d20:	b538      	push	{r3, r4, r5, lr}
 8009d22:	4605      	mov	r5, r0
 8009d24:	2900      	cmp	r1, #0
 8009d26:	d045      	beq.n	8009db4 <_free_r+0x94>
 8009d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d2c:	1f0c      	subs	r4, r1, #4
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	bfb8      	it	lt
 8009d32:	18e4      	addlt	r4, r4, r3
 8009d34:	f000 f8cc 	bl	8009ed0 <__malloc_lock>
 8009d38:	4a1f      	ldr	r2, [pc, #124]	; (8009db8 <_free_r+0x98>)
 8009d3a:	6813      	ldr	r3, [r2, #0]
 8009d3c:	4610      	mov	r0, r2
 8009d3e:	b933      	cbnz	r3, 8009d4e <_free_r+0x2e>
 8009d40:	6063      	str	r3, [r4, #4]
 8009d42:	6014      	str	r4, [r2, #0]
 8009d44:	4628      	mov	r0, r5
 8009d46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d4a:	f000 b8c2 	b.w	8009ed2 <__malloc_unlock>
 8009d4e:	42a3      	cmp	r3, r4
 8009d50:	d90c      	bls.n	8009d6c <_free_r+0x4c>
 8009d52:	6821      	ldr	r1, [r4, #0]
 8009d54:	1862      	adds	r2, r4, r1
 8009d56:	4293      	cmp	r3, r2
 8009d58:	bf04      	itt	eq
 8009d5a:	681a      	ldreq	r2, [r3, #0]
 8009d5c:	685b      	ldreq	r3, [r3, #4]
 8009d5e:	6063      	str	r3, [r4, #4]
 8009d60:	bf04      	itt	eq
 8009d62:	1852      	addeq	r2, r2, r1
 8009d64:	6022      	streq	r2, [r4, #0]
 8009d66:	6004      	str	r4, [r0, #0]
 8009d68:	e7ec      	b.n	8009d44 <_free_r+0x24>
 8009d6a:	4613      	mov	r3, r2
 8009d6c:	685a      	ldr	r2, [r3, #4]
 8009d6e:	b10a      	cbz	r2, 8009d74 <_free_r+0x54>
 8009d70:	42a2      	cmp	r2, r4
 8009d72:	d9fa      	bls.n	8009d6a <_free_r+0x4a>
 8009d74:	6819      	ldr	r1, [r3, #0]
 8009d76:	1858      	adds	r0, r3, r1
 8009d78:	42a0      	cmp	r0, r4
 8009d7a:	d10b      	bne.n	8009d94 <_free_r+0x74>
 8009d7c:	6820      	ldr	r0, [r4, #0]
 8009d7e:	4401      	add	r1, r0
 8009d80:	1858      	adds	r0, r3, r1
 8009d82:	4282      	cmp	r2, r0
 8009d84:	6019      	str	r1, [r3, #0]
 8009d86:	d1dd      	bne.n	8009d44 <_free_r+0x24>
 8009d88:	6810      	ldr	r0, [r2, #0]
 8009d8a:	6852      	ldr	r2, [r2, #4]
 8009d8c:	605a      	str	r2, [r3, #4]
 8009d8e:	4401      	add	r1, r0
 8009d90:	6019      	str	r1, [r3, #0]
 8009d92:	e7d7      	b.n	8009d44 <_free_r+0x24>
 8009d94:	d902      	bls.n	8009d9c <_free_r+0x7c>
 8009d96:	230c      	movs	r3, #12
 8009d98:	602b      	str	r3, [r5, #0]
 8009d9a:	e7d3      	b.n	8009d44 <_free_r+0x24>
 8009d9c:	6820      	ldr	r0, [r4, #0]
 8009d9e:	1821      	adds	r1, r4, r0
 8009da0:	428a      	cmp	r2, r1
 8009da2:	bf04      	itt	eq
 8009da4:	6811      	ldreq	r1, [r2, #0]
 8009da6:	6852      	ldreq	r2, [r2, #4]
 8009da8:	6062      	str	r2, [r4, #4]
 8009daa:	bf04      	itt	eq
 8009dac:	1809      	addeq	r1, r1, r0
 8009dae:	6021      	streq	r1, [r4, #0]
 8009db0:	605c      	str	r4, [r3, #4]
 8009db2:	e7c7      	b.n	8009d44 <_free_r+0x24>
 8009db4:	bd38      	pop	{r3, r4, r5, pc}
 8009db6:	bf00      	nop
 8009db8:	20000214 	.word	0x20000214

08009dbc <_malloc_r>:
 8009dbc:	b570      	push	{r4, r5, r6, lr}
 8009dbe:	1ccd      	adds	r5, r1, #3
 8009dc0:	f025 0503 	bic.w	r5, r5, #3
 8009dc4:	3508      	adds	r5, #8
 8009dc6:	2d0c      	cmp	r5, #12
 8009dc8:	bf38      	it	cc
 8009dca:	250c      	movcc	r5, #12
 8009dcc:	2d00      	cmp	r5, #0
 8009dce:	4606      	mov	r6, r0
 8009dd0:	db01      	blt.n	8009dd6 <_malloc_r+0x1a>
 8009dd2:	42a9      	cmp	r1, r5
 8009dd4:	d903      	bls.n	8009dde <_malloc_r+0x22>
 8009dd6:	230c      	movs	r3, #12
 8009dd8:	6033      	str	r3, [r6, #0]
 8009dda:	2000      	movs	r0, #0
 8009ddc:	bd70      	pop	{r4, r5, r6, pc}
 8009dde:	f000 f877 	bl	8009ed0 <__malloc_lock>
 8009de2:	4a21      	ldr	r2, [pc, #132]	; (8009e68 <_malloc_r+0xac>)
 8009de4:	6814      	ldr	r4, [r2, #0]
 8009de6:	4621      	mov	r1, r4
 8009de8:	b991      	cbnz	r1, 8009e10 <_malloc_r+0x54>
 8009dea:	4c20      	ldr	r4, [pc, #128]	; (8009e6c <_malloc_r+0xb0>)
 8009dec:	6823      	ldr	r3, [r4, #0]
 8009dee:	b91b      	cbnz	r3, 8009df8 <_malloc_r+0x3c>
 8009df0:	4630      	mov	r0, r6
 8009df2:	f000 f83d 	bl	8009e70 <_sbrk_r>
 8009df6:	6020      	str	r0, [r4, #0]
 8009df8:	4629      	mov	r1, r5
 8009dfa:	4630      	mov	r0, r6
 8009dfc:	f000 f838 	bl	8009e70 <_sbrk_r>
 8009e00:	1c43      	adds	r3, r0, #1
 8009e02:	d124      	bne.n	8009e4e <_malloc_r+0x92>
 8009e04:	230c      	movs	r3, #12
 8009e06:	6033      	str	r3, [r6, #0]
 8009e08:	4630      	mov	r0, r6
 8009e0a:	f000 f862 	bl	8009ed2 <__malloc_unlock>
 8009e0e:	e7e4      	b.n	8009dda <_malloc_r+0x1e>
 8009e10:	680b      	ldr	r3, [r1, #0]
 8009e12:	1b5b      	subs	r3, r3, r5
 8009e14:	d418      	bmi.n	8009e48 <_malloc_r+0x8c>
 8009e16:	2b0b      	cmp	r3, #11
 8009e18:	d90f      	bls.n	8009e3a <_malloc_r+0x7e>
 8009e1a:	600b      	str	r3, [r1, #0]
 8009e1c:	50cd      	str	r5, [r1, r3]
 8009e1e:	18cc      	adds	r4, r1, r3
 8009e20:	4630      	mov	r0, r6
 8009e22:	f000 f856 	bl	8009ed2 <__malloc_unlock>
 8009e26:	f104 000b 	add.w	r0, r4, #11
 8009e2a:	1d23      	adds	r3, r4, #4
 8009e2c:	f020 0007 	bic.w	r0, r0, #7
 8009e30:	1ac3      	subs	r3, r0, r3
 8009e32:	d0d3      	beq.n	8009ddc <_malloc_r+0x20>
 8009e34:	425a      	negs	r2, r3
 8009e36:	50e2      	str	r2, [r4, r3]
 8009e38:	e7d0      	b.n	8009ddc <_malloc_r+0x20>
 8009e3a:	428c      	cmp	r4, r1
 8009e3c:	684b      	ldr	r3, [r1, #4]
 8009e3e:	bf16      	itet	ne
 8009e40:	6063      	strne	r3, [r4, #4]
 8009e42:	6013      	streq	r3, [r2, #0]
 8009e44:	460c      	movne	r4, r1
 8009e46:	e7eb      	b.n	8009e20 <_malloc_r+0x64>
 8009e48:	460c      	mov	r4, r1
 8009e4a:	6849      	ldr	r1, [r1, #4]
 8009e4c:	e7cc      	b.n	8009de8 <_malloc_r+0x2c>
 8009e4e:	1cc4      	adds	r4, r0, #3
 8009e50:	f024 0403 	bic.w	r4, r4, #3
 8009e54:	42a0      	cmp	r0, r4
 8009e56:	d005      	beq.n	8009e64 <_malloc_r+0xa8>
 8009e58:	1a21      	subs	r1, r4, r0
 8009e5a:	4630      	mov	r0, r6
 8009e5c:	f000 f808 	bl	8009e70 <_sbrk_r>
 8009e60:	3001      	adds	r0, #1
 8009e62:	d0cf      	beq.n	8009e04 <_malloc_r+0x48>
 8009e64:	6025      	str	r5, [r4, #0]
 8009e66:	e7db      	b.n	8009e20 <_malloc_r+0x64>
 8009e68:	20000214 	.word	0x20000214
 8009e6c:	20000218 	.word	0x20000218

08009e70 <_sbrk_r>:
 8009e70:	b538      	push	{r3, r4, r5, lr}
 8009e72:	4c06      	ldr	r4, [pc, #24]	; (8009e8c <_sbrk_r+0x1c>)
 8009e74:	2300      	movs	r3, #0
 8009e76:	4605      	mov	r5, r0
 8009e78:	4608      	mov	r0, r1
 8009e7a:	6023      	str	r3, [r4, #0]
 8009e7c:	f7f6 ff18 	bl	8000cb0 <_sbrk>
 8009e80:	1c43      	adds	r3, r0, #1
 8009e82:	d102      	bne.n	8009e8a <_sbrk_r+0x1a>
 8009e84:	6823      	ldr	r3, [r4, #0]
 8009e86:	b103      	cbz	r3, 8009e8a <_sbrk_r+0x1a>
 8009e88:	602b      	str	r3, [r5, #0]
 8009e8a:	bd38      	pop	{r3, r4, r5, pc}
 8009e8c:	200024cc 	.word	0x200024cc

08009e90 <siprintf>:
 8009e90:	b40e      	push	{r1, r2, r3}
 8009e92:	b500      	push	{lr}
 8009e94:	b09c      	sub	sp, #112	; 0x70
 8009e96:	ab1d      	add	r3, sp, #116	; 0x74
 8009e98:	9002      	str	r0, [sp, #8]
 8009e9a:	9006      	str	r0, [sp, #24]
 8009e9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ea0:	4809      	ldr	r0, [pc, #36]	; (8009ec8 <siprintf+0x38>)
 8009ea2:	9107      	str	r1, [sp, #28]
 8009ea4:	9104      	str	r1, [sp, #16]
 8009ea6:	4909      	ldr	r1, [pc, #36]	; (8009ecc <siprintf+0x3c>)
 8009ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eac:	9105      	str	r1, [sp, #20]
 8009eae:	6800      	ldr	r0, [r0, #0]
 8009eb0:	9301      	str	r3, [sp, #4]
 8009eb2:	a902      	add	r1, sp, #8
 8009eb4:	f000 f868 	bl	8009f88 <_svfiprintf_r>
 8009eb8:	9b02      	ldr	r3, [sp, #8]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	701a      	strb	r2, [r3, #0]
 8009ebe:	b01c      	add	sp, #112	; 0x70
 8009ec0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ec4:	b003      	add	sp, #12
 8009ec6:	4770      	bx	lr
 8009ec8:	20000184 	.word	0x20000184
 8009ecc:	ffff0208 	.word	0xffff0208

08009ed0 <__malloc_lock>:
 8009ed0:	4770      	bx	lr

08009ed2 <__malloc_unlock>:
 8009ed2:	4770      	bx	lr

08009ed4 <__ssputs_r>:
 8009ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ed8:	688e      	ldr	r6, [r1, #8]
 8009eda:	429e      	cmp	r6, r3
 8009edc:	4682      	mov	sl, r0
 8009ede:	460c      	mov	r4, r1
 8009ee0:	4690      	mov	r8, r2
 8009ee2:	4699      	mov	r9, r3
 8009ee4:	d837      	bhi.n	8009f56 <__ssputs_r+0x82>
 8009ee6:	898a      	ldrh	r2, [r1, #12]
 8009ee8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009eec:	d031      	beq.n	8009f52 <__ssputs_r+0x7e>
 8009eee:	6825      	ldr	r5, [r4, #0]
 8009ef0:	6909      	ldr	r1, [r1, #16]
 8009ef2:	1a6f      	subs	r7, r5, r1
 8009ef4:	6965      	ldr	r5, [r4, #20]
 8009ef6:	2302      	movs	r3, #2
 8009ef8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009efc:	fb95 f5f3 	sdiv	r5, r5, r3
 8009f00:	f109 0301 	add.w	r3, r9, #1
 8009f04:	443b      	add	r3, r7
 8009f06:	429d      	cmp	r5, r3
 8009f08:	bf38      	it	cc
 8009f0a:	461d      	movcc	r5, r3
 8009f0c:	0553      	lsls	r3, r2, #21
 8009f0e:	d530      	bpl.n	8009f72 <__ssputs_r+0x9e>
 8009f10:	4629      	mov	r1, r5
 8009f12:	f7ff ff53 	bl	8009dbc <_malloc_r>
 8009f16:	4606      	mov	r6, r0
 8009f18:	b950      	cbnz	r0, 8009f30 <__ssputs_r+0x5c>
 8009f1a:	230c      	movs	r3, #12
 8009f1c:	f8ca 3000 	str.w	r3, [sl]
 8009f20:	89a3      	ldrh	r3, [r4, #12]
 8009f22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f26:	81a3      	strh	r3, [r4, #12]
 8009f28:	f04f 30ff 	mov.w	r0, #4294967295
 8009f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f30:	463a      	mov	r2, r7
 8009f32:	6921      	ldr	r1, [r4, #16]
 8009f34:	f000 faa8 	bl	800a488 <memcpy>
 8009f38:	89a3      	ldrh	r3, [r4, #12]
 8009f3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f42:	81a3      	strh	r3, [r4, #12]
 8009f44:	6126      	str	r6, [r4, #16]
 8009f46:	6165      	str	r5, [r4, #20]
 8009f48:	443e      	add	r6, r7
 8009f4a:	1bed      	subs	r5, r5, r7
 8009f4c:	6026      	str	r6, [r4, #0]
 8009f4e:	60a5      	str	r5, [r4, #8]
 8009f50:	464e      	mov	r6, r9
 8009f52:	454e      	cmp	r6, r9
 8009f54:	d900      	bls.n	8009f58 <__ssputs_r+0x84>
 8009f56:	464e      	mov	r6, r9
 8009f58:	4632      	mov	r2, r6
 8009f5a:	4641      	mov	r1, r8
 8009f5c:	6820      	ldr	r0, [r4, #0]
 8009f5e:	f000 fa9e 	bl	800a49e <memmove>
 8009f62:	68a3      	ldr	r3, [r4, #8]
 8009f64:	1b9b      	subs	r3, r3, r6
 8009f66:	60a3      	str	r3, [r4, #8]
 8009f68:	6823      	ldr	r3, [r4, #0]
 8009f6a:	441e      	add	r6, r3
 8009f6c:	6026      	str	r6, [r4, #0]
 8009f6e:	2000      	movs	r0, #0
 8009f70:	e7dc      	b.n	8009f2c <__ssputs_r+0x58>
 8009f72:	462a      	mov	r2, r5
 8009f74:	f000 faac 	bl	800a4d0 <_realloc_r>
 8009f78:	4606      	mov	r6, r0
 8009f7a:	2800      	cmp	r0, #0
 8009f7c:	d1e2      	bne.n	8009f44 <__ssputs_r+0x70>
 8009f7e:	6921      	ldr	r1, [r4, #16]
 8009f80:	4650      	mov	r0, sl
 8009f82:	f7ff fecd 	bl	8009d20 <_free_r>
 8009f86:	e7c8      	b.n	8009f1a <__ssputs_r+0x46>

08009f88 <_svfiprintf_r>:
 8009f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f8c:	461d      	mov	r5, r3
 8009f8e:	898b      	ldrh	r3, [r1, #12]
 8009f90:	061f      	lsls	r7, r3, #24
 8009f92:	b09d      	sub	sp, #116	; 0x74
 8009f94:	4680      	mov	r8, r0
 8009f96:	460c      	mov	r4, r1
 8009f98:	4616      	mov	r6, r2
 8009f9a:	d50f      	bpl.n	8009fbc <_svfiprintf_r+0x34>
 8009f9c:	690b      	ldr	r3, [r1, #16]
 8009f9e:	b96b      	cbnz	r3, 8009fbc <_svfiprintf_r+0x34>
 8009fa0:	2140      	movs	r1, #64	; 0x40
 8009fa2:	f7ff ff0b 	bl	8009dbc <_malloc_r>
 8009fa6:	6020      	str	r0, [r4, #0]
 8009fa8:	6120      	str	r0, [r4, #16]
 8009faa:	b928      	cbnz	r0, 8009fb8 <_svfiprintf_r+0x30>
 8009fac:	230c      	movs	r3, #12
 8009fae:	f8c8 3000 	str.w	r3, [r8]
 8009fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8009fb6:	e0c8      	b.n	800a14a <_svfiprintf_r+0x1c2>
 8009fb8:	2340      	movs	r3, #64	; 0x40
 8009fba:	6163      	str	r3, [r4, #20]
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8009fc0:	2320      	movs	r3, #32
 8009fc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fc6:	2330      	movs	r3, #48	; 0x30
 8009fc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fcc:	9503      	str	r5, [sp, #12]
 8009fce:	f04f 0b01 	mov.w	fp, #1
 8009fd2:	4637      	mov	r7, r6
 8009fd4:	463d      	mov	r5, r7
 8009fd6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009fda:	b10b      	cbz	r3, 8009fe0 <_svfiprintf_r+0x58>
 8009fdc:	2b25      	cmp	r3, #37	; 0x25
 8009fde:	d13e      	bne.n	800a05e <_svfiprintf_r+0xd6>
 8009fe0:	ebb7 0a06 	subs.w	sl, r7, r6
 8009fe4:	d00b      	beq.n	8009ffe <_svfiprintf_r+0x76>
 8009fe6:	4653      	mov	r3, sl
 8009fe8:	4632      	mov	r2, r6
 8009fea:	4621      	mov	r1, r4
 8009fec:	4640      	mov	r0, r8
 8009fee:	f7ff ff71 	bl	8009ed4 <__ssputs_r>
 8009ff2:	3001      	adds	r0, #1
 8009ff4:	f000 80a4 	beq.w	800a140 <_svfiprintf_r+0x1b8>
 8009ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ffa:	4453      	add	r3, sl
 8009ffc:	9309      	str	r3, [sp, #36]	; 0x24
 8009ffe:	783b      	ldrb	r3, [r7, #0]
 800a000:	2b00      	cmp	r3, #0
 800a002:	f000 809d 	beq.w	800a140 <_svfiprintf_r+0x1b8>
 800a006:	2300      	movs	r3, #0
 800a008:	f04f 32ff 	mov.w	r2, #4294967295
 800a00c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a010:	9304      	str	r3, [sp, #16]
 800a012:	9307      	str	r3, [sp, #28]
 800a014:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a018:	931a      	str	r3, [sp, #104]	; 0x68
 800a01a:	462f      	mov	r7, r5
 800a01c:	2205      	movs	r2, #5
 800a01e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a022:	4850      	ldr	r0, [pc, #320]	; (800a164 <_svfiprintf_r+0x1dc>)
 800a024:	f7f6 f8dc 	bl	80001e0 <memchr>
 800a028:	9b04      	ldr	r3, [sp, #16]
 800a02a:	b9d0      	cbnz	r0, 800a062 <_svfiprintf_r+0xda>
 800a02c:	06d9      	lsls	r1, r3, #27
 800a02e:	bf44      	itt	mi
 800a030:	2220      	movmi	r2, #32
 800a032:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a036:	071a      	lsls	r2, r3, #28
 800a038:	bf44      	itt	mi
 800a03a:	222b      	movmi	r2, #43	; 0x2b
 800a03c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a040:	782a      	ldrb	r2, [r5, #0]
 800a042:	2a2a      	cmp	r2, #42	; 0x2a
 800a044:	d015      	beq.n	800a072 <_svfiprintf_r+0xea>
 800a046:	9a07      	ldr	r2, [sp, #28]
 800a048:	462f      	mov	r7, r5
 800a04a:	2000      	movs	r0, #0
 800a04c:	250a      	movs	r5, #10
 800a04e:	4639      	mov	r1, r7
 800a050:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a054:	3b30      	subs	r3, #48	; 0x30
 800a056:	2b09      	cmp	r3, #9
 800a058:	d94d      	bls.n	800a0f6 <_svfiprintf_r+0x16e>
 800a05a:	b1b8      	cbz	r0, 800a08c <_svfiprintf_r+0x104>
 800a05c:	e00f      	b.n	800a07e <_svfiprintf_r+0xf6>
 800a05e:	462f      	mov	r7, r5
 800a060:	e7b8      	b.n	8009fd4 <_svfiprintf_r+0x4c>
 800a062:	4a40      	ldr	r2, [pc, #256]	; (800a164 <_svfiprintf_r+0x1dc>)
 800a064:	1a80      	subs	r0, r0, r2
 800a066:	fa0b f000 	lsl.w	r0, fp, r0
 800a06a:	4318      	orrs	r0, r3
 800a06c:	9004      	str	r0, [sp, #16]
 800a06e:	463d      	mov	r5, r7
 800a070:	e7d3      	b.n	800a01a <_svfiprintf_r+0x92>
 800a072:	9a03      	ldr	r2, [sp, #12]
 800a074:	1d11      	adds	r1, r2, #4
 800a076:	6812      	ldr	r2, [r2, #0]
 800a078:	9103      	str	r1, [sp, #12]
 800a07a:	2a00      	cmp	r2, #0
 800a07c:	db01      	blt.n	800a082 <_svfiprintf_r+0xfa>
 800a07e:	9207      	str	r2, [sp, #28]
 800a080:	e004      	b.n	800a08c <_svfiprintf_r+0x104>
 800a082:	4252      	negs	r2, r2
 800a084:	f043 0302 	orr.w	r3, r3, #2
 800a088:	9207      	str	r2, [sp, #28]
 800a08a:	9304      	str	r3, [sp, #16]
 800a08c:	783b      	ldrb	r3, [r7, #0]
 800a08e:	2b2e      	cmp	r3, #46	; 0x2e
 800a090:	d10c      	bne.n	800a0ac <_svfiprintf_r+0x124>
 800a092:	787b      	ldrb	r3, [r7, #1]
 800a094:	2b2a      	cmp	r3, #42	; 0x2a
 800a096:	d133      	bne.n	800a100 <_svfiprintf_r+0x178>
 800a098:	9b03      	ldr	r3, [sp, #12]
 800a09a:	1d1a      	adds	r2, r3, #4
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	9203      	str	r2, [sp, #12]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	bfb8      	it	lt
 800a0a4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0a8:	3702      	adds	r7, #2
 800a0aa:	9305      	str	r3, [sp, #20]
 800a0ac:	4d2e      	ldr	r5, [pc, #184]	; (800a168 <_svfiprintf_r+0x1e0>)
 800a0ae:	7839      	ldrb	r1, [r7, #0]
 800a0b0:	2203      	movs	r2, #3
 800a0b2:	4628      	mov	r0, r5
 800a0b4:	f7f6 f894 	bl	80001e0 <memchr>
 800a0b8:	b138      	cbz	r0, 800a0ca <_svfiprintf_r+0x142>
 800a0ba:	2340      	movs	r3, #64	; 0x40
 800a0bc:	1b40      	subs	r0, r0, r5
 800a0be:	fa03 f000 	lsl.w	r0, r3, r0
 800a0c2:	9b04      	ldr	r3, [sp, #16]
 800a0c4:	4303      	orrs	r3, r0
 800a0c6:	3701      	adds	r7, #1
 800a0c8:	9304      	str	r3, [sp, #16]
 800a0ca:	7839      	ldrb	r1, [r7, #0]
 800a0cc:	4827      	ldr	r0, [pc, #156]	; (800a16c <_svfiprintf_r+0x1e4>)
 800a0ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0d2:	2206      	movs	r2, #6
 800a0d4:	1c7e      	adds	r6, r7, #1
 800a0d6:	f7f6 f883 	bl	80001e0 <memchr>
 800a0da:	2800      	cmp	r0, #0
 800a0dc:	d038      	beq.n	800a150 <_svfiprintf_r+0x1c8>
 800a0de:	4b24      	ldr	r3, [pc, #144]	; (800a170 <_svfiprintf_r+0x1e8>)
 800a0e0:	bb13      	cbnz	r3, 800a128 <_svfiprintf_r+0x1a0>
 800a0e2:	9b03      	ldr	r3, [sp, #12]
 800a0e4:	3307      	adds	r3, #7
 800a0e6:	f023 0307 	bic.w	r3, r3, #7
 800a0ea:	3308      	adds	r3, #8
 800a0ec:	9303      	str	r3, [sp, #12]
 800a0ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0f0:	444b      	add	r3, r9
 800a0f2:	9309      	str	r3, [sp, #36]	; 0x24
 800a0f4:	e76d      	b.n	8009fd2 <_svfiprintf_r+0x4a>
 800a0f6:	fb05 3202 	mla	r2, r5, r2, r3
 800a0fa:	2001      	movs	r0, #1
 800a0fc:	460f      	mov	r7, r1
 800a0fe:	e7a6      	b.n	800a04e <_svfiprintf_r+0xc6>
 800a100:	2300      	movs	r3, #0
 800a102:	3701      	adds	r7, #1
 800a104:	9305      	str	r3, [sp, #20]
 800a106:	4619      	mov	r1, r3
 800a108:	250a      	movs	r5, #10
 800a10a:	4638      	mov	r0, r7
 800a10c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a110:	3a30      	subs	r2, #48	; 0x30
 800a112:	2a09      	cmp	r2, #9
 800a114:	d903      	bls.n	800a11e <_svfiprintf_r+0x196>
 800a116:	2b00      	cmp	r3, #0
 800a118:	d0c8      	beq.n	800a0ac <_svfiprintf_r+0x124>
 800a11a:	9105      	str	r1, [sp, #20]
 800a11c:	e7c6      	b.n	800a0ac <_svfiprintf_r+0x124>
 800a11e:	fb05 2101 	mla	r1, r5, r1, r2
 800a122:	2301      	movs	r3, #1
 800a124:	4607      	mov	r7, r0
 800a126:	e7f0      	b.n	800a10a <_svfiprintf_r+0x182>
 800a128:	ab03      	add	r3, sp, #12
 800a12a:	9300      	str	r3, [sp, #0]
 800a12c:	4622      	mov	r2, r4
 800a12e:	4b11      	ldr	r3, [pc, #68]	; (800a174 <_svfiprintf_r+0x1ec>)
 800a130:	a904      	add	r1, sp, #16
 800a132:	4640      	mov	r0, r8
 800a134:	f3af 8000 	nop.w
 800a138:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a13c:	4681      	mov	r9, r0
 800a13e:	d1d6      	bne.n	800a0ee <_svfiprintf_r+0x166>
 800a140:	89a3      	ldrh	r3, [r4, #12]
 800a142:	065b      	lsls	r3, r3, #25
 800a144:	f53f af35 	bmi.w	8009fb2 <_svfiprintf_r+0x2a>
 800a148:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a14a:	b01d      	add	sp, #116	; 0x74
 800a14c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a150:	ab03      	add	r3, sp, #12
 800a152:	9300      	str	r3, [sp, #0]
 800a154:	4622      	mov	r2, r4
 800a156:	4b07      	ldr	r3, [pc, #28]	; (800a174 <_svfiprintf_r+0x1ec>)
 800a158:	a904      	add	r1, sp, #16
 800a15a:	4640      	mov	r0, r8
 800a15c:	f000 f882 	bl	800a264 <_printf_i>
 800a160:	e7ea      	b.n	800a138 <_svfiprintf_r+0x1b0>
 800a162:	bf00      	nop
 800a164:	0800a5c0 	.word	0x0800a5c0
 800a168:	0800a5c6 	.word	0x0800a5c6
 800a16c:	0800a5ca 	.word	0x0800a5ca
 800a170:	00000000 	.word	0x00000000
 800a174:	08009ed5 	.word	0x08009ed5

0800a178 <_printf_common>:
 800a178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a17c:	4691      	mov	r9, r2
 800a17e:	461f      	mov	r7, r3
 800a180:	688a      	ldr	r2, [r1, #8]
 800a182:	690b      	ldr	r3, [r1, #16]
 800a184:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a188:	4293      	cmp	r3, r2
 800a18a:	bfb8      	it	lt
 800a18c:	4613      	movlt	r3, r2
 800a18e:	f8c9 3000 	str.w	r3, [r9]
 800a192:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a196:	4606      	mov	r6, r0
 800a198:	460c      	mov	r4, r1
 800a19a:	b112      	cbz	r2, 800a1a2 <_printf_common+0x2a>
 800a19c:	3301      	adds	r3, #1
 800a19e:	f8c9 3000 	str.w	r3, [r9]
 800a1a2:	6823      	ldr	r3, [r4, #0]
 800a1a4:	0699      	lsls	r1, r3, #26
 800a1a6:	bf42      	ittt	mi
 800a1a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a1ac:	3302      	addmi	r3, #2
 800a1ae:	f8c9 3000 	strmi.w	r3, [r9]
 800a1b2:	6825      	ldr	r5, [r4, #0]
 800a1b4:	f015 0506 	ands.w	r5, r5, #6
 800a1b8:	d107      	bne.n	800a1ca <_printf_common+0x52>
 800a1ba:	f104 0a19 	add.w	sl, r4, #25
 800a1be:	68e3      	ldr	r3, [r4, #12]
 800a1c0:	f8d9 2000 	ldr.w	r2, [r9]
 800a1c4:	1a9b      	subs	r3, r3, r2
 800a1c6:	42ab      	cmp	r3, r5
 800a1c8:	dc28      	bgt.n	800a21c <_printf_common+0xa4>
 800a1ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a1ce:	6822      	ldr	r2, [r4, #0]
 800a1d0:	3300      	adds	r3, #0
 800a1d2:	bf18      	it	ne
 800a1d4:	2301      	movne	r3, #1
 800a1d6:	0692      	lsls	r2, r2, #26
 800a1d8:	d42d      	bmi.n	800a236 <_printf_common+0xbe>
 800a1da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1de:	4639      	mov	r1, r7
 800a1e0:	4630      	mov	r0, r6
 800a1e2:	47c0      	blx	r8
 800a1e4:	3001      	adds	r0, #1
 800a1e6:	d020      	beq.n	800a22a <_printf_common+0xb2>
 800a1e8:	6823      	ldr	r3, [r4, #0]
 800a1ea:	68e5      	ldr	r5, [r4, #12]
 800a1ec:	f8d9 2000 	ldr.w	r2, [r9]
 800a1f0:	f003 0306 	and.w	r3, r3, #6
 800a1f4:	2b04      	cmp	r3, #4
 800a1f6:	bf08      	it	eq
 800a1f8:	1aad      	subeq	r5, r5, r2
 800a1fa:	68a3      	ldr	r3, [r4, #8]
 800a1fc:	6922      	ldr	r2, [r4, #16]
 800a1fe:	bf0c      	ite	eq
 800a200:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a204:	2500      	movne	r5, #0
 800a206:	4293      	cmp	r3, r2
 800a208:	bfc4      	itt	gt
 800a20a:	1a9b      	subgt	r3, r3, r2
 800a20c:	18ed      	addgt	r5, r5, r3
 800a20e:	f04f 0900 	mov.w	r9, #0
 800a212:	341a      	adds	r4, #26
 800a214:	454d      	cmp	r5, r9
 800a216:	d11a      	bne.n	800a24e <_printf_common+0xd6>
 800a218:	2000      	movs	r0, #0
 800a21a:	e008      	b.n	800a22e <_printf_common+0xb6>
 800a21c:	2301      	movs	r3, #1
 800a21e:	4652      	mov	r2, sl
 800a220:	4639      	mov	r1, r7
 800a222:	4630      	mov	r0, r6
 800a224:	47c0      	blx	r8
 800a226:	3001      	adds	r0, #1
 800a228:	d103      	bne.n	800a232 <_printf_common+0xba>
 800a22a:	f04f 30ff 	mov.w	r0, #4294967295
 800a22e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a232:	3501      	adds	r5, #1
 800a234:	e7c3      	b.n	800a1be <_printf_common+0x46>
 800a236:	18e1      	adds	r1, r4, r3
 800a238:	1c5a      	adds	r2, r3, #1
 800a23a:	2030      	movs	r0, #48	; 0x30
 800a23c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a240:	4422      	add	r2, r4
 800a242:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a246:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a24a:	3302      	adds	r3, #2
 800a24c:	e7c5      	b.n	800a1da <_printf_common+0x62>
 800a24e:	2301      	movs	r3, #1
 800a250:	4622      	mov	r2, r4
 800a252:	4639      	mov	r1, r7
 800a254:	4630      	mov	r0, r6
 800a256:	47c0      	blx	r8
 800a258:	3001      	adds	r0, #1
 800a25a:	d0e6      	beq.n	800a22a <_printf_common+0xb2>
 800a25c:	f109 0901 	add.w	r9, r9, #1
 800a260:	e7d8      	b.n	800a214 <_printf_common+0x9c>
	...

0800a264 <_printf_i>:
 800a264:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a268:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a26c:	460c      	mov	r4, r1
 800a26e:	7e09      	ldrb	r1, [r1, #24]
 800a270:	b085      	sub	sp, #20
 800a272:	296e      	cmp	r1, #110	; 0x6e
 800a274:	4617      	mov	r7, r2
 800a276:	4606      	mov	r6, r0
 800a278:	4698      	mov	r8, r3
 800a27a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a27c:	f000 80b3 	beq.w	800a3e6 <_printf_i+0x182>
 800a280:	d822      	bhi.n	800a2c8 <_printf_i+0x64>
 800a282:	2963      	cmp	r1, #99	; 0x63
 800a284:	d036      	beq.n	800a2f4 <_printf_i+0x90>
 800a286:	d80a      	bhi.n	800a29e <_printf_i+0x3a>
 800a288:	2900      	cmp	r1, #0
 800a28a:	f000 80b9 	beq.w	800a400 <_printf_i+0x19c>
 800a28e:	2958      	cmp	r1, #88	; 0x58
 800a290:	f000 8083 	beq.w	800a39a <_printf_i+0x136>
 800a294:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a298:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a29c:	e032      	b.n	800a304 <_printf_i+0xa0>
 800a29e:	2964      	cmp	r1, #100	; 0x64
 800a2a0:	d001      	beq.n	800a2a6 <_printf_i+0x42>
 800a2a2:	2969      	cmp	r1, #105	; 0x69
 800a2a4:	d1f6      	bne.n	800a294 <_printf_i+0x30>
 800a2a6:	6820      	ldr	r0, [r4, #0]
 800a2a8:	6813      	ldr	r3, [r2, #0]
 800a2aa:	0605      	lsls	r5, r0, #24
 800a2ac:	f103 0104 	add.w	r1, r3, #4
 800a2b0:	d52a      	bpl.n	800a308 <_printf_i+0xa4>
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	6011      	str	r1, [r2, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	da03      	bge.n	800a2c2 <_printf_i+0x5e>
 800a2ba:	222d      	movs	r2, #45	; 0x2d
 800a2bc:	425b      	negs	r3, r3
 800a2be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a2c2:	486f      	ldr	r0, [pc, #444]	; (800a480 <_printf_i+0x21c>)
 800a2c4:	220a      	movs	r2, #10
 800a2c6:	e039      	b.n	800a33c <_printf_i+0xd8>
 800a2c8:	2973      	cmp	r1, #115	; 0x73
 800a2ca:	f000 809d 	beq.w	800a408 <_printf_i+0x1a4>
 800a2ce:	d808      	bhi.n	800a2e2 <_printf_i+0x7e>
 800a2d0:	296f      	cmp	r1, #111	; 0x6f
 800a2d2:	d020      	beq.n	800a316 <_printf_i+0xb2>
 800a2d4:	2970      	cmp	r1, #112	; 0x70
 800a2d6:	d1dd      	bne.n	800a294 <_printf_i+0x30>
 800a2d8:	6823      	ldr	r3, [r4, #0]
 800a2da:	f043 0320 	orr.w	r3, r3, #32
 800a2de:	6023      	str	r3, [r4, #0]
 800a2e0:	e003      	b.n	800a2ea <_printf_i+0x86>
 800a2e2:	2975      	cmp	r1, #117	; 0x75
 800a2e4:	d017      	beq.n	800a316 <_printf_i+0xb2>
 800a2e6:	2978      	cmp	r1, #120	; 0x78
 800a2e8:	d1d4      	bne.n	800a294 <_printf_i+0x30>
 800a2ea:	2378      	movs	r3, #120	; 0x78
 800a2ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a2f0:	4864      	ldr	r0, [pc, #400]	; (800a484 <_printf_i+0x220>)
 800a2f2:	e055      	b.n	800a3a0 <_printf_i+0x13c>
 800a2f4:	6813      	ldr	r3, [r2, #0]
 800a2f6:	1d19      	adds	r1, r3, #4
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	6011      	str	r1, [r2, #0]
 800a2fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a300:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a304:	2301      	movs	r3, #1
 800a306:	e08c      	b.n	800a422 <_printf_i+0x1be>
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	6011      	str	r1, [r2, #0]
 800a30c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a310:	bf18      	it	ne
 800a312:	b21b      	sxthne	r3, r3
 800a314:	e7cf      	b.n	800a2b6 <_printf_i+0x52>
 800a316:	6813      	ldr	r3, [r2, #0]
 800a318:	6825      	ldr	r5, [r4, #0]
 800a31a:	1d18      	adds	r0, r3, #4
 800a31c:	6010      	str	r0, [r2, #0]
 800a31e:	0628      	lsls	r0, r5, #24
 800a320:	d501      	bpl.n	800a326 <_printf_i+0xc2>
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	e002      	b.n	800a32c <_printf_i+0xc8>
 800a326:	0668      	lsls	r0, r5, #25
 800a328:	d5fb      	bpl.n	800a322 <_printf_i+0xbe>
 800a32a:	881b      	ldrh	r3, [r3, #0]
 800a32c:	4854      	ldr	r0, [pc, #336]	; (800a480 <_printf_i+0x21c>)
 800a32e:	296f      	cmp	r1, #111	; 0x6f
 800a330:	bf14      	ite	ne
 800a332:	220a      	movne	r2, #10
 800a334:	2208      	moveq	r2, #8
 800a336:	2100      	movs	r1, #0
 800a338:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a33c:	6865      	ldr	r5, [r4, #4]
 800a33e:	60a5      	str	r5, [r4, #8]
 800a340:	2d00      	cmp	r5, #0
 800a342:	f2c0 8095 	blt.w	800a470 <_printf_i+0x20c>
 800a346:	6821      	ldr	r1, [r4, #0]
 800a348:	f021 0104 	bic.w	r1, r1, #4
 800a34c:	6021      	str	r1, [r4, #0]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d13d      	bne.n	800a3ce <_printf_i+0x16a>
 800a352:	2d00      	cmp	r5, #0
 800a354:	f040 808e 	bne.w	800a474 <_printf_i+0x210>
 800a358:	4665      	mov	r5, ip
 800a35a:	2a08      	cmp	r2, #8
 800a35c:	d10b      	bne.n	800a376 <_printf_i+0x112>
 800a35e:	6823      	ldr	r3, [r4, #0]
 800a360:	07db      	lsls	r3, r3, #31
 800a362:	d508      	bpl.n	800a376 <_printf_i+0x112>
 800a364:	6923      	ldr	r3, [r4, #16]
 800a366:	6862      	ldr	r2, [r4, #4]
 800a368:	429a      	cmp	r2, r3
 800a36a:	bfde      	ittt	le
 800a36c:	2330      	movle	r3, #48	; 0x30
 800a36e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a372:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a376:	ebac 0305 	sub.w	r3, ip, r5
 800a37a:	6123      	str	r3, [r4, #16]
 800a37c:	f8cd 8000 	str.w	r8, [sp]
 800a380:	463b      	mov	r3, r7
 800a382:	aa03      	add	r2, sp, #12
 800a384:	4621      	mov	r1, r4
 800a386:	4630      	mov	r0, r6
 800a388:	f7ff fef6 	bl	800a178 <_printf_common>
 800a38c:	3001      	adds	r0, #1
 800a38e:	d14d      	bne.n	800a42c <_printf_i+0x1c8>
 800a390:	f04f 30ff 	mov.w	r0, #4294967295
 800a394:	b005      	add	sp, #20
 800a396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a39a:	4839      	ldr	r0, [pc, #228]	; (800a480 <_printf_i+0x21c>)
 800a39c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a3a0:	6813      	ldr	r3, [r2, #0]
 800a3a2:	6821      	ldr	r1, [r4, #0]
 800a3a4:	1d1d      	adds	r5, r3, #4
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	6015      	str	r5, [r2, #0]
 800a3aa:	060a      	lsls	r2, r1, #24
 800a3ac:	d50b      	bpl.n	800a3c6 <_printf_i+0x162>
 800a3ae:	07ca      	lsls	r2, r1, #31
 800a3b0:	bf44      	itt	mi
 800a3b2:	f041 0120 	orrmi.w	r1, r1, #32
 800a3b6:	6021      	strmi	r1, [r4, #0]
 800a3b8:	b91b      	cbnz	r3, 800a3c2 <_printf_i+0x15e>
 800a3ba:	6822      	ldr	r2, [r4, #0]
 800a3bc:	f022 0220 	bic.w	r2, r2, #32
 800a3c0:	6022      	str	r2, [r4, #0]
 800a3c2:	2210      	movs	r2, #16
 800a3c4:	e7b7      	b.n	800a336 <_printf_i+0xd2>
 800a3c6:	064d      	lsls	r5, r1, #25
 800a3c8:	bf48      	it	mi
 800a3ca:	b29b      	uxthmi	r3, r3
 800a3cc:	e7ef      	b.n	800a3ae <_printf_i+0x14a>
 800a3ce:	4665      	mov	r5, ip
 800a3d0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a3d4:	fb02 3311 	mls	r3, r2, r1, r3
 800a3d8:	5cc3      	ldrb	r3, [r0, r3]
 800a3da:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a3de:	460b      	mov	r3, r1
 800a3e0:	2900      	cmp	r1, #0
 800a3e2:	d1f5      	bne.n	800a3d0 <_printf_i+0x16c>
 800a3e4:	e7b9      	b.n	800a35a <_printf_i+0xf6>
 800a3e6:	6813      	ldr	r3, [r2, #0]
 800a3e8:	6825      	ldr	r5, [r4, #0]
 800a3ea:	6961      	ldr	r1, [r4, #20]
 800a3ec:	1d18      	adds	r0, r3, #4
 800a3ee:	6010      	str	r0, [r2, #0]
 800a3f0:	0628      	lsls	r0, r5, #24
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	d501      	bpl.n	800a3fa <_printf_i+0x196>
 800a3f6:	6019      	str	r1, [r3, #0]
 800a3f8:	e002      	b.n	800a400 <_printf_i+0x19c>
 800a3fa:	066a      	lsls	r2, r5, #25
 800a3fc:	d5fb      	bpl.n	800a3f6 <_printf_i+0x192>
 800a3fe:	8019      	strh	r1, [r3, #0]
 800a400:	2300      	movs	r3, #0
 800a402:	6123      	str	r3, [r4, #16]
 800a404:	4665      	mov	r5, ip
 800a406:	e7b9      	b.n	800a37c <_printf_i+0x118>
 800a408:	6813      	ldr	r3, [r2, #0]
 800a40a:	1d19      	adds	r1, r3, #4
 800a40c:	6011      	str	r1, [r2, #0]
 800a40e:	681d      	ldr	r5, [r3, #0]
 800a410:	6862      	ldr	r2, [r4, #4]
 800a412:	2100      	movs	r1, #0
 800a414:	4628      	mov	r0, r5
 800a416:	f7f5 fee3 	bl	80001e0 <memchr>
 800a41a:	b108      	cbz	r0, 800a420 <_printf_i+0x1bc>
 800a41c:	1b40      	subs	r0, r0, r5
 800a41e:	6060      	str	r0, [r4, #4]
 800a420:	6863      	ldr	r3, [r4, #4]
 800a422:	6123      	str	r3, [r4, #16]
 800a424:	2300      	movs	r3, #0
 800a426:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a42a:	e7a7      	b.n	800a37c <_printf_i+0x118>
 800a42c:	6923      	ldr	r3, [r4, #16]
 800a42e:	462a      	mov	r2, r5
 800a430:	4639      	mov	r1, r7
 800a432:	4630      	mov	r0, r6
 800a434:	47c0      	blx	r8
 800a436:	3001      	adds	r0, #1
 800a438:	d0aa      	beq.n	800a390 <_printf_i+0x12c>
 800a43a:	6823      	ldr	r3, [r4, #0]
 800a43c:	079b      	lsls	r3, r3, #30
 800a43e:	d413      	bmi.n	800a468 <_printf_i+0x204>
 800a440:	68e0      	ldr	r0, [r4, #12]
 800a442:	9b03      	ldr	r3, [sp, #12]
 800a444:	4298      	cmp	r0, r3
 800a446:	bfb8      	it	lt
 800a448:	4618      	movlt	r0, r3
 800a44a:	e7a3      	b.n	800a394 <_printf_i+0x130>
 800a44c:	2301      	movs	r3, #1
 800a44e:	464a      	mov	r2, r9
 800a450:	4639      	mov	r1, r7
 800a452:	4630      	mov	r0, r6
 800a454:	47c0      	blx	r8
 800a456:	3001      	adds	r0, #1
 800a458:	d09a      	beq.n	800a390 <_printf_i+0x12c>
 800a45a:	3501      	adds	r5, #1
 800a45c:	68e3      	ldr	r3, [r4, #12]
 800a45e:	9a03      	ldr	r2, [sp, #12]
 800a460:	1a9b      	subs	r3, r3, r2
 800a462:	42ab      	cmp	r3, r5
 800a464:	dcf2      	bgt.n	800a44c <_printf_i+0x1e8>
 800a466:	e7eb      	b.n	800a440 <_printf_i+0x1dc>
 800a468:	2500      	movs	r5, #0
 800a46a:	f104 0919 	add.w	r9, r4, #25
 800a46e:	e7f5      	b.n	800a45c <_printf_i+0x1f8>
 800a470:	2b00      	cmp	r3, #0
 800a472:	d1ac      	bne.n	800a3ce <_printf_i+0x16a>
 800a474:	7803      	ldrb	r3, [r0, #0]
 800a476:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a47a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a47e:	e76c      	b.n	800a35a <_printf_i+0xf6>
 800a480:	0800a5d1 	.word	0x0800a5d1
 800a484:	0800a5e2 	.word	0x0800a5e2

0800a488 <memcpy>:
 800a488:	b510      	push	{r4, lr}
 800a48a:	1e43      	subs	r3, r0, #1
 800a48c:	440a      	add	r2, r1
 800a48e:	4291      	cmp	r1, r2
 800a490:	d100      	bne.n	800a494 <memcpy+0xc>
 800a492:	bd10      	pop	{r4, pc}
 800a494:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a498:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a49c:	e7f7      	b.n	800a48e <memcpy+0x6>

0800a49e <memmove>:
 800a49e:	4288      	cmp	r0, r1
 800a4a0:	b510      	push	{r4, lr}
 800a4a2:	eb01 0302 	add.w	r3, r1, r2
 800a4a6:	d807      	bhi.n	800a4b8 <memmove+0x1a>
 800a4a8:	1e42      	subs	r2, r0, #1
 800a4aa:	4299      	cmp	r1, r3
 800a4ac:	d00a      	beq.n	800a4c4 <memmove+0x26>
 800a4ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4b2:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a4b6:	e7f8      	b.n	800a4aa <memmove+0xc>
 800a4b8:	4283      	cmp	r3, r0
 800a4ba:	d9f5      	bls.n	800a4a8 <memmove+0xa>
 800a4bc:	1881      	adds	r1, r0, r2
 800a4be:	1ad2      	subs	r2, r2, r3
 800a4c0:	42d3      	cmn	r3, r2
 800a4c2:	d100      	bne.n	800a4c6 <memmove+0x28>
 800a4c4:	bd10      	pop	{r4, pc}
 800a4c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a4ca:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a4ce:	e7f7      	b.n	800a4c0 <memmove+0x22>

0800a4d0 <_realloc_r>:
 800a4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4d2:	4607      	mov	r7, r0
 800a4d4:	4614      	mov	r4, r2
 800a4d6:	460e      	mov	r6, r1
 800a4d8:	b921      	cbnz	r1, 800a4e4 <_realloc_r+0x14>
 800a4da:	4611      	mov	r1, r2
 800a4dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a4e0:	f7ff bc6c 	b.w	8009dbc <_malloc_r>
 800a4e4:	b922      	cbnz	r2, 800a4f0 <_realloc_r+0x20>
 800a4e6:	f7ff fc1b 	bl	8009d20 <_free_r>
 800a4ea:	4625      	mov	r5, r4
 800a4ec:	4628      	mov	r0, r5
 800a4ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4f0:	f000 f814 	bl	800a51c <_malloc_usable_size_r>
 800a4f4:	42a0      	cmp	r0, r4
 800a4f6:	d20f      	bcs.n	800a518 <_realloc_r+0x48>
 800a4f8:	4621      	mov	r1, r4
 800a4fa:	4638      	mov	r0, r7
 800a4fc:	f7ff fc5e 	bl	8009dbc <_malloc_r>
 800a500:	4605      	mov	r5, r0
 800a502:	2800      	cmp	r0, #0
 800a504:	d0f2      	beq.n	800a4ec <_realloc_r+0x1c>
 800a506:	4631      	mov	r1, r6
 800a508:	4622      	mov	r2, r4
 800a50a:	f7ff ffbd 	bl	800a488 <memcpy>
 800a50e:	4631      	mov	r1, r6
 800a510:	4638      	mov	r0, r7
 800a512:	f7ff fc05 	bl	8009d20 <_free_r>
 800a516:	e7e9      	b.n	800a4ec <_realloc_r+0x1c>
 800a518:	4635      	mov	r5, r6
 800a51a:	e7e7      	b.n	800a4ec <_realloc_r+0x1c>

0800a51c <_malloc_usable_size_r>:
 800a51c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a520:	1f18      	subs	r0, r3, #4
 800a522:	2b00      	cmp	r3, #0
 800a524:	bfbc      	itt	lt
 800a526:	580b      	ldrlt	r3, [r1, r0]
 800a528:	18c0      	addlt	r0, r0, r3
 800a52a:	4770      	bx	lr

0800a52c <_init>:
 800a52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a52e:	bf00      	nop
 800a530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a532:	bc08      	pop	{r3}
 800a534:	469e      	mov	lr, r3
 800a536:	4770      	bx	lr

0800a538 <_fini>:
 800a538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a53a:	bf00      	nop
 800a53c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a53e:	bc08      	pop	{r3}
 800a540:	469e      	mov	lr, r3
 800a542:	4770      	bx	lr
