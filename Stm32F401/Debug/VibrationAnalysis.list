
VibrationAnalysis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007538  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080076cc  080076cc  000176cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007734  08007734  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  08007734  08007734  00017734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800773c  0800773c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800773c  0800773c  0001773c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007740  08007740  00017740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08007744  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011d8  200001f4  08007938  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00001504  200013cc  08007938  000213cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a5bf  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003922  00000000  00000000  0003a7e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013d0  00000000  00000000  0003e108  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001228  00000000  00000000  0003f4d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a100  00000000  00000000  00040700  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013090  00000000  00000000  0005a800  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000904ff  00000000  00000000  0006d890  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fdd8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005334  00000000  00000000  000fde0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200001f4 	.word	0x200001f4
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080076b4 	.word	0x080076b4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200001f8 	.word	0x200001f8
 80001d0:	080076b4 	.word	0x080076b4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004da:	2300      	movs	r3, #0
 80004dc:	607b      	str	r3, [r7, #4]
 80004de:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <MX_DMA_Init+0x3c>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e2:	4a0b      	ldr	r2, [pc, #44]	; (8000510 <MX_DMA_Init+0x3c>)
 80004e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004e8:	6313      	str	r3, [r2, #48]	; 0x30
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <MX_DMA_Init+0x3c>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80004f6:	2200      	movs	r2, #0
 80004f8:	2100      	movs	r1, #0
 80004fa:	200b      	movs	r0, #11
 80004fc:	f000 fc47 	bl	8000d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000500:	200b      	movs	r0, #11
 8000502:	f000 fc60 	bl	8000dc6 <HAL_NVIC_EnableIRQ>

}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40023800 	.word	0x40023800

08000514 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	60fb      	str	r3, [r7, #12]
 800051e:	4b17      	ldr	r3, [pc, #92]	; (800057c <MX_GPIO_Init+0x68>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a16      	ldr	r2, [pc, #88]	; (800057c <MX_GPIO_Init+0x68>)
 8000524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
 800052a:	4b14      	ldr	r3, [pc, #80]	; (800057c <MX_GPIO_Init+0x68>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	4b10      	ldr	r3, [pc, #64]	; (800057c <MX_GPIO_Init+0x68>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a0f      	ldr	r2, [pc, #60]	; (800057c <MX_GPIO_Init+0x68>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4b0d      	ldr	r3, [pc, #52]	; (800057c <MX_GPIO_Init+0x68>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	4b09      	ldr	r3, [pc, #36]	; (800057c <MX_GPIO_Init+0x68>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a08      	ldr	r2, [pc, #32]	; (800057c <MX_GPIO_Init+0x68>)
 800055c:	f043 0302 	orr.w	r3, r3, #2
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
 8000562:	4b06      	ldr	r3, [pc, #24]	; (800057c <MX_GPIO_Init+0x68>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]

}
 800056e:	bf00      	nop
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	40023800 	.word	0x40023800

08000580 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000584:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <MX_I2C1_Init+0x50>)
 8000586:	4a13      	ldr	r2, [pc, #76]	; (80005d4 <MX_I2C1_Init+0x54>)
 8000588:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800058a:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <MX_I2C1_Init+0x50>)
 800058c:	4a12      	ldr	r2, [pc, #72]	; (80005d8 <MX_I2C1_Init+0x58>)
 800058e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000590:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <MX_I2C1_Init+0x50>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <MX_I2C1_Init+0x50>)
 8000598:	2200      	movs	r2, #0
 800059a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800059c:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <MX_I2C1_Init+0x50>)
 800059e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005a4:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <MX_I2C1_Init+0x50>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005aa:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <MX_I2C1_Init+0x50>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005b0:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <MX_I2C1_Init+0x50>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <MX_I2C1_Init+0x50>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005bc:	4804      	ldr	r0, [pc, #16]	; (80005d0 <MX_I2C1_Init+0x50>)
 80005be:	f001 f887 	bl	80016d0 <HAL_I2C_Init>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005c8:	f000 f908 	bl	80007dc <Error_Handler>
  }

}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000228 	.word	0x20000228
 80005d4:	40005400 	.word	0x40005400
 80005d8:	00061a80 	.word	0x00061a80

080005dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	; 0x28
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a30      	ldr	r2, [pc, #192]	; (80006bc <HAL_I2C_MspInit+0xe0>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d15a      	bne.n	80006b4 <HAL_I2C_MspInit+0xd8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	613b      	str	r3, [r7, #16]
 8000602:	4b2f      	ldr	r3, [pc, #188]	; (80006c0 <HAL_I2C_MspInit+0xe4>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a2e      	ldr	r2, [pc, #184]	; (80006c0 <HAL_I2C_MspInit+0xe4>)
 8000608:	f043 0302 	orr.w	r3, r3, #2
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b2c      	ldr	r3, [pc, #176]	; (80006c0 <HAL_I2C_MspInit+0xe4>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	613b      	str	r3, [r7, #16]
 8000618:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800061a:	23c0      	movs	r3, #192	; 0xc0
 800061c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800061e:	2312      	movs	r3, #18
 8000620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000622:	2301      	movs	r3, #1
 8000624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000626:	2303      	movs	r3, #3
 8000628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800062a:	2304      	movs	r3, #4
 800062c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	4619      	mov	r1, r3
 8000634:	4823      	ldr	r0, [pc, #140]	; (80006c4 <HAL_I2C_MspInit+0xe8>)
 8000636:	f000 fec9 	bl	80013cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	4b20      	ldr	r3, [pc, #128]	; (80006c0 <HAL_I2C_MspInit+0xe4>)
 8000640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000642:	4a1f      	ldr	r2, [pc, #124]	; (80006c0 <HAL_I2C_MspInit+0xe4>)
 8000644:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000648:	6413      	str	r3, [r2, #64]	; 0x40
 800064a:	4b1d      	ldr	r3, [pc, #116]	; (80006c0 <HAL_I2C_MspInit+0xe4>)
 800064c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000656:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <HAL_I2C_MspInit+0xec>)
 8000658:	4a1c      	ldr	r2, [pc, #112]	; (80006cc <HAL_I2C_MspInit+0xf0>)
 800065a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800065c:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <HAL_I2C_MspInit+0xec>)
 800065e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000662:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000664:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <HAL_I2C_MspInit+0xec>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800066a:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <HAL_I2C_MspInit+0xec>)
 800066c:	2200      	movs	r2, #0
 800066e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000670:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <HAL_I2C_MspInit+0xec>)
 8000672:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000676:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000678:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <HAL_I2C_MspInit+0xec>)
 800067a:	2200      	movs	r2, #0
 800067c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800067e:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <HAL_I2C_MspInit+0xec>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 8000684:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <HAL_I2C_MspInit+0xec>)
 8000686:	f44f 7280 	mov.w	r2, #256	; 0x100
 800068a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800068c:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <HAL_I2C_MspInit+0xec>)
 800068e:	2200      	movs	r2, #0
 8000690:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000692:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <HAL_I2C_MspInit+0xec>)
 8000694:	2200      	movs	r2, #0
 8000696:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000698:	480b      	ldr	r0, [pc, #44]	; (80006c8 <HAL_I2C_MspInit+0xec>)
 800069a:	f000 fbaf 	bl	8000dfc <HAL_DMA_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80006a4:	f000 f89a 	bl	80007dc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <HAL_I2C_MspInit+0xec>)
 80006ac:	639a      	str	r2, [r3, #56]	; 0x38
 80006ae:	4a06      	ldr	r2, [pc, #24]	; (80006c8 <HAL_I2C_MspInit+0xec>)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006b4:	bf00      	nop
 80006b6:	3728      	adds	r7, #40	; 0x28
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40005400 	.word	0x40005400
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40020400 	.word	0x40020400
 80006c8:	2000027c 	.word	0x2000027c
 80006cc:	40026010 	.word	0x40026010

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d4:	f000 f9ec 	bl	8000ab0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d8:	f000 f814 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006dc:	f7ff ff1a 	bl	8000514 <MX_GPIO_Init>
  MX_DMA_Init();
 80006e0:	f7ff fef8 	bl	80004d4 <MX_DMA_Init>
  MX_I2C1_Init();
 80006e4:	f7ff ff4c 	bl	8000580 <MX_I2C1_Init>
  MX_TIM1_Init();
 80006e8:	f000 f940 	bl	800096c <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 80006ec:	f006 f9ac 	bl	8006a48 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  CDC_Transmit_FS(string, sizeof(string));
 80006f0:	210e      	movs	r1, #14
 80006f2:	4803      	ldr	r0, [pc, #12]	; (8000700 <main+0x30>)
 80006f4:	f006 faaa 	bl	8006c4c <CDC_Transmit_FS>
	  HAL_Delay(10);
 80006f8:	200a      	movs	r0, #10
 80006fa:	f000 fa4b 	bl	8000b94 <HAL_Delay>
  {
 80006fe:	e7f7      	b.n	80006f0 <main+0x20>
 8000700:	20000000 	.word	0x20000000

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b094      	sub	sp, #80	; 0x50
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 0320 	add.w	r3, r7, #32
 800070e:	2230      	movs	r2, #48	; 0x30
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f006 ff0c 	bl	8007530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000728:	2300      	movs	r3, #0
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	4b29      	ldr	r3, [pc, #164]	; (80007d4 <SystemClock_Config+0xd0>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	4a28      	ldr	r2, [pc, #160]	; (80007d4 <SystemClock_Config+0xd0>)
 8000732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000736:	6413      	str	r3, [r2, #64]	; 0x40
 8000738:	4b26      	ldr	r3, [pc, #152]	; (80007d4 <SystemClock_Config+0xd0>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000744:	2300      	movs	r3, #0
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	4b23      	ldr	r3, [pc, #140]	; (80007d8 <SystemClock_Config+0xd4>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000750:	4a21      	ldr	r2, [pc, #132]	; (80007d8 <SystemClock_Config+0xd4>)
 8000752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000756:	6013      	str	r3, [r2, #0]
 8000758:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <SystemClock_Config+0xd4>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000764:	2301      	movs	r3, #1
 8000766:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000768:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076e:	2302      	movs	r3, #2
 8000770:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000772:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000776:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000778:	2319      	movs	r3, #25
 800077a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800077c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000780:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000782:	2304      	movs	r3, #4
 8000784:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000786:	2307      	movs	r3, #7
 8000788:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078a:	f107 0320 	add.w	r3, r7, #32
 800078e:	4618      	mov	r0, r3
 8000790:	f002 fa5a 	bl	8002c48 <HAL_RCC_OscConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800079a:	f000 f81f 	bl	80007dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079e:	230f      	movs	r3, #15
 80007a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a2:	2302      	movs	r3, #2
 80007a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	2102      	movs	r1, #2
 80007ba:	4618      	mov	r0, r3
 80007bc:	f002 fcb4 	bl	8003128 <HAL_RCC_ClockConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007c6:	f000 f809 	bl	80007dc <Error_Handler>
  }
}
 80007ca:	bf00      	nop
 80007cc:	3750      	adds	r7, #80	; 0x50
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40007000 	.word	0x40007000

080007dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
	...

080007ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <HAL_MspInit+0x4c>)
 80007f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fa:	4a0f      	ldr	r2, [pc, #60]	; (8000838 <HAL_MspInit+0x4c>)
 80007fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000800:	6453      	str	r3, [r2, #68]	; 0x44
 8000802:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <HAL_MspInit+0x4c>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <HAL_MspInit+0x4c>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000816:	4a08      	ldr	r2, [pc, #32]	; (8000838 <HAL_MspInit+0x4c>)
 8000818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800081c:	6413      	str	r3, [r2, #64]	; 0x40
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <HAL_MspInit+0x4c>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800

0800083c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr

0800084a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <HardFault_Handler+0x4>

08000850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <MemManage_Handler+0x4>

08000856 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <BusFault_Handler+0x4>

0800085c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <UsageFault_Handler+0x4>

08000862 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000890:	f000 f960 	bl	8000b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}

08000898 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800089c:	4802      	ldr	r0, [pc, #8]	; (80008a8 <DMA1_Stream0_IRQHandler+0x10>)
 800089e:	f000 fb5b 	bl	8000f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	2000027c 	.word	0x2000027c

080008ac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008b0:	4802      	ldr	r0, [pc, #8]	; (80008bc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80008b2:	f002 fe1c 	bl	80034ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	200002dc 	.word	0x200002dc

080008c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008c4:	4802      	ldr	r0, [pc, #8]	; (80008d0 <OTG_FS_IRQHandler+0x10>)
 80008c6:	f001 f98b 	bl	8001be0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000fc0 	.word	0x20000fc0

080008d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008dc:	4a14      	ldr	r2, [pc, #80]	; (8000930 <_sbrk+0x5c>)
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <_sbrk+0x60>)
 80008e0:	1ad3      	subs	r3, r2, r3
 80008e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008e8:	4b13      	ldr	r3, [pc, #76]	; (8000938 <_sbrk+0x64>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d102      	bne.n	80008f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <_sbrk+0x64>)
 80008f2:	4a12      	ldr	r2, [pc, #72]	; (800093c <_sbrk+0x68>)
 80008f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <_sbrk+0x64>)
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4413      	add	r3, r2
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	429a      	cmp	r2, r3
 8000902:	d207      	bcs.n	8000914 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000904:	f006 fdda 	bl	80074bc <__errno>
 8000908:	4602      	mov	r2, r0
 800090a:	230c      	movs	r3, #12
 800090c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800090e:	f04f 33ff 	mov.w	r3, #4294967295
 8000912:	e009      	b.n	8000928 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <_sbrk+0x64>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800091a:	4b07      	ldr	r3, [pc, #28]	; (8000938 <_sbrk+0x64>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4413      	add	r3, r2
 8000922:	4a05      	ldr	r2, [pc, #20]	; (8000938 <_sbrk+0x64>)
 8000924:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000926:	68fb      	ldr	r3, [r7, #12]
}
 8000928:	4618      	mov	r0, r3
 800092a:	3718      	adds	r7, #24
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20010000 	.word	0x20010000
 8000934:	00000500 	.word	0x00000500
 8000938:	20000210 	.word	0x20000210
 800093c:	200013d0 	.word	0x200013d0

08000940 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000944:	4b08      	ldr	r3, [pc, #32]	; (8000968 <SystemInit+0x28>)
 8000946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800094a:	4a07      	ldr	r2, [pc, #28]	; (8000968 <SystemInit+0x28>)
 800094c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000950:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000954:	4b04      	ldr	r3, [pc, #16]	; (8000968 <SystemInit+0x28>)
 8000956:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800095a:	609a      	str	r2, [r3, #8]
#endif
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000972:	f107 0308 	add.w	r3, r7, #8
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000980:	463b      	mov	r3, r7
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000988:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <MX_TIM1_Init+0x98>)
 800098a:	4a1f      	ldr	r2, [pc, #124]	; (8000a08 <MX_TIM1_Init+0x9c>)
 800098c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 800098e:	4b1d      	ldr	r3, [pc, #116]	; (8000a04 <MX_TIM1_Init+0x98>)
 8000990:	2254      	movs	r2, #84	; 0x54
 8000992:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000994:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <MX_TIM1_Init+0x98>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800099a:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <MX_TIM1_Init+0x98>)
 800099c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a2:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <MX_TIM1_Init+0x98>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009a8:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <MX_TIM1_Init+0x98>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <MX_TIM1_Init+0x98>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009b4:	4813      	ldr	r0, [pc, #76]	; (8000a04 <MX_TIM1_Init+0x98>)
 80009b6:	f002 fd6f 	bl	8003498 <HAL_TIM_Base_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80009c0:	f7ff ff0c 	bl	80007dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009ca:	f107 0308 	add.w	r3, r7, #8
 80009ce:	4619      	mov	r1, r3
 80009d0:	480c      	ldr	r0, [pc, #48]	; (8000a04 <MX_TIM1_Init+0x98>)
 80009d2:	f002 fe94 	bl	80036fe <HAL_TIM_ConfigClockSource>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80009dc:	f7ff fefe 	bl	80007dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e0:	2300      	movs	r3, #0
 80009e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009e8:	463b      	mov	r3, r7
 80009ea:	4619      	mov	r1, r3
 80009ec:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_TIM1_Init+0x98>)
 80009ee:	f003 f889 	bl	8003b04 <HAL_TIMEx_MasterConfigSynchronization>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80009f8:	f7ff fef0 	bl	80007dc <Error_Handler>
  }

}
 80009fc:	bf00      	nop
 80009fe:	3718      	adds	r7, #24
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200002dc 	.word	0x200002dc
 8000a08:	40010000 	.word	0x40010000

08000a0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a0e      	ldr	r2, [pc, #56]	; (8000a54 <HAL_TIM_Base_MspInit+0x48>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d115      	bne.n	8000a4a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <HAL_TIM_Base_MspInit+0x4c>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a26:	4a0c      	ldr	r2, [pc, #48]	; (8000a58 <HAL_TIM_Base_MspInit+0x4c>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <HAL_TIM_Base_MspInit+0x4c>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2019      	movs	r0, #25
 8000a40:	f000 f9a5 	bl	8000d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a44:	2019      	movs	r0, #25
 8000a46:	f000 f9be 	bl	8000dc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000a4a:	bf00      	nop
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40010000 	.word	0x40010000
 8000a58:	40023800 	.word	0x40023800

08000a5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a94 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a62:	e003      	b.n	8000a6c <LoopCopyDataInit>

08000a64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a6a:	3104      	adds	r1, #4

08000a6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a6c:	480b      	ldr	r0, [pc, #44]	; (8000a9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a74:	d3f6      	bcc.n	8000a64 <CopyDataInit>
  ldr  r2, =_sbss
 8000a76:	4a0b      	ldr	r2, [pc, #44]	; (8000aa4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a78:	e002      	b.n	8000a80 <LoopFillZerobss>

08000a7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a7c:	f842 3b04 	str.w	r3, [r2], #4

08000a80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a84:	d3f9      	bcc.n	8000a7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a86:	f7ff ff5b 	bl	8000940 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a8a:	f006 fd1d 	bl	80074c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a8e:	f7ff fe1f 	bl	80006d0 <main>
  bx  lr    
 8000a92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a94:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8000a98:	08007744 	.word	0x08007744
  ldr  r0, =_sdata
 8000a9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000aa0:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8000aa4:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 8000aa8:	200013cc 	.word	0x200013cc

08000aac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aac:	e7fe      	b.n	8000aac <ADC_IRQHandler>
	...

08000ab0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ab4:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <HAL_Init+0x40>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a0d      	ldr	r2, [pc, #52]	; (8000af0 <HAL_Init+0x40>)
 8000aba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000abe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ac0:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <HAL_Init+0x40>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <HAL_Init+0x40>)
 8000ac6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <HAL_Init+0x40>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a07      	ldr	r2, [pc, #28]	; (8000af0 <HAL_Init+0x40>)
 8000ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ad6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad8:	2003      	movs	r0, #3
 8000ada:	f000 f94d 	bl	8000d78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f000 f808 	bl	8000af4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae4:	f7ff fe82 	bl	80007ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40023c00 	.word	0x40023c00

08000af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <HAL_InitTick+0x54>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <HAL_InitTick+0x58>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	4619      	mov	r1, r3
 8000b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 f965 	bl	8000de2 <HAL_SYSTICK_Config>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e00e      	b.n	8000b40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2b0f      	cmp	r3, #15
 8000b26:	d80a      	bhi.n	8000b3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	6879      	ldr	r1, [r7, #4]
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	f000 f92d 	bl	8000d8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b34:	4a06      	ldr	r2, [pc, #24]	; (8000b50 <HAL_InitTick+0x5c>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e000      	b.n	8000b40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000010 	.word	0x20000010
 8000b4c:	20000018 	.word	0x20000018
 8000b50:	20000014 	.word	0x20000014

08000b54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_IncTick+0x20>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_IncTick+0x24>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4413      	add	r3, r2
 8000b64:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <HAL_IncTick+0x24>)
 8000b66:	6013      	str	r3, [r2, #0]
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000018 	.word	0x20000018
 8000b78:	2000031c 	.word	0x2000031c

08000b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <HAL_GetTick+0x14>)
 8000b82:	681b      	ldr	r3, [r3, #0]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	2000031c 	.word	0x2000031c

08000b94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b9c:	f7ff ffee 	bl	8000b7c <HAL_GetTick>
 8000ba0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bac:	d005      	beq.n	8000bba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <HAL_Delay+0x40>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bba:	bf00      	nop
 8000bbc:	f7ff ffde 	bl	8000b7c <HAL_GetTick>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d8f7      	bhi.n	8000bbc <HAL_Delay+0x28>
  {
  }
}
 8000bcc:	bf00      	nop
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000018 	.word	0x20000018

08000bd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <__NVIC_SetPriorityGrouping+0x44>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bee:	68ba      	ldr	r2, [r7, #8]
 8000bf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0a:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <__NVIC_SetPriorityGrouping+0x44>)
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	60d3      	str	r3, [r2, #12]
}
 8000c10:	bf00      	nop
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c24:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <__NVIC_GetPriorityGrouping+0x18>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	0a1b      	lsrs	r3, r3, #8
 8000c2a:	f003 0307 	and.w	r3, r3, #7
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	db0b      	blt.n	8000c66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	f003 021f 	and.w	r2, r3, #31
 8000c54:	4907      	ldr	r1, [pc, #28]	; (8000c74 <__NVIC_EnableIRQ+0x38>)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	095b      	lsrs	r3, r3, #5
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000e100 	.word	0xe000e100

08000c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	6039      	str	r1, [r7, #0]
 8000c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	db0a      	blt.n	8000ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	490c      	ldr	r1, [pc, #48]	; (8000cc4 <__NVIC_SetPriority+0x4c>)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	0112      	lsls	r2, r2, #4
 8000c98:	b2d2      	uxtb	r2, r2
 8000c9a:	440b      	add	r3, r1
 8000c9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca0:	e00a      	b.n	8000cb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	4908      	ldr	r1, [pc, #32]	; (8000cc8 <__NVIC_SetPriority+0x50>)
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	f003 030f 	and.w	r3, r3, #15
 8000cae:	3b04      	subs	r3, #4
 8000cb0:	0112      	lsls	r2, r2, #4
 8000cb2:	b2d2      	uxtb	r2, r2
 8000cb4:	440b      	add	r3, r1
 8000cb6:	761a      	strb	r2, [r3, #24]
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000e100 	.word	0xe000e100
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b089      	sub	sp, #36	; 0x24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	f1c3 0307 	rsb	r3, r3, #7
 8000ce6:	2b04      	cmp	r3, #4
 8000ce8:	bf28      	it	cs
 8000cea:	2304      	movcs	r3, #4
 8000cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	2b06      	cmp	r3, #6
 8000cf4:	d902      	bls.n	8000cfc <NVIC_EncodePriority+0x30>
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	3b03      	subs	r3, #3
 8000cfa:	e000      	b.n	8000cfe <NVIC_EncodePriority+0x32>
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d00:	f04f 32ff 	mov.w	r2, #4294967295
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43da      	mvns	r2, r3
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	401a      	ands	r2, r3
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d14:	f04f 31ff 	mov.w	r1, #4294967295
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1e:	43d9      	mvns	r1, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d24:	4313      	orrs	r3, r2
         );
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3724      	adds	r7, #36	; 0x24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
	...

08000d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d44:	d301      	bcc.n	8000d4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d46:	2301      	movs	r3, #1
 8000d48:	e00f      	b.n	8000d6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <SysTick_Config+0x40>)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d52:	210f      	movs	r1, #15
 8000d54:	f04f 30ff 	mov.w	r0, #4294967295
 8000d58:	f7ff ff8e 	bl	8000c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d5c:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <SysTick_Config+0x40>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d62:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <SysTick_Config+0x40>)
 8000d64:	2207      	movs	r2, #7
 8000d66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	e000e010 	.word	0xe000e010

08000d78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f7ff ff29 	bl	8000bd8 <__NVIC_SetPriorityGrouping>
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b086      	sub	sp, #24
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	4603      	mov	r3, r0
 8000d96:	60b9      	str	r1, [r7, #8]
 8000d98:	607a      	str	r2, [r7, #4]
 8000d9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000da0:	f7ff ff3e 	bl	8000c20 <__NVIC_GetPriorityGrouping>
 8000da4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	68b9      	ldr	r1, [r7, #8]
 8000daa:	6978      	ldr	r0, [r7, #20]
 8000dac:	f7ff ff8e 	bl	8000ccc <NVIC_EncodePriority>
 8000db0:	4602      	mov	r2, r0
 8000db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db6:	4611      	mov	r1, r2
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff ff5d 	bl	8000c78 <__NVIC_SetPriority>
}
 8000dbe:	bf00      	nop
 8000dc0:	3718      	adds	r7, #24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	4603      	mov	r3, r0
 8000dce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ff31 	bl	8000c3c <__NVIC_EnableIRQ>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff ffa2 	bl	8000d34 <SysTick_Config>
 8000df0:	4603      	mov	r3, r0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000e08:	f7ff feb8 	bl	8000b7c <HAL_GetTick>
 8000e0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d101      	bne.n	8000e18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	e099      	b.n	8000f4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2202      	movs	r2, #2
 8000e24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f022 0201 	bic.w	r2, r2, #1
 8000e36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e38:	e00f      	b.n	8000e5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e3a:	f7ff fe9f 	bl	8000b7c <HAL_GetTick>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	2b05      	cmp	r3, #5
 8000e46:	d908      	bls.n	8000e5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2220      	movs	r2, #32
 8000e4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2203      	movs	r2, #3
 8000e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000e56:	2303      	movs	r3, #3
 8000e58:	e078      	b.n	8000f4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1e8      	bne.n	8000e3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000e70:	697a      	ldr	r2, [r7, #20]
 8000e72:	4b38      	ldr	r3, [pc, #224]	; (8000f54 <HAL_DMA_Init+0x158>)
 8000e74:	4013      	ands	r3, r2
 8000e76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	685a      	ldr	r2, [r3, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	691b      	ldr	r3, [r3, #16]
 8000e8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6a1b      	ldr	r3, [r3, #32]
 8000ea4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ea6:	697a      	ldr	r2, [r7, #20]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb0:	2b04      	cmp	r3, #4
 8000eb2:	d107      	bne.n	8000ec4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	697a      	ldr	r2, [r7, #20]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	697a      	ldr	r2, [r7, #20]
 8000eca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	f023 0307 	bic.w	r3, r3, #7
 8000eda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee0:	697a      	ldr	r2, [r7, #20]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	d117      	bne.n	8000f1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d00e      	beq.n	8000f1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f000 f9e9 	bl	80012d8 <DMA_CheckFifoParam>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d008      	beq.n	8000f1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2240      	movs	r2, #64	; 0x40
 8000f10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2201      	movs	r2, #1
 8000f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e016      	b.n	8000f4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f000 f9a0 	bl	800126c <DMA_CalcBaseAndBitshift>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f34:	223f      	movs	r2, #63	; 0x3f
 8000f36:	409a      	lsls	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2201      	movs	r2, #1
 8000f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000f4a:	2300      	movs	r3, #0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	f010803f 	.word	0xf010803f

08000f58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000f64:	4b92      	ldr	r3, [pc, #584]	; (80011b0 <HAL_DMA_IRQHandler+0x258>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a92      	ldr	r2, [pc, #584]	; (80011b4 <HAL_DMA_IRQHandler+0x25c>)
 8000f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f6e:	0a9b      	lsrs	r3, r3, #10
 8000f70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f82:	2208      	movs	r2, #8
 8000f84:	409a      	lsls	r2, r3
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d01a      	beq.n	8000fc4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f003 0304 	and.w	r3, r3, #4
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d013      	beq.n	8000fc4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f022 0204 	bic.w	r2, r2, #4
 8000faa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fb0:	2208      	movs	r2, #8
 8000fb2:	409a      	lsls	r2, r3
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fbc:	f043 0201 	orr.w	r2, r3, #1
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fc8:	2201      	movs	r2, #1
 8000fca:	409a      	lsls	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d012      	beq.n	8000ffa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d00b      	beq.n	8000ffa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	409a      	lsls	r2, r3
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ff2:	f043 0202 	orr.w	r2, r3, #2
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ffe:	2204      	movs	r2, #4
 8001000:	409a      	lsls	r2, r3
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	4013      	ands	r3, r2
 8001006:	2b00      	cmp	r3, #0
 8001008:	d012      	beq.n	8001030 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0302 	and.w	r3, r3, #2
 8001014:	2b00      	cmp	r3, #0
 8001016:	d00b      	beq.n	8001030 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800101c:	2204      	movs	r2, #4
 800101e:	409a      	lsls	r2, r3
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001028:	f043 0204 	orr.w	r2, r3, #4
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001034:	2210      	movs	r2, #16
 8001036:	409a      	lsls	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4013      	ands	r3, r2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d043      	beq.n	80010c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0308 	and.w	r3, r3, #8
 800104a:	2b00      	cmp	r3, #0
 800104c:	d03c      	beq.n	80010c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001052:	2210      	movs	r2, #16
 8001054:	409a      	lsls	r2, r3
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d018      	beq.n	800109a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d108      	bne.n	8001088 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	2b00      	cmp	r3, #0
 800107c:	d024      	beq.n	80010c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	4798      	blx	r3
 8001086:	e01f      	b.n	80010c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800108c:	2b00      	cmp	r3, #0
 800108e:	d01b      	beq.n	80010c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	4798      	blx	r3
 8001098:	e016      	b.n	80010c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d107      	bne.n	80010b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f022 0208 	bic.w	r2, r2, #8
 80010b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d003      	beq.n	80010c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010cc:	2220      	movs	r2, #32
 80010ce:	409a      	lsls	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4013      	ands	r3, r2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f000 808e 	beq.w	80011f6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0310 	and.w	r3, r3, #16
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f000 8086 	beq.w	80011f6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ee:	2220      	movs	r2, #32
 80010f0:	409a      	lsls	r2, r3
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b05      	cmp	r3, #5
 8001100:	d136      	bne.n	8001170 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f022 0216 	bic.w	r2, r2, #22
 8001110:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	695a      	ldr	r2, [r3, #20]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001120:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	2b00      	cmp	r3, #0
 8001128:	d103      	bne.n	8001132 <HAL_DMA_IRQHandler+0x1da>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800112e:	2b00      	cmp	r3, #0
 8001130:	d007      	beq.n	8001142 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f022 0208 	bic.w	r2, r2, #8
 8001140:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001146:	223f      	movs	r2, #63	; 0x3f
 8001148:	409a      	lsls	r2, r3
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2201      	movs	r2, #1
 800115a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001162:	2b00      	cmp	r3, #0
 8001164:	d07d      	beq.n	8001262 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	4798      	blx	r3
        }
        return;
 800116e:	e078      	b.n	8001262 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d01c      	beq.n	80011b8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d108      	bne.n	800119e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001190:	2b00      	cmp	r3, #0
 8001192:	d030      	beq.n	80011f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	4798      	blx	r3
 800119c:	e02b      	b.n	80011f6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d027      	beq.n	80011f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	4798      	blx	r3
 80011ae:	e022      	b.n	80011f6 <HAL_DMA_IRQHandler+0x29e>
 80011b0:	20000010 	.word	0x20000010
 80011b4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10f      	bne.n	80011e6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f022 0210 	bic.w	r2, r2, #16
 80011d4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2201      	movs	r2, #1
 80011e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d032      	beq.n	8001264 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	2b00      	cmp	r3, #0
 8001208:	d022      	beq.n	8001250 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2205      	movs	r2, #5
 800120e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f022 0201 	bic.w	r2, r2, #1
 8001220:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	3301      	adds	r3, #1
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	697a      	ldr	r2, [r7, #20]
 800122a:	429a      	cmp	r2, r3
 800122c:	d307      	bcc.n	800123e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1f2      	bne.n	8001222 <HAL_DMA_IRQHandler+0x2ca>
 800123c:	e000      	b.n	8001240 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800123e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2201      	movs	r2, #1
 800124c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001254:	2b00      	cmp	r3, #0
 8001256:	d005      	beq.n	8001264 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	4798      	blx	r3
 8001260:	e000      	b.n	8001264 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001262:	bf00      	nop
    }
  }
}
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop

0800126c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	3b10      	subs	r3, #16
 800127c:	4a14      	ldr	r2, [pc, #80]	; (80012d0 <DMA_CalcBaseAndBitshift+0x64>)
 800127e:	fba2 2303 	umull	r2, r3, r2, r3
 8001282:	091b      	lsrs	r3, r3, #4
 8001284:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001286:	4a13      	ldr	r2, [pc, #76]	; (80012d4 <DMA_CalcBaseAndBitshift+0x68>)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4413      	add	r3, r2
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2b03      	cmp	r3, #3
 8001298:	d909      	bls.n	80012ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80012a2:	f023 0303 	bic.w	r3, r3, #3
 80012a6:	1d1a      	adds	r2, r3, #4
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	659a      	str	r2, [r3, #88]	; 0x58
 80012ac:	e007      	b.n	80012be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80012b6:	f023 0303 	bic.w	r3, r3, #3
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	aaaaaaab 	.word	0xaaaaaaab
 80012d4:	0800772c 	.word	0x0800772c

080012d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012e0:	2300      	movs	r3, #0
 80012e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d11f      	bne.n	8001332 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	2b03      	cmp	r3, #3
 80012f6:	d855      	bhi.n	80013a4 <DMA_CheckFifoParam+0xcc>
 80012f8:	a201      	add	r2, pc, #4	; (adr r2, 8001300 <DMA_CheckFifoParam+0x28>)
 80012fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fe:	bf00      	nop
 8001300:	08001311 	.word	0x08001311
 8001304:	08001323 	.word	0x08001323
 8001308:	08001311 	.word	0x08001311
 800130c:	080013a5 	.word	0x080013a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001314:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d045      	beq.n	80013a8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001320:	e042      	b.n	80013a8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001326:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800132a:	d13f      	bne.n	80013ac <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001330:	e03c      	b.n	80013ac <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800133a:	d121      	bne.n	8001380 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	2b03      	cmp	r3, #3
 8001340:	d836      	bhi.n	80013b0 <DMA_CheckFifoParam+0xd8>
 8001342:	a201      	add	r2, pc, #4	; (adr r2, 8001348 <DMA_CheckFifoParam+0x70>)
 8001344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001348:	08001359 	.word	0x08001359
 800134c:	0800135f 	.word	0x0800135f
 8001350:	08001359 	.word	0x08001359
 8001354:	08001371 	.word	0x08001371
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	73fb      	strb	r3, [r7, #15]
      break;
 800135c:	e02f      	b.n	80013be <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001362:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d024      	beq.n	80013b4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800136e:	e021      	b.n	80013b4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001374:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001378:	d11e      	bne.n	80013b8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800137e:	e01b      	b.n	80013b8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	2b02      	cmp	r3, #2
 8001384:	d902      	bls.n	800138c <DMA_CheckFifoParam+0xb4>
 8001386:	2b03      	cmp	r3, #3
 8001388:	d003      	beq.n	8001392 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800138a:	e018      	b.n	80013be <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	73fb      	strb	r3, [r7, #15]
      break;
 8001390:	e015      	b.n	80013be <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001396:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d00e      	beq.n	80013bc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	73fb      	strb	r3, [r7, #15]
      break;
 80013a2:	e00b      	b.n	80013bc <DMA_CheckFifoParam+0xe4>
      break;
 80013a4:	bf00      	nop
 80013a6:	e00a      	b.n	80013be <DMA_CheckFifoParam+0xe6>
      break;
 80013a8:	bf00      	nop
 80013aa:	e008      	b.n	80013be <DMA_CheckFifoParam+0xe6>
      break;
 80013ac:	bf00      	nop
 80013ae:	e006      	b.n	80013be <DMA_CheckFifoParam+0xe6>
      break;
 80013b0:	bf00      	nop
 80013b2:	e004      	b.n	80013be <DMA_CheckFifoParam+0xe6>
      break;
 80013b4:	bf00      	nop
 80013b6:	e002      	b.n	80013be <DMA_CheckFifoParam+0xe6>
      break;   
 80013b8:	bf00      	nop
 80013ba:	e000      	b.n	80013be <DMA_CheckFifoParam+0xe6>
      break;
 80013bc:	bf00      	nop
    }
  } 
  
  return status; 
 80013be:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b089      	sub	sp, #36	; 0x24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
 80013e6:	e159      	b.n	800169c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013e8:	2201      	movs	r2, #1
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	429a      	cmp	r2, r3
 8001402:	f040 8148 	bne.w	8001696 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d00b      	beq.n	8001426 <HAL_GPIO_Init+0x5a>
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b02      	cmp	r3, #2
 8001414:	d007      	beq.n	8001426 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800141a:	2b11      	cmp	r3, #17
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b12      	cmp	r3, #18
 8001424:	d130      	bne.n	8001488 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	2203      	movs	r2, #3
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4013      	ands	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	68da      	ldr	r2, [r3, #12]
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800145c:	2201      	movs	r2, #1
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	091b      	lsrs	r3, r3, #4
 8001472:	f003 0201 	and.w	r2, r3, #1
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	2203      	movs	r2, #3
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d003      	beq.n	80014c8 <HAL_GPIO_Init+0xfc>
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b12      	cmp	r3, #18
 80014c6:	d123      	bne.n	8001510 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	08da      	lsrs	r2, r3, #3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3208      	adds	r2, #8
 80014d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	f003 0307 	and.w	r3, r3, #7
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	220f      	movs	r2, #15
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	691a      	ldr	r2, [r3, #16]
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	08da      	lsrs	r2, r3, #3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3208      	adds	r2, #8
 800150a:	69b9      	ldr	r1, [r7, #24]
 800150c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	2203      	movs	r2, #3
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 0203 	and.w	r2, r3, #3
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 80a2 	beq.w	8001696 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	4b56      	ldr	r3, [pc, #344]	; (80016b0 <HAL_GPIO_Init+0x2e4>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	4a55      	ldr	r2, [pc, #340]	; (80016b0 <HAL_GPIO_Init+0x2e4>)
 800155c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001560:	6453      	str	r3, [r2, #68]	; 0x44
 8001562:	4b53      	ldr	r3, [pc, #332]	; (80016b0 <HAL_GPIO_Init+0x2e4>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800156e:	4a51      	ldr	r2, [pc, #324]	; (80016b4 <HAL_GPIO_Init+0x2e8>)
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	089b      	lsrs	r3, r3, #2
 8001574:	3302      	adds	r3, #2
 8001576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	220f      	movs	r2, #15
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a48      	ldr	r2, [pc, #288]	; (80016b8 <HAL_GPIO_Init+0x2ec>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d019      	beq.n	80015ce <HAL_GPIO_Init+0x202>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a47      	ldr	r2, [pc, #284]	; (80016bc <HAL_GPIO_Init+0x2f0>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d013      	beq.n	80015ca <HAL_GPIO_Init+0x1fe>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a46      	ldr	r2, [pc, #280]	; (80016c0 <HAL_GPIO_Init+0x2f4>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d00d      	beq.n	80015c6 <HAL_GPIO_Init+0x1fa>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a45      	ldr	r2, [pc, #276]	; (80016c4 <HAL_GPIO_Init+0x2f8>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d007      	beq.n	80015c2 <HAL_GPIO_Init+0x1f6>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a44      	ldr	r2, [pc, #272]	; (80016c8 <HAL_GPIO_Init+0x2fc>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d101      	bne.n	80015be <HAL_GPIO_Init+0x1f2>
 80015ba:	2304      	movs	r3, #4
 80015bc:	e008      	b.n	80015d0 <HAL_GPIO_Init+0x204>
 80015be:	2307      	movs	r3, #7
 80015c0:	e006      	b.n	80015d0 <HAL_GPIO_Init+0x204>
 80015c2:	2303      	movs	r3, #3
 80015c4:	e004      	b.n	80015d0 <HAL_GPIO_Init+0x204>
 80015c6:	2302      	movs	r3, #2
 80015c8:	e002      	b.n	80015d0 <HAL_GPIO_Init+0x204>
 80015ca:	2301      	movs	r3, #1
 80015cc:	e000      	b.n	80015d0 <HAL_GPIO_Init+0x204>
 80015ce:	2300      	movs	r3, #0
 80015d0:	69fa      	ldr	r2, [r7, #28]
 80015d2:	f002 0203 	and.w	r2, r2, #3
 80015d6:	0092      	lsls	r2, r2, #2
 80015d8:	4093      	lsls	r3, r2
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4313      	orrs	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015e0:	4934      	ldr	r1, [pc, #208]	; (80016b4 <HAL_GPIO_Init+0x2e8>)
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	089b      	lsrs	r3, r3, #2
 80015e6:	3302      	adds	r3, #2
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015ee:	4b37      	ldr	r3, [pc, #220]	; (80016cc <HAL_GPIO_Init+0x300>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	43db      	mvns	r3, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4013      	ands	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001612:	4a2e      	ldr	r2, [pc, #184]	; (80016cc <HAL_GPIO_Init+0x300>)
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001618:	4b2c      	ldr	r3, [pc, #176]	; (80016cc <HAL_GPIO_Init+0x300>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	43db      	mvns	r3, r3
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4013      	ands	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d003      	beq.n	800163c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	4313      	orrs	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800163c:	4a23      	ldr	r2, [pc, #140]	; (80016cc <HAL_GPIO_Init+0x300>)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001642:	4b22      	ldr	r3, [pc, #136]	; (80016cc <HAL_GPIO_Init+0x300>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	43db      	mvns	r3, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4013      	ands	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001666:	4a19      	ldr	r2, [pc, #100]	; (80016cc <HAL_GPIO_Init+0x300>)
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800166c:	4b17      	ldr	r3, [pc, #92]	; (80016cc <HAL_GPIO_Init+0x300>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	43db      	mvns	r3, r3
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4013      	ands	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	4313      	orrs	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001690:	4a0e      	ldr	r2, [pc, #56]	; (80016cc <HAL_GPIO_Init+0x300>)
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3301      	adds	r3, #1
 800169a:	61fb      	str	r3, [r7, #28]
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	2b0f      	cmp	r3, #15
 80016a0:	f67f aea2 	bls.w	80013e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016a4:	bf00      	nop
 80016a6:	3724      	adds	r7, #36	; 0x24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40013800 	.word	0x40013800
 80016b8:	40020000 	.word	0x40020000
 80016bc:	40020400 	.word	0x40020400
 80016c0:	40020800 	.word	0x40020800
 80016c4:	40020c00 	.word	0x40020c00
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40013c00 	.word	0x40013c00

080016d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e11f      	b.n	8001922 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d106      	bne.n	80016fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7fe ff70 	bl	80005dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2224      	movs	r2, #36	; 0x24
 8001700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 0201 	bic.w	r2, r2, #1
 8001712:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001722:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001732:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001734:	f001 fe9c 	bl	8003470 <HAL_RCC_GetPCLK1Freq>
 8001738:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	4a7b      	ldr	r2, [pc, #492]	; (800192c <HAL_I2C_Init+0x25c>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d807      	bhi.n	8001754 <HAL_I2C_Init+0x84>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4a7a      	ldr	r2, [pc, #488]	; (8001930 <HAL_I2C_Init+0x260>)
 8001748:	4293      	cmp	r3, r2
 800174a:	bf94      	ite	ls
 800174c:	2301      	movls	r3, #1
 800174e:	2300      	movhi	r3, #0
 8001750:	b2db      	uxtb	r3, r3
 8001752:	e006      	b.n	8001762 <HAL_I2C_Init+0x92>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4a77      	ldr	r2, [pc, #476]	; (8001934 <HAL_I2C_Init+0x264>)
 8001758:	4293      	cmp	r3, r2
 800175a:	bf94      	ite	ls
 800175c:	2301      	movls	r3, #1
 800175e:	2300      	movhi	r3, #0
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e0db      	b.n	8001922 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	4a72      	ldr	r2, [pc, #456]	; (8001938 <HAL_I2C_Init+0x268>)
 800176e:	fba2 2303 	umull	r2, r3, r2, r3
 8001772:	0c9b      	lsrs	r3, r3, #18
 8001774:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	430a      	orrs	r2, r1
 8001788:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	4a64      	ldr	r2, [pc, #400]	; (800192c <HAL_I2C_Init+0x25c>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d802      	bhi.n	80017a4 <HAL_I2C_Init+0xd4>
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	3301      	adds	r3, #1
 80017a2:	e009      	b.n	80017b8 <HAL_I2C_Init+0xe8>
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017aa:	fb02 f303 	mul.w	r3, r2, r3
 80017ae:	4a63      	ldr	r2, [pc, #396]	; (800193c <HAL_I2C_Init+0x26c>)
 80017b0:	fba2 2303 	umull	r2, r3, r2, r3
 80017b4:	099b      	lsrs	r3, r3, #6
 80017b6:	3301      	adds	r3, #1
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	6812      	ldr	r2, [r2, #0]
 80017bc:	430b      	orrs	r3, r1
 80017be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80017ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	4956      	ldr	r1, [pc, #344]	; (800192c <HAL_I2C_Init+0x25c>)
 80017d4:	428b      	cmp	r3, r1
 80017d6:	d80d      	bhi.n	80017f4 <HAL_I2C_Init+0x124>
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	1e59      	subs	r1, r3, #1
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80017e6:	3301      	adds	r3, #1
 80017e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	bf38      	it	cc
 80017f0:	2304      	movcc	r3, #4
 80017f2:	e04f      	b.n	8001894 <HAL_I2C_Init+0x1c4>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d111      	bne.n	8001820 <HAL_I2C_Init+0x150>
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	1e58      	subs	r0, r3, #1
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6859      	ldr	r1, [r3, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	440b      	add	r3, r1
 800180a:	fbb0 f3f3 	udiv	r3, r0, r3
 800180e:	3301      	adds	r3, #1
 8001810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001814:	2b00      	cmp	r3, #0
 8001816:	bf0c      	ite	eq
 8001818:	2301      	moveq	r3, #1
 800181a:	2300      	movne	r3, #0
 800181c:	b2db      	uxtb	r3, r3
 800181e:	e012      	b.n	8001846 <HAL_I2C_Init+0x176>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	1e58      	subs	r0, r3, #1
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6859      	ldr	r1, [r3, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	440b      	add	r3, r1
 800182e:	0099      	lsls	r1, r3, #2
 8001830:	440b      	add	r3, r1
 8001832:	fbb0 f3f3 	udiv	r3, r0, r3
 8001836:	3301      	adds	r3, #1
 8001838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800183c:	2b00      	cmp	r3, #0
 800183e:	bf0c      	ite	eq
 8001840:	2301      	moveq	r3, #1
 8001842:	2300      	movne	r3, #0
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <HAL_I2C_Init+0x17e>
 800184a:	2301      	movs	r3, #1
 800184c:	e022      	b.n	8001894 <HAL_I2C_Init+0x1c4>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10e      	bne.n	8001874 <HAL_I2C_Init+0x1a4>
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	1e58      	subs	r0, r3, #1
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6859      	ldr	r1, [r3, #4]
 800185e:	460b      	mov	r3, r1
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	440b      	add	r3, r1
 8001864:	fbb0 f3f3 	udiv	r3, r0, r3
 8001868:	3301      	adds	r3, #1
 800186a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800186e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001872:	e00f      	b.n	8001894 <HAL_I2C_Init+0x1c4>
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	1e58      	subs	r0, r3, #1
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6859      	ldr	r1, [r3, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	0099      	lsls	r1, r3, #2
 8001884:	440b      	add	r3, r1
 8001886:	fbb0 f3f3 	udiv	r3, r0, r3
 800188a:	3301      	adds	r3, #1
 800188c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001890:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	6809      	ldr	r1, [r1, #0]
 8001898:	4313      	orrs	r3, r2
 800189a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69da      	ldr	r2, [r3, #28]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a1b      	ldr	r3, [r3, #32]
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80018c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6911      	ldr	r1, [r2, #16]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	68d2      	ldr	r2, [r2, #12]
 80018ce:	4311      	orrs	r1, r2
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	6812      	ldr	r2, [r2, #0]
 80018d4:	430b      	orrs	r3, r1
 80018d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	695a      	ldr	r2, [r3, #20]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f042 0201 	orr.w	r2, r2, #1
 8001902:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2220      	movs	r2, #32
 800190e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	000186a0 	.word	0x000186a0
 8001930:	001e847f 	.word	0x001e847f
 8001934:	003d08ff 	.word	0x003d08ff
 8001938:	431bde83 	.word	0x431bde83
 800193c:	10624dd3 	.word	0x10624dd3

08001940 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001942:	b08f      	sub	sp, #60	; 0x3c
 8001944:	af0a      	add	r7, sp, #40	; 0x28
 8001946:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e10f      	b.n	8001b72 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	d106      	bne.n	8001972 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f005 fab3 	bl	8006ed8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2203      	movs	r2, #3
 8001976:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800197e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001982:	2b00      	cmp	r3, #0
 8001984:	d102      	bne.n	800198c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f002 fa4e 	bl	8003e32 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	603b      	str	r3, [r7, #0]
 800199c:	687e      	ldr	r6, [r7, #4]
 800199e:	466d      	mov	r5, sp
 80019a0:	f106 0410 	add.w	r4, r6, #16
 80019a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80019b4:	1d33      	adds	r3, r6, #4
 80019b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019b8:	6838      	ldr	r0, [r7, #0]
 80019ba:	f002 f925 	bl	8003c08 <USB_CoreInit>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d005      	beq.n	80019d0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2202      	movs	r2, #2
 80019c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e0d0      	b.n	8001b72 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2100      	movs	r1, #0
 80019d6:	4618      	mov	r0, r3
 80019d8:	f002 fa3c 	bl	8003e54 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019dc:	2300      	movs	r3, #0
 80019de:	73fb      	strb	r3, [r7, #15]
 80019e0:	e04a      	b.n	8001a78 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019e2:	7bfa      	ldrb	r2, [r7, #15]
 80019e4:	6879      	ldr	r1, [r7, #4]
 80019e6:	4613      	mov	r3, r2
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	1a9b      	subs	r3, r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	440b      	add	r3, r1
 80019f0:	333d      	adds	r3, #61	; 0x3d
 80019f2:	2201      	movs	r2, #1
 80019f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80019f6:	7bfa      	ldrb	r2, [r7, #15]
 80019f8:	6879      	ldr	r1, [r7, #4]
 80019fa:	4613      	mov	r3, r2
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	1a9b      	subs	r3, r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	440b      	add	r3, r1
 8001a04:	333c      	adds	r3, #60	; 0x3c
 8001a06:	7bfa      	ldrb	r2, [r7, #15]
 8001a08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a0a:	7bfa      	ldrb	r2, [r7, #15]
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
 8001a0e:	b298      	uxth	r0, r3
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	4613      	mov	r3, r2
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	1a9b      	subs	r3, r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	3342      	adds	r3, #66	; 0x42
 8001a1e:	4602      	mov	r2, r0
 8001a20:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a22:	7bfa      	ldrb	r2, [r7, #15]
 8001a24:	6879      	ldr	r1, [r7, #4]
 8001a26:	4613      	mov	r3, r2
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	1a9b      	subs	r3, r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	440b      	add	r3, r1
 8001a30:	333f      	adds	r3, #63	; 0x3f
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a36:	7bfa      	ldrb	r2, [r7, #15]
 8001a38:	6879      	ldr	r1, [r7, #4]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	1a9b      	subs	r3, r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	440b      	add	r3, r1
 8001a44:	3344      	adds	r3, #68	; 0x44
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a4a:	7bfa      	ldrb	r2, [r7, #15]
 8001a4c:	6879      	ldr	r1, [r7, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	1a9b      	subs	r3, r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	440b      	add	r3, r1
 8001a58:	3348      	adds	r3, #72	; 0x48
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a5e:	7bfa      	ldrb	r2, [r7, #15]
 8001a60:	6879      	ldr	r1, [r7, #4]
 8001a62:	4613      	mov	r3, r2
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	1a9b      	subs	r3, r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	3350      	adds	r3, #80	; 0x50
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	3301      	adds	r3, #1
 8001a76:	73fb      	strb	r3, [r7, #15]
 8001a78:	7bfa      	ldrb	r2, [r7, #15]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d3af      	bcc.n	80019e2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a82:	2300      	movs	r3, #0
 8001a84:	73fb      	strb	r3, [r7, #15]
 8001a86:	e044      	b.n	8001b12 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a88:	7bfa      	ldrb	r2, [r7, #15]
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	1a9b      	subs	r3, r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	440b      	add	r3, r1
 8001a96:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a9e:	7bfa      	ldrb	r2, [r7, #15]
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	1a9b      	subs	r3, r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	440b      	add	r3, r1
 8001aac:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001ab0:	7bfa      	ldrb	r2, [r7, #15]
 8001ab2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ab4:	7bfa      	ldrb	r2, [r7, #15]
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	1a9b      	subs	r3, r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001aca:	7bfa      	ldrb	r2, [r7, #15]
 8001acc:	6879      	ldr	r1, [r7, #4]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	1a9b      	subs	r3, r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	440b      	add	r3, r1
 8001ad8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ae0:	7bfa      	ldrb	r2, [r7, #15]
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	1a9b      	subs	r3, r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001af6:	7bfa      	ldrb	r2, [r7, #15]
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	4613      	mov	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	1a9b      	subs	r3, r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	440b      	add	r3, r1
 8001b04:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	73fb      	strb	r3, [r7, #15]
 8001b12:	7bfa      	ldrb	r2, [r7, #15]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d3b5      	bcc.n	8001a88 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	603b      	str	r3, [r7, #0]
 8001b22:	687e      	ldr	r6, [r7, #4]
 8001b24:	466d      	mov	r5, sp
 8001b26:	f106 0410 	add.w	r4, r6, #16
 8001b2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b36:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b3a:	1d33      	adds	r3, r6, #4
 8001b3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b3e:	6838      	ldr	r0, [r7, #0]
 8001b40:	f002 f9b2 	bl	8003ea8 <USB_DevInit>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d005      	beq.n	8001b56 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e00d      	b.n	8001b72 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f003 f9f1 	bl	8004f52 <USB_DevDisconnect>

  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b7a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b084      	sub	sp, #16
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d101      	bne.n	8001b96 <HAL_PCD_Start+0x1c>
 8001b92:	2302      	movs	r3, #2
 8001b94:	e020      	b.n	8001bd8 <HAL_PCD_Start+0x5e>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d109      	bne.n	8001bba <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d005      	beq.n	8001bba <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f003 f9af 	bl	8004f22 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f002 f921 	bl	8003e10 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001be0:	b590      	push	{r4, r7, lr}
 8001be2:	b08d      	sub	sp, #52	; 0x34
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bee:	6a3b      	ldr	r3, [r7, #32]
 8001bf0:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f003 fa56 	bl	80050a8 <USB_GetMode>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f040 839d 	bne.w	800233e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f003 f9ba 	bl	8004f82 <USB_ReadInterrupts>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 8393 	beq.w	800233c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f003 f9b1 	bl	8004f82 <USB_ReadInterrupts>
 8001c20:	4603      	mov	r3, r0
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d107      	bne.n	8001c3a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	695a      	ldr	r2, [r3, #20]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f002 0202 	and.w	r2, r2, #2
 8001c38:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f003 f99f 	bl	8004f82 <USB_ReadInterrupts>
 8001c44:	4603      	mov	r3, r0
 8001c46:	f003 0310 	and.w	r3, r3, #16
 8001c4a:	2b10      	cmp	r3, #16
 8001c4c:	d161      	bne.n	8001d12 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	699a      	ldr	r2, [r3, #24]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 0210 	bic.w	r2, r2, #16
 8001c5c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001c5e:	6a3b      	ldr	r3, [r7, #32]
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	f003 020f 	and.w	r2, r3, #15
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	1a9b      	subs	r3, r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	3304      	adds	r3, #4
 8001c7c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	0c5b      	lsrs	r3, r3, #17
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d124      	bne.n	8001cd4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d035      	beq.n	8001d02 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	091b      	lsrs	r3, r3, #4
 8001c9e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ca0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	6a38      	ldr	r0, [r7, #32]
 8001caa:	f003 f817 	bl	8004cdc <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	091b      	lsrs	r3, r3, #4
 8001cb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cba:	441a      	add	r2, r3
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	699a      	ldr	r2, [r3, #24]
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	091b      	lsrs	r3, r3, #4
 8001cc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ccc:	441a      	add	r2, r3
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	619a      	str	r2, [r3, #24]
 8001cd2:	e016      	b.n	8001d02 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	0c5b      	lsrs	r3, r3, #17
 8001cd8:	f003 030f 	and.w	r3, r3, #15
 8001cdc:	2b06      	cmp	r3, #6
 8001cde:	d110      	bne.n	8001d02 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001ce6:	2208      	movs	r2, #8
 8001ce8:	4619      	mov	r1, r3
 8001cea:	6a38      	ldr	r0, [r7, #32]
 8001cec:	f002 fff6 	bl	8004cdc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	699a      	ldr	r2, [r3, #24]
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	091b      	lsrs	r3, r3, #4
 8001cf8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cfc:	441a      	add	r2, r3
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	699a      	ldr	r2, [r3, #24]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f042 0210 	orr.w	r2, r2, #16
 8001d10:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f003 f933 	bl	8004f82 <USB_ReadInterrupts>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d22:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001d26:	d16e      	bne.n	8001e06 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f003 f939 	bl	8004fa8 <USB_ReadDevAllOutEpInterrupt>
 8001d36:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001d38:	e062      	b.n	8001e00 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d057      	beq.n	8001df4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	4611      	mov	r1, r2
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f003 f95e 	bl	8005010 <USB_ReadDevOutEPInterrupt>
 8001d54:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00c      	beq.n	8001d7a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	015a      	lsls	r2, r3, #5
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	4413      	add	r3, r2
 8001d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	2301      	movs	r3, #1
 8001d70:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001d72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 fdb1 	bl	80028dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	f003 0308 	and.w	r3, r3, #8
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d00c      	beq.n	8001d9e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	015a      	lsls	r2, r3, #5
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d90:	461a      	mov	r2, r3
 8001d92:	2308      	movs	r3, #8
 8001d94:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001d96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 feab 	bl	8002af4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	f003 0310 	and.w	r3, r3, #16
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d008      	beq.n	8001dba <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	015a      	lsls	r2, r3, #5
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	4413      	add	r3, r2
 8001db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001db4:	461a      	mov	r2, r3
 8001db6:	2310      	movs	r3, #16
 8001db8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	f003 0320 	and.w	r3, r3, #32
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d008      	beq.n	8001dd6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	015a      	lsls	r2, r3, #5
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	4413      	add	r3, r2
 8001dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	2320      	movs	r3, #32
 8001dd4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d009      	beq.n	8001df4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	015a      	lsls	r2, r3, #5
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	4413      	add	r3, r2
 8001de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dec:	461a      	mov	r2, r3
 8001dee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001df2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	3301      	adds	r3, #1
 8001df8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfc:	085b      	lsrs	r3, r3, #1
 8001dfe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d199      	bne.n	8001d3a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f003 f8b9 	bl	8004f82 <USB_ReadInterrupts>
 8001e10:	4603      	mov	r3, r0
 8001e12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e1a:	f040 80c0 	bne.w	8001f9e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f003 f8da 	bl	8004fdc <USB_ReadDevAllInEpInterrupt>
 8001e28:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001e2e:	e0b2      	b.n	8001f96 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 80a7 	beq.w	8001f8a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	4611      	mov	r1, r2
 8001e46:	4618      	mov	r0, r3
 8001e48:	f003 f900 	bl	800504c <USB_ReadDevInEPInterrupt>
 8001e4c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d057      	beq.n	8001f08 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	2201      	movs	r2, #1
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69f9      	ldr	r1, [r7, #28]
 8001e74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001e78:	4013      	ands	r3, r2
 8001e7a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	015a      	lsls	r2, r3, #5
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	4413      	add	r3, r2
 8001e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e88:	461a      	mov	r2, r3
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d132      	bne.n	8001efc <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	1a9b      	subs	r3, r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	440b      	add	r3, r1
 8001ea4:	3348      	adds	r3, #72	; 0x48
 8001ea6:	6819      	ldr	r1, [r3, #0]
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eac:	4613      	mov	r3, r2
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	1a9b      	subs	r3, r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4403      	add	r3, r0
 8001eb6:	3344      	adds	r3, #68	; 0x44
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4419      	add	r1, r3
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	1a9b      	subs	r3, r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4403      	add	r3, r0
 8001eca:	3348      	adds	r3, #72	; 0x48
 8001ecc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d113      	bne.n	8001efc <HAL_PCD_IRQHandler+0x31c>
 8001ed4:	6879      	ldr	r1, [r7, #4]
 8001ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ed8:	4613      	mov	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	1a9b      	subs	r3, r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	3350      	adds	r3, #80	; 0x50
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d108      	bne.n	8001efc <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6818      	ldr	r0, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	f003 f908 	bl	800510c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	4619      	mov	r1, r3
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f005 f869 	bl	8006fda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d008      	beq.n	8001f24 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	015a      	lsls	r2, r3, #5
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	4413      	add	r3, r2
 8001f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f1e:	461a      	mov	r2, r3
 8001f20:	2308      	movs	r3, #8
 8001f22:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	f003 0310 	and.w	r3, r3, #16
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d008      	beq.n	8001f40 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	015a      	lsls	r2, r3, #5
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	4413      	add	r3, r2
 8001f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	2310      	movs	r3, #16
 8001f3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d008      	beq.n	8001f5c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	015a      	lsls	r2, r3, #5
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	4413      	add	r3, r2
 8001f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f56:	461a      	mov	r2, r3
 8001f58:	2340      	movs	r3, #64	; 0x40
 8001f5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d008      	beq.n	8001f78 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	015a      	lsls	r2, r3, #5
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f72:	461a      	mov	r2, r3
 8001f74:	2302      	movs	r3, #2
 8001f76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001f82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 fc1b 	bl	80027c0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f92:	085b      	lsrs	r3, r3, #1
 8001f94:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f47f af49 	bne.w	8001e30 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f002 ffed 	bl	8004f82 <USB_ReadInterrupts>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001fae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001fb2:	d122      	bne.n	8001ffa <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	69fa      	ldr	r2, [r7, #28]
 8001fbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fc2:	f023 0301 	bic.w	r3, r3, #1
 8001fc6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d108      	bne.n	8001fe4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001fda:	2100      	movs	r1, #0
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 fe27 	bl	8002c30 <HAL_PCDEx_LPM_Callback>
 8001fe2:	e002      	b.n	8001fea <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f005 f865 	bl	80070b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	695a      	ldr	r2, [r3, #20]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001ff8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f002 ffbf 	bl	8004f82 <USB_ReadInterrupts>
 8002004:	4603      	mov	r3, r0
 8002006:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800200a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800200e:	d112      	bne.n	8002036 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b01      	cmp	r3, #1
 800201e:	d102      	bne.n	8002026 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f005 f821 	bl	8007068 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	695a      	ldr	r2, [r3, #20]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002034:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f002 ffa1 	bl	8004f82 <USB_ReadInterrupts>
 8002040:	4603      	mov	r3, r0
 8002042:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800204a:	f040 80c7 	bne.w	80021dc <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	69fa      	ldr	r2, [r7, #28]
 8002058:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800205c:	f023 0301 	bic.w	r3, r3, #1
 8002060:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2110      	movs	r1, #16
 8002068:	4618      	mov	r0, r3
 800206a:	f002 f881 	bl	8004170 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800206e:	2300      	movs	r3, #0
 8002070:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002072:	e056      	b.n	8002122 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002076:	015a      	lsls	r2, r3, #5
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	4413      	add	r3, r2
 800207c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002080:	461a      	mov	r2, r3
 8002082:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002086:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800208a:	015a      	lsls	r2, r3, #5
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	4413      	add	r3, r2
 8002090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002098:	0151      	lsls	r1, r2, #5
 800209a:	69fa      	ldr	r2, [r7, #28]
 800209c:	440a      	add	r2, r1
 800209e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80020a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80020a6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80020a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020aa:	015a      	lsls	r2, r3, #5
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	4413      	add	r3, r2
 80020b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020b8:	0151      	lsls	r1, r2, #5
 80020ba:	69fa      	ldr	r2, [r7, #28]
 80020bc:	440a      	add	r2, r1
 80020be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80020c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80020c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80020c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ca:	015a      	lsls	r2, r3, #5
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	4413      	add	r3, r2
 80020d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020d4:	461a      	mov	r2, r3
 80020d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80020da:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80020dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020de:	015a      	lsls	r2, r3, #5
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	4413      	add	r3, r2
 80020e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020ec:	0151      	lsls	r1, r2, #5
 80020ee:	69fa      	ldr	r2, [r7, #28]
 80020f0:	440a      	add	r2, r1
 80020f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80020f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80020fa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80020fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020fe:	015a      	lsls	r2, r3, #5
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	4413      	add	r3, r2
 8002104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800210c:	0151      	lsls	r1, r2, #5
 800210e:	69fa      	ldr	r2, [r7, #28]
 8002110:	440a      	add	r2, r1
 8002112:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002116:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800211a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800211c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800211e:	3301      	adds	r3, #1
 8002120:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002128:	429a      	cmp	r2, r3
 800212a:	d3a3      	bcc.n	8002074 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	69fa      	ldr	r2, [r7, #28]
 8002136:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800213a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800213e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002144:	2b00      	cmp	r3, #0
 8002146:	d016      	beq.n	8002176 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800214e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002152:	69fa      	ldr	r2, [r7, #28]
 8002154:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002158:	f043 030b 	orr.w	r3, r3, #11
 800215c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002168:	69fa      	ldr	r2, [r7, #28]
 800216a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800216e:	f043 030b 	orr.w	r3, r3, #11
 8002172:	6453      	str	r3, [r2, #68]	; 0x44
 8002174:	e015      	b.n	80021a2 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	69fa      	ldr	r2, [r7, #28]
 8002180:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002184:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002188:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800218c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	69fa      	ldr	r2, [r7, #28]
 8002198:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800219c:	f043 030b 	orr.w	r3, r3, #11
 80021a0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	69fa      	ldr	r2, [r7, #28]
 80021ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021b0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80021b4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6818      	ldr	r0, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80021c6:	461a      	mov	r2, r3
 80021c8:	f002 ffa0 	bl	800510c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	695a      	ldr	r2, [r3, #20]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80021da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f002 fece 	bl	8004f82 <USB_ReadInterrupts>
 80021e6:	4603      	mov	r3, r0
 80021e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021f0:	d124      	bne.n	800223c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f002 ff64 	bl	80050c4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f002 f816 	bl	8004232 <USB_GetDevSpeed>
 8002206:	4603      	mov	r3, r0
 8002208:	461a      	mov	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681c      	ldr	r4, [r3, #0]
 8002212:	f001 f921 	bl	8003458 <HAL_RCC_GetHCLKFreq>
 8002216:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800221c:	b2db      	uxtb	r3, r3
 800221e:	461a      	mov	r2, r3
 8002220:	4620      	mov	r0, r4
 8002222:	f001 fd53 	bl	8003ccc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f004 feff 	bl	800702a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	695a      	ldr	r2, [r3, #20]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800223a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f002 fe9e 	bl	8004f82 <USB_ReadInterrupts>
 8002246:	4603      	mov	r3, r0
 8002248:	f003 0308 	and.w	r3, r3, #8
 800224c:	2b08      	cmp	r3, #8
 800224e:	d10a      	bne.n	8002266 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f004 fedc 	bl	800700e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	695a      	ldr	r2, [r3, #20]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f002 0208 	and.w	r2, r2, #8
 8002264:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f002 fe89 	bl	8004f82 <USB_ReadInterrupts>
 8002270:	4603      	mov	r3, r0
 8002272:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002276:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800227a:	d10f      	bne.n	800229c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800227c:	2300      	movs	r3, #0
 800227e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	b2db      	uxtb	r3, r3
 8002284:	4619      	mov	r1, r3
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f004 ff34 	bl	80070f4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	695a      	ldr	r2, [r3, #20]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800229a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f002 fe6e 	bl	8004f82 <USB_ReadInterrupts>
 80022a6:	4603      	mov	r3, r0
 80022a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022b0:	d10f      	bne.n	80022d2 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	4619      	mov	r1, r3
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f004 ff07 	bl	80070d0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695a      	ldr	r2, [r3, #20]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80022d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f002 fe53 	bl	8004f82 <USB_ReadInterrupts>
 80022dc:	4603      	mov	r3, r0
 80022de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80022e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e6:	d10a      	bne.n	80022fe <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f004 ff15 	bl	8007118 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	695a      	ldr	r2, [r3, #20]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80022fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f002 fe3d 	bl	8004f82 <USB_ReadInterrupts>
 8002308:	4603      	mov	r3, r0
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	2b04      	cmp	r3, #4
 8002310:	d115      	bne.n	800233e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b00      	cmp	r3, #0
 8002322:	d002      	beq.n	800232a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f004 ff05 	bl	8007134 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6859      	ldr	r1, [r3, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	430a      	orrs	r2, r1
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	e000      	b.n	800233e <HAL_PCD_IRQHandler+0x75e>
      return;
 800233c:	bf00      	nop
    }
  }
}
 800233e:	3734      	adds	r7, #52	; 0x34
 8002340:	46bd      	mov	sp, r7
 8002342:	bd90      	pop	{r4, r7, pc}

08002344 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	460b      	mov	r3, r1
 800234e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_PCD_SetAddress+0x1a>
 800235a:	2302      	movs	r3, #2
 800235c:	e013      	b.n	8002386 <HAL_PCD_SetAddress+0x42>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	78fa      	ldrb	r2, [r7, #3]
 800236a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	78fa      	ldrb	r2, [r7, #3]
 8002374:	4611      	mov	r1, r2
 8002376:	4618      	mov	r0, r3
 8002378:	f002 fdad 	bl	8004ed6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b084      	sub	sp, #16
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	4608      	mov	r0, r1
 8002398:	4611      	mov	r1, r2
 800239a:	461a      	mov	r2, r3
 800239c:	4603      	mov	r3, r0
 800239e:	70fb      	strb	r3, [r7, #3]
 80023a0:	460b      	mov	r3, r1
 80023a2:	803b      	strh	r3, [r7, #0]
 80023a4:	4613      	mov	r3, r2
 80023a6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80023a8:	2300      	movs	r3, #0
 80023aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	da0f      	bge.n	80023d4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023b4:	78fb      	ldrb	r3, [r7, #3]
 80023b6:	f003 020f 	and.w	r2, r3, #15
 80023ba:	4613      	mov	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	1a9b      	subs	r3, r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	3338      	adds	r3, #56	; 0x38
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	4413      	add	r3, r2
 80023c8:	3304      	adds	r3, #4
 80023ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2201      	movs	r2, #1
 80023d0:	705a      	strb	r2, [r3, #1]
 80023d2:	e00f      	b.n	80023f4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023d4:	78fb      	ldrb	r3, [r7, #3]
 80023d6:	f003 020f 	and.w	r2, r3, #15
 80023da:	4613      	mov	r3, r2
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	1a9b      	subs	r3, r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	4413      	add	r3, r2
 80023ea:	3304      	adds	r3, #4
 80023ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80023f4:	78fb      	ldrb	r3, [r7, #3]
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002400:	883a      	ldrh	r2, [r7, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	78ba      	ldrb	r2, [r7, #2]
 800240a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	785b      	ldrb	r3, [r3, #1]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d004      	beq.n	800241e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	b29a      	uxth	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800241e:	78bb      	ldrb	r3, [r7, #2]
 8002420:	2b02      	cmp	r3, #2
 8002422:	d102      	bne.n	800242a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_PCD_EP_Open+0xaa>
 8002434:	2302      	movs	r3, #2
 8002436:	e00e      	b.n	8002456 <HAL_PCD_EP_Open+0xc8>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68f9      	ldr	r1, [r7, #12]
 8002446:	4618      	mov	r0, r3
 8002448:	f001 ff18 	bl	800427c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002454:	7afb      	ldrb	r3, [r7, #11]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b084      	sub	sp, #16
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
 8002466:	460b      	mov	r3, r1
 8002468:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800246a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800246e:	2b00      	cmp	r3, #0
 8002470:	da0f      	bge.n	8002492 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002472:	78fb      	ldrb	r3, [r7, #3]
 8002474:	f003 020f 	and.w	r2, r3, #15
 8002478:	4613      	mov	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	1a9b      	subs	r3, r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	3338      	adds	r3, #56	; 0x38
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	4413      	add	r3, r2
 8002486:	3304      	adds	r3, #4
 8002488:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2201      	movs	r2, #1
 800248e:	705a      	strb	r2, [r3, #1]
 8002490:	e00f      	b.n	80024b2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002492:	78fb      	ldrb	r3, [r7, #3]
 8002494:	f003 020f 	and.w	r2, r3, #15
 8002498:	4613      	mov	r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	4413      	add	r3, r2
 80024a8:	3304      	adds	r3, #4
 80024aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80024b2:	78fb      	ldrb	r3, [r7, #3]
 80024b4:	f003 030f 	and.w	r3, r3, #15
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <HAL_PCD_EP_Close+0x6e>
 80024c8:	2302      	movs	r3, #2
 80024ca:	e00e      	b.n	80024ea <HAL_PCD_EP_Close+0x8c>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68f9      	ldr	r1, [r7, #12]
 80024da:	4618      	mov	r0, r3
 80024dc:	f001 ff56 	bl	800438c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b086      	sub	sp, #24
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	60f8      	str	r0, [r7, #12]
 80024fa:	607a      	str	r2, [r7, #4]
 80024fc:	603b      	str	r3, [r7, #0]
 80024fe:	460b      	mov	r3, r1
 8002500:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002502:	7afb      	ldrb	r3, [r7, #11]
 8002504:	f003 020f 	and.w	r2, r3, #15
 8002508:	4613      	mov	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	1a9b      	subs	r3, r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	4413      	add	r3, r2
 8002518:	3304      	adds	r3, #4
 800251a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	2200      	movs	r2, #0
 800252c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	2200      	movs	r2, #0
 8002532:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002534:	7afb      	ldrb	r3, [r7, #11]
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	b2da      	uxtb	r2, r3
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d102      	bne.n	800254e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800254e:	7afb      	ldrb	r3, [r7, #11]
 8002550:	f003 030f 	and.w	r3, r3, #15
 8002554:	2b00      	cmp	r3, #0
 8002556:	d109      	bne.n	800256c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	b2db      	uxtb	r3, r3
 8002562:	461a      	mov	r2, r3
 8002564:	6979      	ldr	r1, [r7, #20]
 8002566:	f002 fa31 	bl	80049cc <USB_EP0StartXfer>
 800256a:	e008      	b.n	800257e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	461a      	mov	r2, r3
 8002578:	6979      	ldr	r1, [r7, #20]
 800257a:	f001 ffe3 	bl	8004544 <USB_EPStartXfer>
  }

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002594:	78fb      	ldrb	r3, [r7, #3]
 8002596:	f003 020f 	and.w	r2, r3, #15
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80025aa:	681b      	ldr	r3, [r3, #0]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	607a      	str	r2, [r7, #4]
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	460b      	mov	r3, r1
 80025c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025c8:	7afb      	ldrb	r3, [r7, #11]
 80025ca:	f003 020f 	and.w	r2, r3, #15
 80025ce:	4613      	mov	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	1a9b      	subs	r3, r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	3338      	adds	r3, #56	; 0x38
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	4413      	add	r3, r2
 80025dc:	3304      	adds	r3, #4
 80025de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	2200      	movs	r2, #0
 80025f0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	2201      	movs	r2, #1
 80025f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025f8:	7afb      	ldrb	r3, [r7, #11]
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	b2da      	uxtb	r2, r3
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d102      	bne.n	8002612 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002612:	7afb      	ldrb	r3, [r7, #11]
 8002614:	f003 030f 	and.w	r3, r3, #15
 8002618:	2b00      	cmp	r3, #0
 800261a:	d109      	bne.n	8002630 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6818      	ldr	r0, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	461a      	mov	r2, r3
 8002628:	6979      	ldr	r1, [r7, #20]
 800262a:	f002 f9cf 	bl	80049cc <USB_EP0StartXfer>
 800262e:	e008      	b.n	8002642 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6818      	ldr	r0, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	461a      	mov	r2, r3
 800263c:	6979      	ldr	r1, [r7, #20]
 800263e:	f001 ff81 	bl	8004544 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002658:	78fb      	ldrb	r3, [r7, #3]
 800265a:	f003 020f 	and.w	r2, r3, #15
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	429a      	cmp	r2, r3
 8002664:	d901      	bls.n	800266a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e050      	b.n	800270c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800266a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800266e:	2b00      	cmp	r3, #0
 8002670:	da0f      	bge.n	8002692 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002672:	78fb      	ldrb	r3, [r7, #3]
 8002674:	f003 020f 	and.w	r2, r3, #15
 8002678:	4613      	mov	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	3338      	adds	r3, #56	; 0x38
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	4413      	add	r3, r2
 8002686:	3304      	adds	r3, #4
 8002688:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2201      	movs	r2, #1
 800268e:	705a      	strb	r2, [r3, #1]
 8002690:	e00d      	b.n	80026ae <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002692:	78fa      	ldrb	r2, [r7, #3]
 8002694:	4613      	mov	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	1a9b      	subs	r3, r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	4413      	add	r3, r2
 80026a4:	3304      	adds	r3, #4
 80026a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2201      	movs	r2, #1
 80026b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026b4:	78fb      	ldrb	r3, [r7, #3]
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d101      	bne.n	80026ce <HAL_PCD_EP_SetStall+0x82>
 80026ca:	2302      	movs	r3, #2
 80026cc:	e01e      	b.n	800270c <HAL_PCD_EP_SetStall+0xc0>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68f9      	ldr	r1, [r7, #12]
 80026dc:	4618      	mov	r0, r3
 80026de:	f002 fb26 	bl	8004d2e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026e2:	78fb      	ldrb	r3, [r7, #3]
 80026e4:	f003 030f 	and.w	r3, r3, #15
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10a      	bne.n	8002702 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6818      	ldr	r0, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	b2d9      	uxtb	r1, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80026fc:	461a      	mov	r2, r3
 80026fe:	f002 fd05 	bl	800510c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	f003 020f 	and.w	r2, r3, #15
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	429a      	cmp	r2, r3
 800272c:	d901      	bls.n	8002732 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e042      	b.n	80027b8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002732:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002736:	2b00      	cmp	r3, #0
 8002738:	da0f      	bge.n	800275a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800273a:	78fb      	ldrb	r3, [r7, #3]
 800273c:	f003 020f 	and.w	r2, r3, #15
 8002740:	4613      	mov	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	1a9b      	subs	r3, r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	3338      	adds	r3, #56	; 0x38
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	4413      	add	r3, r2
 800274e:	3304      	adds	r3, #4
 8002750:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2201      	movs	r2, #1
 8002756:	705a      	strb	r2, [r3, #1]
 8002758:	e00f      	b.n	800277a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800275a:	78fb      	ldrb	r3, [r7, #3]
 800275c:	f003 020f 	and.w	r2, r3, #15
 8002760:	4613      	mov	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	1a9b      	subs	r3, r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	4413      	add	r3, r2
 8002770:	3304      	adds	r3, #4
 8002772:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002780:	78fb      	ldrb	r3, [r7, #3]
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	b2da      	uxtb	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002792:	2b01      	cmp	r3, #1
 8002794:	d101      	bne.n	800279a <HAL_PCD_EP_ClrStall+0x86>
 8002796:	2302      	movs	r3, #2
 8002798:	e00e      	b.n	80027b8 <HAL_PCD_EP_ClrStall+0xa4>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68f9      	ldr	r1, [r7, #12]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f002 fb2e 	bl	8004e0a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08a      	sub	sp, #40	; 0x28
 80027c4:	af02      	add	r7, sp, #8
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	4613      	mov	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	1a9b      	subs	r3, r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	3338      	adds	r3, #56	; 0x38
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	4413      	add	r3, r2
 80027e4:	3304      	adds	r3, #4
 80027e6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	699a      	ldr	r2, [r3, #24]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d901      	bls.n	80027f8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e06c      	b.n	80028d2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	695a      	ldr	r2, [r3, #20]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	69fa      	ldr	r2, [r7, #28]
 800280a:	429a      	cmp	r2, r3
 800280c:	d902      	bls.n	8002814 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	3303      	adds	r3, #3
 8002818:	089b      	lsrs	r3, r3, #2
 800281a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800281c:	e02b      	b.n	8002876 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	695a      	ldr	r2, [r3, #20]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	69fa      	ldr	r2, [r7, #28]
 8002830:	429a      	cmp	r2, r3
 8002832:	d902      	bls.n	800283a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3303      	adds	r3, #3
 800283e:	089b      	lsrs	r3, r3, #2
 8002840:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	68d9      	ldr	r1, [r3, #12]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	b2da      	uxtb	r2, r3
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002852:	b2db      	uxtb	r3, r3
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	4603      	mov	r3, r0
 8002858:	6978      	ldr	r0, [r7, #20]
 800285a:	f002 fa0a 	bl	8004c72 <USB_WritePacket>

    ep->xfer_buff  += len;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	68da      	ldr	r2, [r3, #12]
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	441a      	add	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	699a      	ldr	r2, [r3, #24]
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	441a      	add	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	015a      	lsls	r2, r3, #5
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4413      	add	r3, r2
 800287e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	b29b      	uxth	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	429a      	cmp	r2, r3
 800288a:	d809      	bhi.n	80028a0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	699a      	ldr	r2, [r3, #24]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002894:	429a      	cmp	r2, r3
 8002896:	d203      	bcs.n	80028a0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1be      	bne.n	800281e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	695a      	ldr	r2, [r3, #20]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d811      	bhi.n	80028d0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	2201      	movs	r2, #1
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	43db      	mvns	r3, r3
 80028c6:	6939      	ldr	r1, [r7, #16]
 80028c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80028cc:	4013      	ands	r3, r2
 80028ce:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3720      	adds	r7, #32
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
	...

080028dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	333c      	adds	r3, #60	; 0x3c
 80028f4:	3304      	adds	r3, #4
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	015a      	lsls	r2, r3, #5
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	4413      	add	r3, r2
 8002902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	2b01      	cmp	r3, #1
 8002910:	f040 80a0 	bne.w	8002a54 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d015      	beq.n	800294a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	4a72      	ldr	r2, [pc, #456]	; (8002aec <PCD_EP_OutXfrComplete_int+0x210>)
 8002922:	4293      	cmp	r3, r2
 8002924:	f240 80dd 	bls.w	8002ae2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 80d7 	beq.w	8002ae2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	015a      	lsls	r2, r3, #5
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	4413      	add	r3, r2
 800293c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002940:	461a      	mov	r2, r3
 8002942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002946:	6093      	str	r3, [r2, #8]
 8002948:	e0cb      	b.n	8002ae2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	f003 0320 	and.w	r3, r3, #32
 8002950:	2b00      	cmp	r3, #0
 8002952:	d009      	beq.n	8002968 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4413      	add	r3, r2
 800295c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002960:	461a      	mov	r2, r3
 8002962:	2320      	movs	r3, #32
 8002964:	6093      	str	r3, [r2, #8]
 8002966:	e0bc      	b.n	8002ae2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800296e:	2b00      	cmp	r3, #0
 8002970:	f040 80b7 	bne.w	8002ae2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4a5d      	ldr	r2, [pc, #372]	; (8002aec <PCD_EP_OutXfrComplete_int+0x210>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d90f      	bls.n	800299c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00a      	beq.n	800299c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	015a      	lsls	r2, r3, #5
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	4413      	add	r3, r2
 800298e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002992:	461a      	mov	r2, r3
 8002994:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002998:	6093      	str	r3, [r2, #8]
 800299a:	e0a2      	b.n	8002ae2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	4613      	mov	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	1a9b      	subs	r3, r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80029ae:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	0159      	lsls	r1, r3, #5
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	440b      	add	r3, r1
 80029b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80029c2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	4613      	mov	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	1a9b      	subs	r3, r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4403      	add	r3, r0
 80029d2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80029d6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	4613      	mov	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	1a9b      	subs	r3, r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80029ea:	6819      	ldr	r1, [r3, #0]
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	4613      	mov	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	1a9b      	subs	r3, r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4403      	add	r3, r0
 80029fa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4419      	add	r1, r3
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	4613      	mov	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	1a9b      	subs	r3, r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4403      	add	r3, r0
 8002a10:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a14:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d114      	bne.n	8002a46 <PCD_EP_OutXfrComplete_int+0x16a>
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	4613      	mov	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	1a9b      	subs	r3, r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d108      	bne.n	8002a46 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6818      	ldr	r0, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a3e:	461a      	mov	r2, r3
 8002a40:	2101      	movs	r1, #1
 8002a42:	f002 fb63 	bl	800510c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f004 faa9 	bl	8006fa4 <HAL_PCD_DataOutStageCallback>
 8002a52:	e046      	b.n	8002ae2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4a26      	ldr	r2, [pc, #152]	; (8002af0 <PCD_EP_OutXfrComplete_int+0x214>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d124      	bne.n	8002aa6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00a      	beq.n	8002a7c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	015a      	lsls	r2, r3, #5
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a72:	461a      	mov	r2, r3
 8002a74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a78:	6093      	str	r3, [r2, #8]
 8002a7a:	e032      	b.n	8002ae2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	f003 0320 	and.w	r3, r3, #32
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d008      	beq.n	8002a98 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	015a      	lsls	r2, r3, #5
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a92:	461a      	mov	r2, r3
 8002a94:	2320      	movs	r3, #32
 8002a96:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f004 fa80 	bl	8006fa4 <HAL_PCD_DataOutStageCallback>
 8002aa4:	e01d      	b.n	8002ae2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d114      	bne.n	8002ad6 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	1a9b      	subs	r3, r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d108      	bne.n	8002ad6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6818      	ldr	r0, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ace:	461a      	mov	r2, r3
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	f002 fb1b 	bl	800510c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	4619      	mov	r1, r3
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f004 fa61 	bl	8006fa4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3718      	adds	r7, #24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	4f54300a 	.word	0x4f54300a
 8002af0:	4f54310a 	.word	0x4f54310a

08002af4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	333c      	adds	r3, #60	; 0x3c
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	015a      	lsls	r2, r3, #5
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	4a15      	ldr	r2, [pc, #84]	; (8002b7c <PCD_EP_OutSetupPacket_int+0x88>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d90e      	bls.n	8002b48 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d009      	beq.n	8002b48 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b40:	461a      	mov	r2, r3
 8002b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b46:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f004 fa19 	bl	8006f80 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4a0a      	ldr	r2, [pc, #40]	; (8002b7c <PCD_EP_OutSetupPacket_int+0x88>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d90c      	bls.n	8002b70 <PCD_EP_OutSetupPacket_int+0x7c>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d108      	bne.n	8002b70 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b68:	461a      	mov	r2, r3
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	f002 face 	bl	800510c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	4f54300a 	.word	0x4f54300a

08002b80 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	70fb      	strb	r3, [r7, #3]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b96:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002b98:	78fb      	ldrb	r3, [r7, #3]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d107      	bne.n	8002bae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002b9e:	883b      	ldrh	r3, [r7, #0]
 8002ba0:	0419      	lsls	r1, r3, #16
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	629a      	str	r2, [r3, #40]	; 0x28
 8002bac:	e028      	b.n	8002c00 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb4:	0c1b      	lsrs	r3, r3, #16
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	4413      	add	r3, r2
 8002bba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	73fb      	strb	r3, [r7, #15]
 8002bc0:	e00d      	b.n	8002bde <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
 8002bc8:	3340      	adds	r3, #64	; 0x40
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	0c1b      	lsrs	r3, r3, #16
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	73fb      	strb	r3, [r7, #15]
 8002bde:	7bfa      	ldrb	r2, [r7, #15]
 8002be0:	78fb      	ldrb	r3, [r7, #3]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d3ec      	bcc.n	8002bc2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002be8:	883b      	ldrh	r3, [r7, #0]
 8002bea:	0418      	lsls	r0, r3, #16
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6819      	ldr	r1, [r3, #0]
 8002bf0:	78fb      	ldrb	r3, [r7, #3]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	4302      	orrs	r2, r0
 8002bf8:	3340      	adds	r3, #64	; 0x40
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	460b      	mov	r3, r1
 8002c18:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	887a      	ldrh	r2, [r7, #2]
 8002c20:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e25b      	b.n	8003112 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d075      	beq.n	8002d52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c66:	4ba3      	ldr	r3, [pc, #652]	; (8002ef4 <HAL_RCC_OscConfig+0x2ac>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d00c      	beq.n	8002c8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c72:	4ba0      	ldr	r3, [pc, #640]	; (8002ef4 <HAL_RCC_OscConfig+0x2ac>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c7a:	2b08      	cmp	r3, #8
 8002c7c:	d112      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c7e:	4b9d      	ldr	r3, [pc, #628]	; (8002ef4 <HAL_RCC_OscConfig+0x2ac>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c8a:	d10b      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c8c:	4b99      	ldr	r3, [pc, #612]	; (8002ef4 <HAL_RCC_OscConfig+0x2ac>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d05b      	beq.n	8002d50 <HAL_RCC_OscConfig+0x108>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d157      	bne.n	8002d50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e236      	b.n	8003112 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cac:	d106      	bne.n	8002cbc <HAL_RCC_OscConfig+0x74>
 8002cae:	4b91      	ldr	r3, [pc, #580]	; (8002ef4 <HAL_RCC_OscConfig+0x2ac>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a90      	ldr	r2, [pc, #576]	; (8002ef4 <HAL_RCC_OscConfig+0x2ac>)
 8002cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	e01d      	b.n	8002cf8 <HAL_RCC_OscConfig+0xb0>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cc4:	d10c      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x98>
 8002cc6:	4b8b      	ldr	r3, [pc, #556]	; (8002ef4 <HAL_RCC_OscConfig+0x2ac>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a8a      	ldr	r2, [pc, #552]	; (8002ef4 <HAL_RCC_OscConfig+0x2ac>)
 8002ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	4b88      	ldr	r3, [pc, #544]	; (8002ef4 <HAL_RCC_OscConfig+0x2ac>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a87      	ldr	r2, [pc, #540]	; (8002ef4 <HAL_RCC_OscConfig+0x2ac>)
 8002cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	e00b      	b.n	8002cf8 <HAL_RCC_OscConfig+0xb0>
 8002ce0:	4b84      	ldr	r3, [pc, #528]	; (8002ef4 <HAL_RCC_OscConfig+0x2ac>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a83      	ldr	r2, [pc, #524]	; (8002ef4 <HAL_RCC_OscConfig+0x2ac>)
 8002ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cea:	6013      	str	r3, [r2, #0]
 8002cec:	4b81      	ldr	r3, [pc, #516]	; (8002ef4 <HAL_RCC_OscConfig+0x2ac>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a80      	ldr	r2, [pc, #512]	; (8002ef4 <HAL_RCC_OscConfig+0x2ac>)
 8002cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d013      	beq.n	8002d28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d00:	f7fd ff3c 	bl	8000b7c <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d08:	f7fd ff38 	bl	8000b7c <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b64      	cmp	r3, #100	; 0x64
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e1fb      	b.n	8003112 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d1a:	4b76      	ldr	r3, [pc, #472]	; (8002ef4 <HAL_RCC_OscConfig+0x2ac>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0f0      	beq.n	8002d08 <HAL_RCC_OscConfig+0xc0>
 8002d26:	e014      	b.n	8002d52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d28:	f7fd ff28 	bl	8000b7c <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d30:	f7fd ff24 	bl	8000b7c <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b64      	cmp	r3, #100	; 0x64
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e1e7      	b.n	8003112 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d42:	4b6c      	ldr	r3, [pc, #432]	; (8002ef4 <HAL_RCC_OscConfig+0x2ac>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f0      	bne.n	8002d30 <HAL_RCC_OscConfig+0xe8>
 8002d4e:	e000      	b.n	8002d52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d063      	beq.n	8002e26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d5e:	4b65      	ldr	r3, [pc, #404]	; (8002ef4 <HAL_RCC_OscConfig+0x2ac>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 030c 	and.w	r3, r3, #12
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00b      	beq.n	8002d82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d6a:	4b62      	ldr	r3, [pc, #392]	; (8002ef4 <HAL_RCC_OscConfig+0x2ac>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d72:	2b08      	cmp	r3, #8
 8002d74:	d11c      	bne.n	8002db0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d76:	4b5f      	ldr	r3, [pc, #380]	; (8002ef4 <HAL_RCC_OscConfig+0x2ac>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d116      	bne.n	8002db0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d82:	4b5c      	ldr	r3, [pc, #368]	; (8002ef4 <HAL_RCC_OscConfig+0x2ac>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d005      	beq.n	8002d9a <HAL_RCC_OscConfig+0x152>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d001      	beq.n	8002d9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e1bb      	b.n	8003112 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d9a:	4b56      	ldr	r3, [pc, #344]	; (8002ef4 <HAL_RCC_OscConfig+0x2ac>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	4952      	ldr	r1, [pc, #328]	; (8002ef4 <HAL_RCC_OscConfig+0x2ac>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dae:	e03a      	b.n	8002e26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d020      	beq.n	8002dfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002db8:	4b4f      	ldr	r3, [pc, #316]	; (8002ef8 <HAL_RCC_OscConfig+0x2b0>)
 8002dba:	2201      	movs	r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dbe:	f7fd fedd 	bl	8000b7c <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dc6:	f7fd fed9 	bl	8000b7c <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e19c      	b.n	8003112 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd8:	4b46      	ldr	r3, [pc, #280]	; (8002ef4 <HAL_RCC_OscConfig+0x2ac>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0f0      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de4:	4b43      	ldr	r3, [pc, #268]	; (8002ef4 <HAL_RCC_OscConfig+0x2ac>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	4940      	ldr	r1, [pc, #256]	; (8002ef4 <HAL_RCC_OscConfig+0x2ac>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	600b      	str	r3, [r1, #0]
 8002df8:	e015      	b.n	8002e26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dfa:	4b3f      	ldr	r3, [pc, #252]	; (8002ef8 <HAL_RCC_OscConfig+0x2b0>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e00:	f7fd febc 	bl	8000b7c <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e08:	f7fd feb8 	bl	8000b7c <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e17b      	b.n	8003112 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e1a:	4b36      	ldr	r3, [pc, #216]	; (8002ef4 <HAL_RCC_OscConfig+0x2ac>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1f0      	bne.n	8002e08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d030      	beq.n	8002e94 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d016      	beq.n	8002e68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e3a:	4b30      	ldr	r3, [pc, #192]	; (8002efc <HAL_RCC_OscConfig+0x2b4>)
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e40:	f7fd fe9c 	bl	8000b7c <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e48:	f7fd fe98 	bl	8000b7c <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e15b      	b.n	8003112 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e5a:	4b26      	ldr	r3, [pc, #152]	; (8002ef4 <HAL_RCC_OscConfig+0x2ac>)
 8002e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0f0      	beq.n	8002e48 <HAL_RCC_OscConfig+0x200>
 8002e66:	e015      	b.n	8002e94 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e68:	4b24      	ldr	r3, [pc, #144]	; (8002efc <HAL_RCC_OscConfig+0x2b4>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e6e:	f7fd fe85 	bl	8000b7c <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e76:	f7fd fe81 	bl	8000b7c <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e144      	b.n	8003112 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e88:	4b1a      	ldr	r3, [pc, #104]	; (8002ef4 <HAL_RCC_OscConfig+0x2ac>)
 8002e8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1f0      	bne.n	8002e76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 80a0 	beq.w	8002fe2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ea6:	4b13      	ldr	r3, [pc, #76]	; (8002ef4 <HAL_RCC_OscConfig+0x2ac>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10f      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60bb      	str	r3, [r7, #8]
 8002eb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <HAL_RCC_OscConfig+0x2ac>)
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	4a0e      	ldr	r2, [pc, #56]	; (8002ef4 <HAL_RCC_OscConfig+0x2ac>)
 8002ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec2:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <HAL_RCC_OscConfig+0x2ac>)
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eca:	60bb      	str	r3, [r7, #8]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed2:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <HAL_RCC_OscConfig+0x2b8>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d121      	bne.n	8002f22 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ede:	4b08      	ldr	r3, [pc, #32]	; (8002f00 <HAL_RCC_OscConfig+0x2b8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a07      	ldr	r2, [pc, #28]	; (8002f00 <HAL_RCC_OscConfig+0x2b8>)
 8002ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eea:	f7fd fe47 	bl	8000b7c <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef0:	e011      	b.n	8002f16 <HAL_RCC_OscConfig+0x2ce>
 8002ef2:	bf00      	nop
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	42470000 	.word	0x42470000
 8002efc:	42470e80 	.word	0x42470e80
 8002f00:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f04:	f7fd fe3a 	bl	8000b7c <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e0fd      	b.n	8003112 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f16:	4b81      	ldr	r3, [pc, #516]	; (800311c <HAL_RCC_OscConfig+0x4d4>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0f0      	beq.n	8002f04 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d106      	bne.n	8002f38 <HAL_RCC_OscConfig+0x2f0>
 8002f2a:	4b7d      	ldr	r3, [pc, #500]	; (8003120 <HAL_RCC_OscConfig+0x4d8>)
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2e:	4a7c      	ldr	r2, [pc, #496]	; (8003120 <HAL_RCC_OscConfig+0x4d8>)
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	6713      	str	r3, [r2, #112]	; 0x70
 8002f36:	e01c      	b.n	8002f72 <HAL_RCC_OscConfig+0x32a>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	2b05      	cmp	r3, #5
 8002f3e:	d10c      	bne.n	8002f5a <HAL_RCC_OscConfig+0x312>
 8002f40:	4b77      	ldr	r3, [pc, #476]	; (8003120 <HAL_RCC_OscConfig+0x4d8>)
 8002f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f44:	4a76      	ldr	r2, [pc, #472]	; (8003120 <HAL_RCC_OscConfig+0x4d8>)
 8002f46:	f043 0304 	orr.w	r3, r3, #4
 8002f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f4c:	4b74      	ldr	r3, [pc, #464]	; (8003120 <HAL_RCC_OscConfig+0x4d8>)
 8002f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f50:	4a73      	ldr	r2, [pc, #460]	; (8003120 <HAL_RCC_OscConfig+0x4d8>)
 8002f52:	f043 0301 	orr.w	r3, r3, #1
 8002f56:	6713      	str	r3, [r2, #112]	; 0x70
 8002f58:	e00b      	b.n	8002f72 <HAL_RCC_OscConfig+0x32a>
 8002f5a:	4b71      	ldr	r3, [pc, #452]	; (8003120 <HAL_RCC_OscConfig+0x4d8>)
 8002f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5e:	4a70      	ldr	r2, [pc, #448]	; (8003120 <HAL_RCC_OscConfig+0x4d8>)
 8002f60:	f023 0301 	bic.w	r3, r3, #1
 8002f64:	6713      	str	r3, [r2, #112]	; 0x70
 8002f66:	4b6e      	ldr	r3, [pc, #440]	; (8003120 <HAL_RCC_OscConfig+0x4d8>)
 8002f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6a:	4a6d      	ldr	r2, [pc, #436]	; (8003120 <HAL_RCC_OscConfig+0x4d8>)
 8002f6c:	f023 0304 	bic.w	r3, r3, #4
 8002f70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d015      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f7a:	f7fd fdff 	bl	8000b7c <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f80:	e00a      	b.n	8002f98 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f82:	f7fd fdfb 	bl	8000b7c <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e0bc      	b.n	8003112 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f98:	4b61      	ldr	r3, [pc, #388]	; (8003120 <HAL_RCC_OscConfig+0x4d8>)
 8002f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0ee      	beq.n	8002f82 <HAL_RCC_OscConfig+0x33a>
 8002fa4:	e014      	b.n	8002fd0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa6:	f7fd fde9 	bl	8000b7c <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fac:	e00a      	b.n	8002fc4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fae:	f7fd fde5 	bl	8000b7c <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e0a6      	b.n	8003112 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fc4:	4b56      	ldr	r3, [pc, #344]	; (8003120 <HAL_RCC_OscConfig+0x4d8>)
 8002fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1ee      	bne.n	8002fae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fd0:	7dfb      	ldrb	r3, [r7, #23]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d105      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fd6:	4b52      	ldr	r3, [pc, #328]	; (8003120 <HAL_RCC_OscConfig+0x4d8>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	4a51      	ldr	r2, [pc, #324]	; (8003120 <HAL_RCC_OscConfig+0x4d8>)
 8002fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fe0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 8092 	beq.w	8003110 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fec:	4b4c      	ldr	r3, [pc, #304]	; (8003120 <HAL_RCC_OscConfig+0x4d8>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 030c 	and.w	r3, r3, #12
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	d05c      	beq.n	80030b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d141      	bne.n	8003084 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003000:	4b48      	ldr	r3, [pc, #288]	; (8003124 <HAL_RCC_OscConfig+0x4dc>)
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003006:	f7fd fdb9 	bl	8000b7c <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800300c:	e008      	b.n	8003020 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800300e:	f7fd fdb5 	bl	8000b7c <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e078      	b.n	8003112 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003020:	4b3f      	ldr	r3, [pc, #252]	; (8003120 <HAL_RCC_OscConfig+0x4d8>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1f0      	bne.n	800300e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	69da      	ldr	r2, [r3, #28]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	431a      	orrs	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	019b      	lsls	r3, r3, #6
 800303c:	431a      	orrs	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003042:	085b      	lsrs	r3, r3, #1
 8003044:	3b01      	subs	r3, #1
 8003046:	041b      	lsls	r3, r3, #16
 8003048:	431a      	orrs	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304e:	061b      	lsls	r3, r3, #24
 8003050:	4933      	ldr	r1, [pc, #204]	; (8003120 <HAL_RCC_OscConfig+0x4d8>)
 8003052:	4313      	orrs	r3, r2
 8003054:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003056:	4b33      	ldr	r3, [pc, #204]	; (8003124 <HAL_RCC_OscConfig+0x4dc>)
 8003058:	2201      	movs	r2, #1
 800305a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305c:	f7fd fd8e 	bl	8000b7c <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003064:	f7fd fd8a 	bl	8000b7c <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e04d      	b.n	8003112 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003076:	4b2a      	ldr	r3, [pc, #168]	; (8003120 <HAL_RCC_OscConfig+0x4d8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0f0      	beq.n	8003064 <HAL_RCC_OscConfig+0x41c>
 8003082:	e045      	b.n	8003110 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003084:	4b27      	ldr	r3, [pc, #156]	; (8003124 <HAL_RCC_OscConfig+0x4dc>)
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308a:	f7fd fd77 	bl	8000b7c <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003090:	e008      	b.n	80030a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003092:	f7fd fd73 	bl	8000b7c <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e036      	b.n	8003112 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a4:	4b1e      	ldr	r3, [pc, #120]	; (8003120 <HAL_RCC_OscConfig+0x4d8>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1f0      	bne.n	8003092 <HAL_RCC_OscConfig+0x44a>
 80030b0:	e02e      	b.n	8003110 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e029      	b.n	8003112 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030be:	4b18      	ldr	r3, [pc, #96]	; (8003120 <HAL_RCC_OscConfig+0x4d8>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d11c      	bne.n	800310c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030dc:	429a      	cmp	r2, r3
 80030de:	d115      	bne.n	800310c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030e6:	4013      	ands	r3, r2
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d10d      	bne.n	800310c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d106      	bne.n	800310c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003108:	429a      	cmp	r2, r3
 800310a:	d001      	beq.n	8003110 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e000      	b.n	8003112 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40007000 	.word	0x40007000
 8003120:	40023800 	.word	0x40023800
 8003124:	42470060 	.word	0x42470060

08003128 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d101      	bne.n	800313c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e0cc      	b.n	80032d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800313c:	4b68      	ldr	r3, [pc, #416]	; (80032e0 <HAL_RCC_ClockConfig+0x1b8>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 030f 	and.w	r3, r3, #15
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	429a      	cmp	r2, r3
 8003148:	d90c      	bls.n	8003164 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314a:	4b65      	ldr	r3, [pc, #404]	; (80032e0 <HAL_RCC_ClockConfig+0x1b8>)
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003152:	4b63      	ldr	r3, [pc, #396]	; (80032e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	429a      	cmp	r2, r3
 800315e:	d001      	beq.n	8003164 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e0b8      	b.n	80032d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d020      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	d005      	beq.n	8003188 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800317c:	4b59      	ldr	r3, [pc, #356]	; (80032e4 <HAL_RCC_ClockConfig+0x1bc>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	4a58      	ldr	r2, [pc, #352]	; (80032e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003182:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003186:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0308 	and.w	r3, r3, #8
 8003190:	2b00      	cmp	r3, #0
 8003192:	d005      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003194:	4b53      	ldr	r3, [pc, #332]	; (80032e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	4a52      	ldr	r2, [pc, #328]	; (80032e4 <HAL_RCC_ClockConfig+0x1bc>)
 800319a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800319e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031a0:	4b50      	ldr	r3, [pc, #320]	; (80032e4 <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	494d      	ldr	r1, [pc, #308]	; (80032e4 <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d044      	beq.n	8003248 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d107      	bne.n	80031d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c6:	4b47      	ldr	r3, [pc, #284]	; (80032e4 <HAL_RCC_ClockConfig+0x1bc>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d119      	bne.n	8003206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e07f      	b.n	80032d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d003      	beq.n	80031e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031e2:	2b03      	cmp	r3, #3
 80031e4:	d107      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e6:	4b3f      	ldr	r3, [pc, #252]	; (80032e4 <HAL_RCC_ClockConfig+0x1bc>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d109      	bne.n	8003206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e06f      	b.n	80032d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f6:	4b3b      	ldr	r3, [pc, #236]	; (80032e4 <HAL_RCC_ClockConfig+0x1bc>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e067      	b.n	80032d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003206:	4b37      	ldr	r3, [pc, #220]	; (80032e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f023 0203 	bic.w	r2, r3, #3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	4934      	ldr	r1, [pc, #208]	; (80032e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003214:	4313      	orrs	r3, r2
 8003216:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003218:	f7fd fcb0 	bl	8000b7c <HAL_GetTick>
 800321c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800321e:	e00a      	b.n	8003236 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003220:	f7fd fcac 	bl	8000b7c <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	f241 3288 	movw	r2, #5000	; 0x1388
 800322e:	4293      	cmp	r3, r2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e04f      	b.n	80032d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003236:	4b2b      	ldr	r3, [pc, #172]	; (80032e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 020c 	and.w	r2, r3, #12
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	429a      	cmp	r2, r3
 8003246:	d1eb      	bne.n	8003220 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003248:	4b25      	ldr	r3, [pc, #148]	; (80032e0 <HAL_RCC_ClockConfig+0x1b8>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 030f 	and.w	r3, r3, #15
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	429a      	cmp	r2, r3
 8003254:	d20c      	bcs.n	8003270 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003256:	4b22      	ldr	r3, [pc, #136]	; (80032e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800325e:	4b20      	ldr	r3, [pc, #128]	; (80032e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	429a      	cmp	r2, r3
 800326a:	d001      	beq.n	8003270 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e032      	b.n	80032d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	d008      	beq.n	800328e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800327c:	4b19      	ldr	r3, [pc, #100]	; (80032e4 <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	4916      	ldr	r1, [pc, #88]	; (80032e4 <HAL_RCC_ClockConfig+0x1bc>)
 800328a:	4313      	orrs	r3, r2
 800328c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b00      	cmp	r3, #0
 8003298:	d009      	beq.n	80032ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800329a:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <HAL_RCC_ClockConfig+0x1bc>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	490e      	ldr	r1, [pc, #56]	; (80032e4 <HAL_RCC_ClockConfig+0x1bc>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032ae:	f000 f821 	bl	80032f4 <HAL_RCC_GetSysClockFreq>
 80032b2:	4601      	mov	r1, r0
 80032b4:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <HAL_RCC_ClockConfig+0x1bc>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	091b      	lsrs	r3, r3, #4
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	4a0a      	ldr	r2, [pc, #40]	; (80032e8 <HAL_RCC_ClockConfig+0x1c0>)
 80032c0:	5cd3      	ldrb	r3, [r2, r3]
 80032c2:	fa21 f303 	lsr.w	r3, r1, r3
 80032c6:	4a09      	ldr	r2, [pc, #36]	; (80032ec <HAL_RCC_ClockConfig+0x1c4>)
 80032c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032ca:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <HAL_RCC_ClockConfig+0x1c8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fd fc10 	bl	8000af4 <HAL_InitTick>

  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40023c00 	.word	0x40023c00
 80032e4:	40023800 	.word	0x40023800
 80032e8:	08007714 	.word	0x08007714
 80032ec:	20000010 	.word	0x20000010
 80032f0:	20000014 	.word	0x20000014

080032f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	607b      	str	r3, [r7, #4]
 80032fe:	2300      	movs	r3, #0
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	2300      	movs	r3, #0
 8003304:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003306:	2300      	movs	r3, #0
 8003308:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800330a:	4b50      	ldr	r3, [pc, #320]	; (800344c <HAL_RCC_GetSysClockFreq+0x158>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 030c 	and.w	r3, r3, #12
 8003312:	2b04      	cmp	r3, #4
 8003314:	d007      	beq.n	8003326 <HAL_RCC_GetSysClockFreq+0x32>
 8003316:	2b08      	cmp	r3, #8
 8003318:	d008      	beq.n	800332c <HAL_RCC_GetSysClockFreq+0x38>
 800331a:	2b00      	cmp	r3, #0
 800331c:	f040 808d 	bne.w	800343a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003320:	4b4b      	ldr	r3, [pc, #300]	; (8003450 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003322:	60bb      	str	r3, [r7, #8]
       break;
 8003324:	e08c      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003326:	4b4b      	ldr	r3, [pc, #300]	; (8003454 <HAL_RCC_GetSysClockFreq+0x160>)
 8003328:	60bb      	str	r3, [r7, #8]
      break;
 800332a:	e089      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800332c:	4b47      	ldr	r3, [pc, #284]	; (800344c <HAL_RCC_GetSysClockFreq+0x158>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003334:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003336:	4b45      	ldr	r3, [pc, #276]	; (800344c <HAL_RCC_GetSysClockFreq+0x158>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d023      	beq.n	800338a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003342:	4b42      	ldr	r3, [pc, #264]	; (800344c <HAL_RCC_GetSysClockFreq+0x158>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	099b      	lsrs	r3, r3, #6
 8003348:	f04f 0400 	mov.w	r4, #0
 800334c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	ea03 0501 	and.w	r5, r3, r1
 8003358:	ea04 0602 	and.w	r6, r4, r2
 800335c:	4a3d      	ldr	r2, [pc, #244]	; (8003454 <HAL_RCC_GetSysClockFreq+0x160>)
 800335e:	fb02 f106 	mul.w	r1, r2, r6
 8003362:	2200      	movs	r2, #0
 8003364:	fb02 f205 	mul.w	r2, r2, r5
 8003368:	440a      	add	r2, r1
 800336a:	493a      	ldr	r1, [pc, #232]	; (8003454 <HAL_RCC_GetSysClockFreq+0x160>)
 800336c:	fba5 0101 	umull	r0, r1, r5, r1
 8003370:	1853      	adds	r3, r2, r1
 8003372:	4619      	mov	r1, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f04f 0400 	mov.w	r4, #0
 800337a:	461a      	mov	r2, r3
 800337c:	4623      	mov	r3, r4
 800337e:	f7fc ff29 	bl	80001d4 <__aeabi_uldivmod>
 8003382:	4603      	mov	r3, r0
 8003384:	460c      	mov	r4, r1
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	e049      	b.n	800341e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800338a:	4b30      	ldr	r3, [pc, #192]	; (800344c <HAL_RCC_GetSysClockFreq+0x158>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	099b      	lsrs	r3, r3, #6
 8003390:	f04f 0400 	mov.w	r4, #0
 8003394:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	ea03 0501 	and.w	r5, r3, r1
 80033a0:	ea04 0602 	and.w	r6, r4, r2
 80033a4:	4629      	mov	r1, r5
 80033a6:	4632      	mov	r2, r6
 80033a8:	f04f 0300 	mov.w	r3, #0
 80033ac:	f04f 0400 	mov.w	r4, #0
 80033b0:	0154      	lsls	r4, r2, #5
 80033b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80033b6:	014b      	lsls	r3, r1, #5
 80033b8:	4619      	mov	r1, r3
 80033ba:	4622      	mov	r2, r4
 80033bc:	1b49      	subs	r1, r1, r5
 80033be:	eb62 0206 	sbc.w	r2, r2, r6
 80033c2:	f04f 0300 	mov.w	r3, #0
 80033c6:	f04f 0400 	mov.w	r4, #0
 80033ca:	0194      	lsls	r4, r2, #6
 80033cc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80033d0:	018b      	lsls	r3, r1, #6
 80033d2:	1a5b      	subs	r3, r3, r1
 80033d4:	eb64 0402 	sbc.w	r4, r4, r2
 80033d8:	f04f 0100 	mov.w	r1, #0
 80033dc:	f04f 0200 	mov.w	r2, #0
 80033e0:	00e2      	lsls	r2, r4, #3
 80033e2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80033e6:	00d9      	lsls	r1, r3, #3
 80033e8:	460b      	mov	r3, r1
 80033ea:	4614      	mov	r4, r2
 80033ec:	195b      	adds	r3, r3, r5
 80033ee:	eb44 0406 	adc.w	r4, r4, r6
 80033f2:	f04f 0100 	mov.w	r1, #0
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	02a2      	lsls	r2, r4, #10
 80033fc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003400:	0299      	lsls	r1, r3, #10
 8003402:	460b      	mov	r3, r1
 8003404:	4614      	mov	r4, r2
 8003406:	4618      	mov	r0, r3
 8003408:	4621      	mov	r1, r4
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f04f 0400 	mov.w	r4, #0
 8003410:	461a      	mov	r2, r3
 8003412:	4623      	mov	r3, r4
 8003414:	f7fc fede 	bl	80001d4 <__aeabi_uldivmod>
 8003418:	4603      	mov	r3, r0
 800341a:	460c      	mov	r4, r1
 800341c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800341e:	4b0b      	ldr	r3, [pc, #44]	; (800344c <HAL_RCC_GetSysClockFreq+0x158>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	0c1b      	lsrs	r3, r3, #16
 8003424:	f003 0303 	and.w	r3, r3, #3
 8003428:	3301      	adds	r3, #1
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	fbb2 f3f3 	udiv	r3, r2, r3
 8003436:	60bb      	str	r3, [r7, #8]
      break;
 8003438:	e002      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800343a:	4b05      	ldr	r3, [pc, #20]	; (8003450 <HAL_RCC_GetSysClockFreq+0x15c>)
 800343c:	60bb      	str	r3, [r7, #8]
      break;
 800343e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003440:	68bb      	ldr	r3, [r7, #8]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800344a:	bf00      	nop
 800344c:	40023800 	.word	0x40023800
 8003450:	00f42400 	.word	0x00f42400
 8003454:	017d7840 	.word	0x017d7840

08003458 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800345c:	4b03      	ldr	r3, [pc, #12]	; (800346c <HAL_RCC_GetHCLKFreq+0x14>)
 800345e:	681b      	ldr	r3, [r3, #0]
}
 8003460:	4618      	mov	r0, r3
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	20000010 	.word	0x20000010

08003470 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003474:	f7ff fff0 	bl	8003458 <HAL_RCC_GetHCLKFreq>
 8003478:	4601      	mov	r1, r0
 800347a:	4b05      	ldr	r3, [pc, #20]	; (8003490 <HAL_RCC_GetPCLK1Freq+0x20>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	0a9b      	lsrs	r3, r3, #10
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	4a03      	ldr	r2, [pc, #12]	; (8003494 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003486:	5cd3      	ldrb	r3, [r2, r3]
 8003488:	fa21 f303 	lsr.w	r3, r1, r3
}
 800348c:	4618      	mov	r0, r3
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40023800 	.word	0x40023800
 8003494:	08007724 	.word	0x08007724

08003498 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e01d      	b.n	80034e6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d106      	bne.n	80034c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7fd faa4 	bl	8000a0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2202      	movs	r2, #2
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3304      	adds	r3, #4
 80034d4:	4619      	mov	r1, r3
 80034d6:	4610      	mov	r0, r2
 80034d8:	f000 f9fa 	bl	80038d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b082      	sub	sp, #8
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b02      	cmp	r3, #2
 8003502:	d122      	bne.n	800354a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b02      	cmp	r3, #2
 8003510:	d11b      	bne.n	800354a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f06f 0202 	mvn.w	r2, #2
 800351a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	f003 0303 	and.w	r3, r3, #3
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f9af 	bl	8003894 <HAL_TIM_IC_CaptureCallback>
 8003536:	e005      	b.n	8003544 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 f9a1 	bl	8003880 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f9b2 	bl	80038a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b04      	cmp	r3, #4
 8003556:	d122      	bne.n	800359e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	f003 0304 	and.w	r3, r3, #4
 8003562:	2b04      	cmp	r3, #4
 8003564:	d11b      	bne.n	800359e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f06f 0204 	mvn.w	r2, #4
 800356e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2202      	movs	r2, #2
 8003574:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 f985 	bl	8003894 <HAL_TIM_IC_CaptureCallback>
 800358a:	e005      	b.n	8003598 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f977 	bl	8003880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f988 	bl	80038a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d122      	bne.n	80035f2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b08      	cmp	r3, #8
 80035b8:	d11b      	bne.n	80035f2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f06f 0208 	mvn.w	r2, #8
 80035c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2204      	movs	r2, #4
 80035c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	f003 0303 	and.w	r3, r3, #3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f95b 	bl	8003894 <HAL_TIM_IC_CaptureCallback>
 80035de:	e005      	b.n	80035ec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f94d 	bl	8003880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f95e 	bl	80038a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	f003 0310 	and.w	r3, r3, #16
 80035fc:	2b10      	cmp	r3, #16
 80035fe:	d122      	bne.n	8003646 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f003 0310 	and.w	r3, r3, #16
 800360a:	2b10      	cmp	r3, #16
 800360c:	d11b      	bne.n	8003646 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f06f 0210 	mvn.w	r2, #16
 8003616:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2208      	movs	r2, #8
 800361c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f931 	bl	8003894 <HAL_TIM_IC_CaptureCallback>
 8003632:	e005      	b.n	8003640 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 f923 	bl	8003880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f934 	bl	80038a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b01      	cmp	r3, #1
 8003652:	d10e      	bne.n	8003672 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b01      	cmp	r3, #1
 8003660:	d107      	bne.n	8003672 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f06f 0201 	mvn.w	r2, #1
 800366a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f8fd 	bl	800386c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367c:	2b80      	cmp	r3, #128	; 0x80
 800367e:	d10e      	bne.n	800369e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368a:	2b80      	cmp	r3, #128	; 0x80
 800368c:	d107      	bne.n	800369e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 faab 	bl	8003bf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a8:	2b40      	cmp	r3, #64	; 0x40
 80036aa:	d10e      	bne.n	80036ca <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b6:	2b40      	cmp	r3, #64	; 0x40
 80036b8:	d107      	bne.n	80036ca <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 f8f9 	bl	80038bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	f003 0320 	and.w	r3, r3, #32
 80036d4:	2b20      	cmp	r3, #32
 80036d6:	d10e      	bne.n	80036f6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f003 0320 	and.w	r3, r3, #32
 80036e2:	2b20      	cmp	r3, #32
 80036e4:	d107      	bne.n	80036f6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f06f 0220 	mvn.w	r2, #32
 80036ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 fa75 	bl	8003be0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036f6:	bf00      	nop
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b084      	sub	sp, #16
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
 8003706:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <HAL_TIM_ConfigClockSource+0x18>
 8003712:	2302      	movs	r3, #2
 8003714:	e0a6      	b.n	8003864 <HAL_TIM_ConfigClockSource+0x166>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2202      	movs	r2, #2
 8003722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003734:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800373c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2b40      	cmp	r3, #64	; 0x40
 800374c:	d067      	beq.n	800381e <HAL_TIM_ConfigClockSource+0x120>
 800374e:	2b40      	cmp	r3, #64	; 0x40
 8003750:	d80b      	bhi.n	800376a <HAL_TIM_ConfigClockSource+0x6c>
 8003752:	2b10      	cmp	r3, #16
 8003754:	d073      	beq.n	800383e <HAL_TIM_ConfigClockSource+0x140>
 8003756:	2b10      	cmp	r3, #16
 8003758:	d802      	bhi.n	8003760 <HAL_TIM_ConfigClockSource+0x62>
 800375a:	2b00      	cmp	r3, #0
 800375c:	d06f      	beq.n	800383e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800375e:	e078      	b.n	8003852 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003760:	2b20      	cmp	r3, #32
 8003762:	d06c      	beq.n	800383e <HAL_TIM_ConfigClockSource+0x140>
 8003764:	2b30      	cmp	r3, #48	; 0x30
 8003766:	d06a      	beq.n	800383e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003768:	e073      	b.n	8003852 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800376a:	2b70      	cmp	r3, #112	; 0x70
 800376c:	d00d      	beq.n	800378a <HAL_TIM_ConfigClockSource+0x8c>
 800376e:	2b70      	cmp	r3, #112	; 0x70
 8003770:	d804      	bhi.n	800377c <HAL_TIM_ConfigClockSource+0x7e>
 8003772:	2b50      	cmp	r3, #80	; 0x50
 8003774:	d033      	beq.n	80037de <HAL_TIM_ConfigClockSource+0xe0>
 8003776:	2b60      	cmp	r3, #96	; 0x60
 8003778:	d041      	beq.n	80037fe <HAL_TIM_ConfigClockSource+0x100>
      break;
 800377a:	e06a      	b.n	8003852 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800377c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003780:	d066      	beq.n	8003850 <HAL_TIM_ConfigClockSource+0x152>
 8003782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003786:	d017      	beq.n	80037b8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003788:	e063      	b.n	8003852 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6818      	ldr	r0, [r3, #0]
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	6899      	ldr	r1, [r3, #8]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	f000 f993 	bl	8003ac4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	609a      	str	r2, [r3, #8]
      break;
 80037b6:	e04c      	b.n	8003852 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6818      	ldr	r0, [r3, #0]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	6899      	ldr	r1, [r3, #8]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f000 f97c 	bl	8003ac4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037da:	609a      	str	r2, [r3, #8]
      break;
 80037dc:	e039      	b.n	8003852 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6818      	ldr	r0, [r3, #0]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	6859      	ldr	r1, [r3, #4]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	461a      	mov	r2, r3
 80037ec:	f000 f8f0 	bl	80039d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2150      	movs	r1, #80	; 0x50
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 f949 	bl	8003a8e <TIM_ITRx_SetConfig>
      break;
 80037fc:	e029      	b.n	8003852 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	6859      	ldr	r1, [r3, #4]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	461a      	mov	r2, r3
 800380c:	f000 f90f 	bl	8003a2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2160      	movs	r1, #96	; 0x60
 8003816:	4618      	mov	r0, r3
 8003818:	f000 f939 	bl	8003a8e <TIM_ITRx_SetConfig>
      break;
 800381c:	e019      	b.n	8003852 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6818      	ldr	r0, [r3, #0]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	6859      	ldr	r1, [r3, #4]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	461a      	mov	r2, r3
 800382c:	f000 f8d0 	bl	80039d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2140      	movs	r1, #64	; 0x40
 8003836:	4618      	mov	r0, r3
 8003838:	f000 f929 	bl	8003a8e <TIM_ITRx_SetConfig>
      break;
 800383c:	e009      	b.n	8003852 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4619      	mov	r1, r3
 8003848:	4610      	mov	r0, r2
 800384a:	f000 f920 	bl	8003a8e <TIM_ITRx_SetConfig>
      break;
 800384e:	e000      	b.n	8003852 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003850:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a34      	ldr	r2, [pc, #208]	; (80039b4 <TIM_Base_SetConfig+0xe4>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d00f      	beq.n	8003908 <TIM_Base_SetConfig+0x38>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ee:	d00b      	beq.n	8003908 <TIM_Base_SetConfig+0x38>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a31      	ldr	r2, [pc, #196]	; (80039b8 <TIM_Base_SetConfig+0xe8>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d007      	beq.n	8003908 <TIM_Base_SetConfig+0x38>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a30      	ldr	r2, [pc, #192]	; (80039bc <TIM_Base_SetConfig+0xec>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d003      	beq.n	8003908 <TIM_Base_SetConfig+0x38>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a2f      	ldr	r2, [pc, #188]	; (80039c0 <TIM_Base_SetConfig+0xf0>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d108      	bne.n	800391a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800390e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	4313      	orrs	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a25      	ldr	r2, [pc, #148]	; (80039b4 <TIM_Base_SetConfig+0xe4>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d01b      	beq.n	800395a <TIM_Base_SetConfig+0x8a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003928:	d017      	beq.n	800395a <TIM_Base_SetConfig+0x8a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a22      	ldr	r2, [pc, #136]	; (80039b8 <TIM_Base_SetConfig+0xe8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d013      	beq.n	800395a <TIM_Base_SetConfig+0x8a>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a21      	ldr	r2, [pc, #132]	; (80039bc <TIM_Base_SetConfig+0xec>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d00f      	beq.n	800395a <TIM_Base_SetConfig+0x8a>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a20      	ldr	r2, [pc, #128]	; (80039c0 <TIM_Base_SetConfig+0xf0>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d00b      	beq.n	800395a <TIM_Base_SetConfig+0x8a>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a1f      	ldr	r2, [pc, #124]	; (80039c4 <TIM_Base_SetConfig+0xf4>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d007      	beq.n	800395a <TIM_Base_SetConfig+0x8a>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a1e      	ldr	r2, [pc, #120]	; (80039c8 <TIM_Base_SetConfig+0xf8>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d003      	beq.n	800395a <TIM_Base_SetConfig+0x8a>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a1d      	ldr	r2, [pc, #116]	; (80039cc <TIM_Base_SetConfig+0xfc>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d108      	bne.n	800396c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	4313      	orrs	r3, r2
 800396a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	4313      	orrs	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a08      	ldr	r2, [pc, #32]	; (80039b4 <TIM_Base_SetConfig+0xe4>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d103      	bne.n	80039a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	691a      	ldr	r2, [r3, #16]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	615a      	str	r2, [r3, #20]
}
 80039a6:	bf00      	nop
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	40010000 	.word	0x40010000
 80039b8:	40000400 	.word	0x40000400
 80039bc:	40000800 	.word	0x40000800
 80039c0:	40000c00 	.word	0x40000c00
 80039c4:	40014000 	.word	0x40014000
 80039c8:	40014400 	.word	0x40014400
 80039cc:	40014800 	.word	0x40014800

080039d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b087      	sub	sp, #28
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	f023 0201 	bic.w	r2, r3, #1
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	011b      	lsls	r3, r3, #4
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f023 030a 	bic.w	r3, r3, #10
 8003a0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	621a      	str	r2, [r3, #32]
}
 8003a22:	bf00      	nop
 8003a24:	371c      	adds	r7, #28
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b087      	sub	sp, #28
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	60f8      	str	r0, [r7, #12]
 8003a36:	60b9      	str	r1, [r7, #8]
 8003a38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	f023 0210 	bic.w	r2, r3, #16
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	031b      	lsls	r3, r3, #12
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	621a      	str	r2, [r3, #32]
}
 8003a82:	bf00      	nop
 8003a84:	371c      	adds	r7, #28
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr

08003a8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b085      	sub	sp, #20
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
 8003a96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	f043 0307 	orr.w	r3, r3, #7
 8003ab0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	609a      	str	r2, [r3, #8]
}
 8003ab8:	bf00      	nop
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
 8003ad0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ade:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	021a      	lsls	r2, r3, #8
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	609a      	str	r2, [r3, #8]
}
 8003af8:	bf00      	nop
 8003afa:	371c      	adds	r7, #28
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d101      	bne.n	8003b1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e050      	b.n	8003bbe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a1c      	ldr	r2, [pc, #112]	; (8003bcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d018      	beq.n	8003b92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b68:	d013      	beq.n	8003b92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a18      	ldr	r2, [pc, #96]	; (8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d00e      	beq.n	8003b92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a16      	ldr	r2, [pc, #88]	; (8003bd4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d009      	beq.n	8003b92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a15      	ldr	r2, [pc, #84]	; (8003bd8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d004      	beq.n	8003b92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a13      	ldr	r2, [pc, #76]	; (8003bdc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d10c      	bne.n	8003bac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	40010000 	.word	0x40010000
 8003bd0:	40000400 	.word	0x40000400
 8003bd4:	40000800 	.word	0x40000800
 8003bd8:	40000c00 	.word	0x40000c00
 8003bdc:	40014000 	.word	0x40014000

08003be0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c08:	b084      	sub	sp, #16
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b084      	sub	sp, #16
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
 8003c12:	f107 001c 	add.w	r0, r7, #28
 8003c16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d122      	bne.n	8003c66 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003c34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d105      	bne.n	8003c5a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f001 fab4 	bl	80051c8 <USB_CoreReset>
 8003c60:	4603      	mov	r3, r0
 8003c62:	73fb      	strb	r3, [r7, #15]
 8003c64:	e01a      	b.n	8003c9c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f001 faa8 	bl	80051c8 <USB_CoreReset>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d106      	bne.n	8003c90 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c86:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	639a      	str	r2, [r3, #56]	; 0x38
 8003c8e:	e005      	b.n	8003c9c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d10b      	bne.n	8003cba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f043 0206 	orr.w	r2, r3, #6
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f043 0220 	orr.w	r2, r3, #32
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cc6:	b004      	add	sp, #16
 8003cc8:	4770      	bx	lr
	...

08003ccc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b087      	sub	sp, #28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003cda:	79fb      	ldrb	r3, [r7, #7]
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d165      	bne.n	8003dac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	4a41      	ldr	r2, [pc, #260]	; (8003de8 <USB_SetTurnaroundTime+0x11c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d906      	bls.n	8003cf6 <USB_SetTurnaroundTime+0x2a>
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	4a40      	ldr	r2, [pc, #256]	; (8003dec <USB_SetTurnaroundTime+0x120>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d802      	bhi.n	8003cf6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003cf0:	230f      	movs	r3, #15
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	e062      	b.n	8003dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	4a3c      	ldr	r2, [pc, #240]	; (8003dec <USB_SetTurnaroundTime+0x120>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d906      	bls.n	8003d0c <USB_SetTurnaroundTime+0x40>
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	4a3b      	ldr	r2, [pc, #236]	; (8003df0 <USB_SetTurnaroundTime+0x124>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d802      	bhi.n	8003d0c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003d06:	230e      	movs	r3, #14
 8003d08:	617b      	str	r3, [r7, #20]
 8003d0a:	e057      	b.n	8003dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	4a38      	ldr	r2, [pc, #224]	; (8003df0 <USB_SetTurnaroundTime+0x124>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d906      	bls.n	8003d22 <USB_SetTurnaroundTime+0x56>
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	4a37      	ldr	r2, [pc, #220]	; (8003df4 <USB_SetTurnaroundTime+0x128>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d802      	bhi.n	8003d22 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003d1c:	230d      	movs	r3, #13
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	e04c      	b.n	8003dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	4a33      	ldr	r2, [pc, #204]	; (8003df4 <USB_SetTurnaroundTime+0x128>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d906      	bls.n	8003d38 <USB_SetTurnaroundTime+0x6c>
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	4a32      	ldr	r2, [pc, #200]	; (8003df8 <USB_SetTurnaroundTime+0x12c>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d802      	bhi.n	8003d38 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003d32:	230c      	movs	r3, #12
 8003d34:	617b      	str	r3, [r7, #20]
 8003d36:	e041      	b.n	8003dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	4a2f      	ldr	r2, [pc, #188]	; (8003df8 <USB_SetTurnaroundTime+0x12c>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d906      	bls.n	8003d4e <USB_SetTurnaroundTime+0x82>
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	4a2e      	ldr	r2, [pc, #184]	; (8003dfc <USB_SetTurnaroundTime+0x130>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d802      	bhi.n	8003d4e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003d48:	230b      	movs	r3, #11
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	e036      	b.n	8003dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	4a2a      	ldr	r2, [pc, #168]	; (8003dfc <USB_SetTurnaroundTime+0x130>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d906      	bls.n	8003d64 <USB_SetTurnaroundTime+0x98>
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	4a29      	ldr	r2, [pc, #164]	; (8003e00 <USB_SetTurnaroundTime+0x134>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d802      	bhi.n	8003d64 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003d5e:	230a      	movs	r3, #10
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	e02b      	b.n	8003dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	4a26      	ldr	r2, [pc, #152]	; (8003e00 <USB_SetTurnaroundTime+0x134>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d906      	bls.n	8003d7a <USB_SetTurnaroundTime+0xae>
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	4a25      	ldr	r2, [pc, #148]	; (8003e04 <USB_SetTurnaroundTime+0x138>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d802      	bhi.n	8003d7a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003d74:	2309      	movs	r3, #9
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	e020      	b.n	8003dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	4a21      	ldr	r2, [pc, #132]	; (8003e04 <USB_SetTurnaroundTime+0x138>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d906      	bls.n	8003d90 <USB_SetTurnaroundTime+0xc4>
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	4a20      	ldr	r2, [pc, #128]	; (8003e08 <USB_SetTurnaroundTime+0x13c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d802      	bhi.n	8003d90 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003d8a:	2308      	movs	r3, #8
 8003d8c:	617b      	str	r3, [r7, #20]
 8003d8e:	e015      	b.n	8003dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	4a1d      	ldr	r2, [pc, #116]	; (8003e08 <USB_SetTurnaroundTime+0x13c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d906      	bls.n	8003da6 <USB_SetTurnaroundTime+0xda>
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	4a1c      	ldr	r2, [pc, #112]	; (8003e0c <USB_SetTurnaroundTime+0x140>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d802      	bhi.n	8003da6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003da0:	2307      	movs	r3, #7
 8003da2:	617b      	str	r3, [r7, #20]
 8003da4:	e00a      	b.n	8003dbc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003da6:	2306      	movs	r3, #6
 8003da8:	617b      	str	r3, [r7, #20]
 8003daa:	e007      	b.n	8003dbc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003dac:	79fb      	ldrb	r3, [r7, #7]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d102      	bne.n	8003db8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003db2:	2309      	movs	r3, #9
 8003db4:	617b      	str	r3, [r7, #20]
 8003db6:	e001      	b.n	8003dbc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003db8:	2309      	movs	r3, #9
 8003dba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	68da      	ldr	r2, [r3, #12]
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	029b      	lsls	r3, r3, #10
 8003dd0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	371c      	adds	r7, #28
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	00d8acbf 	.word	0x00d8acbf
 8003dec:	00e4e1bf 	.word	0x00e4e1bf
 8003df0:	00f423ff 	.word	0x00f423ff
 8003df4:	0106737f 	.word	0x0106737f
 8003df8:	011a499f 	.word	0x011a499f
 8003dfc:	01312cff 	.word	0x01312cff
 8003e00:	014ca43f 	.word	0x014ca43f
 8003e04:	016e35ff 	.word	0x016e35ff
 8003e08:	01a6ab1f 	.word	0x01a6ab1f
 8003e0c:	01e847ff 	.word	0x01e847ff

08003e10 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f043 0201 	orr.w	r2, r3, #1
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f023 0201 	bic.w	r2, r3, #1
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e6c:	78fb      	ldrb	r3, [r7, #3]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d106      	bne.n	8003e80 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	60da      	str	r2, [r3, #12]
 8003e7e:	e00b      	b.n	8003e98 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003e80:	78fb      	ldrb	r3, [r7, #3]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d106      	bne.n	8003e94 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	60da      	str	r2, [r3, #12]
 8003e92:	e001      	b.n	8003e98 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e003      	b.n	8003ea0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003e98:	2032      	movs	r0, #50	; 0x32
 8003e9a:	f7fc fe7b 	bl	8000b94 <HAL_Delay>

  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ea8:	b084      	sub	sp, #16
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b086      	sub	sp, #24
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
 8003eb2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003eb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	613b      	str	r3, [r7, #16]
 8003ec6:	e009      	b.n	8003edc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	3340      	adds	r3, #64	; 0x40
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	4413      	add	r3, r2
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	613b      	str	r3, [r7, #16]
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	2b0e      	cmp	r3, #14
 8003ee0:	d9f2      	bls.n	8003ec8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d11c      	bne.n	8003f22 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ef6:	f043 0302 	orr.w	r3, r3, #2
 8003efa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f00:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f18:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	639a      	str	r2, [r3, #56]	; 0x38
 8003f20:	e00b      	b.n	8003f3a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f26:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f32:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f40:	461a      	mov	r2, r3
 8003f42:	2300      	movs	r3, #0
 8003f44:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f54:	461a      	mov	r2, r3
 8003f56:	680b      	ldr	r3, [r1, #0]
 8003f58:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d10c      	bne.n	8003f7a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d104      	bne.n	8003f70 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003f66:	2100      	movs	r1, #0
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f949 	bl	8004200 <USB_SetDevSpeed>
 8003f6e:	e008      	b.n	8003f82 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003f70:	2101      	movs	r1, #1
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f944 	bl	8004200 <USB_SetDevSpeed>
 8003f78:	e003      	b.n	8003f82 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003f7a:	2103      	movs	r1, #3
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f93f 	bl	8004200 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003f82:	2110      	movs	r1, #16
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f8f3 	bl	8004170 <USB_FlushTxFifo>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 f911 	bl	80041bc <USB_FlushRxFifo>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003faa:	461a      	mov	r2, r3
 8003fac:	2300      	movs	r3, #0
 8003fae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	2300      	movs	r3, #0
 8003fba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fc8:	2300      	movs	r3, #0
 8003fca:	613b      	str	r3, [r7, #16]
 8003fcc:	e043      	b.n	8004056 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fe0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fe4:	d118      	bne.n	8004018 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10a      	bne.n	8004002 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	015a      	lsls	r2, r3, #5
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ffe:	6013      	str	r3, [r2, #0]
 8004000:	e013      	b.n	800402a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	015a      	lsls	r2, r3, #5
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	4413      	add	r3, r2
 800400a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800400e:	461a      	mov	r2, r3
 8004010:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004014:	6013      	str	r3, [r2, #0]
 8004016:	e008      	b.n	800402a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	015a      	lsls	r2, r3, #5
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4413      	add	r3, r2
 8004020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004024:	461a      	mov	r2, r3
 8004026:	2300      	movs	r3, #0
 8004028:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	015a      	lsls	r2, r3, #5
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	4413      	add	r3, r2
 8004032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004036:	461a      	mov	r2, r3
 8004038:	2300      	movs	r3, #0
 800403a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	015a      	lsls	r2, r3, #5
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4413      	add	r3, r2
 8004044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004048:	461a      	mov	r2, r3
 800404a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800404e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	3301      	adds	r3, #1
 8004054:	613b      	str	r3, [r7, #16]
 8004056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	429a      	cmp	r2, r3
 800405c:	d3b7      	bcc.n	8003fce <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800405e:	2300      	movs	r3, #0
 8004060:	613b      	str	r3, [r7, #16]
 8004062:	e043      	b.n	80040ec <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4413      	add	r3, r2
 800406c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004076:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800407a:	d118      	bne.n	80040ae <USB_DevInit+0x206>
    {
      if (i == 0U)
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10a      	bne.n	8004098 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	015a      	lsls	r2, r3, #5
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4413      	add	r3, r2
 800408a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800408e:	461a      	mov	r2, r3
 8004090:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	e013      	b.n	80040c0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a4:	461a      	mov	r2, r3
 80040a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040aa:	6013      	str	r3, [r2, #0]
 80040ac:	e008      	b.n	80040c0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ba:	461a      	mov	r2, r3
 80040bc:	2300      	movs	r3, #0
 80040be:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040cc:	461a      	mov	r2, r3
 80040ce:	2300      	movs	r3, #0
 80040d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	015a      	lsls	r2, r3, #5
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	4413      	add	r3, r2
 80040da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040de:	461a      	mov	r2, r3
 80040e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	3301      	adds	r3, #1
 80040ea:	613b      	str	r3, [r7, #16]
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d3b7      	bcc.n	8004064 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004102:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004106:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004114:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004118:	2b00      	cmp	r3, #0
 800411a:	d105      	bne.n	8004128 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	f043 0210 	orr.w	r2, r3, #16
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	699a      	ldr	r2, [r3, #24]
 800412c:	4b0f      	ldr	r3, [pc, #60]	; (800416c <USB_DevInit+0x2c4>)
 800412e:	4313      	orrs	r3, r2
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004136:	2b00      	cmp	r3, #0
 8004138:	d005      	beq.n	8004146 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	f043 0208 	orr.w	r2, r3, #8
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004148:	2b01      	cmp	r3, #1
 800414a:	d107      	bne.n	800415c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004154:	f043 0304 	orr.w	r3, r3, #4
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800415c:	7dfb      	ldrb	r3, [r7, #23]
}
 800415e:	4618      	mov	r0, r3
 8004160:	3718      	adds	r7, #24
 8004162:	46bd      	mov	sp, r7
 8004164:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004168:	b004      	add	sp, #16
 800416a:	4770      	bx	lr
 800416c:	803c3800 	.word	0x803c3800

08004170 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800417a:	2300      	movs	r3, #0
 800417c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	019b      	lsls	r3, r3, #6
 8004182:	f043 0220 	orr.w	r2, r3, #32
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	3301      	adds	r3, #1
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4a09      	ldr	r2, [pc, #36]	; (80041b8 <USB_FlushTxFifo+0x48>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d901      	bls.n	800419c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e006      	b.n	80041aa <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	f003 0320 	and.w	r3, r3, #32
 80041a4:	2b20      	cmp	r3, #32
 80041a6:	d0f0      	beq.n	800418a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	00030d40 	.word	0x00030d40

080041bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80041c4:	2300      	movs	r3, #0
 80041c6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2210      	movs	r2, #16
 80041cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	3301      	adds	r3, #1
 80041d2:	60fb      	str	r3, [r7, #12]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	4a09      	ldr	r2, [pc, #36]	; (80041fc <USB_FlushRxFifo+0x40>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d901      	bls.n	80041e0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e006      	b.n	80041ee <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	f003 0310 	and.w	r3, r3, #16
 80041e8:	2b10      	cmp	r3, #16
 80041ea:	d0f0      	beq.n	80041ce <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	00030d40 	.word	0x00030d40

08004200 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	460b      	mov	r3, r1
 800420a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	78fb      	ldrb	r3, [r7, #3]
 800421a:	68f9      	ldr	r1, [r7, #12]
 800421c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004220:	4313      	orrs	r3, r2
 8004222:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004232:	b480      	push	{r7}
 8004234:	b087      	sub	sp, #28
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 0306 	and.w	r3, r3, #6
 800424a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d102      	bne.n	8004258 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004252:	2300      	movs	r3, #0
 8004254:	75fb      	strb	r3, [r7, #23]
 8004256:	e00a      	b.n	800426e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2b02      	cmp	r3, #2
 800425c:	d002      	beq.n	8004264 <USB_GetDevSpeed+0x32>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2b06      	cmp	r3, #6
 8004262:	d102      	bne.n	800426a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004264:	2302      	movs	r3, #2
 8004266:	75fb      	strb	r3, [r7, #23]
 8004268:	e001      	b.n	800426e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800426a:	230f      	movs	r3, #15
 800426c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800426e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004270:	4618      	mov	r0, r3
 8004272:	371c      	adds	r7, #28
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	785b      	ldrb	r3, [r3, #1]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d13a      	bne.n	800430e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429e:	69da      	ldr	r2, [r3, #28]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	f003 030f 	and.w	r3, r3, #15
 80042a8:	2101      	movs	r1, #1
 80042aa:	fa01 f303 	lsl.w	r3, r1, r3
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	68f9      	ldr	r1, [r7, #12]
 80042b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042b6:	4313      	orrs	r3, r2
 80042b8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	015a      	lsls	r2, r3, #5
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	4413      	add	r3, r2
 80042c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d155      	bne.n	800437c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	015a      	lsls	r2, r3, #5
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4413      	add	r3, r2
 80042d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	78db      	ldrb	r3, [r3, #3]
 80042ea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80042ec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	059b      	lsls	r3, r3, #22
 80042f2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80042f4:	4313      	orrs	r3, r2
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	0151      	lsls	r1, r2, #5
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	440a      	add	r2, r1
 80042fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800430a:	6013      	str	r3, [r2, #0]
 800430c:	e036      	b.n	800437c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004314:	69da      	ldr	r2, [r3, #28]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	2101      	movs	r1, #1
 8004320:	fa01 f303 	lsl.w	r3, r1, r3
 8004324:	041b      	lsls	r3, r3, #16
 8004326:	68f9      	ldr	r1, [r7, #12]
 8004328:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800432c:	4313      	orrs	r3, r2
 800432e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4413      	add	r3, r2
 8004338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d11a      	bne.n	800437c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	015a      	lsls	r2, r3, #5
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	4413      	add	r3, r2
 800434e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	78db      	ldrb	r3, [r3, #3]
 8004360:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004362:	430b      	orrs	r3, r1
 8004364:	4313      	orrs	r3, r2
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	0151      	lsls	r1, r2, #5
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	440a      	add	r2, r1
 800436e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004376:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800437a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3714      	adds	r7, #20
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
	...

0800438c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	785b      	ldrb	r3, [r3, #1]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d161      	bne.n	800446c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	015a      	lsls	r2, r3, #5
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4413      	add	r3, r2
 80043b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043be:	d11f      	bne.n	8004400 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	0151      	lsls	r1, r2, #5
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	440a      	add	r2, r1
 80043d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80043de:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	015a      	lsls	r2, r3, #5
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4413      	add	r3, r2
 80043e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	0151      	lsls	r1, r2, #5
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	440a      	add	r2, r1
 80043f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004406:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	f003 030f 	and.w	r3, r3, #15
 8004410:	2101      	movs	r1, #1
 8004412:	fa01 f303 	lsl.w	r3, r1, r3
 8004416:	b29b      	uxth	r3, r3
 8004418:	43db      	mvns	r3, r3
 800441a:	68f9      	ldr	r1, [r7, #12]
 800441c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004420:	4013      	ands	r3, r2
 8004422:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800442a:	69da      	ldr	r2, [r3, #28]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	f003 030f 	and.w	r3, r3, #15
 8004434:	2101      	movs	r1, #1
 8004436:	fa01 f303 	lsl.w	r3, r1, r3
 800443a:	b29b      	uxth	r3, r3
 800443c:	43db      	mvns	r3, r3
 800443e:	68f9      	ldr	r1, [r7, #12]
 8004440:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004444:	4013      	ands	r3, r2
 8004446:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	015a      	lsls	r2, r3, #5
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4413      	add	r3, r2
 8004450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	0159      	lsls	r1, r3, #5
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	440b      	add	r3, r1
 800445e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004462:	4619      	mov	r1, r3
 8004464:	4b35      	ldr	r3, [pc, #212]	; (800453c <USB_DeactivateEndpoint+0x1b0>)
 8004466:	4013      	ands	r3, r2
 8004468:	600b      	str	r3, [r1, #0]
 800446a:	e060      	b.n	800452e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	015a      	lsls	r2, r3, #5
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4413      	add	r3, r2
 8004474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800447e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004482:	d11f      	bne.n	80044c4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	015a      	lsls	r2, r3, #5
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	4413      	add	r3, r2
 800448c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	0151      	lsls	r1, r2, #5
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	440a      	add	r2, r1
 800449a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800449e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044a2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	015a      	lsls	r2, r3, #5
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4413      	add	r3, r2
 80044ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	0151      	lsls	r1, r2, #5
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	440a      	add	r2, r1
 80044ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	f003 030f 	and.w	r3, r3, #15
 80044d4:	2101      	movs	r1, #1
 80044d6:	fa01 f303 	lsl.w	r3, r1, r3
 80044da:	041b      	lsls	r3, r3, #16
 80044dc:	43db      	mvns	r3, r3
 80044de:	68f9      	ldr	r1, [r7, #12]
 80044e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044e4:	4013      	ands	r3, r2
 80044e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ee:	69da      	ldr	r2, [r3, #28]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	f003 030f 	and.w	r3, r3, #15
 80044f8:	2101      	movs	r1, #1
 80044fa:	fa01 f303 	lsl.w	r3, r1, r3
 80044fe:	041b      	lsls	r3, r3, #16
 8004500:	43db      	mvns	r3, r3
 8004502:	68f9      	ldr	r1, [r7, #12]
 8004504:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004508:	4013      	ands	r3, r2
 800450a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	015a      	lsls	r2, r3, #5
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	4413      	add	r3, r2
 8004514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	0159      	lsls	r1, r3, #5
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	440b      	add	r3, r1
 8004522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004526:	4619      	mov	r1, r3
 8004528:	4b05      	ldr	r3, [pc, #20]	; (8004540 <USB_DeactivateEndpoint+0x1b4>)
 800452a:	4013      	ands	r3, r2
 800452c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	ec337800 	.word	0xec337800
 8004540:	eff37800 	.word	0xeff37800

08004544 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b08a      	sub	sp, #40	; 0x28
 8004548:	af02      	add	r7, sp, #8
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	4613      	mov	r3, r2
 8004550:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	785b      	ldrb	r3, [r3, #1]
 8004560:	2b01      	cmp	r3, #1
 8004562:	f040 815c 	bne.w	800481e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d132      	bne.n	80045d4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	015a      	lsls	r2, r3, #5
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	4413      	add	r3, r2
 8004576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	0151      	lsls	r1, r2, #5
 8004580:	69fa      	ldr	r2, [r7, #28]
 8004582:	440a      	add	r2, r1
 8004584:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004588:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800458c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004590:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	015a      	lsls	r2, r3, #5
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	4413      	add	r3, r2
 800459a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	0151      	lsls	r1, r2, #5
 80045a4:	69fa      	ldr	r2, [r7, #28]
 80045a6:	440a      	add	r2, r1
 80045a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	0151      	lsls	r1, r2, #5
 80045c4:	69fa      	ldr	r2, [r7, #28]
 80045c6:	440a      	add	r2, r1
 80045c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045cc:	0cdb      	lsrs	r3, r3, #19
 80045ce:	04db      	lsls	r3, r3, #19
 80045d0:	6113      	str	r3, [r2, #16]
 80045d2:	e074      	b.n	80046be <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	015a      	lsls	r2, r3, #5
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	4413      	add	r3, r2
 80045dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	0151      	lsls	r1, r2, #5
 80045e6:	69fa      	ldr	r2, [r7, #28]
 80045e8:	440a      	add	r2, r1
 80045ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045ee:	0cdb      	lsrs	r3, r3, #19
 80045f0:	04db      	lsls	r3, r3, #19
 80045f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	015a      	lsls	r2, r3, #5
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	0151      	lsls	r1, r2, #5
 8004606:	69fa      	ldr	r2, [r7, #28]
 8004608:	440a      	add	r2, r1
 800460a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800460e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004612:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004616:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	015a      	lsls	r2, r3, #5
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	4413      	add	r3, r2
 8004620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004624:	691a      	ldr	r2, [r3, #16]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	6959      	ldr	r1, [r3, #20]
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	440b      	add	r3, r1
 8004630:	1e59      	subs	r1, r3, #1
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	fbb1 f3f3 	udiv	r3, r1, r3
 800463a:	04d9      	lsls	r1, r3, #19
 800463c:	4b9d      	ldr	r3, [pc, #628]	; (80048b4 <USB_EPStartXfer+0x370>)
 800463e:	400b      	ands	r3, r1
 8004640:	69b9      	ldr	r1, [r7, #24]
 8004642:	0148      	lsls	r0, r1, #5
 8004644:	69f9      	ldr	r1, [r7, #28]
 8004646:	4401      	add	r1, r0
 8004648:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800464c:	4313      	orrs	r3, r2
 800464e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	4413      	add	r3, r2
 8004658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800465c:	691a      	ldr	r2, [r3, #16]
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004666:	69b9      	ldr	r1, [r7, #24]
 8004668:	0148      	lsls	r0, r1, #5
 800466a:	69f9      	ldr	r1, [r7, #28]
 800466c:	4401      	add	r1, r0
 800466e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004672:	4313      	orrs	r3, r2
 8004674:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	78db      	ldrb	r3, [r3, #3]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d11f      	bne.n	80046be <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	015a      	lsls	r2, r3, #5
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	4413      	add	r3, r2
 8004686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	0151      	lsls	r1, r2, #5
 8004690:	69fa      	ldr	r2, [r7, #28]
 8004692:	440a      	add	r2, r1
 8004694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004698:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800469c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	015a      	lsls	r2, r3, #5
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	0151      	lsls	r1, r2, #5
 80046b0:	69fa      	ldr	r2, [r7, #28]
 80046b2:	440a      	add	r2, r1
 80046b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80046bc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80046be:	79fb      	ldrb	r3, [r7, #7]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d14b      	bne.n	800475c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d009      	beq.n	80046e0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	015a      	lsls	r2, r3, #5
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	4413      	add	r3, r2
 80046d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d8:	461a      	mov	r2, r3
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	78db      	ldrb	r3, [r3, #3]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d128      	bne.n	800473a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d110      	bne.n	800471a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	0151      	lsls	r1, r2, #5
 800470a:	69fa      	ldr	r2, [r7, #28]
 800470c:	440a      	add	r2, r1
 800470e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004712:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004716:	6013      	str	r3, [r2, #0]
 8004718:	e00f      	b.n	800473a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	015a      	lsls	r2, r3, #5
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	4413      	add	r3, r2
 8004722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	0151      	lsls	r1, r2, #5
 800472c:	69fa      	ldr	r2, [r7, #28]
 800472e:	440a      	add	r2, r1
 8004730:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004738:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	015a      	lsls	r2, r3, #5
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	4413      	add	r3, r2
 8004742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	0151      	lsls	r1, r2, #5
 800474c:	69fa      	ldr	r2, [r7, #28]
 800474e:	440a      	add	r2, r1
 8004750:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004754:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	e12f      	b.n	80049bc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	4413      	add	r3, r2
 8004764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	0151      	lsls	r1, r2, #5
 800476e:	69fa      	ldr	r2, [r7, #28]
 8004770:	440a      	add	r2, r1
 8004772:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004776:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800477a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	78db      	ldrb	r3, [r3, #3]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d015      	beq.n	80047b0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 8117 	beq.w	80049bc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	f003 030f 	and.w	r3, r3, #15
 800479e:	2101      	movs	r1, #1
 80047a0:	fa01 f303 	lsl.w	r3, r1, r3
 80047a4:	69f9      	ldr	r1, [r7, #28]
 80047a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047aa:	4313      	orrs	r3, r2
 80047ac:	634b      	str	r3, [r1, #52]	; 0x34
 80047ae:	e105      	b.n	80049bc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d110      	bne.n	80047e2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	015a      	lsls	r2, r3, #5
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	69ba      	ldr	r2, [r7, #24]
 80047d0:	0151      	lsls	r1, r2, #5
 80047d2:	69fa      	ldr	r2, [r7, #28]
 80047d4:	440a      	add	r2, r1
 80047d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047de:	6013      	str	r3, [r2, #0]
 80047e0:	e00f      	b.n	8004802 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	0151      	lsls	r1, r2, #5
 80047f4:	69fa      	ldr	r2, [r7, #28]
 80047f6:	440a      	add	r2, r1
 80047f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004800:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	68d9      	ldr	r1, [r3, #12]
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	781a      	ldrb	r2, [r3, #0]
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	b298      	uxth	r0, r3
 8004810:	79fb      	ldrb	r3, [r7, #7]
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	4603      	mov	r3, r0
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f000 fa2b 	bl	8004c72 <USB_WritePacket>
 800481c:	e0ce      	b.n	80049bc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	015a      	lsls	r2, r3, #5
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	4413      	add	r3, r2
 8004826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	0151      	lsls	r1, r2, #5
 8004830:	69fa      	ldr	r2, [r7, #28]
 8004832:	440a      	add	r2, r1
 8004834:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004838:	0cdb      	lsrs	r3, r3, #19
 800483a:	04db      	lsls	r3, r3, #19
 800483c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	015a      	lsls	r2, r3, #5
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	4413      	add	r3, r2
 8004846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	0151      	lsls	r1, r2, #5
 8004850:	69fa      	ldr	r2, [r7, #28]
 8004852:	440a      	add	r2, r1
 8004854:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004858:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800485c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004860:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d126      	bne.n	80048b8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	015a      	lsls	r2, r3, #5
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	4413      	add	r3, r2
 8004872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004876:	691a      	ldr	r2, [r3, #16]
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004880:	69b9      	ldr	r1, [r7, #24]
 8004882:	0148      	lsls	r0, r1, #5
 8004884:	69f9      	ldr	r1, [r7, #28]
 8004886:	4401      	add	r1, r0
 8004888:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800488c:	4313      	orrs	r3, r2
 800488e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	4413      	add	r3, r2
 8004898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	0151      	lsls	r1, r2, #5
 80048a2:	69fa      	ldr	r2, [r7, #28]
 80048a4:	440a      	add	r2, r1
 80048a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048ae:	6113      	str	r3, [r2, #16]
 80048b0:	e036      	b.n	8004920 <USB_EPStartXfer+0x3dc>
 80048b2:	bf00      	nop
 80048b4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	695a      	ldr	r2, [r3, #20]
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	4413      	add	r3, r2
 80048c2:	1e5a      	subs	r2, r3, #1
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048cc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	015a      	lsls	r2, r3, #5
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	4413      	add	r3, r2
 80048d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048da:	691a      	ldr	r2, [r3, #16]
 80048dc:	8afb      	ldrh	r3, [r7, #22]
 80048de:	04d9      	lsls	r1, r3, #19
 80048e0:	4b39      	ldr	r3, [pc, #228]	; (80049c8 <USB_EPStartXfer+0x484>)
 80048e2:	400b      	ands	r3, r1
 80048e4:	69b9      	ldr	r1, [r7, #24]
 80048e6:	0148      	lsls	r0, r1, #5
 80048e8:	69f9      	ldr	r1, [r7, #28]
 80048ea:	4401      	add	r1, r0
 80048ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80048f0:	4313      	orrs	r3, r2
 80048f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004900:	691a      	ldr	r2, [r3, #16]
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	8af9      	ldrh	r1, [r7, #22]
 8004908:	fb01 f303 	mul.w	r3, r1, r3
 800490c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004910:	69b9      	ldr	r1, [r7, #24]
 8004912:	0148      	lsls	r0, r1, #5
 8004914:	69f9      	ldr	r1, [r7, #28]
 8004916:	4401      	add	r1, r0
 8004918:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800491c:	4313      	orrs	r3, r2
 800491e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004920:	79fb      	ldrb	r3, [r7, #7]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d10d      	bne.n	8004942 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d009      	beq.n	8004942 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	68d9      	ldr	r1, [r3, #12]
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	015a      	lsls	r2, r3, #5
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	4413      	add	r3, r2
 800493a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493e:	460a      	mov	r2, r1
 8004940:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	78db      	ldrb	r3, [r3, #3]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d128      	bne.n	800499c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004956:	2b00      	cmp	r3, #0
 8004958:	d110      	bne.n	800497c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	015a      	lsls	r2, r3, #5
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	4413      	add	r3, r2
 8004962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	0151      	lsls	r1, r2, #5
 800496c:	69fa      	ldr	r2, [r7, #28]
 800496e:	440a      	add	r2, r1
 8004970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004974:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004978:	6013      	str	r3, [r2, #0]
 800497a:	e00f      	b.n	800499c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	015a      	lsls	r2, r3, #5
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	4413      	add	r3, r2
 8004984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	0151      	lsls	r1, r2, #5
 800498e:	69fa      	ldr	r2, [r7, #28]
 8004990:	440a      	add	r2, r1
 8004992:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800499a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	0151      	lsls	r1, r2, #5
 80049ae:	69fa      	ldr	r2, [r7, #28]
 80049b0:	440a      	add	r2, r1
 80049b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3720      	adds	r7, #32
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	1ff80000 	.word	0x1ff80000

080049cc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b087      	sub	sp, #28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	4613      	mov	r3, r2
 80049d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	785b      	ldrb	r3, [r3, #1]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	f040 80cd 	bne.w	8004b88 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d132      	bne.n	8004a5c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	015a      	lsls	r2, r3, #5
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	0151      	lsls	r1, r2, #5
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	440a      	add	r2, r1
 8004a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	015a      	lsls	r2, r3, #5
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	4413      	add	r3, r2
 8004a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	0151      	lsls	r1, r2, #5
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	440a      	add	r2, r1
 8004a30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	015a      	lsls	r2, r3, #5
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	4413      	add	r3, r2
 8004a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	0151      	lsls	r1, r2, #5
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	440a      	add	r2, r1
 8004a50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a54:	0cdb      	lsrs	r3, r3, #19
 8004a56:	04db      	lsls	r3, r3, #19
 8004a58:	6113      	str	r3, [r2, #16]
 8004a5a:	e04e      	b.n	8004afa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	015a      	lsls	r2, r3, #5
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	0151      	lsls	r1, r2, #5
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	440a      	add	r2, r1
 8004a72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a76:	0cdb      	lsrs	r3, r3, #19
 8004a78:	04db      	lsls	r3, r3, #19
 8004a7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	015a      	lsls	r2, r3, #5
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	4413      	add	r3, r2
 8004a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	0151      	lsls	r1, r2, #5
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	440a      	add	r2, r1
 8004a92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a96:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a9a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a9e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	695a      	ldr	r2, [r3, #20]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d903      	bls.n	8004ab4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	689a      	ldr	r2, [r3, #8]
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	0151      	lsls	r1, r2, #5
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	440a      	add	r2, r1
 8004aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ace:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ad2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae0:	691a      	ldr	r2, [r3, #16]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aea:	6939      	ldr	r1, [r7, #16]
 8004aec:	0148      	lsls	r0, r1, #5
 8004aee:	6979      	ldr	r1, [r7, #20]
 8004af0:	4401      	add	r1, r0
 8004af2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004af6:	4313      	orrs	r3, r2
 8004af8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004afa:	79fb      	ldrb	r3, [r7, #7]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d11e      	bne.n	8004b3e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d009      	beq.n	8004b1c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	015a      	lsls	r2, r3, #5
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b14:	461a      	mov	r2, r3
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	0151      	lsls	r1, r2, #5
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	440a      	add	r2, r1
 8004b32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b3a:	6013      	str	r3, [r2, #0]
 8004b3c:	e092      	b.n	8004c64 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	0151      	lsls	r1, r2, #5
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	440a      	add	r2, r1
 8004b54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b5c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d07e      	beq.n	8004c64 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	f003 030f 	and.w	r3, r3, #15
 8004b76:	2101      	movs	r1, #1
 8004b78:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7c:	6979      	ldr	r1, [r7, #20]
 8004b7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b82:	4313      	orrs	r3, r2
 8004b84:	634b      	str	r3, [r1, #52]	; 0x34
 8004b86:	e06d      	b.n	8004c64 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	015a      	lsls	r2, r3, #5
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	4413      	add	r3, r2
 8004b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	0151      	lsls	r1, r2, #5
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	440a      	add	r2, r1
 8004b9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ba2:	0cdb      	lsrs	r3, r3, #19
 8004ba4:	04db      	lsls	r3, r3, #19
 8004ba6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	015a      	lsls	r2, r3, #5
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	4413      	add	r3, r2
 8004bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	0151      	lsls	r1, r2, #5
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	440a      	add	r2, r1
 8004bbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bc2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bc6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bca:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d003      	beq.n	8004bdc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	0151      	lsls	r1, r2, #5
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	440a      	add	r2, r1
 8004bf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bf6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bfa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c08:	691a      	ldr	r2, [r3, #16]
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c12:	6939      	ldr	r1, [r7, #16]
 8004c14:	0148      	lsls	r0, r1, #5
 8004c16:	6979      	ldr	r1, [r7, #20]
 8004c18:	4401      	add	r1, r0
 8004c1a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004c22:	79fb      	ldrb	r3, [r7, #7]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d10d      	bne.n	8004c44 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d009      	beq.n	8004c44 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	68d9      	ldr	r1, [r3, #12]
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	015a      	lsls	r2, r3, #5
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c40:	460a      	mov	r2, r1
 8004c42:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	0151      	lsls	r1, r2, #5
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	440a      	add	r2, r1
 8004c5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c62:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	371c      	adds	r7, #28
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b089      	sub	sp, #36	; 0x24
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	60f8      	str	r0, [r7, #12]
 8004c7a:	60b9      	str	r1, [r7, #8]
 8004c7c:	4611      	mov	r1, r2
 8004c7e:	461a      	mov	r2, r3
 8004c80:	460b      	mov	r3, r1
 8004c82:	71fb      	strb	r3, [r7, #7]
 8004c84:	4613      	mov	r3, r2
 8004c86:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004c90:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d11a      	bne.n	8004cce <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004c98:	88bb      	ldrh	r3, [r7, #4]
 8004c9a:	3303      	adds	r3, #3
 8004c9c:	089b      	lsrs	r3, r3, #2
 8004c9e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	61bb      	str	r3, [r7, #24]
 8004ca4:	e00f      	b.n	8004cc6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004ca6:	79fb      	ldrb	r3, [r7, #7]
 8004ca8:	031a      	lsls	r2, r3, #12
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	4413      	add	r3, r2
 8004cae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	3304      	adds	r3, #4
 8004cbe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	61bb      	str	r3, [r7, #24]
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d3eb      	bcc.n	8004ca6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3724      	adds	r7, #36	; 0x24
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b089      	sub	sp, #36	; 0x24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004cf2:	88fb      	ldrh	r3, [r7, #6]
 8004cf4:	3303      	adds	r3, #3
 8004cf6:	089b      	lsrs	r3, r3, #2
 8004cf8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	61bb      	str	r3, [r7, #24]
 8004cfe:	e00b      	b.n	8004d18 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	601a      	str	r2, [r3, #0]
    pDest++;
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	3304      	adds	r3, #4
 8004d10:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	3301      	adds	r3, #1
 8004d16:	61bb      	str	r3, [r7, #24]
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d3ef      	bcc.n	8004d00 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004d20:	69fb      	ldr	r3, [r7, #28]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3724      	adds	r7, #36	; 0x24
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b085      	sub	sp, #20
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
 8004d36:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	785b      	ldrb	r3, [r3, #1]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d12c      	bne.n	8004da4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	015a      	lsls	r2, r3, #5
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	4413      	add	r3, r2
 8004d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	db12      	blt.n	8004d82 <USB_EPSetStall+0x54>
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00f      	beq.n	8004d82 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	0151      	lsls	r1, r2, #5
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	440a      	add	r2, r1
 8004d78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d7c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d80:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	015a      	lsls	r2, r3, #5
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	4413      	add	r3, r2
 8004d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	0151      	lsls	r1, r2, #5
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	440a      	add	r2, r1
 8004d98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004da0:	6013      	str	r3, [r2, #0]
 8004da2:	e02b      	b.n	8004dfc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	db12      	blt.n	8004ddc <USB_EPSetStall+0xae>
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00f      	beq.n	8004ddc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	0151      	lsls	r1, r2, #5
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	440a      	add	r2, r1
 8004dd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dd6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004dda:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	015a      	lsls	r2, r3, #5
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	0151      	lsls	r1, r2, #5
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	440a      	add	r2, r1
 8004df2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004df6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004dfa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b085      	sub	sp, #20
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
 8004e12:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	785b      	ldrb	r3, [r3, #1]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d128      	bne.n	8004e78 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	015a      	lsls	r2, r3, #5
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	0151      	lsls	r1, r2, #5
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	440a      	add	r2, r1
 8004e3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e44:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	78db      	ldrb	r3, [r3, #3]
 8004e4a:	2b03      	cmp	r3, #3
 8004e4c:	d003      	beq.n	8004e56 <USB_EPClearStall+0x4c>
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	78db      	ldrb	r3, [r3, #3]
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d138      	bne.n	8004ec8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	0151      	lsls	r1, r2, #5
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	440a      	add	r2, r1
 8004e6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	e027      	b.n	8004ec8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	0151      	lsls	r1, r2, #5
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	440a      	add	r2, r1
 8004e8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e96:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	78db      	ldrb	r3, [r3, #3]
 8004e9c:	2b03      	cmp	r3, #3
 8004e9e:	d003      	beq.n	8004ea8 <USB_EPClearStall+0x9e>
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	78db      	ldrb	r3, [r3, #3]
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d10f      	bne.n	8004ec8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	015a      	lsls	r2, r3, #5
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	4413      	add	r3, r2
 8004eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	0151      	lsls	r1, r2, #5
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	440a      	add	r2, r1
 8004ebe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ec6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b085      	sub	sp, #20
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
 8004ede:	460b      	mov	r3, r1
 8004ee0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ef4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004ef8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	78fb      	ldrb	r3, [r7, #3]
 8004f04:	011b      	lsls	r3, r3, #4
 8004f06:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004f0a:	68f9      	ldr	r1, [r7, #12]
 8004f0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f10:	4313      	orrs	r3, r2
 8004f12:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3714      	adds	r7, #20
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b084      	sub	sp, #16
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f3c:	f023 0302 	bic.w	r3, r3, #2
 8004f40:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004f42:	2003      	movs	r0, #3
 8004f44:	f7fb fe26 	bl	8000b94 <HAL_Delay>

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b084      	sub	sp, #16
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f6c:	f043 0302 	orr.w	r3, r3, #2
 8004f70:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004f72:	2003      	movs	r0, #3
 8004f74:	f7fb fe0e 	bl	8000b94 <HAL_Delay>

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b085      	sub	sp, #20
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	4013      	ands	r3, r2
 8004f98:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3714      	adds	r7, #20
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	0c1b      	lsrs	r3, r3, #16
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3714      	adds	r7, #20
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	b29b      	uxth	r3, r3
}
 8005004:	4618      	mov	r0, r3
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	460b      	mov	r3, r1
 800501a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005020:	78fb      	ldrb	r3, [r7, #3]
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4413      	add	r3, r2
 8005028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	4013      	ands	r3, r2
 800503c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800503e:	68bb      	ldr	r3, [r7, #8]
}
 8005040:	4618      	mov	r0, r3
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800504c:	b480      	push	{r7}
 800504e:	b087      	sub	sp, #28
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	460b      	mov	r3, r1
 8005056:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800506c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800506e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005070:	78fb      	ldrb	r3, [r7, #3]
 8005072:	f003 030f 	and.w	r3, r3, #15
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	fa22 f303 	lsr.w	r3, r2, r3
 800507c:	01db      	lsls	r3, r3, #7
 800507e:	b2db      	uxtb	r3, r3
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	4313      	orrs	r3, r2
 8005084:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005086:	78fb      	ldrb	r3, [r7, #3]
 8005088:	015a      	lsls	r2, r3, #5
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	4413      	add	r3, r2
 800508e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	4013      	ands	r3, r2
 8005098:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800509a:	68bb      	ldr	r3, [r7, #8]
}
 800509c:	4618      	mov	r0, r3
 800509e:	371c      	adds	r7, #28
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	695b      	ldr	r3, [r3, #20]
 80050b4:	f003 0301 	and.w	r3, r3, #1
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050de:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80050e2:	f023 0307 	bic.w	r3, r3, #7
 80050e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
	...

0800510c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800510c:	b480      	push	{r7}
 800510e:	b087      	sub	sp, #28
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	460b      	mov	r3, r1
 8005116:	607a      	str	r2, [r7, #4]
 8005118:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	333c      	adds	r3, #60	; 0x3c
 8005122:	3304      	adds	r3, #4
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	4a26      	ldr	r2, [pc, #152]	; (80051c4 <USB_EP0_OutStart+0xb8>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d90a      	bls.n	8005146 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800513c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005140:	d101      	bne.n	8005146 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005142:	2300      	movs	r3, #0
 8005144:	e037      	b.n	80051b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800514c:	461a      	mov	r2, r3
 800514e:	2300      	movs	r3, #0
 8005150:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005160:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005164:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005174:	f043 0318 	orr.w	r3, r3, #24
 8005178:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005188:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800518c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800518e:	7afb      	ldrb	r3, [r7, #11]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d10f      	bne.n	80051b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800519a:	461a      	mov	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051ae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80051b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	371c      	adds	r7, #28
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	4f54300a 	.word	0x4f54300a

080051c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	3301      	adds	r3, #1
 80051d8:	60fb      	str	r3, [r7, #12]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	4a13      	ldr	r2, [pc, #76]	; (800522c <USB_CoreReset+0x64>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d901      	bls.n	80051e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e01b      	b.n	800521e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	daf2      	bge.n	80051d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80051ee:	2300      	movs	r3, #0
 80051f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	f043 0201 	orr.w	r2, r3, #1
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	3301      	adds	r3, #1
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4a09      	ldr	r2, [pc, #36]	; (800522c <USB_CoreReset+0x64>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d901      	bls.n	8005210 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e006      	b.n	800521e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	2b01      	cmp	r3, #1
 800521a:	d0f0      	beq.n	80051fe <USB_CoreReset+0x36>

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3714      	adds	r7, #20
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	00030d40 	.word	0x00030d40

08005230 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	460b      	mov	r3, r1
 800523a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800523c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005240:	f002 f966 	bl	8007510 <malloc>
 8005244:	4603      	mov	r3, r0
 8005246:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d105      	bne.n	800525a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005256:	2302      	movs	r3, #2
 8005258:	e066      	b.n	8005328 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	7c1b      	ldrb	r3, [r3, #16]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d119      	bne.n	800529e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800526a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800526e:	2202      	movs	r2, #2
 8005270:	2181      	movs	r1, #129	; 0x81
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f001 ffd3 	bl	800721e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800527e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005282:	2202      	movs	r2, #2
 8005284:	2101      	movs	r1, #1
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f001 ffc9 	bl	800721e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2210      	movs	r2, #16
 8005298:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800529c:	e016      	b.n	80052cc <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800529e:	2340      	movs	r3, #64	; 0x40
 80052a0:	2202      	movs	r2, #2
 80052a2:	2181      	movs	r1, #129	; 0x81
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f001 ffba 	bl	800721e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80052b0:	2340      	movs	r3, #64	; 0x40
 80052b2:	2202      	movs	r2, #2
 80052b4:	2101      	movs	r1, #1
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f001 ffb1 	bl	800721e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2210      	movs	r2, #16
 80052c8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80052cc:	2308      	movs	r3, #8
 80052ce:	2203      	movs	r2, #3
 80052d0:	2182      	movs	r1, #130	; 0x82
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f001 ffa3 	bl	800721e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	7c1b      	ldrb	r3, [r3, #16]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d109      	bne.n	8005316 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005308:	f44f 7300 	mov.w	r3, #512	; 0x200
 800530c:	2101      	movs	r1, #1
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f002 f874 	bl	80073fc <USBD_LL_PrepareReceive>
 8005314:	e007      	b.n	8005326 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800531c:	2340      	movs	r3, #64	; 0x40
 800531e:	2101      	movs	r1, #1
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f002 f86b 	bl	80073fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	460b      	mov	r3, r1
 800533a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800533c:	2300      	movs	r3, #0
 800533e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005340:	2181      	movs	r1, #129	; 0x81
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f001 ff91 	bl	800726a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800534e:	2101      	movs	r1, #1
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f001 ff8a 	bl	800726a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800535e:	2182      	movs	r1, #130	; 0x82
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f001 ff82 	bl	800726a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00e      	beq.n	800539e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005390:	4618      	mov	r0, r3
 8005392:	f002 f8c5 	bl	8007520 <free>
    pdev->pClassData = NULL;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800539e:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053b8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80053ba:	2300      	movs	r3, #0
 80053bc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80053be:	2300      	movs	r3, #0
 80053c0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80053c2:	2300      	movs	r3, #0
 80053c4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d03a      	beq.n	8005448 <USBD_CDC_Setup+0xa0>
 80053d2:	2b20      	cmp	r3, #32
 80053d4:	f040 8097 	bne.w	8005506 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	88db      	ldrh	r3, [r3, #6]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d029      	beq.n	8005434 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	b25b      	sxtb	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	da11      	bge.n	800540e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	683a      	ldr	r2, [r7, #0]
 80053f4:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80053f6:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	88d2      	ldrh	r2, [r2, #6]
 80053fc:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80053fe:	6939      	ldr	r1, [r7, #16]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	88db      	ldrh	r3, [r3, #6]
 8005404:	461a      	mov	r2, r3
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f001 fa9d 	bl	8006946 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800540c:	e082      	b.n	8005514 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	785a      	ldrb	r2, [r3, #1]
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	88db      	ldrh	r3, [r3, #6]
 800541c:	b2da      	uxtb	r2, r3
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005424:	6939      	ldr	r1, [r7, #16]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	88db      	ldrh	r3, [r3, #6]
 800542a:	461a      	mov	r2, r3
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f001 fab6 	bl	800699e <USBD_CtlPrepareRx>
    break;
 8005432:	e06f      	b.n	8005514 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	7850      	ldrb	r0, [r2, #1]
 8005440:	2200      	movs	r2, #0
 8005442:	6839      	ldr	r1, [r7, #0]
 8005444:	4798      	blx	r3
    break;
 8005446:	e065      	b.n	8005514 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	785b      	ldrb	r3, [r3, #1]
 800544c:	2b0b      	cmp	r3, #11
 800544e:	d84f      	bhi.n	80054f0 <USBD_CDC_Setup+0x148>
 8005450:	a201      	add	r2, pc, #4	; (adr r2, 8005458 <USBD_CDC_Setup+0xb0>)
 8005452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005456:	bf00      	nop
 8005458:	08005489 	.word	0x08005489
 800545c:	080054ff 	.word	0x080054ff
 8005460:	080054f1 	.word	0x080054f1
 8005464:	080054f1 	.word	0x080054f1
 8005468:	080054f1 	.word	0x080054f1
 800546c:	080054f1 	.word	0x080054f1
 8005470:	080054f1 	.word	0x080054f1
 8005474:	080054f1 	.word	0x080054f1
 8005478:	080054f1 	.word	0x080054f1
 800547c:	080054f1 	.word	0x080054f1
 8005480:	080054b1 	.word	0x080054b1
 8005484:	080054d9 	.word	0x080054d9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800548e:	2b03      	cmp	r3, #3
 8005490:	d107      	bne.n	80054a2 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005492:	f107 030c 	add.w	r3, r7, #12
 8005496:	2202      	movs	r2, #2
 8005498:	4619      	mov	r1, r3
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f001 fa53 	bl	8006946 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80054a0:	e030      	b.n	8005504 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80054a2:	6839      	ldr	r1, [r7, #0]
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f001 f9dd 	bl	8006864 <USBD_CtlError>
        ret = USBD_FAIL;
 80054aa:	2303      	movs	r3, #3
 80054ac:	75fb      	strb	r3, [r7, #23]
      break;
 80054ae:	e029      	b.n	8005504 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054b6:	2b03      	cmp	r3, #3
 80054b8:	d107      	bne.n	80054ca <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80054ba:	f107 030f 	add.w	r3, r7, #15
 80054be:	2201      	movs	r2, #1
 80054c0:	4619      	mov	r1, r3
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f001 fa3f 	bl	8006946 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80054c8:	e01c      	b.n	8005504 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80054ca:	6839      	ldr	r1, [r7, #0]
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f001 f9c9 	bl	8006864 <USBD_CtlError>
        ret = USBD_FAIL;
 80054d2:	2303      	movs	r3, #3
 80054d4:	75fb      	strb	r3, [r7, #23]
      break;
 80054d6:	e015      	b.n	8005504 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054de:	2b03      	cmp	r3, #3
 80054e0:	d00f      	beq.n	8005502 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80054e2:	6839      	ldr	r1, [r7, #0]
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f001 f9bd 	bl	8006864 <USBD_CtlError>
        ret = USBD_FAIL;
 80054ea:	2303      	movs	r3, #3
 80054ec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80054ee:	e008      	b.n	8005502 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80054f0:	6839      	ldr	r1, [r7, #0]
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f001 f9b6 	bl	8006864 <USBD_CtlError>
      ret = USBD_FAIL;
 80054f8:	2303      	movs	r3, #3
 80054fa:	75fb      	strb	r3, [r7, #23]
      break;
 80054fc:	e002      	b.n	8005504 <USBD_CDC_Setup+0x15c>
      break;
 80054fe:	bf00      	nop
 8005500:	e008      	b.n	8005514 <USBD_CDC_Setup+0x16c>
      break;
 8005502:	bf00      	nop
    }
    break;
 8005504:	e006      	b.n	8005514 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8005506:	6839      	ldr	r1, [r7, #0]
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f001 f9ab 	bl	8006864 <USBD_CtlError>
    ret = USBD_FAIL;
 800550e:	2303      	movs	r3, #3
 8005510:	75fb      	strb	r3, [r7, #23]
    break;
 8005512:	bf00      	nop
  }

  return (uint8_t)ret;
 8005514:	7dfb      	ldrb	r3, [r7, #23]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3718      	adds	r7, #24
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop

08005520 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	460b      	mov	r3, r1
 800552a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005532:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800553e:	2303      	movs	r3, #3
 8005540:	e049      	b.n	80055d6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005548:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800554a:	78fa      	ldrb	r2, [r7, #3]
 800554c:	6879      	ldr	r1, [r7, #4]
 800554e:	4613      	mov	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	440b      	add	r3, r1
 8005558:	3318      	adds	r3, #24
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d029      	beq.n	80055b4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005560:	78fa      	ldrb	r2, [r7, #3]
 8005562:	6879      	ldr	r1, [r7, #4]
 8005564:	4613      	mov	r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4413      	add	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	440b      	add	r3, r1
 800556e:	3318      	adds	r3, #24
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	78f9      	ldrb	r1, [r7, #3]
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	460b      	mov	r3, r1
 8005578:	00db      	lsls	r3, r3, #3
 800557a:	1a5b      	subs	r3, r3, r1
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	4403      	add	r3, r0
 8005580:	3344      	adds	r3, #68	; 0x44
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	fbb2 f1f3 	udiv	r1, r2, r3
 8005588:	fb03 f301 	mul.w	r3, r3, r1
 800558c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800558e:	2b00      	cmp	r3, #0
 8005590:	d110      	bne.n	80055b4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005592:	78fa      	ldrb	r2, [r7, #3]
 8005594:	6879      	ldr	r1, [r7, #4]
 8005596:	4613      	mov	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	440b      	add	r3, r1
 80055a0:	3318      	adds	r3, #24
 80055a2:	2200      	movs	r2, #0
 80055a4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80055a6:	78f9      	ldrb	r1, [r7, #3]
 80055a8:	2300      	movs	r3, #0
 80055aa:	2200      	movs	r2, #0
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f001 ff04 	bl	80073ba <USBD_LL_Transmit>
 80055b2:	e00f      	b.n	80055d4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80055d0:	78fa      	ldrb	r2, [r7, #3]
 80055d2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b084      	sub	sp, #16
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
 80055e6:	460b      	mov	r3, r1
 80055e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055f0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e015      	b.n	800562c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005600:	78fb      	ldrb	r3, [r7, #3]
 8005602:	4619      	mov	r1, r3
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f001 ff1a 	bl	800743e <USBD_LL_GetRxDataSize>
 800560a:	4602      	mov	r2, r0
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005626:	4611      	mov	r1, r2
 8005628:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005642:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d015      	beq.n	800567a <USBD_CDC_EP0_RxReady+0x46>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005654:	2bff      	cmp	r3, #255	; 0xff
 8005656:	d010      	beq.n	800567a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005666:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800566e:	b292      	uxth	r2, r2
 8005670:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	22ff      	movs	r2, #255	; 0xff
 8005676:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2243      	movs	r2, #67	; 0x43
 8005690:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005692:	4b03      	ldr	r3, [pc, #12]	; (80056a0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005694:	4618      	mov	r0, r3
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr
 80056a0:	200000a4 	.word	0x200000a4

080056a4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2243      	movs	r2, #67	; 0x43
 80056b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80056b2:	4b03      	ldr	r3, [pc, #12]	; (80056c0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	20000060 	.word	0x20000060

080056c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2243      	movs	r2, #67	; 0x43
 80056d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80056d2:	4b03      	ldr	r3, [pc, #12]	; (80056e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	200000e8 	.word	0x200000e8

080056e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	220a      	movs	r2, #10
 80056f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80056f2:	4b03      	ldr	r3, [pc, #12]	; (8005700 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	2000001c 	.word	0x2000001c

08005704 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005714:	2303      	movs	r3, #3
 8005716:	e004      	b.n	8005722 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	370c      	adds	r7, #12
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800572e:	b480      	push	{r7}
 8005730:	b087      	sub	sp, #28
 8005732:	af00      	add	r7, sp, #0
 8005734:	60f8      	str	r0, [r7, #12]
 8005736:	60b9      	str	r1, [r7, #8]
 8005738:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005740:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	371c      	adds	r7, #28
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005770:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3714      	adds	r7, #20
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005796:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005798:	2301      	movs	r3, #1
 800579a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e01a      	b.n	80057e0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d114      	bne.n	80057de <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80057d2:	2181      	movs	r1, #129	; 0x81
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f001 fdf0 	bl	80073ba <USBD_LL_Transmit>

    ret = USBD_OK;
 80057da:	2300      	movs	r3, #0
 80057dc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80057de:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005802:	2303      	movs	r3, #3
 8005804:	e016      	b.n	8005834 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	7c1b      	ldrb	r3, [r3, #16]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d109      	bne.n	8005822 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005814:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005818:	2101      	movs	r1, #1
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f001 fdee 	bl	80073fc <USBD_LL_PrepareReceive>
 8005820:	e007      	b.n	8005832 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005828:	2340      	movs	r3, #64	; 0x40
 800582a:	2101      	movs	r1, #1
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f001 fde5 	bl	80073fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	4613      	mov	r3, r2
 8005848:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d101      	bne.n	8005854 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005850:	2303      	movs	r3, #3
 8005852:	e025      	b.n	80058a0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800586c:	2b00      	cmp	r3, #0
 800586e:	d003      	beq.n	8005878 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	68ba      	ldr	r2, [r7, #8]
 8005882:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	79fa      	ldrb	r2, [r7, #7]
 8005892:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f001 fc5b 	bl	8007150 <USBD_LL_Init>
 800589a:	4603      	mov	r3, r0
 800589c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800589e:	7dfb      	ldrb	r3, [r7, #23]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3718      	adds	r7, #24
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80058b2:	2300      	movs	r3, #0
 80058b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d101      	bne.n	80058c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80058bc:	2303      	movs	r3, #3
 80058be:	e010      	b.n	80058e2 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d0:	f107 020e 	add.w	r2, r7, #14
 80058d4:	4610      	mov	r0, r2
 80058d6:	4798      	blx	r3
 80058d8:	4602      	mov	r2, r0
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b082      	sub	sp, #8
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f001 fc78 	bl	80071e8 <USBD_LL_Start>
 80058f8:	4603      	mov	r3, r0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3708      	adds	r7, #8
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005902:	b480      	push	{r7}
 8005904:	b083      	sub	sp, #12
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	460b      	mov	r3, r1
 8005922:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005924:	2303      	movs	r3, #3
 8005926:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800592e:	2b00      	cmp	r3, #0
 8005930:	d009      	beq.n	8005946 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	78fa      	ldrb	r2, [r7, #3]
 800593c:	4611      	mov	r1, r2
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	4798      	blx	r3
 8005942:	4603      	mov	r3, r0
 8005944:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005946:	7bfb      	ldrb	r3, [r7, #15]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	460b      	mov	r3, r1
 800595a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005962:	2b00      	cmp	r3, #0
 8005964:	d007      	beq.n	8005976 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	78fa      	ldrb	r2, [r7, #3]
 8005970:	4611      	mov	r1, r2
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	4798      	blx	r3
  }

  return USBD_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3708      	adds	r7, #8
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005990:	6839      	ldr	r1, [r7, #0]
 8005992:	4618      	mov	r0, r3
 8005994:	f000 ff2c 	bl	80067f0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80059a6:	461a      	mov	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80059b4:	f003 031f 	and.w	r3, r3, #31
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d00e      	beq.n	80059da <USBD_LL_SetupStage+0x5a>
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d302      	bcc.n	80059c6 <USBD_LL_SetupStage+0x46>
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d014      	beq.n	80059ee <USBD_LL_SetupStage+0x6e>
 80059c4:	e01d      	b.n	8005a02 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059cc:	4619      	mov	r1, r3
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fa18 	bl	8005e04 <USBD_StdDevReq>
 80059d4:	4603      	mov	r3, r0
 80059d6:	73fb      	strb	r3, [r7, #15]
      break;
 80059d8:	e020      	b.n	8005a1c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059e0:	4619      	mov	r1, r3
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fa7c 	bl	8005ee0 <USBD_StdItfReq>
 80059e8:	4603      	mov	r3, r0
 80059ea:	73fb      	strb	r3, [r7, #15]
      break;
 80059ec:	e016      	b.n	8005a1c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059f4:	4619      	mov	r1, r3
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 fab8 	bl	8005f6c <USBD_StdEPReq>
 80059fc:	4603      	mov	r3, r0
 80059fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005a00:	e00c      	b.n	8005a1c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	4619      	mov	r1, r3
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f001 fc49 	bl	80072a8 <USBD_LL_StallEP>
 8005a16:	4603      	mov	r3, r0
 8005a18:	73fb      	strb	r3, [r7, #15]
      break;
 8005a1a:	bf00      	nop
  }

  return ret;
 8005a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b086      	sub	sp, #24
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	60f8      	str	r0, [r7, #12]
 8005a2e:	460b      	mov	r3, r1
 8005a30:	607a      	str	r2, [r7, #4]
 8005a32:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005a34:	7afb      	ldrb	r3, [r7, #11]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d137      	bne.n	8005aaa <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005a40:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a48:	2b03      	cmp	r3, #3
 8005a4a:	d14a      	bne.n	8005ae2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	689a      	ldr	r2, [r3, #8]
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d913      	bls.n	8005a80 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	689a      	ldr	r2, [r3, #8]
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	1ad2      	subs	r2, r2, r3
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	68da      	ldr	r2, [r3, #12]
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	bf28      	it	cs
 8005a72:	4613      	movcs	r3, r2
 8005a74:	461a      	mov	r2, r3
 8005a76:	6879      	ldr	r1, [r7, #4]
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f000 ffad 	bl	80069d8 <USBD_CtlContinueRx>
 8005a7e:	e030      	b.n	8005ae2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00a      	beq.n	8005aa2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005a92:	2b03      	cmp	r3, #3
 8005a94:	d105      	bne.n	8005aa2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f000 ffa9 	bl	80069fa <USBD_CtlSendStatus>
 8005aa8:	e01b      	b.n	8005ae2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d013      	beq.n	8005ade <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005abc:	2b03      	cmp	r3, #3
 8005abe:	d10e      	bne.n	8005ade <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	7afa      	ldrb	r2, [r7, #11]
 8005aca:	4611      	mov	r1, r2
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	4798      	blx	r3
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005ad4:	7dfb      	ldrb	r3, [r7, #23]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005ada:	7dfb      	ldrb	r3, [r7, #23]
 8005adc:	e002      	b.n	8005ae4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e000      	b.n	8005ae4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3718      	adds	r7, #24
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b086      	sub	sp, #24
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	460b      	mov	r3, r1
 8005af6:	607a      	str	r2, [r7, #4]
 8005af8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005afa:	7afb      	ldrb	r3, [r7, #11]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d16a      	bne.n	8005bd6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	3314      	adds	r3, #20
 8005b04:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d155      	bne.n	8005bbc <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	689a      	ldr	r2, [r3, #8]
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d914      	bls.n	8005b46 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	689a      	ldr	r2, [r3, #8]
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	1ad2      	subs	r2, r2, r3
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	6879      	ldr	r1, [r7, #4]
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f000 ff22 	bl	800697c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b38:	2300      	movs	r3, #0
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f001 fc5c 	bl	80073fc <USBD_LL_PrepareReceive>
 8005b44:	e03a      	b.n	8005bbc <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d11c      	bne.n	8005b8c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d316      	bcc.n	8005b8c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d20f      	bcs.n	8005b8c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	2100      	movs	r1, #0
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f000 ff03 	bl	800697c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b7e:	2300      	movs	r3, #0
 8005b80:	2200      	movs	r2, #0
 8005b82:	2100      	movs	r1, #0
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f001 fc39 	bl	80073fc <USBD_LL_PrepareReceive>
 8005b8a:	e017      	b.n	8005bbc <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00a      	beq.n	8005bae <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005b9e:	2b03      	cmp	r3, #3
 8005ba0:	d105      	bne.n	8005bae <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005bae:	2180      	movs	r1, #128	; 0x80
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f001 fb79 	bl	80072a8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f000 ff32 	bl	8006a20 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d123      	bne.n	8005c0e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f7ff fe9b 	bl	8005902 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005bd4:	e01b      	b.n	8005c0e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d013      	beq.n	8005c0a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005be8:	2b03      	cmp	r3, #3
 8005bea:	d10e      	bne.n	8005c0a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	7afa      	ldrb	r2, [r7, #11]
 8005bf6:	4611      	mov	r1, r2
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	4798      	blx	r3
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005c00:	7dfb      	ldrb	r3, [r7, #23]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d003      	beq.n	8005c0e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8005c06:	7dfb      	ldrb	r3, [r7, #23]
 8005c08:	e002      	b.n	8005c10 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e000      	b.n	8005c10 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3718      	adds	r7, #24
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d009      	beq.n	8005c5c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	6852      	ldr	r2, [r2, #4]
 8005c54:	b2d2      	uxtb	r2, r2
 8005c56:	4611      	mov	r1, r2
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c5c:	2340      	movs	r3, #64	; 0x40
 8005c5e:	2200      	movs	r2, #0
 8005c60:	2100      	movs	r1, #0
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f001 fadb 	bl	800721e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2240      	movs	r2, #64	; 0x40
 8005c74:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c78:	2340      	movs	r3, #64	; 0x40
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	2180      	movs	r1, #128	; 0x80
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f001 facd 	bl	800721e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2240      	movs	r2, #64	; 0x40
 8005c8e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	78fa      	ldrb	r2, [r7, #3]
 8005caa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b083      	sub	sp, #12
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2204      	movs	r2, #4
 8005cd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cf2:	2b04      	cmp	r3, #4
 8005cf4:	d105      	bne.n	8005d02 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d1e:	2b03      	cmp	r3, #3
 8005d20:	d10b      	bne.n	8005d3a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d005      	beq.n	8005d3a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3708      	adds	r7, #8
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr

08005d5e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005d5e:	b480      	push	{r7}
 8005d60:	b083      	sub	sp, #12
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
 8005d66:	460b      	mov	r3, r1
 8005d68:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	370c      	adds	r7, #12
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b082      	sub	sp, #8
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d009      	beq.n	8005dbc <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	6852      	ldr	r2, [r2, #4]
 8005db4:	b2d2      	uxtb	r2, r2
 8005db6:	4611      	mov	r1, r2
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	4798      	blx	r3
  }

  return USBD_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b087      	sub	sp, #28
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005de4:	8a3b      	ldrh	r3, [r7, #16]
 8005de6:	021b      	lsls	r3, r3, #8
 8005de8:	b21a      	sxth	r2, r3
 8005dea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	b21b      	sxth	r3, r3
 8005df2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005df4:	89fb      	ldrh	r3, [r7, #14]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	371c      	adds	r7, #28
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
	...

08005e04 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e1a:	2b20      	cmp	r3, #32
 8005e1c:	d004      	beq.n	8005e28 <USBD_StdDevReq+0x24>
 8005e1e:	2b40      	cmp	r3, #64	; 0x40
 8005e20:	d002      	beq.n	8005e28 <USBD_StdDevReq+0x24>
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00a      	beq.n	8005e3c <USBD_StdDevReq+0x38>
 8005e26:	e050      	b.n	8005eca <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	6839      	ldr	r1, [r7, #0]
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	4798      	blx	r3
 8005e36:	4603      	mov	r3, r0
 8005e38:	73fb      	strb	r3, [r7, #15]
    break;
 8005e3a:	e04b      	b.n	8005ed4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	785b      	ldrb	r3, [r3, #1]
 8005e40:	2b09      	cmp	r3, #9
 8005e42:	d83c      	bhi.n	8005ebe <USBD_StdDevReq+0xba>
 8005e44:	a201      	add	r2, pc, #4	; (adr r2, 8005e4c <USBD_StdDevReq+0x48>)
 8005e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4a:	bf00      	nop
 8005e4c:	08005ea1 	.word	0x08005ea1
 8005e50:	08005eb5 	.word	0x08005eb5
 8005e54:	08005ebf 	.word	0x08005ebf
 8005e58:	08005eab 	.word	0x08005eab
 8005e5c:	08005ebf 	.word	0x08005ebf
 8005e60:	08005e7f 	.word	0x08005e7f
 8005e64:	08005e75 	.word	0x08005e75
 8005e68:	08005ebf 	.word	0x08005ebf
 8005e6c:	08005e97 	.word	0x08005e97
 8005e70:	08005e89 	.word	0x08005e89
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8005e74:	6839      	ldr	r1, [r7, #0]
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f9ce 	bl	8006218 <USBD_GetDescriptor>
      break;
 8005e7c:	e024      	b.n	8005ec8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8005e7e:	6839      	ldr	r1, [r7, #0]
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fb33 	bl	80064ec <USBD_SetAddress>
      break;
 8005e86:	e01f      	b.n	8005ec8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8005e88:	6839      	ldr	r1, [r7, #0]
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fb70 	bl	8006570 <USBD_SetConfig>
 8005e90:	4603      	mov	r3, r0
 8005e92:	73fb      	strb	r3, [r7, #15]
      break;
 8005e94:	e018      	b.n	8005ec8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8005e96:	6839      	ldr	r1, [r7, #0]
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 fc0d 	bl	80066b8 <USBD_GetConfig>
      break;
 8005e9e:	e013      	b.n	8005ec8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8005ea0:	6839      	ldr	r1, [r7, #0]
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 fc3c 	bl	8006720 <USBD_GetStatus>
      break;
 8005ea8:	e00e      	b.n	8005ec8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8005eaa:	6839      	ldr	r1, [r7, #0]
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 fc6a 	bl	8006786 <USBD_SetFeature>
      break;
 8005eb2:	e009      	b.n	8005ec8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8005eb4:	6839      	ldr	r1, [r7, #0]
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 fc79 	bl	80067ae <USBD_ClrFeature>
      break;
 8005ebc:	e004      	b.n	8005ec8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8005ebe:	6839      	ldr	r1, [r7, #0]
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fccf 	bl	8006864 <USBD_CtlError>
      break;
 8005ec6:	bf00      	nop
    }
    break;
 8005ec8:	e004      	b.n	8005ed4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8005eca:	6839      	ldr	r1, [r7, #0]
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 fcc9 	bl	8006864 <USBD_CtlError>
    break;
 8005ed2:	bf00      	nop
  }

  return ret;
 8005ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop

08005ee0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005eea:	2300      	movs	r3, #0
 8005eec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ef6:	2b20      	cmp	r3, #32
 8005ef8:	d003      	beq.n	8005f02 <USBD_StdItfReq+0x22>
 8005efa:	2b40      	cmp	r3, #64	; 0x40
 8005efc:	d001      	beq.n	8005f02 <USBD_StdItfReq+0x22>
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d12a      	bne.n	8005f58 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d81d      	bhi.n	8005f4a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	889b      	ldrh	r3, [r3, #4]
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d813      	bhi.n	8005f40 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	6839      	ldr	r1, [r7, #0]
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	4798      	blx	r3
 8005f26:	4603      	mov	r3, r0
 8005f28:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	88db      	ldrh	r3, [r3, #6]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d110      	bne.n	8005f54 <USBD_StdItfReq+0x74>
 8005f32:	7bfb      	ldrb	r3, [r7, #15]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10d      	bne.n	8005f54 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 fd5e 	bl	80069fa <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8005f3e:	e009      	b.n	8005f54 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8005f40:	6839      	ldr	r1, [r7, #0]
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fc8e 	bl	8006864 <USBD_CtlError>
      break;
 8005f48:	e004      	b.n	8005f54 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8005f4a:	6839      	ldr	r1, [r7, #0]
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 fc89 	bl	8006864 <USBD_CtlError>
      break;
 8005f52:	e000      	b.n	8005f56 <USBD_StdItfReq+0x76>
      break;
 8005f54:	bf00      	nop
    }
    break;
 8005f56:	e004      	b.n	8005f62 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8005f58:	6839      	ldr	r1, [r7, #0]
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fc82 	bl	8006864 <USBD_CtlError>
    break;
 8005f60:	bf00      	nop
  }

  return ret;
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005f76:	2300      	movs	r3, #0
 8005f78:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	889b      	ldrh	r3, [r3, #4]
 8005f7e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f88:	2b20      	cmp	r3, #32
 8005f8a:	d004      	beq.n	8005f96 <USBD_StdEPReq+0x2a>
 8005f8c:	2b40      	cmp	r3, #64	; 0x40
 8005f8e:	d002      	beq.n	8005f96 <USBD_StdEPReq+0x2a>
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00a      	beq.n	8005faa <USBD_StdEPReq+0x3e>
 8005f94:	e135      	b.n	8006202 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	6839      	ldr	r1, [r7, #0]
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	4798      	blx	r3
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	73fb      	strb	r3, [r7, #15]
    break;
 8005fa8:	e130      	b.n	800620c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	785b      	ldrb	r3, [r3, #1]
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d03e      	beq.n	8006030 <USBD_StdEPReq+0xc4>
 8005fb2:	2b03      	cmp	r3, #3
 8005fb4:	d002      	beq.n	8005fbc <USBD_StdEPReq+0x50>
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d077      	beq.n	80060aa <USBD_StdEPReq+0x13e>
 8005fba:	e11c      	b.n	80061f6 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d002      	beq.n	8005fcc <USBD_StdEPReq+0x60>
 8005fc6:	2b03      	cmp	r3, #3
 8005fc8:	d015      	beq.n	8005ff6 <USBD_StdEPReq+0x8a>
 8005fca:	e02b      	b.n	8006024 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fcc:	7bbb      	ldrb	r3, [r7, #14]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00c      	beq.n	8005fec <USBD_StdEPReq+0x80>
 8005fd2:	7bbb      	ldrb	r3, [r7, #14]
 8005fd4:	2b80      	cmp	r3, #128	; 0x80
 8005fd6:	d009      	beq.n	8005fec <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005fd8:	7bbb      	ldrb	r3, [r7, #14]
 8005fda:	4619      	mov	r1, r3
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f001 f963 	bl	80072a8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005fe2:	2180      	movs	r1, #128	; 0x80
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f001 f95f 	bl	80072a8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005fea:	e020      	b.n	800602e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8005fec:	6839      	ldr	r1, [r7, #0]
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fc38 	bl	8006864 <USBD_CtlError>
        break;
 8005ff4:	e01b      	b.n	800602e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	885b      	ldrh	r3, [r3, #2]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10e      	bne.n	800601c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005ffe:	7bbb      	ldrb	r3, [r7, #14]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00b      	beq.n	800601c <USBD_StdEPReq+0xb0>
 8006004:	7bbb      	ldrb	r3, [r7, #14]
 8006006:	2b80      	cmp	r3, #128	; 0x80
 8006008:	d008      	beq.n	800601c <USBD_StdEPReq+0xb0>
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	88db      	ldrh	r3, [r3, #6]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d104      	bne.n	800601c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006012:	7bbb      	ldrb	r3, [r7, #14]
 8006014:	4619      	mov	r1, r3
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f001 f946 	bl	80072a8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 fcec 	bl	80069fa <USBD_CtlSendStatus>

        break;
 8006022:	e004      	b.n	800602e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006024:	6839      	ldr	r1, [r7, #0]
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 fc1c 	bl	8006864 <USBD_CtlError>
        break;
 800602c:	bf00      	nop
      }
      break;
 800602e:	e0e7      	b.n	8006200 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006036:	2b02      	cmp	r3, #2
 8006038:	d002      	beq.n	8006040 <USBD_StdEPReq+0xd4>
 800603a:	2b03      	cmp	r3, #3
 800603c:	d015      	beq.n	800606a <USBD_StdEPReq+0xfe>
 800603e:	e02d      	b.n	800609c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006040:	7bbb      	ldrb	r3, [r7, #14]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00c      	beq.n	8006060 <USBD_StdEPReq+0xf4>
 8006046:	7bbb      	ldrb	r3, [r7, #14]
 8006048:	2b80      	cmp	r3, #128	; 0x80
 800604a:	d009      	beq.n	8006060 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800604c:	7bbb      	ldrb	r3, [r7, #14]
 800604e:	4619      	mov	r1, r3
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f001 f929 	bl	80072a8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006056:	2180      	movs	r1, #128	; 0x80
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f001 f925 	bl	80072a8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800605e:	e023      	b.n	80060a8 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8006060:	6839      	ldr	r1, [r7, #0]
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 fbfe 	bl	8006864 <USBD_CtlError>
        break;
 8006068:	e01e      	b.n	80060a8 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	885b      	ldrh	r3, [r3, #2]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d119      	bne.n	80060a6 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006072:	7bbb      	ldrb	r3, [r7, #14]
 8006074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006078:	2b00      	cmp	r3, #0
 800607a:	d004      	beq.n	8006086 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800607c:	7bbb      	ldrb	r3, [r7, #14]
 800607e:	4619      	mov	r1, r3
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f001 f930 	bl	80072e6 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fcb7 	bl	80069fa <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	6839      	ldr	r1, [r7, #0]
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	4798      	blx	r3
        }
        break;
 800609a:	e004      	b.n	80060a6 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800609c:	6839      	ldr	r1, [r7, #0]
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 fbe0 	bl	8006864 <USBD_CtlError>
        break;
 80060a4:	e000      	b.n	80060a8 <USBD_StdEPReq+0x13c>
        break;
 80060a6:	bf00      	nop
      }
      break;
 80060a8:	e0aa      	b.n	8006200 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d002      	beq.n	80060ba <USBD_StdEPReq+0x14e>
 80060b4:	2b03      	cmp	r3, #3
 80060b6:	d032      	beq.n	800611e <USBD_StdEPReq+0x1b2>
 80060b8:	e097      	b.n	80061ea <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80060ba:	7bbb      	ldrb	r3, [r7, #14]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d007      	beq.n	80060d0 <USBD_StdEPReq+0x164>
 80060c0:	7bbb      	ldrb	r3, [r7, #14]
 80060c2:	2b80      	cmp	r3, #128	; 0x80
 80060c4:	d004      	beq.n	80060d0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80060c6:	6839      	ldr	r1, [r7, #0]
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 fbcb 	bl	8006864 <USBD_CtlError>
          break;
 80060ce:	e091      	b.n	80061f4 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	da0b      	bge.n	80060f0 <USBD_StdEPReq+0x184>
 80060d8:	7bbb      	ldrb	r3, [r7, #14]
 80060da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060de:	4613      	mov	r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4413      	add	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	3310      	adds	r3, #16
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	4413      	add	r3, r2
 80060ec:	3304      	adds	r3, #4
 80060ee:	e00b      	b.n	8006108 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80060f0:	7bbb      	ldrb	r3, [r7, #14]
 80060f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060f6:	4613      	mov	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	4413      	add	r3, r2
 8006106:	3304      	adds	r3, #4
 8006108:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	2200      	movs	r2, #0
 800610e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	2202      	movs	r2, #2
 8006114:	4619      	mov	r1, r3
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 fc15 	bl	8006946 <USBD_CtlSendData>
        break;
 800611c:	e06a      	b.n	80061f4 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800611e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006122:	2b00      	cmp	r3, #0
 8006124:	da11      	bge.n	800614a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006126:	7bbb      	ldrb	r3, [r7, #14]
 8006128:	f003 020f 	and.w	r2, r3, #15
 800612c:	6879      	ldr	r1, [r7, #4]
 800612e:	4613      	mov	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4413      	add	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	440b      	add	r3, r1
 8006138:	3324      	adds	r3, #36	; 0x24
 800613a:	881b      	ldrh	r3, [r3, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d117      	bne.n	8006170 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006140:	6839      	ldr	r1, [r7, #0]
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 fb8e 	bl	8006864 <USBD_CtlError>
            break;
 8006148:	e054      	b.n	80061f4 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800614a:	7bbb      	ldrb	r3, [r7, #14]
 800614c:	f003 020f 	and.w	r2, r3, #15
 8006150:	6879      	ldr	r1, [r7, #4]
 8006152:	4613      	mov	r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	4413      	add	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	440b      	add	r3, r1
 800615c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006160:	881b      	ldrh	r3, [r3, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d104      	bne.n	8006170 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006166:	6839      	ldr	r1, [r7, #0]
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 fb7b 	bl	8006864 <USBD_CtlError>
            break;
 800616e:	e041      	b.n	80061f4 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006170:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006174:	2b00      	cmp	r3, #0
 8006176:	da0b      	bge.n	8006190 <USBD_StdEPReq+0x224>
 8006178:	7bbb      	ldrb	r3, [r7, #14]
 800617a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800617e:	4613      	mov	r3, r2
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	4413      	add	r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	3310      	adds	r3, #16
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	4413      	add	r3, r2
 800618c:	3304      	adds	r3, #4
 800618e:	e00b      	b.n	80061a8 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006190:	7bbb      	ldrb	r3, [r7, #14]
 8006192:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006196:	4613      	mov	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4413      	add	r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	4413      	add	r3, r2
 80061a6:	3304      	adds	r3, #4
 80061a8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80061aa:	7bbb      	ldrb	r3, [r7, #14]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d002      	beq.n	80061b6 <USBD_StdEPReq+0x24a>
 80061b0:	7bbb      	ldrb	r3, [r7, #14]
 80061b2:	2b80      	cmp	r3, #128	; 0x80
 80061b4:	d103      	bne.n	80061be <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	2200      	movs	r2, #0
 80061ba:	601a      	str	r2, [r3, #0]
 80061bc:	e00e      	b.n	80061dc <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80061be:	7bbb      	ldrb	r3, [r7, #14]
 80061c0:	4619      	mov	r1, r3
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f001 f8ae 	bl	8007324 <USBD_LL_IsStallEP>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	2201      	movs	r2, #1
 80061d2:	601a      	str	r2, [r3, #0]
 80061d4:	e002      	b.n	80061dc <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	2200      	movs	r2, #0
 80061da:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	2202      	movs	r2, #2
 80061e0:	4619      	mov	r1, r3
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 fbaf 	bl	8006946 <USBD_CtlSendData>
          break;
 80061e8:	e004      	b.n	80061f4 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80061ea:	6839      	ldr	r1, [r7, #0]
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 fb39 	bl	8006864 <USBD_CtlError>
        break;
 80061f2:	bf00      	nop
      }
      break;
 80061f4:	e004      	b.n	8006200 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80061f6:	6839      	ldr	r1, [r7, #0]
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fb33 	bl	8006864 <USBD_CtlError>
      break;
 80061fe:	bf00      	nop
    }
    break;
 8006200:	e004      	b.n	800620c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8006202:	6839      	ldr	r1, [r7, #0]
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 fb2d 	bl	8006864 <USBD_CtlError>
    break;
 800620a:	bf00      	nop
  }

  return ret;
 800620c:	7bfb      	ldrb	r3, [r7, #15]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
	...

08006218 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006222:	2300      	movs	r3, #0
 8006224:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006226:	2300      	movs	r3, #0
 8006228:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800622a:	2300      	movs	r3, #0
 800622c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	885b      	ldrh	r3, [r3, #2]
 8006232:	0a1b      	lsrs	r3, r3, #8
 8006234:	b29b      	uxth	r3, r3
 8006236:	3b01      	subs	r3, #1
 8006238:	2b06      	cmp	r3, #6
 800623a:	f200 8128 	bhi.w	800648e <USBD_GetDescriptor+0x276>
 800623e:	a201      	add	r2, pc, #4	; (adr r2, 8006244 <USBD_GetDescriptor+0x2c>)
 8006240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006244:	08006261 	.word	0x08006261
 8006248:	08006279 	.word	0x08006279
 800624c:	080062b9 	.word	0x080062b9
 8006250:	0800648f 	.word	0x0800648f
 8006254:	0800648f 	.word	0x0800648f
 8006258:	0800642f 	.word	0x0800642f
 800625c:	0800645b 	.word	0x0800645b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	7c12      	ldrb	r2, [r2, #16]
 800626c:	f107 0108 	add.w	r1, r7, #8
 8006270:	4610      	mov	r0, r2
 8006272:	4798      	blx	r3
 8006274:	60f8      	str	r0, [r7, #12]
    break;
 8006276:	e112      	b.n	800649e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	7c1b      	ldrb	r3, [r3, #16]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10d      	bne.n	800629c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006288:	f107 0208 	add.w	r2, r7, #8
 800628c:	4610      	mov	r0, r2
 800628e:	4798      	blx	r3
 8006290:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	3301      	adds	r3, #1
 8006296:	2202      	movs	r2, #2
 8006298:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800629a:	e100      	b.n	800649e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a4:	f107 0208 	add.w	r2, r7, #8
 80062a8:	4610      	mov	r0, r2
 80062aa:	4798      	blx	r3
 80062ac:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	3301      	adds	r3, #1
 80062b2:	2202      	movs	r2, #2
 80062b4:	701a      	strb	r2, [r3, #0]
    break;
 80062b6:	e0f2      	b.n	800649e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	885b      	ldrh	r3, [r3, #2]
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b05      	cmp	r3, #5
 80062c0:	f200 80ac 	bhi.w	800641c <USBD_GetDescriptor+0x204>
 80062c4:	a201      	add	r2, pc, #4	; (adr r2, 80062cc <USBD_GetDescriptor+0xb4>)
 80062c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ca:	bf00      	nop
 80062cc:	080062e5 	.word	0x080062e5
 80062d0:	08006319 	.word	0x08006319
 80062d4:	0800634d 	.word	0x0800634d
 80062d8:	08006381 	.word	0x08006381
 80062dc:	080063b5 	.word	0x080063b5
 80062e0:	080063e9 	.word	0x080063e9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00b      	beq.n	8006308 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	7c12      	ldrb	r2, [r2, #16]
 80062fc:	f107 0108 	add.w	r1, r7, #8
 8006300:	4610      	mov	r0, r2
 8006302:	4798      	blx	r3
 8006304:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006306:	e091      	b.n	800642c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006308:	6839      	ldr	r1, [r7, #0]
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 faaa 	bl	8006864 <USBD_CtlError>
        err++;
 8006310:	7afb      	ldrb	r3, [r7, #11]
 8006312:	3301      	adds	r3, #1
 8006314:	72fb      	strb	r3, [r7, #11]
      break;
 8006316:	e089      	b.n	800642c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00b      	beq.n	800633c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	7c12      	ldrb	r2, [r2, #16]
 8006330:	f107 0108 	add.w	r1, r7, #8
 8006334:	4610      	mov	r0, r2
 8006336:	4798      	blx	r3
 8006338:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800633a:	e077      	b.n	800642c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800633c:	6839      	ldr	r1, [r7, #0]
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fa90 	bl	8006864 <USBD_CtlError>
        err++;
 8006344:	7afb      	ldrb	r3, [r7, #11]
 8006346:	3301      	adds	r3, #1
 8006348:	72fb      	strb	r3, [r7, #11]
      break;
 800634a:	e06f      	b.n	800642c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00b      	beq.n	8006370 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	7c12      	ldrb	r2, [r2, #16]
 8006364:	f107 0108 	add.w	r1, r7, #8
 8006368:	4610      	mov	r0, r2
 800636a:	4798      	blx	r3
 800636c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800636e:	e05d      	b.n	800642c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006370:	6839      	ldr	r1, [r7, #0]
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fa76 	bl	8006864 <USBD_CtlError>
        err++;
 8006378:	7afb      	ldrb	r3, [r7, #11]
 800637a:	3301      	adds	r3, #1
 800637c:	72fb      	strb	r3, [r7, #11]
      break;
 800637e:	e055      	b.n	800642c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00b      	beq.n	80063a4 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	7c12      	ldrb	r2, [r2, #16]
 8006398:	f107 0108 	add.w	r1, r7, #8
 800639c:	4610      	mov	r0, r2
 800639e:	4798      	blx	r3
 80063a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80063a2:	e043      	b.n	800642c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80063a4:	6839      	ldr	r1, [r7, #0]
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 fa5c 	bl	8006864 <USBD_CtlError>
        err++;
 80063ac:	7afb      	ldrb	r3, [r7, #11]
 80063ae:	3301      	adds	r3, #1
 80063b0:	72fb      	strb	r3, [r7, #11]
      break;
 80063b2:	e03b      	b.n	800642c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063ba:	695b      	ldr	r3, [r3, #20]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00b      	beq.n	80063d8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	7c12      	ldrb	r2, [r2, #16]
 80063cc:	f107 0108 	add.w	r1, r7, #8
 80063d0:	4610      	mov	r0, r2
 80063d2:	4798      	blx	r3
 80063d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80063d6:	e029      	b.n	800642c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80063d8:	6839      	ldr	r1, [r7, #0]
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fa42 	bl	8006864 <USBD_CtlError>
        err++;
 80063e0:	7afb      	ldrb	r3, [r7, #11]
 80063e2:	3301      	adds	r3, #1
 80063e4:	72fb      	strb	r3, [r7, #11]
      break;
 80063e6:	e021      	b.n	800642c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00b      	beq.n	800640c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063fa:	699b      	ldr	r3, [r3, #24]
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	7c12      	ldrb	r2, [r2, #16]
 8006400:	f107 0108 	add.w	r1, r7, #8
 8006404:	4610      	mov	r0, r2
 8006406:	4798      	blx	r3
 8006408:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800640a:	e00f      	b.n	800642c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800640c:	6839      	ldr	r1, [r7, #0]
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 fa28 	bl	8006864 <USBD_CtlError>
        err++;
 8006414:	7afb      	ldrb	r3, [r7, #11]
 8006416:	3301      	adds	r3, #1
 8006418:	72fb      	strb	r3, [r7, #11]
      break;
 800641a:	e007      	b.n	800642c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800641c:	6839      	ldr	r1, [r7, #0]
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fa20 	bl	8006864 <USBD_CtlError>
      err++;
 8006424:	7afb      	ldrb	r3, [r7, #11]
 8006426:	3301      	adds	r3, #1
 8006428:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800642a:	bf00      	nop
    }
    break;
 800642c:	e037      	b.n	800649e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	7c1b      	ldrb	r3, [r3, #16]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d109      	bne.n	800644a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800643c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800643e:	f107 0208 	add.w	r2, r7, #8
 8006442:	4610      	mov	r0, r2
 8006444:	4798      	blx	r3
 8006446:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006448:	e029      	b.n	800649e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800644a:	6839      	ldr	r1, [r7, #0]
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 fa09 	bl	8006864 <USBD_CtlError>
      err++;
 8006452:	7afb      	ldrb	r3, [r7, #11]
 8006454:	3301      	adds	r3, #1
 8006456:	72fb      	strb	r3, [r7, #11]
    break;
 8006458:	e021      	b.n	800649e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	7c1b      	ldrb	r3, [r3, #16]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10d      	bne.n	800647e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646a:	f107 0208 	add.w	r2, r7, #8
 800646e:	4610      	mov	r0, r2
 8006470:	4798      	blx	r3
 8006472:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	3301      	adds	r3, #1
 8006478:	2207      	movs	r2, #7
 800647a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800647c:	e00f      	b.n	800649e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800647e:	6839      	ldr	r1, [r7, #0]
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 f9ef 	bl	8006864 <USBD_CtlError>
      err++;
 8006486:	7afb      	ldrb	r3, [r7, #11]
 8006488:	3301      	adds	r3, #1
 800648a:	72fb      	strb	r3, [r7, #11]
    break;
 800648c:	e007      	b.n	800649e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800648e:	6839      	ldr	r1, [r7, #0]
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f9e7 	bl	8006864 <USBD_CtlError>
    err++;
 8006496:	7afb      	ldrb	r3, [r7, #11]
 8006498:	3301      	adds	r3, #1
 800649a:	72fb      	strb	r3, [r7, #11]
    break;
 800649c:	bf00      	nop
  }

  if (err != 0U)
 800649e:	7afb      	ldrb	r3, [r7, #11]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d11e      	bne.n	80064e2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	88db      	ldrh	r3, [r3, #6]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d016      	beq.n	80064da <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80064ac:	893b      	ldrh	r3, [r7, #8]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00e      	beq.n	80064d0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	88da      	ldrh	r2, [r3, #6]
 80064b6:	893b      	ldrh	r3, [r7, #8]
 80064b8:	4293      	cmp	r3, r2
 80064ba:	bf28      	it	cs
 80064bc:	4613      	movcs	r3, r2
 80064be:	b29b      	uxth	r3, r3
 80064c0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80064c2:	893b      	ldrh	r3, [r7, #8]
 80064c4:	461a      	mov	r2, r3
 80064c6:	68f9      	ldr	r1, [r7, #12]
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 fa3c 	bl	8006946 <USBD_CtlSendData>
 80064ce:	e009      	b.n	80064e4 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80064d0:	6839      	ldr	r1, [r7, #0]
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f9c6 	bl	8006864 <USBD_CtlError>
 80064d8:	e004      	b.n	80064e4 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 fa8d 	bl	80069fa <USBD_CtlSendStatus>
 80064e0:	e000      	b.n	80064e4 <USBD_GetDescriptor+0x2cc>
    return;
 80064e2:	bf00      	nop
    }
  }
}
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop

080064ec <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	889b      	ldrh	r3, [r3, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d130      	bne.n	8006560 <USBD_SetAddress+0x74>
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	88db      	ldrh	r3, [r3, #6]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d12c      	bne.n	8006560 <USBD_SetAddress+0x74>
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	885b      	ldrh	r3, [r3, #2]
 800650a:	2b7f      	cmp	r3, #127	; 0x7f
 800650c:	d828      	bhi.n	8006560 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	885b      	ldrh	r3, [r3, #2]
 8006512:	b2db      	uxtb	r3, r3
 8006514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006518:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006520:	2b03      	cmp	r3, #3
 8006522:	d104      	bne.n	800652e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006524:	6839      	ldr	r1, [r7, #0]
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f99c 	bl	8006864 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800652c:	e01c      	b.n	8006568 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	7bfa      	ldrb	r2, [r7, #15]
 8006532:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006536:	7bfb      	ldrb	r3, [r7, #15]
 8006538:	4619      	mov	r1, r3
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 ff1e 	bl	800737c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 fa5a 	bl	80069fa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006546:	7bfb      	ldrb	r3, [r7, #15]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d004      	beq.n	8006556 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2202      	movs	r2, #2
 8006550:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006554:	e008      	b.n	8006568 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800655e:	e003      	b.n	8006568 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006560:	6839      	ldr	r1, [r7, #0]
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 f97e 	bl	8006864 <USBD_CtlError>
  }
}
 8006568:	bf00      	nop
 800656a:	3710      	adds	r7, #16
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800657a:	2300      	movs	r3, #0
 800657c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	885b      	ldrh	r3, [r3, #2]
 8006582:	b2da      	uxtb	r2, r3
 8006584:	4b4b      	ldr	r3, [pc, #300]	; (80066b4 <USBD_SetConfig+0x144>)
 8006586:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006588:	4b4a      	ldr	r3, [pc, #296]	; (80066b4 <USBD_SetConfig+0x144>)
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d905      	bls.n	800659c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006590:	6839      	ldr	r1, [r7, #0]
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f966 	bl	8006864 <USBD_CtlError>
    return USBD_FAIL;
 8006598:	2303      	movs	r3, #3
 800659a:	e087      	b.n	80066ac <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d002      	beq.n	80065ac <USBD_SetConfig+0x3c>
 80065a6:	2b03      	cmp	r3, #3
 80065a8:	d025      	beq.n	80065f6 <USBD_SetConfig+0x86>
 80065aa:	e071      	b.n	8006690 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80065ac:	4b41      	ldr	r3, [pc, #260]	; (80066b4 <USBD_SetConfig+0x144>)
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d01c      	beq.n	80065ee <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80065b4:	4b3f      	ldr	r3, [pc, #252]	; (80066b4 <USBD_SetConfig+0x144>)
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	461a      	mov	r2, r3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80065be:	4b3d      	ldr	r3, [pc, #244]	; (80066b4 <USBD_SetConfig+0x144>)
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	4619      	mov	r1, r3
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f7ff f9a7 	bl	8005918 <USBD_SetClassConfig>
 80065ca:	4603      	mov	r3, r0
 80065cc:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80065ce:	7bfb      	ldrb	r3, [r7, #15]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d004      	beq.n	80065de <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80065d4:	6839      	ldr	r1, [r7, #0]
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f944 	bl	8006864 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80065dc:	e065      	b.n	80066aa <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 fa0b 	bl	80069fa <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2203      	movs	r2, #3
 80065e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80065ec:	e05d      	b.n	80066aa <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 fa03 	bl	80069fa <USBD_CtlSendStatus>
    break;
 80065f4:	e059      	b.n	80066aa <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80065f6:	4b2f      	ldr	r3, [pc, #188]	; (80066b4 <USBD_SetConfig+0x144>)
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d112      	bne.n	8006624 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2202      	movs	r2, #2
 8006602:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006606:	4b2b      	ldr	r3, [pc, #172]	; (80066b4 <USBD_SetConfig+0x144>)
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	461a      	mov	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006610:	4b28      	ldr	r3, [pc, #160]	; (80066b4 <USBD_SetConfig+0x144>)
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	4619      	mov	r1, r3
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7ff f99a 	bl	8005950 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f9ec 	bl	80069fa <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006622:	e042      	b.n	80066aa <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006624:	4b23      	ldr	r3, [pc, #140]	; (80066b4 <USBD_SetConfig+0x144>)
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	461a      	mov	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	429a      	cmp	r2, r3
 8006630:	d02a      	beq.n	8006688 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	b2db      	uxtb	r3, r3
 8006638:	4619      	mov	r1, r3
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7ff f988 	bl	8005950 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006640:	4b1c      	ldr	r3, [pc, #112]	; (80066b4 <USBD_SetConfig+0x144>)
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	461a      	mov	r2, r3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800664a:	4b1a      	ldr	r3, [pc, #104]	; (80066b4 <USBD_SetConfig+0x144>)
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	4619      	mov	r1, r3
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f7ff f961 	bl	8005918 <USBD_SetClassConfig>
 8006656:	4603      	mov	r3, r0
 8006658:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800665a:	7bfb      	ldrb	r3, [r7, #15]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00f      	beq.n	8006680 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006660:	6839      	ldr	r1, [r7, #0]
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f8fe 	bl	8006864 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	b2db      	uxtb	r3, r3
 800666e:	4619      	mov	r1, r3
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f7ff f96d 	bl	8005950 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2202      	movs	r2, #2
 800667a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800667e:	e014      	b.n	80066aa <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 f9ba 	bl	80069fa <USBD_CtlSendStatus>
    break;
 8006686:	e010      	b.n	80066aa <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 f9b6 	bl	80069fa <USBD_CtlSendStatus>
    break;
 800668e:	e00c      	b.n	80066aa <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006690:	6839      	ldr	r1, [r7, #0]
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f8e6 	bl	8006864 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006698:	4b06      	ldr	r3, [pc, #24]	; (80066b4 <USBD_SetConfig+0x144>)
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	4619      	mov	r1, r3
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7ff f956 	bl	8005950 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80066a4:	2303      	movs	r3, #3
 80066a6:	73fb      	strb	r3, [r7, #15]
    break;
 80066a8:	bf00      	nop
  }

  return ret;
 80066aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	20000214 	.word	0x20000214

080066b8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	88db      	ldrh	r3, [r3, #6]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d004      	beq.n	80066d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80066ca:	6839      	ldr	r1, [r7, #0]
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f8c9 	bl	8006864 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80066d2:	e021      	b.n	8006718 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066da:	2b01      	cmp	r3, #1
 80066dc:	db17      	blt.n	800670e <USBD_GetConfig+0x56>
 80066de:	2b02      	cmp	r3, #2
 80066e0:	dd02      	ble.n	80066e8 <USBD_GetConfig+0x30>
 80066e2:	2b03      	cmp	r3, #3
 80066e4:	d00b      	beq.n	80066fe <USBD_GetConfig+0x46>
 80066e6:	e012      	b.n	800670e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	3308      	adds	r3, #8
 80066f2:	2201      	movs	r2, #1
 80066f4:	4619      	mov	r1, r3
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f925 	bl	8006946 <USBD_CtlSendData>
      break;
 80066fc:	e00c      	b.n	8006718 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	3304      	adds	r3, #4
 8006702:	2201      	movs	r2, #1
 8006704:	4619      	mov	r1, r3
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f91d 	bl	8006946 <USBD_CtlSendData>
      break;
 800670c:	e004      	b.n	8006718 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800670e:	6839      	ldr	r1, [r7, #0]
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 f8a7 	bl	8006864 <USBD_CtlError>
      break;
 8006716:	bf00      	nop
}
 8006718:	bf00      	nop
 800671a:	3708      	adds	r7, #8
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006730:	3b01      	subs	r3, #1
 8006732:	2b02      	cmp	r3, #2
 8006734:	d81e      	bhi.n	8006774 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	88db      	ldrh	r3, [r3, #6]
 800673a:	2b02      	cmp	r3, #2
 800673c:	d004      	beq.n	8006748 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800673e:	6839      	ldr	r1, [r7, #0]
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 f88f 	bl	8006864 <USBD_CtlError>
      break;
 8006746:	e01a      	b.n	800677e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006754:	2b00      	cmp	r3, #0
 8006756:	d005      	beq.n	8006764 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	f043 0202 	orr.w	r2, r3, #2
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	330c      	adds	r3, #12
 8006768:	2202      	movs	r2, #2
 800676a:	4619      	mov	r1, r3
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 f8ea 	bl	8006946 <USBD_CtlSendData>
    break;
 8006772:	e004      	b.n	800677e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006774:	6839      	ldr	r1, [r7, #0]
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f874 	bl	8006864 <USBD_CtlError>
    break;
 800677c:	bf00      	nop
  }
}
 800677e:	bf00      	nop
 8006780:	3708      	adds	r7, #8
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006786:	b580      	push	{r7, lr}
 8006788:	b082      	sub	sp, #8
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
 800678e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	885b      	ldrh	r3, [r3, #2]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d106      	bne.n	80067a6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 f92a 	bl	80069fa <USBD_CtlSendStatus>
  }
}
 80067a6:	bf00      	nop
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b082      	sub	sp, #8
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
 80067b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067be:	3b01      	subs	r3, #1
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d80b      	bhi.n	80067dc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	885b      	ldrh	r3, [r3, #2]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d10c      	bne.n	80067e6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 f910 	bl	80069fa <USBD_CtlSendStatus>
      }
      break;
 80067da:	e004      	b.n	80067e6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80067dc:	6839      	ldr	r1, [r7, #0]
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f840 	bl	8006864 <USBD_CtlError>
      break;
 80067e4:	e000      	b.n	80067e8 <USBD_ClrFeature+0x3a>
      break;
 80067e6:	bf00      	nop
  }
}
 80067e8:	bf00      	nop
 80067ea:	3708      	adds	r7, #8
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	781a      	ldrb	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	3301      	adds	r3, #1
 800680a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	781a      	ldrb	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	3301      	adds	r3, #1
 8006818:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f7ff fad3 	bl	8005dc6 <SWAPBYTE>
 8006820:	4603      	mov	r3, r0
 8006822:	461a      	mov	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	3301      	adds	r3, #1
 800682c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	3301      	adds	r3, #1
 8006832:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006834:	68f8      	ldr	r0, [r7, #12]
 8006836:	f7ff fac6 	bl	8005dc6 <SWAPBYTE>
 800683a:	4603      	mov	r3, r0
 800683c:	461a      	mov	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	3301      	adds	r3, #1
 8006846:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	3301      	adds	r3, #1
 800684c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f7ff fab9 	bl	8005dc6 <SWAPBYTE>
 8006854:	4603      	mov	r3, r0
 8006856:	461a      	mov	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	80da      	strh	r2, [r3, #6]
}
 800685c:	bf00      	nop
 800685e:	3710      	adds	r7, #16
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800686e:	2180      	movs	r1, #128	; 0x80
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 fd19 	bl	80072a8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006876:	2100      	movs	r1, #0
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 fd15 	bl	80072a8 <USBD_LL_StallEP>
}
 800687e:	bf00      	nop
 8006880:	3708      	adds	r7, #8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b086      	sub	sp, #24
 800688a:	af00      	add	r7, sp, #0
 800688c:	60f8      	str	r0, [r7, #12]
 800688e:	60b9      	str	r1, [r7, #8]
 8006890:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006892:	2300      	movs	r3, #0
 8006894:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d036      	beq.n	800690a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80068a0:	6938      	ldr	r0, [r7, #16]
 80068a2:	f000 f836 	bl	8006912 <USBD_GetLen>
 80068a6:	4603      	mov	r3, r0
 80068a8:	3301      	adds	r3, #1
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	005b      	lsls	r3, r3, #1
 80068ae:	b29a      	uxth	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80068b4:	7dfb      	ldrb	r3, [r7, #23]
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	4413      	add	r3, r2
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	7812      	ldrb	r2, [r2, #0]
 80068be:	701a      	strb	r2, [r3, #0]
  idx++;
 80068c0:	7dfb      	ldrb	r3, [r7, #23]
 80068c2:	3301      	adds	r3, #1
 80068c4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80068c6:	7dfb      	ldrb	r3, [r7, #23]
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	4413      	add	r3, r2
 80068cc:	2203      	movs	r2, #3
 80068ce:	701a      	strb	r2, [r3, #0]
  idx++;
 80068d0:	7dfb      	ldrb	r3, [r7, #23]
 80068d2:	3301      	adds	r3, #1
 80068d4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80068d6:	e013      	b.n	8006900 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80068d8:	7dfb      	ldrb	r3, [r7, #23]
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	4413      	add	r3, r2
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	7812      	ldrb	r2, [r2, #0]
 80068e2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	3301      	adds	r3, #1
 80068e8:	613b      	str	r3, [r7, #16]
    idx++;
 80068ea:	7dfb      	ldrb	r3, [r7, #23]
 80068ec:	3301      	adds	r3, #1
 80068ee:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80068f0:	7dfb      	ldrb	r3, [r7, #23]
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	4413      	add	r3, r2
 80068f6:	2200      	movs	r2, #0
 80068f8:	701a      	strb	r2, [r3, #0]
    idx++;
 80068fa:	7dfb      	ldrb	r3, [r7, #23]
 80068fc:	3301      	adds	r3, #1
 80068fe:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1e7      	bne.n	80068d8 <USBD_GetString+0x52>
 8006908:	e000      	b.n	800690c <USBD_GetString+0x86>
    return;
 800690a:	bf00      	nop
  }
}
 800690c:	3718      	adds	r7, #24
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006912:	b480      	push	{r7}
 8006914:	b085      	sub	sp, #20
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800691a:	2300      	movs	r3, #0
 800691c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006922:	e005      	b.n	8006930 <USBD_GetLen+0x1e>
  {
    len++;
 8006924:	7bfb      	ldrb	r3, [r7, #15]
 8006926:	3301      	adds	r3, #1
 8006928:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	3301      	adds	r3, #1
 800692e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1f5      	bne.n	8006924 <USBD_GetLen+0x12>
  }

  return len;
 8006938:	7bfb      	ldrb	r3, [r7, #15]
}
 800693a:	4618      	mov	r0, r3
 800693c:	3714      	adds	r7, #20
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b084      	sub	sp, #16
 800694a:	af00      	add	r7, sp, #0
 800694c:	60f8      	str	r0, [r7, #12]
 800694e:	60b9      	str	r1, [r7, #8]
 8006950:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2202      	movs	r2, #2
 8006956:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	2100      	movs	r1, #0
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f000 fd24 	bl	80073ba <USBD_LL_Transmit>

  return USBD_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	2100      	movs	r1, #0
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f000 fd13 	bl	80073ba <USBD_LL_Transmit>

  return USBD_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3710      	adds	r7, #16
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	b084      	sub	sp, #16
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	60f8      	str	r0, [r7, #12]
 80069a6:	60b9      	str	r1, [r7, #8]
 80069a8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2203      	movs	r2, #3
 80069ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	68ba      	ldr	r2, [r7, #8]
 80069c6:	2100      	movs	r1, #0
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f000 fd17 	bl	80073fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3710      	adds	r7, #16
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	2100      	movs	r1, #0
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f000 fd06 	bl	80073fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b082      	sub	sp, #8
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2204      	movs	r2, #4
 8006a06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	2100      	movs	r1, #0
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 fcd2 	bl	80073ba <USBD_LL_Transmit>

  return USBD_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3708      	adds	r7, #8
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2205      	movs	r2, #5
 8006a2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a30:	2300      	movs	r3, #0
 8006a32:	2200      	movs	r2, #0
 8006a34:	2100      	movs	r1, #0
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 fce0 	bl	80073fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3708      	adds	r7, #8
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
	...

08006a48 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	4912      	ldr	r1, [pc, #72]	; (8006a98 <MX_USB_DEVICE_Init+0x50>)
 8006a50:	4812      	ldr	r0, [pc, #72]	; (8006a9c <MX_USB_DEVICE_Init+0x54>)
 8006a52:	f7fe fef3 	bl	800583c <USBD_Init>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d001      	beq.n	8006a60 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006a5c:	f7f9 febe 	bl	80007dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006a60:	490f      	ldr	r1, [pc, #60]	; (8006aa0 <MX_USB_DEVICE_Init+0x58>)
 8006a62:	480e      	ldr	r0, [pc, #56]	; (8006a9c <MX_USB_DEVICE_Init+0x54>)
 8006a64:	f7fe ff20 	bl	80058a8 <USBD_RegisterClass>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d001      	beq.n	8006a72 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006a6e:	f7f9 feb5 	bl	80007dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006a72:	490c      	ldr	r1, [pc, #48]	; (8006aa4 <MX_USB_DEVICE_Init+0x5c>)
 8006a74:	4809      	ldr	r0, [pc, #36]	; (8006a9c <MX_USB_DEVICE_Init+0x54>)
 8006a76:	f7fe fe45 	bl	8005704 <USBD_CDC_RegisterInterface>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d001      	beq.n	8006a84 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006a80:	f7f9 feac 	bl	80007dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006a84:	4805      	ldr	r0, [pc, #20]	; (8006a9c <MX_USB_DEVICE_Init+0x54>)
 8006a86:	f7fe ff30 	bl	80058ea <USBD_Start>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d001      	beq.n	8006a94 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006a90:	f7f9 fea4 	bl	80007dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006a94:	bf00      	nop
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	20000140 	.word	0x20000140
 8006a9c:	20000320 	.word	0x20000320
 8006aa0:	20000028 	.word	0x20000028
 8006aa4:	2000012c 	.word	0x2000012c

08006aa8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006aac:	2200      	movs	r2, #0
 8006aae:	4905      	ldr	r1, [pc, #20]	; (8006ac4 <CDC_Init_FS+0x1c>)
 8006ab0:	4805      	ldr	r0, [pc, #20]	; (8006ac8 <CDC_Init_FS+0x20>)
 8006ab2:	f7fe fe3c 	bl	800572e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006ab6:	4905      	ldr	r1, [pc, #20]	; (8006acc <CDC_Init_FS+0x24>)
 8006ab8:	4803      	ldr	r0, [pc, #12]	; (8006ac8 <CDC_Init_FS+0x20>)
 8006aba:	f7fe fe51 	bl	8005760 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006abe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	200009d8 	.word	0x200009d8
 8006ac8:	20000320 	.word	0x20000320
 8006acc:	200005f0 	.word	0x200005f0

08006ad0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006ad4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	6039      	str	r1, [r7, #0]
 8006aea:	71fb      	strb	r3, [r7, #7]
 8006aec:	4613      	mov	r3, r2
 8006aee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006af0:	79fb      	ldrb	r3, [r7, #7]
 8006af2:	2b23      	cmp	r3, #35	; 0x23
 8006af4:	f200 808c 	bhi.w	8006c10 <CDC_Control_FS+0x130>
 8006af8:	a201      	add	r2, pc, #4	; (adr r2, 8006b00 <CDC_Control_FS+0x20>)
 8006afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006afe:	bf00      	nop
 8006b00:	08006c11 	.word	0x08006c11
 8006b04:	08006c11 	.word	0x08006c11
 8006b08:	08006c11 	.word	0x08006c11
 8006b0c:	08006c11 	.word	0x08006c11
 8006b10:	08006c11 	.word	0x08006c11
 8006b14:	08006c11 	.word	0x08006c11
 8006b18:	08006c11 	.word	0x08006c11
 8006b1c:	08006c11 	.word	0x08006c11
 8006b20:	08006c11 	.word	0x08006c11
 8006b24:	08006c11 	.word	0x08006c11
 8006b28:	08006c11 	.word	0x08006c11
 8006b2c:	08006c11 	.word	0x08006c11
 8006b30:	08006c11 	.word	0x08006c11
 8006b34:	08006c11 	.word	0x08006c11
 8006b38:	08006c11 	.word	0x08006c11
 8006b3c:	08006c11 	.word	0x08006c11
 8006b40:	08006c11 	.word	0x08006c11
 8006b44:	08006c11 	.word	0x08006c11
 8006b48:	08006c11 	.word	0x08006c11
 8006b4c:	08006c11 	.word	0x08006c11
 8006b50:	08006c11 	.word	0x08006c11
 8006b54:	08006c11 	.word	0x08006c11
 8006b58:	08006c11 	.word	0x08006c11
 8006b5c:	08006c11 	.word	0x08006c11
 8006b60:	08006c11 	.word	0x08006c11
 8006b64:	08006c11 	.word	0x08006c11
 8006b68:	08006c11 	.word	0x08006c11
 8006b6c:	08006c11 	.word	0x08006c11
 8006b70:	08006c11 	.word	0x08006c11
 8006b74:	08006c11 	.word	0x08006c11
 8006b78:	08006c11 	.word	0x08006c11
 8006b7c:	08006c11 	.word	0x08006c11
 8006b80:	08006b91 	.word	0x08006b91
 8006b84:	08006bcb 	.word	0x08006bcb
 8006b88:	08006c11 	.word	0x08006c11
 8006b8c:	08006c11 	.word	0x08006c11
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	tempbuf[0] = pbuf[0];
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	781a      	ldrb	r2, [r3, #0]
 8006b94:	4b22      	ldr	r3, [pc, #136]	; (8006c20 <CDC_Control_FS+0x140>)
 8006b96:	701a      	strb	r2, [r3, #0]
    	tempbuf[1] = pbuf[1];
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	785a      	ldrb	r2, [r3, #1]
 8006b9c:	4b20      	ldr	r3, [pc, #128]	; (8006c20 <CDC_Control_FS+0x140>)
 8006b9e:	705a      	strb	r2, [r3, #1]
    	tempbuf[2] = pbuf[2];
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	789a      	ldrb	r2, [r3, #2]
 8006ba4:	4b1e      	ldr	r3, [pc, #120]	; (8006c20 <CDC_Control_FS+0x140>)
 8006ba6:	709a      	strb	r2, [r3, #2]
    	tempbuf[3] = pbuf[3];
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	78da      	ldrb	r2, [r3, #3]
 8006bac:	4b1c      	ldr	r3, [pc, #112]	; (8006c20 <CDC_Control_FS+0x140>)
 8006bae:	70da      	strb	r2, [r3, #3]
    	tempbuf[4] = pbuf[4];
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	791a      	ldrb	r2, [r3, #4]
 8006bb4:	4b1a      	ldr	r3, [pc, #104]	; (8006c20 <CDC_Control_FS+0x140>)
 8006bb6:	711a      	strb	r2, [r3, #4]
    	tempbuf[5] = pbuf[5];
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	795a      	ldrb	r2, [r3, #5]
 8006bbc:	4b18      	ldr	r3, [pc, #96]	; (8006c20 <CDC_Control_FS+0x140>)
 8006bbe:	715a      	strb	r2, [r3, #5]
    	tempbuf[6] = pbuf[6];
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	799a      	ldrb	r2, [r3, #6]
 8006bc4:	4b16      	ldr	r3, [pc, #88]	; (8006c20 <CDC_Control_FS+0x140>)
 8006bc6:	719a      	strb	r2, [r3, #6]
    break;
 8006bc8:	e023      	b.n	8006c12 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = tempbuf[0];
 8006bca:	4b15      	ldr	r3, [pc, #84]	; (8006c20 <CDC_Control_FS+0x140>)
 8006bcc:	781a      	ldrb	r2, [r3, #0]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = tempbuf[1];
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	4a12      	ldr	r2, [pc, #72]	; (8006c20 <CDC_Control_FS+0x140>)
 8006bd8:	7852      	ldrb	r2, [r2, #1]
 8006bda:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = tempbuf[2];
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	3302      	adds	r3, #2
 8006be0:	4a0f      	ldr	r2, [pc, #60]	; (8006c20 <CDC_Control_FS+0x140>)
 8006be2:	7892      	ldrb	r2, [r2, #2]
 8006be4:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = tempbuf[3];
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	3303      	adds	r3, #3
 8006bea:	4a0d      	ldr	r2, [pc, #52]	; (8006c20 <CDC_Control_FS+0x140>)
 8006bec:	78d2      	ldrb	r2, [r2, #3]
 8006bee:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = tempbuf[4];
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	3304      	adds	r3, #4
 8006bf4:	4a0a      	ldr	r2, [pc, #40]	; (8006c20 <CDC_Control_FS+0x140>)
 8006bf6:	7912      	ldrb	r2, [r2, #4]
 8006bf8:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = tempbuf[5];
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	3305      	adds	r3, #5
 8006bfe:	4a08      	ldr	r2, [pc, #32]	; (8006c20 <CDC_Control_FS+0x140>)
 8006c00:	7952      	ldrb	r2, [r2, #5]
 8006c02:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = tempbuf[6];
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	3306      	adds	r3, #6
 8006c08:	4a05      	ldr	r2, [pc, #20]	; (8006c20 <CDC_Control_FS+0x140>)
 8006c0a:	7992      	ldrb	r2, [r2, #6]
 8006c0c:	701a      	strb	r2, [r3, #0]
    break;
 8006c0e:	e000      	b.n	8006c12 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006c10:	bf00      	nop
  }

  return (USBD_OK);
 8006c12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr
 8006c20:	20000218 	.word	0x20000218

08006c24 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006c2e:	6879      	ldr	r1, [r7, #4]
 8006c30:	4805      	ldr	r0, [pc, #20]	; (8006c48 <CDC_Receive_FS+0x24>)
 8006c32:	f7fe fd95 	bl	8005760 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006c36:	4804      	ldr	r0, [pc, #16]	; (8006c48 <CDC_Receive_FS+0x24>)
 8006c38:	f7fe fdd6 	bl	80057e8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006c3c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	20000320 	.word	0x20000320

08006c4c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	460b      	mov	r3, r1
 8006c56:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006c5c:	4b0d      	ldr	r3, [pc, #52]	; (8006c94 <CDC_Transmit_FS+0x48>)
 8006c5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c62:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d001      	beq.n	8006c72 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e00b      	b.n	8006c8a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006c72:	887b      	ldrh	r3, [r7, #2]
 8006c74:	461a      	mov	r2, r3
 8006c76:	6879      	ldr	r1, [r7, #4]
 8006c78:	4806      	ldr	r0, [pc, #24]	; (8006c94 <CDC_Transmit_FS+0x48>)
 8006c7a:	f7fe fd58 	bl	800572e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006c7e:	4805      	ldr	r0, [pc, #20]	; (8006c94 <CDC_Transmit_FS+0x48>)
 8006c80:	f7fe fd82 	bl	8005788 <USBD_CDC_TransmitPacket>
 8006c84:	4603      	mov	r3, r0
 8006c86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	20000320 	.word	0x20000320

08006c98 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b087      	sub	sp, #28
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006caa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	371c      	adds	r7, #28
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
	...

08006cbc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	6039      	str	r1, [r7, #0]
 8006cc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	2212      	movs	r2, #18
 8006ccc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006cce:	4b03      	ldr	r3, [pc, #12]	; (8006cdc <USBD_FS_DeviceDescriptor+0x20>)
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr
 8006cdc:	2000015c 	.word	0x2000015c

08006ce0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	6039      	str	r1, [r7, #0]
 8006cea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	2204      	movs	r2, #4
 8006cf0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006cf2:	4b03      	ldr	r3, [pc, #12]	; (8006d00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr
 8006d00:	20000170 	.word	0x20000170

08006d04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	6039      	str	r1, [r7, #0]
 8006d0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006d10:	79fb      	ldrb	r3, [r7, #7]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d105      	bne.n	8006d22 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d16:	683a      	ldr	r2, [r7, #0]
 8006d18:	4907      	ldr	r1, [pc, #28]	; (8006d38 <USBD_FS_ProductStrDescriptor+0x34>)
 8006d1a:	4808      	ldr	r0, [pc, #32]	; (8006d3c <USBD_FS_ProductStrDescriptor+0x38>)
 8006d1c:	f7ff fdb3 	bl	8006886 <USBD_GetString>
 8006d20:	e004      	b.n	8006d2c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d22:	683a      	ldr	r2, [r7, #0]
 8006d24:	4904      	ldr	r1, [pc, #16]	; (8006d38 <USBD_FS_ProductStrDescriptor+0x34>)
 8006d26:	4805      	ldr	r0, [pc, #20]	; (8006d3c <USBD_FS_ProductStrDescriptor+0x38>)
 8006d28:	f7ff fdad 	bl	8006886 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d2c:	4b02      	ldr	r3, [pc, #8]	; (8006d38 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3708      	adds	r7, #8
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	20000dc0 	.word	0x20000dc0
 8006d3c:	080076cc 	.word	0x080076cc

08006d40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	4603      	mov	r3, r0
 8006d48:	6039      	str	r1, [r7, #0]
 8006d4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006d4c:	683a      	ldr	r2, [r7, #0]
 8006d4e:	4904      	ldr	r1, [pc, #16]	; (8006d60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006d50:	4804      	ldr	r0, [pc, #16]	; (8006d64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006d52:	f7ff fd98 	bl	8006886 <USBD_GetString>
  return USBD_StrDesc;
 8006d56:	4b02      	ldr	r3, [pc, #8]	; (8006d60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3708      	adds	r7, #8
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	20000dc0 	.word	0x20000dc0
 8006d64:	080076e4 	.word	0x080076e4

08006d68 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	4603      	mov	r3, r0
 8006d70:	6039      	str	r1, [r7, #0]
 8006d72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	221a      	movs	r2, #26
 8006d78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006d7a:	f000 f843 	bl	8006e04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006d7e:	4b02      	ldr	r3, [pc, #8]	; (8006d88 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	20000174 	.word	0x20000174

08006d8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	4603      	mov	r3, r0
 8006d94:	6039      	str	r1, [r7, #0]
 8006d96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006d98:	79fb      	ldrb	r3, [r7, #7]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d105      	bne.n	8006daa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006d9e:	683a      	ldr	r2, [r7, #0]
 8006da0:	4907      	ldr	r1, [pc, #28]	; (8006dc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006da2:	4808      	ldr	r0, [pc, #32]	; (8006dc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006da4:	f7ff fd6f 	bl	8006886 <USBD_GetString>
 8006da8:	e004      	b.n	8006db4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006daa:	683a      	ldr	r2, [r7, #0]
 8006dac:	4904      	ldr	r1, [pc, #16]	; (8006dc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006dae:	4805      	ldr	r0, [pc, #20]	; (8006dc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006db0:	f7ff fd69 	bl	8006886 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006db4:	4b02      	ldr	r3, [pc, #8]	; (8006dc0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3708      	adds	r7, #8
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	20000dc0 	.word	0x20000dc0
 8006dc4:	080076f8 	.word	0x080076f8

08006dc8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	4603      	mov	r3, r0
 8006dd0:	6039      	str	r1, [r7, #0]
 8006dd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006dd4:	79fb      	ldrb	r3, [r7, #7]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d105      	bne.n	8006de6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006dda:	683a      	ldr	r2, [r7, #0]
 8006ddc:	4907      	ldr	r1, [pc, #28]	; (8006dfc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006dde:	4808      	ldr	r0, [pc, #32]	; (8006e00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006de0:	f7ff fd51 	bl	8006886 <USBD_GetString>
 8006de4:	e004      	b.n	8006df0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	4904      	ldr	r1, [pc, #16]	; (8006dfc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006dea:	4805      	ldr	r0, [pc, #20]	; (8006e00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006dec:	f7ff fd4b 	bl	8006886 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006df0:	4b02      	ldr	r3, [pc, #8]	; (8006dfc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3708      	adds	r7, #8
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	20000dc0 	.word	0x20000dc0
 8006e00:	08007704 	.word	0x08007704

08006e04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006e0a:	4b0f      	ldr	r3, [pc, #60]	; (8006e48 <Get_SerialNum+0x44>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006e10:	4b0e      	ldr	r3, [pc, #56]	; (8006e4c <Get_SerialNum+0x48>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006e16:	4b0e      	ldr	r3, [pc, #56]	; (8006e50 <Get_SerialNum+0x4c>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4413      	add	r3, r2
 8006e22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d009      	beq.n	8006e3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006e2a:	2208      	movs	r2, #8
 8006e2c:	4909      	ldr	r1, [pc, #36]	; (8006e54 <Get_SerialNum+0x50>)
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f000 f814 	bl	8006e5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006e34:	2204      	movs	r2, #4
 8006e36:	4908      	ldr	r1, [pc, #32]	; (8006e58 <Get_SerialNum+0x54>)
 8006e38:	68b8      	ldr	r0, [r7, #8]
 8006e3a:	f000 f80f 	bl	8006e5c <IntToUnicode>
  }
}
 8006e3e:	bf00      	nop
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	1fff7a10 	.word	0x1fff7a10
 8006e4c:	1fff7a14 	.word	0x1fff7a14
 8006e50:	1fff7a18 	.word	0x1fff7a18
 8006e54:	20000176 	.word	0x20000176
 8006e58:	20000186 	.word	0x20000186

08006e5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b087      	sub	sp, #28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	4613      	mov	r3, r2
 8006e68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006e6e:	2300      	movs	r3, #0
 8006e70:	75fb      	strb	r3, [r7, #23]
 8006e72:	e027      	b.n	8006ec4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	0f1b      	lsrs	r3, r3, #28
 8006e78:	2b09      	cmp	r3, #9
 8006e7a:	d80b      	bhi.n	8006e94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	0f1b      	lsrs	r3, r3, #28
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	7dfb      	ldrb	r3, [r7, #23]
 8006e84:	005b      	lsls	r3, r3, #1
 8006e86:	4619      	mov	r1, r3
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	440b      	add	r3, r1
 8006e8c:	3230      	adds	r2, #48	; 0x30
 8006e8e:	b2d2      	uxtb	r2, r2
 8006e90:	701a      	strb	r2, [r3, #0]
 8006e92:	e00a      	b.n	8006eaa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	0f1b      	lsrs	r3, r3, #28
 8006e98:	b2da      	uxtb	r2, r3
 8006e9a:	7dfb      	ldrb	r3, [r7, #23]
 8006e9c:	005b      	lsls	r3, r3, #1
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	440b      	add	r3, r1
 8006ea4:	3237      	adds	r2, #55	; 0x37
 8006ea6:	b2d2      	uxtb	r2, r2
 8006ea8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	011b      	lsls	r3, r3, #4
 8006eae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006eb0:	7dfb      	ldrb	r3, [r7, #23]
 8006eb2:	005b      	lsls	r3, r3, #1
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	4413      	add	r3, r2
 8006eba:	2200      	movs	r2, #0
 8006ebc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006ebe:	7dfb      	ldrb	r3, [r7, #23]
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	75fb      	strb	r3, [r7, #23]
 8006ec4:	7dfa      	ldrb	r2, [r7, #23]
 8006ec6:	79fb      	ldrb	r3, [r7, #7]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d3d3      	bcc.n	8006e74 <IntToUnicode+0x18>
  }
}
 8006ecc:	bf00      	nop
 8006ece:	371c      	adds	r7, #28
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b08a      	sub	sp, #40	; 0x28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ee0:	f107 0314 	add.w	r3, r7, #20
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	601a      	str	r2, [r3, #0]
 8006ee8:	605a      	str	r2, [r3, #4]
 8006eea:	609a      	str	r2, [r3, #8]
 8006eec:	60da      	str	r2, [r3, #12]
 8006eee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ef8:	d13a      	bne.n	8006f70 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006efa:	2300      	movs	r3, #0
 8006efc:	613b      	str	r3, [r7, #16]
 8006efe:	4b1e      	ldr	r3, [pc, #120]	; (8006f78 <HAL_PCD_MspInit+0xa0>)
 8006f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f02:	4a1d      	ldr	r2, [pc, #116]	; (8006f78 <HAL_PCD_MspInit+0xa0>)
 8006f04:	f043 0301 	orr.w	r3, r3, #1
 8006f08:	6313      	str	r3, [r2, #48]	; 0x30
 8006f0a:	4b1b      	ldr	r3, [pc, #108]	; (8006f78 <HAL_PCD_MspInit+0xa0>)
 8006f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f0e:	f003 0301 	and.w	r3, r3, #1
 8006f12:	613b      	str	r3, [r7, #16]
 8006f14:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006f16:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f20:	2300      	movs	r3, #0
 8006f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f24:	2303      	movs	r3, #3
 8006f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006f28:	230a      	movs	r3, #10
 8006f2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f2c:	f107 0314 	add.w	r3, r7, #20
 8006f30:	4619      	mov	r1, r3
 8006f32:	4812      	ldr	r0, [pc, #72]	; (8006f7c <HAL_PCD_MspInit+0xa4>)
 8006f34:	f7fa fa4a 	bl	80013cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006f38:	4b0f      	ldr	r3, [pc, #60]	; (8006f78 <HAL_PCD_MspInit+0xa0>)
 8006f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f3c:	4a0e      	ldr	r2, [pc, #56]	; (8006f78 <HAL_PCD_MspInit+0xa0>)
 8006f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f42:	6353      	str	r3, [r2, #52]	; 0x34
 8006f44:	2300      	movs	r3, #0
 8006f46:	60fb      	str	r3, [r7, #12]
 8006f48:	4b0b      	ldr	r3, [pc, #44]	; (8006f78 <HAL_PCD_MspInit+0xa0>)
 8006f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f4c:	4a0a      	ldr	r2, [pc, #40]	; (8006f78 <HAL_PCD_MspInit+0xa0>)
 8006f4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f52:	6453      	str	r3, [r2, #68]	; 0x44
 8006f54:	4b08      	ldr	r3, [pc, #32]	; (8006f78 <HAL_PCD_MspInit+0xa0>)
 8006f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f5c:	60fb      	str	r3, [r7, #12]
 8006f5e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006f60:	2200      	movs	r2, #0
 8006f62:	2100      	movs	r1, #0
 8006f64:	2043      	movs	r0, #67	; 0x43
 8006f66:	f7f9 ff12 	bl	8000d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006f6a:	2043      	movs	r0, #67	; 0x43
 8006f6c:	f7f9 ff2b 	bl	8000dc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006f70:	bf00      	nop
 8006f72:	3728      	adds	r7, #40	; 0x28
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	40023800 	.word	0x40023800
 8006f7c:	40020000 	.word	0x40020000

08006f80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006f94:	4619      	mov	r1, r3
 8006f96:	4610      	mov	r0, r2
 8006f98:	f7fe fcf2 	bl	8005980 <USBD_LL_SetupStage>
}
 8006f9c:	bf00      	nop
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	460b      	mov	r3, r1
 8006fae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006fb6:	78fa      	ldrb	r2, [r7, #3]
 8006fb8:	6879      	ldr	r1, [r7, #4]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	00db      	lsls	r3, r3, #3
 8006fbe:	1a9b      	subs	r3, r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	440b      	add	r3, r1
 8006fc4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	78fb      	ldrb	r3, [r7, #3]
 8006fcc:	4619      	mov	r1, r3
 8006fce:	f7fe fd2a 	bl	8005a26 <USBD_LL_DataOutStage>
}
 8006fd2:	bf00      	nop
 8006fd4:	3708      	adds	r7, #8
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b082      	sub	sp, #8
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006fec:	78fa      	ldrb	r2, [r7, #3]
 8006fee:	6879      	ldr	r1, [r7, #4]
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	00db      	lsls	r3, r3, #3
 8006ff4:	1a9b      	subs	r3, r3, r2
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	440b      	add	r3, r1
 8006ffa:	3348      	adds	r3, #72	; 0x48
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	78fb      	ldrb	r3, [r7, #3]
 8007000:	4619      	mov	r1, r3
 8007002:	f7fe fd73 	bl	8005aec <USBD_LL_DataInStage>
}
 8007006:	bf00      	nop
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b082      	sub	sp, #8
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800701c:	4618      	mov	r0, r3
 800701e:	f7fe fe77 	bl	8005d10 <USBD_LL_SOF>
}
 8007022:	bf00      	nop
 8007024:	3708      	adds	r7, #8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b084      	sub	sp, #16
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007032:	2301      	movs	r3, #1
 8007034:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	2b02      	cmp	r3, #2
 800703c:	d001      	beq.n	8007042 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800703e:	f7f9 fbcd 	bl	80007dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007048:	7bfa      	ldrb	r2, [r7, #15]
 800704a:	4611      	mov	r1, r2
 800704c:	4618      	mov	r0, r3
 800704e:	f7fe fe24 	bl	8005c9a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007058:	4618      	mov	r0, r3
 800705a:	f7fe fddd 	bl	8005c18 <USBD_LL_Reset>
}
 800705e:	bf00      	nop
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
	...

08007068 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007076:	4618      	mov	r0, r3
 8007078:	f7fe fe1f 	bl	8005cba <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	6812      	ldr	r2, [r2, #0]
 800708a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800708e:	f043 0301 	orr.w	r3, r3, #1
 8007092:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a1b      	ldr	r3, [r3, #32]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d005      	beq.n	80070a8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800709c:	4b04      	ldr	r3, [pc, #16]	; (80070b0 <HAL_PCD_SuspendCallback+0x48>)
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	4a03      	ldr	r2, [pc, #12]	; (80070b0 <HAL_PCD_SuspendCallback+0x48>)
 80070a2:	f043 0306 	orr.w	r3, r3, #6
 80070a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80070a8:	bf00      	nop
 80070aa:	3708      	adds	r7, #8
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	e000ed00 	.word	0xe000ed00

080070b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fe fe0e 	bl	8005ce4 <USBD_LL_Resume>
}
 80070c8:	bf00      	nop
 80070ca:	3708      	adds	r7, #8
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	460b      	mov	r3, r1
 80070da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80070e2:	78fa      	ldrb	r2, [r7, #3]
 80070e4:	4611      	mov	r1, r2
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7fe fe39 	bl	8005d5e <USBD_LL_IsoOUTIncomplete>
}
 80070ec:	bf00      	nop
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	460b      	mov	r3, r1
 80070fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007106:	78fa      	ldrb	r2, [r7, #3]
 8007108:	4611      	mov	r1, r2
 800710a:	4618      	mov	r0, r3
 800710c:	f7fe fe1a 	bl	8005d44 <USBD_LL_IsoINIncomplete>
}
 8007110:	bf00      	nop
 8007112:	3708      	adds	r7, #8
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007126:	4618      	mov	r0, r3
 8007128:	f7fe fe26 	bl	8005d78 <USBD_LL_DevConnected>
}
 800712c:	bf00      	nop
 800712e:	3708      	adds	r7, #8
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007142:	4618      	mov	r0, r3
 8007144:	f7fe fe23 	bl	8005d8e <USBD_LL_DevDisconnected>
}
 8007148:	bf00      	nop
 800714a:	3708      	adds	r7, #8
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d13c      	bne.n	80071da <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007160:	4a20      	ldr	r2, [pc, #128]	; (80071e4 <USBD_LL_Init+0x94>)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a1e      	ldr	r2, [pc, #120]	; (80071e4 <USBD_LL_Init+0x94>)
 800716c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007170:	4b1c      	ldr	r3, [pc, #112]	; (80071e4 <USBD_LL_Init+0x94>)
 8007172:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007176:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007178:	4b1a      	ldr	r3, [pc, #104]	; (80071e4 <USBD_LL_Init+0x94>)
 800717a:	2204      	movs	r2, #4
 800717c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800717e:	4b19      	ldr	r3, [pc, #100]	; (80071e4 <USBD_LL_Init+0x94>)
 8007180:	2202      	movs	r2, #2
 8007182:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007184:	4b17      	ldr	r3, [pc, #92]	; (80071e4 <USBD_LL_Init+0x94>)
 8007186:	2200      	movs	r2, #0
 8007188:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800718a:	4b16      	ldr	r3, [pc, #88]	; (80071e4 <USBD_LL_Init+0x94>)
 800718c:	2202      	movs	r2, #2
 800718e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007190:	4b14      	ldr	r3, [pc, #80]	; (80071e4 <USBD_LL_Init+0x94>)
 8007192:	2200      	movs	r2, #0
 8007194:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007196:	4b13      	ldr	r3, [pc, #76]	; (80071e4 <USBD_LL_Init+0x94>)
 8007198:	2200      	movs	r2, #0
 800719a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800719c:	4b11      	ldr	r3, [pc, #68]	; (80071e4 <USBD_LL_Init+0x94>)
 800719e:	2200      	movs	r2, #0
 80071a0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80071a2:	4b10      	ldr	r3, [pc, #64]	; (80071e4 <USBD_LL_Init+0x94>)
 80071a4:	2200      	movs	r2, #0
 80071a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80071a8:	4b0e      	ldr	r3, [pc, #56]	; (80071e4 <USBD_LL_Init+0x94>)
 80071aa:	2200      	movs	r2, #0
 80071ac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80071ae:	480d      	ldr	r0, [pc, #52]	; (80071e4 <USBD_LL_Init+0x94>)
 80071b0:	f7fa fbc6 	bl	8001940 <HAL_PCD_Init>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d001      	beq.n	80071be <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80071ba:	f7f9 fb0f 	bl	80007dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80071be:	2180      	movs	r1, #128	; 0x80
 80071c0:	4808      	ldr	r0, [pc, #32]	; (80071e4 <USBD_LL_Init+0x94>)
 80071c2:	f7fb fd24 	bl	8002c0e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80071c6:	2240      	movs	r2, #64	; 0x40
 80071c8:	2100      	movs	r1, #0
 80071ca:	4806      	ldr	r0, [pc, #24]	; (80071e4 <USBD_LL_Init+0x94>)
 80071cc:	f7fb fcd8 	bl	8002b80 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80071d0:	2280      	movs	r2, #128	; 0x80
 80071d2:	2101      	movs	r1, #1
 80071d4:	4803      	ldr	r0, [pc, #12]	; (80071e4 <USBD_LL_Init+0x94>)
 80071d6:	f7fb fcd3 	bl	8002b80 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3708      	adds	r7, #8
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	20000fc0 	.word	0x20000fc0

080071e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071f0:	2300      	movs	r3, #0
 80071f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071f4:	2300      	movs	r3, #0
 80071f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80071fe:	4618      	mov	r0, r3
 8007200:	f7fa fcbb 	bl	8001b7a <HAL_PCD_Start>
 8007204:	4603      	mov	r3, r0
 8007206:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007208:	7bfb      	ldrb	r3, [r7, #15]
 800720a:	4618      	mov	r0, r3
 800720c:	f000 f92a 	bl	8007464 <USBD_Get_USB_Status>
 8007210:	4603      	mov	r3, r0
 8007212:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007214:	7bbb      	ldrb	r3, [r7, #14]
}
 8007216:	4618      	mov	r0, r3
 8007218:	3710      	adds	r7, #16
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b084      	sub	sp, #16
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
 8007226:	4608      	mov	r0, r1
 8007228:	4611      	mov	r1, r2
 800722a:	461a      	mov	r2, r3
 800722c:	4603      	mov	r3, r0
 800722e:	70fb      	strb	r3, [r7, #3]
 8007230:	460b      	mov	r3, r1
 8007232:	70bb      	strb	r3, [r7, #2]
 8007234:	4613      	mov	r3, r2
 8007236:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007238:	2300      	movs	r3, #0
 800723a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800723c:	2300      	movs	r3, #0
 800723e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007246:	78bb      	ldrb	r3, [r7, #2]
 8007248:	883a      	ldrh	r2, [r7, #0]
 800724a:	78f9      	ldrb	r1, [r7, #3]
 800724c:	f7fb f89f 	bl	800238e <HAL_PCD_EP_Open>
 8007250:	4603      	mov	r3, r0
 8007252:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007254:	7bfb      	ldrb	r3, [r7, #15]
 8007256:	4618      	mov	r0, r3
 8007258:	f000 f904 	bl	8007464 <USBD_Get_USB_Status>
 800725c:	4603      	mov	r3, r0
 800725e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007260:	7bbb      	ldrb	r3, [r7, #14]
}
 8007262:	4618      	mov	r0, r3
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b084      	sub	sp, #16
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
 8007272:	460b      	mov	r3, r1
 8007274:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007276:	2300      	movs	r3, #0
 8007278:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800727a:	2300      	movs	r3, #0
 800727c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007284:	78fa      	ldrb	r2, [r7, #3]
 8007286:	4611      	mov	r1, r2
 8007288:	4618      	mov	r0, r3
 800728a:	f7fb f8e8 	bl	800245e <HAL_PCD_EP_Close>
 800728e:	4603      	mov	r3, r0
 8007290:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007292:	7bfb      	ldrb	r3, [r7, #15]
 8007294:	4618      	mov	r0, r3
 8007296:	f000 f8e5 	bl	8007464 <USBD_Get_USB_Status>
 800729a:	4603      	mov	r3, r0
 800729c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800729e:	7bbb      	ldrb	r3, [r7, #14]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	460b      	mov	r3, r1
 80072b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072b4:	2300      	movs	r3, #0
 80072b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072b8:	2300      	movs	r3, #0
 80072ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80072c2:	78fa      	ldrb	r2, [r7, #3]
 80072c4:	4611      	mov	r1, r2
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7fb f9c0 	bl	800264c <HAL_PCD_EP_SetStall>
 80072cc:	4603      	mov	r3, r0
 80072ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072d0:	7bfb      	ldrb	r3, [r7, #15]
 80072d2:	4618      	mov	r0, r3
 80072d4:	f000 f8c6 	bl	8007464 <USBD_Get_USB_Status>
 80072d8:	4603      	mov	r3, r0
 80072da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b084      	sub	sp, #16
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
 80072ee:	460b      	mov	r3, r1
 80072f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072f2:	2300      	movs	r3, #0
 80072f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072f6:	2300      	movs	r3, #0
 80072f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007300:	78fa      	ldrb	r2, [r7, #3]
 8007302:	4611      	mov	r1, r2
 8007304:	4618      	mov	r0, r3
 8007306:	f7fb fa05 	bl	8002714 <HAL_PCD_EP_ClrStall>
 800730a:	4603      	mov	r3, r0
 800730c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800730e:	7bfb      	ldrb	r3, [r7, #15]
 8007310:	4618      	mov	r0, r3
 8007312:	f000 f8a7 	bl	8007464 <USBD_Get_USB_Status>
 8007316:	4603      	mov	r3, r0
 8007318:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800731a:	7bbb      	ldrb	r3, [r7, #14]
}
 800731c:	4618      	mov	r0, r3
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	460b      	mov	r3, r1
 800732e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007336:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007338:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800733c:	2b00      	cmp	r3, #0
 800733e:	da0b      	bge.n	8007358 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007340:	78fb      	ldrb	r3, [r7, #3]
 8007342:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007346:	68f9      	ldr	r1, [r7, #12]
 8007348:	4613      	mov	r3, r2
 800734a:	00db      	lsls	r3, r3, #3
 800734c:	1a9b      	subs	r3, r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	440b      	add	r3, r1
 8007352:	333e      	adds	r3, #62	; 0x3e
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	e00b      	b.n	8007370 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007358:	78fb      	ldrb	r3, [r7, #3]
 800735a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800735e:	68f9      	ldr	r1, [r7, #12]
 8007360:	4613      	mov	r3, r2
 8007362:	00db      	lsls	r3, r3, #3
 8007364:	1a9b      	subs	r3, r3, r2
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	440b      	add	r3, r1
 800736a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800736e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007370:	4618      	mov	r0, r3
 8007372:	3714      	adds	r7, #20
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	460b      	mov	r3, r1
 8007386:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007388:	2300      	movs	r3, #0
 800738a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800738c:	2300      	movs	r3, #0
 800738e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007396:	78fa      	ldrb	r2, [r7, #3]
 8007398:	4611      	mov	r1, r2
 800739a:	4618      	mov	r0, r3
 800739c:	f7fa ffd2 	bl	8002344 <HAL_PCD_SetAddress>
 80073a0:	4603      	mov	r3, r0
 80073a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073a4:	7bfb      	ldrb	r3, [r7, #15]
 80073a6:	4618      	mov	r0, r3
 80073a8:	f000 f85c 	bl	8007464 <USBD_Get_USB_Status>
 80073ac:	4603      	mov	r3, r0
 80073ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b086      	sub	sp, #24
 80073be:	af00      	add	r7, sp, #0
 80073c0:	60f8      	str	r0, [r7, #12]
 80073c2:	607a      	str	r2, [r7, #4]
 80073c4:	603b      	str	r3, [r7, #0]
 80073c6:	460b      	mov	r3, r1
 80073c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073ca:	2300      	movs	r3, #0
 80073cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073ce:	2300      	movs	r3, #0
 80073d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80073d8:	7af9      	ldrb	r1, [r7, #11]
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	f7fb f8eb 	bl	80025b8 <HAL_PCD_EP_Transmit>
 80073e2:	4603      	mov	r3, r0
 80073e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073e6:	7dfb      	ldrb	r3, [r7, #23]
 80073e8:	4618      	mov	r0, r3
 80073ea:	f000 f83b 	bl	8007464 <USBD_Get_USB_Status>
 80073ee:	4603      	mov	r3, r0
 80073f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80073f2:	7dbb      	ldrb	r3, [r7, #22]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3718      	adds	r7, #24
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b086      	sub	sp, #24
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	607a      	str	r2, [r7, #4]
 8007406:	603b      	str	r3, [r7, #0]
 8007408:	460b      	mov	r3, r1
 800740a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800740c:	2300      	movs	r3, #0
 800740e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007410:	2300      	movs	r3, #0
 8007412:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800741a:	7af9      	ldrb	r1, [r7, #11]
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	f7fb f867 	bl	80024f2 <HAL_PCD_EP_Receive>
 8007424:	4603      	mov	r3, r0
 8007426:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007428:	7dfb      	ldrb	r3, [r7, #23]
 800742a:	4618      	mov	r0, r3
 800742c:	f000 f81a 	bl	8007464 <USBD_Get_USB_Status>
 8007430:	4603      	mov	r3, r0
 8007432:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007434:	7dbb      	ldrb	r3, [r7, #22]
}
 8007436:	4618      	mov	r0, r3
 8007438:	3718      	adds	r7, #24
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b082      	sub	sp, #8
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
 8007446:	460b      	mov	r3, r1
 8007448:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007450:	78fa      	ldrb	r2, [r7, #3]
 8007452:	4611      	mov	r1, r2
 8007454:	4618      	mov	r0, r3
 8007456:	f7fb f897 	bl	8002588 <HAL_PCD_EP_GetRxCount>
 800745a:	4603      	mov	r3, r0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3708      	adds	r7, #8
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	4603      	mov	r3, r0
 800746c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800746e:	2300      	movs	r3, #0
 8007470:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007472:	79fb      	ldrb	r3, [r7, #7]
 8007474:	2b03      	cmp	r3, #3
 8007476:	d817      	bhi.n	80074a8 <USBD_Get_USB_Status+0x44>
 8007478:	a201      	add	r2, pc, #4	; (adr r2, 8007480 <USBD_Get_USB_Status+0x1c>)
 800747a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747e:	bf00      	nop
 8007480:	08007491 	.word	0x08007491
 8007484:	08007497 	.word	0x08007497
 8007488:	0800749d 	.word	0x0800749d
 800748c:	080074a3 	.word	0x080074a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007490:	2300      	movs	r3, #0
 8007492:	73fb      	strb	r3, [r7, #15]
    break;
 8007494:	e00b      	b.n	80074ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007496:	2303      	movs	r3, #3
 8007498:	73fb      	strb	r3, [r7, #15]
    break;
 800749a:	e008      	b.n	80074ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800749c:	2301      	movs	r3, #1
 800749e:	73fb      	strb	r3, [r7, #15]
    break;
 80074a0:	e005      	b.n	80074ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80074a2:	2303      	movs	r3, #3
 80074a4:	73fb      	strb	r3, [r7, #15]
    break;
 80074a6:	e002      	b.n	80074ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80074a8:	2303      	movs	r3, #3
 80074aa:	73fb      	strb	r3, [r7, #15]
    break;
 80074ac:	bf00      	nop
  }
  return usb_status;
 80074ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3714      	adds	r7, #20
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <__errno>:
 80074bc:	4b01      	ldr	r3, [pc, #4]	; (80074c4 <__errno+0x8>)
 80074be:	6818      	ldr	r0, [r3, #0]
 80074c0:	4770      	bx	lr
 80074c2:	bf00      	nop
 80074c4:	20000190 	.word	0x20000190

080074c8 <__libc_init_array>:
 80074c8:	b570      	push	{r4, r5, r6, lr}
 80074ca:	4e0d      	ldr	r6, [pc, #52]	; (8007500 <__libc_init_array+0x38>)
 80074cc:	4c0d      	ldr	r4, [pc, #52]	; (8007504 <__libc_init_array+0x3c>)
 80074ce:	1ba4      	subs	r4, r4, r6
 80074d0:	10a4      	asrs	r4, r4, #2
 80074d2:	2500      	movs	r5, #0
 80074d4:	42a5      	cmp	r5, r4
 80074d6:	d109      	bne.n	80074ec <__libc_init_array+0x24>
 80074d8:	4e0b      	ldr	r6, [pc, #44]	; (8007508 <__libc_init_array+0x40>)
 80074da:	4c0c      	ldr	r4, [pc, #48]	; (800750c <__libc_init_array+0x44>)
 80074dc:	f000 f8ea 	bl	80076b4 <_init>
 80074e0:	1ba4      	subs	r4, r4, r6
 80074e2:	10a4      	asrs	r4, r4, #2
 80074e4:	2500      	movs	r5, #0
 80074e6:	42a5      	cmp	r5, r4
 80074e8:	d105      	bne.n	80074f6 <__libc_init_array+0x2e>
 80074ea:	bd70      	pop	{r4, r5, r6, pc}
 80074ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80074f0:	4798      	blx	r3
 80074f2:	3501      	adds	r5, #1
 80074f4:	e7ee      	b.n	80074d4 <__libc_init_array+0xc>
 80074f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80074fa:	4798      	blx	r3
 80074fc:	3501      	adds	r5, #1
 80074fe:	e7f2      	b.n	80074e6 <__libc_init_array+0x1e>
 8007500:	0800773c 	.word	0x0800773c
 8007504:	0800773c 	.word	0x0800773c
 8007508:	0800773c 	.word	0x0800773c
 800750c:	08007740 	.word	0x08007740

08007510 <malloc>:
 8007510:	4b02      	ldr	r3, [pc, #8]	; (800751c <malloc+0xc>)
 8007512:	4601      	mov	r1, r0
 8007514:	6818      	ldr	r0, [r3, #0]
 8007516:	f000 b861 	b.w	80075dc <_malloc_r>
 800751a:	bf00      	nop
 800751c:	20000190 	.word	0x20000190

08007520 <free>:
 8007520:	4b02      	ldr	r3, [pc, #8]	; (800752c <free+0xc>)
 8007522:	4601      	mov	r1, r0
 8007524:	6818      	ldr	r0, [r3, #0]
 8007526:	f000 b80b 	b.w	8007540 <_free_r>
 800752a:	bf00      	nop
 800752c:	20000190 	.word	0x20000190

08007530 <memset>:
 8007530:	4402      	add	r2, r0
 8007532:	4603      	mov	r3, r0
 8007534:	4293      	cmp	r3, r2
 8007536:	d100      	bne.n	800753a <memset+0xa>
 8007538:	4770      	bx	lr
 800753a:	f803 1b01 	strb.w	r1, [r3], #1
 800753e:	e7f9      	b.n	8007534 <memset+0x4>

08007540 <_free_r>:
 8007540:	b538      	push	{r3, r4, r5, lr}
 8007542:	4605      	mov	r5, r0
 8007544:	2900      	cmp	r1, #0
 8007546:	d045      	beq.n	80075d4 <_free_r+0x94>
 8007548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800754c:	1f0c      	subs	r4, r1, #4
 800754e:	2b00      	cmp	r3, #0
 8007550:	bfb8      	it	lt
 8007552:	18e4      	addlt	r4, r4, r3
 8007554:	f000 f8ac 	bl	80076b0 <__malloc_lock>
 8007558:	4a1f      	ldr	r2, [pc, #124]	; (80075d8 <_free_r+0x98>)
 800755a:	6813      	ldr	r3, [r2, #0]
 800755c:	4610      	mov	r0, r2
 800755e:	b933      	cbnz	r3, 800756e <_free_r+0x2e>
 8007560:	6063      	str	r3, [r4, #4]
 8007562:	6014      	str	r4, [r2, #0]
 8007564:	4628      	mov	r0, r5
 8007566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800756a:	f000 b8a2 	b.w	80076b2 <__malloc_unlock>
 800756e:	42a3      	cmp	r3, r4
 8007570:	d90c      	bls.n	800758c <_free_r+0x4c>
 8007572:	6821      	ldr	r1, [r4, #0]
 8007574:	1862      	adds	r2, r4, r1
 8007576:	4293      	cmp	r3, r2
 8007578:	bf04      	itt	eq
 800757a:	681a      	ldreq	r2, [r3, #0]
 800757c:	685b      	ldreq	r3, [r3, #4]
 800757e:	6063      	str	r3, [r4, #4]
 8007580:	bf04      	itt	eq
 8007582:	1852      	addeq	r2, r2, r1
 8007584:	6022      	streq	r2, [r4, #0]
 8007586:	6004      	str	r4, [r0, #0]
 8007588:	e7ec      	b.n	8007564 <_free_r+0x24>
 800758a:	4613      	mov	r3, r2
 800758c:	685a      	ldr	r2, [r3, #4]
 800758e:	b10a      	cbz	r2, 8007594 <_free_r+0x54>
 8007590:	42a2      	cmp	r2, r4
 8007592:	d9fa      	bls.n	800758a <_free_r+0x4a>
 8007594:	6819      	ldr	r1, [r3, #0]
 8007596:	1858      	adds	r0, r3, r1
 8007598:	42a0      	cmp	r0, r4
 800759a:	d10b      	bne.n	80075b4 <_free_r+0x74>
 800759c:	6820      	ldr	r0, [r4, #0]
 800759e:	4401      	add	r1, r0
 80075a0:	1858      	adds	r0, r3, r1
 80075a2:	4282      	cmp	r2, r0
 80075a4:	6019      	str	r1, [r3, #0]
 80075a6:	d1dd      	bne.n	8007564 <_free_r+0x24>
 80075a8:	6810      	ldr	r0, [r2, #0]
 80075aa:	6852      	ldr	r2, [r2, #4]
 80075ac:	605a      	str	r2, [r3, #4]
 80075ae:	4401      	add	r1, r0
 80075b0:	6019      	str	r1, [r3, #0]
 80075b2:	e7d7      	b.n	8007564 <_free_r+0x24>
 80075b4:	d902      	bls.n	80075bc <_free_r+0x7c>
 80075b6:	230c      	movs	r3, #12
 80075b8:	602b      	str	r3, [r5, #0]
 80075ba:	e7d3      	b.n	8007564 <_free_r+0x24>
 80075bc:	6820      	ldr	r0, [r4, #0]
 80075be:	1821      	adds	r1, r4, r0
 80075c0:	428a      	cmp	r2, r1
 80075c2:	bf04      	itt	eq
 80075c4:	6811      	ldreq	r1, [r2, #0]
 80075c6:	6852      	ldreq	r2, [r2, #4]
 80075c8:	6062      	str	r2, [r4, #4]
 80075ca:	bf04      	itt	eq
 80075cc:	1809      	addeq	r1, r1, r0
 80075ce:	6021      	streq	r1, [r4, #0]
 80075d0:	605c      	str	r4, [r3, #4]
 80075d2:	e7c7      	b.n	8007564 <_free_r+0x24>
 80075d4:	bd38      	pop	{r3, r4, r5, pc}
 80075d6:	bf00      	nop
 80075d8:	20000220 	.word	0x20000220

080075dc <_malloc_r>:
 80075dc:	b570      	push	{r4, r5, r6, lr}
 80075de:	1ccd      	adds	r5, r1, #3
 80075e0:	f025 0503 	bic.w	r5, r5, #3
 80075e4:	3508      	adds	r5, #8
 80075e6:	2d0c      	cmp	r5, #12
 80075e8:	bf38      	it	cc
 80075ea:	250c      	movcc	r5, #12
 80075ec:	2d00      	cmp	r5, #0
 80075ee:	4606      	mov	r6, r0
 80075f0:	db01      	blt.n	80075f6 <_malloc_r+0x1a>
 80075f2:	42a9      	cmp	r1, r5
 80075f4:	d903      	bls.n	80075fe <_malloc_r+0x22>
 80075f6:	230c      	movs	r3, #12
 80075f8:	6033      	str	r3, [r6, #0]
 80075fa:	2000      	movs	r0, #0
 80075fc:	bd70      	pop	{r4, r5, r6, pc}
 80075fe:	f000 f857 	bl	80076b0 <__malloc_lock>
 8007602:	4a21      	ldr	r2, [pc, #132]	; (8007688 <_malloc_r+0xac>)
 8007604:	6814      	ldr	r4, [r2, #0]
 8007606:	4621      	mov	r1, r4
 8007608:	b991      	cbnz	r1, 8007630 <_malloc_r+0x54>
 800760a:	4c20      	ldr	r4, [pc, #128]	; (800768c <_malloc_r+0xb0>)
 800760c:	6823      	ldr	r3, [r4, #0]
 800760e:	b91b      	cbnz	r3, 8007618 <_malloc_r+0x3c>
 8007610:	4630      	mov	r0, r6
 8007612:	f000 f83d 	bl	8007690 <_sbrk_r>
 8007616:	6020      	str	r0, [r4, #0]
 8007618:	4629      	mov	r1, r5
 800761a:	4630      	mov	r0, r6
 800761c:	f000 f838 	bl	8007690 <_sbrk_r>
 8007620:	1c43      	adds	r3, r0, #1
 8007622:	d124      	bne.n	800766e <_malloc_r+0x92>
 8007624:	230c      	movs	r3, #12
 8007626:	6033      	str	r3, [r6, #0]
 8007628:	4630      	mov	r0, r6
 800762a:	f000 f842 	bl	80076b2 <__malloc_unlock>
 800762e:	e7e4      	b.n	80075fa <_malloc_r+0x1e>
 8007630:	680b      	ldr	r3, [r1, #0]
 8007632:	1b5b      	subs	r3, r3, r5
 8007634:	d418      	bmi.n	8007668 <_malloc_r+0x8c>
 8007636:	2b0b      	cmp	r3, #11
 8007638:	d90f      	bls.n	800765a <_malloc_r+0x7e>
 800763a:	600b      	str	r3, [r1, #0]
 800763c:	50cd      	str	r5, [r1, r3]
 800763e:	18cc      	adds	r4, r1, r3
 8007640:	4630      	mov	r0, r6
 8007642:	f000 f836 	bl	80076b2 <__malloc_unlock>
 8007646:	f104 000b 	add.w	r0, r4, #11
 800764a:	1d23      	adds	r3, r4, #4
 800764c:	f020 0007 	bic.w	r0, r0, #7
 8007650:	1ac3      	subs	r3, r0, r3
 8007652:	d0d3      	beq.n	80075fc <_malloc_r+0x20>
 8007654:	425a      	negs	r2, r3
 8007656:	50e2      	str	r2, [r4, r3]
 8007658:	e7d0      	b.n	80075fc <_malloc_r+0x20>
 800765a:	428c      	cmp	r4, r1
 800765c:	684b      	ldr	r3, [r1, #4]
 800765e:	bf16      	itet	ne
 8007660:	6063      	strne	r3, [r4, #4]
 8007662:	6013      	streq	r3, [r2, #0]
 8007664:	460c      	movne	r4, r1
 8007666:	e7eb      	b.n	8007640 <_malloc_r+0x64>
 8007668:	460c      	mov	r4, r1
 800766a:	6849      	ldr	r1, [r1, #4]
 800766c:	e7cc      	b.n	8007608 <_malloc_r+0x2c>
 800766e:	1cc4      	adds	r4, r0, #3
 8007670:	f024 0403 	bic.w	r4, r4, #3
 8007674:	42a0      	cmp	r0, r4
 8007676:	d005      	beq.n	8007684 <_malloc_r+0xa8>
 8007678:	1a21      	subs	r1, r4, r0
 800767a:	4630      	mov	r0, r6
 800767c:	f000 f808 	bl	8007690 <_sbrk_r>
 8007680:	3001      	adds	r0, #1
 8007682:	d0cf      	beq.n	8007624 <_malloc_r+0x48>
 8007684:	6025      	str	r5, [r4, #0]
 8007686:	e7db      	b.n	8007640 <_malloc_r+0x64>
 8007688:	20000220 	.word	0x20000220
 800768c:	20000224 	.word	0x20000224

08007690 <_sbrk_r>:
 8007690:	b538      	push	{r3, r4, r5, lr}
 8007692:	4c06      	ldr	r4, [pc, #24]	; (80076ac <_sbrk_r+0x1c>)
 8007694:	2300      	movs	r3, #0
 8007696:	4605      	mov	r5, r0
 8007698:	4608      	mov	r0, r1
 800769a:	6023      	str	r3, [r4, #0]
 800769c:	f7f9 f91a 	bl	80008d4 <_sbrk>
 80076a0:	1c43      	adds	r3, r0, #1
 80076a2:	d102      	bne.n	80076aa <_sbrk_r+0x1a>
 80076a4:	6823      	ldr	r3, [r4, #0]
 80076a6:	b103      	cbz	r3, 80076aa <_sbrk_r+0x1a>
 80076a8:	602b      	str	r3, [r5, #0]
 80076aa:	bd38      	pop	{r3, r4, r5, pc}
 80076ac:	200013c8 	.word	0x200013c8

080076b0 <__malloc_lock>:
 80076b0:	4770      	bx	lr

080076b2 <__malloc_unlock>:
 80076b2:	4770      	bx	lr

080076b4 <_init>:
 80076b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076b6:	bf00      	nop
 80076b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ba:	bc08      	pop	{r3}
 80076bc:	469e      	mov	lr, r3
 80076be:	4770      	bx	lr

080076c0 <_fini>:
 80076c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076c2:	bf00      	nop
 80076c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076c6:	bc08      	pop	{r3}
 80076c8:	469e      	mov	lr, r3
 80076ca:	4770      	bx	lr
