
VibrationAnalysis446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005854  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08005a24  08005a24  00015a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a98  08005a98  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005a98  08005a98  00015a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005aa0  08005aa0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005aa0  08005aa0  00015aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005aa4  08005aa4  00015aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005aa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005fd0  20000074  08005b1c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006044  08005b1c  00026044  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108b5  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002651  00000000  00000000  00030959  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fe0  00000000  00000000  00032fb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ea8  00000000  00000000  00033f90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022de4  00000000  00000000  00034e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000da38  00000000  00000000  00057c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d280c  00000000  00000000  00065654  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00137e60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000451c  00000000  00000000  00137edc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005a0c 	.word	0x08005a0c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08005a0c 	.word	0x08005a0c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
void MX_DMA_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	4b2f      	ldr	r3, [pc, #188]	; (8000678 <MX_DMA_Init+0xc8>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a2e      	ldr	r2, [pc, #184]	; (8000678 <MX_DMA_Init+0xc8>)
 80005c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b2c      	ldr	r3, [pc, #176]	; (8000678 <MX_DMA_Init+0xc8>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	603b      	str	r3, [r7, #0]
 80005d6:	4b28      	ldr	r3, [pc, #160]	; (8000678 <MX_DMA_Init+0xc8>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a27      	ldr	r2, [pc, #156]	; (8000678 <MX_DMA_Init+0xc8>)
 80005dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b25      	ldr	r3, [pc, #148]	; (8000678 <MX_DMA_Init+0xc8>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 80005ee:	4b23      	ldr	r3, [pc, #140]	; (800067c <MX_DMA_Init+0xcc>)
 80005f0:	4a23      	ldr	r2, [pc, #140]	; (8000680 <MX_DMA_Init+0xd0>)
 80005f2:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 80005f4:	4b21      	ldr	r3, [pc, #132]	; (800067c <MX_DMA_Init+0xcc>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80005fa:	4b20      	ldr	r3, [pc, #128]	; (800067c <MX_DMA_Init+0xcc>)
 80005fc:	2280      	movs	r2, #128	; 0x80
 80005fe:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000600:	4b1e      	ldr	r3, [pc, #120]	; (800067c <MX_DMA_Init+0xcc>)
 8000602:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000606:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000608:	4b1c      	ldr	r3, [pc, #112]	; (800067c <MX_DMA_Init+0xcc>)
 800060a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800060e:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000610:	4b1a      	ldr	r3, [pc, #104]	; (800067c <MX_DMA_Init+0xcc>)
 8000612:	2200      	movs	r2, #0
 8000614:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000616:	4b19      	ldr	r3, [pc, #100]	; (800067c <MX_DMA_Init+0xcc>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 800061c:	4b17      	ldr	r3, [pc, #92]	; (800067c <MX_DMA_Init+0xcc>)
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 8000622:	4b16      	ldr	r3, [pc, #88]	; (800067c <MX_DMA_Init+0xcc>)
 8000624:	2200      	movs	r2, #0
 8000626:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000628:	4b14      	ldr	r3, [pc, #80]	; (800067c <MX_DMA_Init+0xcc>)
 800062a:	2204      	movs	r2, #4
 800062c:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800062e:	4b13      	ldr	r3, [pc, #76]	; (800067c <MX_DMA_Init+0xcc>)
 8000630:	2203      	movs	r2, #3
 8000632:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_DMA_Init+0xcc>)
 8000636:	2200      	movs	r2, #0
 8000638:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <MX_DMA_Init+0xcc>)
 800063c:	2200      	movs	r2, #0
 800063e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000640:	480e      	ldr	r0, [pc, #56]	; (800067c <MX_DMA_Init+0xcc>)
 8000642:	f001 f85f 	bl	8001704 <HAL_DMA_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_DMA_Init+0xa0>
  {
    Error_Handler();
 800064c:	f000 fcaa 	bl	8000fa4 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000650:	2200      	movs	r2, #0
 8000652:	2100      	movs	r1, #0
 8000654:	2011      	movs	r0, #17
 8000656:	f001 f81e 	bl	8001696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800065a:	2011      	movs	r0, #17
 800065c:	f001 f837 	bl	80016ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000660:	2200      	movs	r2, #0
 8000662:	2100      	movs	r1, #0
 8000664:	2038      	movs	r0, #56	; 0x38
 8000666:	f001 f816 	bl	8001696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800066a:	2038      	movs	r0, #56	; 0x38
 800066c:	f001 f82f 	bl	80016ce <HAL_NVIC_EnableIRQ>

}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40023800 	.word	0x40023800
 800067c:	200000a8 	.word	0x200000a8
 8000680:	40026410 	.word	0x40026410

08000684 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	4b26      	ldr	r3, [pc, #152]	; (8000738 <MX_GPIO_Init+0xb4>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a25      	ldr	r2, [pc, #148]	; (8000738 <MX_GPIO_Init+0xb4>)
 80006a4:	f043 0304 	orr.w	r3, r3, #4
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b23      	ldr	r3, [pc, #140]	; (8000738 <MX_GPIO_Init+0xb4>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0304 	and.w	r3, r3, #4
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <MX_GPIO_Init+0xb4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a1e      	ldr	r2, [pc, #120]	; (8000738 <MX_GPIO_Init+0xb4>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <MX_GPIO_Init+0xb4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	4b18      	ldr	r3, [pc, #96]	; (8000738 <MX_GPIO_Init+0xb4>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a17      	ldr	r2, [pc, #92]	; (8000738 <MX_GPIO_Init+0xb4>)
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b15      	ldr	r3, [pc, #84]	; (8000738 <MX_GPIO_Init+0xb4>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0302 	and.w	r3, r3, #2
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2140      	movs	r1, #64	; 0x40
 80006f2:	4812      	ldr	r0, [pc, #72]	; (800073c <MX_GPIO_Init+0xb8>)
 80006f4:	f001 fd7c 	bl	80021f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	4619      	mov	r1, r3
 800070c:	480c      	ldr	r0, [pc, #48]	; (8000740 <MX_GPIO_Init+0xbc>)
 800070e:	f001 fbdd 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000712:	2340      	movs	r3, #64	; 0x40
 8000714:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000716:	2301      	movs	r3, #1
 8000718:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071e:	2303      	movs	r3, #3
 8000720:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000722:	f107 030c 	add.w	r3, r7, #12
 8000726:	4619      	mov	r1, r3
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_GPIO_Init+0xb8>)
 800072a:	f001 fbcf 	bl	8001ecc <HAL_GPIO_Init>

}
 800072e:	bf00      	nop
 8000730:	3720      	adds	r7, #32
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800
 800073c:	40020400 	.word	0x40020400
 8000740:	40020800 	.word	0x40020800

08000744 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_I2C1_Init+0x50>)
 800074a:	4a13      	ldr	r2, [pc, #76]	; (8000798 <MX_I2C1_Init+0x54>)
 800074c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_I2C1_Init+0x50>)
 8000750:	4a12      	ldr	r2, [pc, #72]	; (800079c <MX_I2C1_Init+0x58>)
 8000752:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_I2C1_Init+0x50>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_I2C1_Init+0x50>)
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_I2C1_Init+0x50>)
 8000762:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000766:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000768:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <MX_I2C1_Init+0x50>)
 800076a:	2200      	movs	r2, #0
 800076c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_I2C1_Init+0x50>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <MX_I2C1_Init+0x50>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_I2C1_Init+0x50>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <MX_I2C1_Init+0x50>)
 8000782:	f001 fd4f 	bl	8002224 <HAL_I2C_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800078c:	f000 fc0a 	bl	8000fa4 <Error_Handler>
  }

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000108 	.word	0x20000108
 8000798:	40005400 	.word	0x40005400
 800079c:	00061a80 	.word	0x00061a80

080007a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	; 0x28
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a19      	ldr	r2, [pc, #100]	; (8000824 <HAL_I2C_MspInit+0x84>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d12c      	bne.n	800081c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	4b18      	ldr	r3, [pc, #96]	; (8000828 <HAL_I2C_MspInit+0x88>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a17      	ldr	r2, [pc, #92]	; (8000828 <HAL_I2C_MspInit+0x88>)
 80007cc:	f043 0302 	orr.w	r3, r3, #2
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <HAL_I2C_MspInit+0x88>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0302 	and.w	r3, r3, #2
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007e4:	2312      	movs	r3, #18
 80007e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ec:	2303      	movs	r3, #3
 80007ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007f0:	2304      	movs	r3, #4
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	480c      	ldr	r0, [pc, #48]	; (800082c <HAL_I2C_MspInit+0x8c>)
 80007fc:	f001 fb66 	bl	8001ecc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <HAL_I2C_MspInit+0x88>)
 8000806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000808:	4a07      	ldr	r2, [pc, #28]	; (8000828 <HAL_I2C_MspInit+0x88>)
 800080a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800080e:	6413      	str	r3, [r2, #64]	; 0x40
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <HAL_I2C_MspInit+0x88>)
 8000812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800081c:	bf00      	nop
 800081e:	3728      	adds	r7, #40	; 0x28
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40005400 	.word	0x40005400
 8000828:	40023800 	.word	0x40023800
 800082c:	40020400 	.word	0x40020400

08000830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000830:	b5b0      	push	{r4, r5, r7, lr}
 8000832:	f5ad 4dbb 	sub.w	sp, sp, #23936	; 0x5d80
 8000836:	b098      	sub	sp, #96	; 0x60
 8000838:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

	uint16_t lsmaddr = LSM6DS3_ADDRESS << 1;
 800083a:	23d4      	movs	r3, #212	; 0xd4
 800083c:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
 8000840:	f102 024a 	add.w	r2, r2, #74	; 0x4a
 8000844:	8013      	strh	r3, [r2, #0]
	uint16_t mpu6050addr = MPU6050_ADDRESS_AD0_LOW << 1;
 8000846:	23d0      	movs	r3, #208	; 0xd0
 8000848:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
 800084c:	f102 0248 	add.w	r2, r2, #72	; 0x48
 8000850:	8013      	strh	r3, [r2, #0]
	int16_t x_val = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
 8000858:	f102 0246 	add.w	r2, r2, #70	; 0x46
 800085c:	8013      	strh	r3, [r2, #0]
	int16_t y_val = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
 8000864:	f102 0244 	add.w	r2, r2, #68	; 0x44
 8000868:	8013      	strh	r3, [r2, #0]
	int16_t z_val = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
 8000870:	f102 0242 	add.w	r2, r2, #66	; 0x42
 8000874:	8013      	strh	r3, [r2, #0]
	uint16_t datasize = sizeof(data);
 8000876:	f645 53c0 	movw	r3, #24000	; 0x5dc0
 800087a:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
 800087e:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8000882:	8013      	strh	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000884:	f000 fd98 	bl	80013b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000888:	f000 fae4 	bl	8000e54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088c:	f7ff fefa 	bl	8000684 <MX_GPIO_Init>
  MX_DMA_Init();
 8000890:	f7ff fe8e 	bl	80005b0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000894:	f7ff ff56 	bl	8000744 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000898:	f000 fcb8 	bl	800120c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800089c:	f000 fc4a 	bl	8001134 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //HAL_NVIC_DisableIRQ(EXTI9_5_IRQn); //disable interrupt
  HAL_I2C_Mem_Read(&hi2c1, mpu6050addr, MPU6050_RA_PWR_MGMT_1, 1, &statusbuff, 1, 1000);
 80008a0:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 80008a4:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80008a8:	8819      	ldrh	r1, [r3, #0]
 80008aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ae:	9302      	str	r3, [sp, #8]
 80008b0:	2301      	movs	r3, #1
 80008b2:	9301      	str	r3, [sp, #4]
 80008b4:	4ba3      	ldr	r3, [pc, #652]	; (8000b44 <main+0x314>)
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	2301      	movs	r3, #1
 80008ba:	226b      	movs	r2, #107	; 0x6b
 80008bc:	48a2      	ldr	r0, [pc, #648]	; (8000b48 <main+0x318>)
 80008be:	f001 fee3 	bl	8002688 <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Write(&hi2c1, mpu6050addr, MPU6050_RA_PWR_MGMT_1, 1, 0b00000000, 1, 1000); //wake from sleep
 80008c2:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 80008c6:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80008ca:	8819      	ldrh	r1, [r3, #0]
 80008cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d0:	9302      	str	r3, [sp, #8]
 80008d2:	2301      	movs	r3, #1
 80008d4:	9301      	str	r3, [sp, #4]
 80008d6:	2300      	movs	r3, #0
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	2301      	movs	r3, #1
 80008dc:	226b      	movs	r2, #107	; 0x6b
 80008de:	489a      	ldr	r0, [pc, #616]	; (8000b48 <main+0x318>)
 80008e0:	f001 fdd8 	bl	8002494 <HAL_I2C_Mem_Write>
  HAL_I2C_Mem_Read(&hi2c1, mpu6050addr, MPU6050_RA_PWR_MGMT_1, 1, &statusbuff, 1, 1000);
 80008e4:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 80008e8:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80008ec:	8819      	ldrh	r1, [r3, #0]
 80008ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f2:	9302      	str	r3, [sp, #8]
 80008f4:	2301      	movs	r3, #1
 80008f6:	9301      	str	r3, [sp, #4]
 80008f8:	4b92      	ldr	r3, [pc, #584]	; (8000b44 <main+0x314>)
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	2301      	movs	r3, #1
 80008fe:	226b      	movs	r2, #107	; 0x6b
 8000900:	4891      	ldr	r0, [pc, #580]	; (8000b48 <main+0x318>)
 8000902:	f001 fec1 	bl	8002688 <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Read(&hi2c1, mpu6050addr, MPU6050_RA_WHO_AM_I, 1, &statusbuff, 1, 1000);
 8000906:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 800090a:	f103 0348 	add.w	r3, r3, #72	; 0x48
 800090e:	8819      	ldrh	r1, [r3, #0]
 8000910:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000914:	9302      	str	r3, [sp, #8]
 8000916:	2301      	movs	r3, #1
 8000918:	9301      	str	r3, [sp, #4]
 800091a:	4b8a      	ldr	r3, [pc, #552]	; (8000b44 <main+0x314>)
 800091c:	9300      	str	r3, [sp, #0]
 800091e:	2301      	movs	r3, #1
 8000920:	2275      	movs	r2, #117	; 0x75
 8000922:	4889      	ldr	r0, [pc, #548]	; (8000b48 <main+0x318>)
 8000924:	f001 feb0 	bl	8002688 <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Write(&hi2c1, mpu6050addr, MPU6050_RA_PWR_MGMT_1, 1, 0b10000000, 1, 1000); //reset device
 8000928:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 800092c:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000930:	8819      	ldrh	r1, [r3, #0]
 8000932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000936:	9302      	str	r3, [sp, #8]
 8000938:	2301      	movs	r3, #1
 800093a:	9301      	str	r3, [sp, #4]
 800093c:	2380      	movs	r3, #128	; 0x80
 800093e:	9300      	str	r3, [sp, #0]
 8000940:	2301      	movs	r3, #1
 8000942:	226b      	movs	r2, #107	; 0x6b
 8000944:	4880      	ldr	r0, [pc, #512]	; (8000b48 <main+0x318>)
 8000946:	f001 fda5 	bl	8002494 <HAL_I2C_Mem_Write>
  HAL_Delay(200);
 800094a:	20c8      	movs	r0, #200	; 0xc8
 800094c:	f000 fda6 	bl	800149c <HAL_Delay>
  HAL_I2C_Mem_Read(&hi2c1, mpu6050addr, MPU6050_RA_PWR_MGMT_1, 1, &statusbuff, 1, 1000);
 8000950:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000954:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000958:	8819      	ldrh	r1, [r3, #0]
 800095a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800095e:	9302      	str	r3, [sp, #8]
 8000960:	2301      	movs	r3, #1
 8000962:	9301      	str	r3, [sp, #4]
 8000964:	4b77      	ldr	r3, [pc, #476]	; (8000b44 <main+0x314>)
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	2301      	movs	r3, #1
 800096a:	226b      	movs	r2, #107	; 0x6b
 800096c:	4876      	ldr	r0, [pc, #472]	; (8000b48 <main+0x318>)
 800096e:	f001 fe8b 	bl	8002688 <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Write(&hi2c1, mpu6050addr, MPU6050_RA_SIGNAL_PATH_RESET, 1, 0b00000111, 1, 1000); //reset signal path
 8000972:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000976:	f103 0348 	add.w	r3, r3, #72	; 0x48
 800097a:	8819      	ldrh	r1, [r3, #0]
 800097c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000980:	9302      	str	r3, [sp, #8]
 8000982:	2301      	movs	r3, #1
 8000984:	9301      	str	r3, [sp, #4]
 8000986:	2307      	movs	r3, #7
 8000988:	9300      	str	r3, [sp, #0]
 800098a:	2301      	movs	r3, #1
 800098c:	2268      	movs	r2, #104	; 0x68
 800098e:	486e      	ldr	r0, [pc, #440]	; (8000b48 <main+0x318>)
 8000990:	f001 fd80 	bl	8002494 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8000994:	2064      	movs	r0, #100	; 0x64
 8000996:	f000 fd81 	bl	800149c <HAL_Delay>
  HAL_I2C_Mem_Write(&hi2c1, mpu6050addr, MPU6050_RA_PWR_MGMT_1, 1, 0b00000001, 1, 1000); //disable sleep, set clock to gyrx
 800099a:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 800099e:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80009a2:	8819      	ldrh	r1, [r3, #0]
 80009a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a8:	9302      	str	r3, [sp, #8]
 80009aa:	2301      	movs	r3, #1
 80009ac:	9301      	str	r3, [sp, #4]
 80009ae:	2301      	movs	r3, #1
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	2301      	movs	r3, #1
 80009b4:	226b      	movs	r2, #107	; 0x6b
 80009b6:	4864      	ldr	r0, [pc, #400]	; (8000b48 <main+0x318>)
 80009b8:	f001 fd6c 	bl	8002494 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 80009bc:	2064      	movs	r0, #100	; 0x64
 80009be:	f000 fd6d 	bl	800149c <HAL_Delay>
  HAL_I2C_Mem_Read(&hi2c1, mpu6050addr, MPU6050_RA_PWR_MGMT_1, 1, &statusbuff, 1, 1000);
 80009c2:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 80009c6:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80009ca:	8819      	ldrh	r1, [r3, #0]
 80009cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d0:	9302      	str	r3, [sp, #8]
 80009d2:	2301      	movs	r3, #1
 80009d4:	9301      	str	r3, [sp, #4]
 80009d6:	4b5b      	ldr	r3, [pc, #364]	; (8000b44 <main+0x314>)
 80009d8:	9300      	str	r3, [sp, #0]
 80009da:	2301      	movs	r3, #1
 80009dc:	226b      	movs	r2, #107	; 0x6b
 80009de:	485a      	ldr	r0, [pc, #360]	; (8000b48 <main+0x318>)
 80009e0:	f001 fe52 	bl	8002688 <HAL_I2C_Mem_Read>
  HAL_Delay(100);
 80009e4:	2064      	movs	r0, #100	; 0x64
 80009e6:	f000 fd59 	bl	800149c <HAL_Delay>
  HAL_I2C_Mem_Write(&hi2c1, mpu6050addr, MPU6050_RA_GYRO_CONFIG, 1, 0b00000000, 1, 1000); //gyro FS 250°/s
 80009ea:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 80009ee:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80009f2:	8819      	ldrh	r1, [r3, #0]
 80009f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f8:	9302      	str	r3, [sp, #8]
 80009fa:	2301      	movs	r3, #1
 80009fc:	9301      	str	r3, [sp, #4]
 80009fe:	2300      	movs	r3, #0
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	2301      	movs	r3, #1
 8000a04:	221b      	movs	r2, #27
 8000a06:	4850      	ldr	r0, [pc, #320]	; (8000b48 <main+0x318>)
 8000a08:	f001 fd44 	bl	8002494 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8000a0c:	2064      	movs	r0, #100	; 0x64
 8000a0e:	f000 fd45 	bl	800149c <HAL_Delay>
  HAL_I2C_Mem_Write(&hi2c1, mpu6050addr, MPU6050_RA_ACCEL_CONFIG, 1, 0b00010000, 1, 1000); //accel FS 2g
 8000a12:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000a16:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000a1a:	8819      	ldrh	r1, [r3, #0]
 8000a1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a20:	9302      	str	r3, [sp, #8]
 8000a22:	2301      	movs	r3, #1
 8000a24:	9301      	str	r3, [sp, #4]
 8000a26:	2310      	movs	r3, #16
 8000a28:	9300      	str	r3, [sp, #0]
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	221c      	movs	r2, #28
 8000a2e:	4846      	ldr	r0, [pc, #280]	; (8000b48 <main+0x318>)
 8000a30:	f001 fd30 	bl	8002494 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8000a34:	2064      	movs	r0, #100	; 0x64
 8000a36:	f000 fd31 	bl	800149c <HAL_Delay>
  HAL_I2C_Mem_Write(&hi2c1, mpu6050addr, MPU6050_RA_CONFIG, 1, 0b00000001, 1, 1000); //enable DLPF
 8000a3a:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000a3e:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000a42:	8819      	ldrh	r1, [r3, #0]
 8000a44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a48:	9302      	str	r3, [sp, #8]
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	9301      	str	r3, [sp, #4]
 8000a4e:	2301      	movs	r3, #1
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2301      	movs	r3, #1
 8000a54:	221a      	movs	r2, #26
 8000a56:	483c      	ldr	r0, [pc, #240]	; (8000b48 <main+0x318>)
 8000a58:	f001 fd1c 	bl	8002494 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8000a5c:	2064      	movs	r0, #100	; 0x64
 8000a5e:	f000 fd1d 	bl	800149c <HAL_Delay>
  HAL_I2C_Mem_Write(&hi2c1, mpu6050addr, MPU6050_RA_SMPLRT_DIV, 1, 0b00000111, 1, 1000); //gyro samplerate 1khz
 8000a62:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000a66:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000a6a:	8819      	ldrh	r1, [r3, #0]
 8000a6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a70:	9302      	str	r3, [sp, #8]
 8000a72:	2301      	movs	r3, #1
 8000a74:	9301      	str	r3, [sp, #4]
 8000a76:	2307      	movs	r3, #7
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	2219      	movs	r2, #25
 8000a7e:	4832      	ldr	r0, [pc, #200]	; (8000b48 <main+0x318>)
 8000a80:	f001 fd08 	bl	8002494 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8000a84:	2064      	movs	r0, #100	; 0x64
 8000a86:	f000 fd09 	bl	800149c <HAL_Delay>
  HAL_I2C_Mem_Write(&hi2c1, mpu6050addr, MPU6050_RA_INT_PIN_CFG, 1, 0b00010000, 1, 1000); //int act H, PP, latch, CLR any
 8000a8a:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000a8e:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000a92:	8819      	ldrh	r1, [r3, #0]
 8000a94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a98:	9302      	str	r3, [sp, #8]
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	9301      	str	r3, [sp, #4]
 8000a9e:	2310      	movs	r3, #16
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	2237      	movs	r2, #55	; 0x37
 8000aa6:	4828      	ldr	r0, [pc, #160]	; (8000b48 <main+0x318>)
 8000aa8:	f001 fcf4 	bl	8002494 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8000aac:	2064      	movs	r0, #100	; 0x64
 8000aae:	f000 fcf5 	bl	800149c <HAL_Delay>
  HAL_I2C_Mem_Write(&hi2c1, mpu6050addr, MPU6050_RA_INT_ENABLE, 1, 0b00000001, 1, 1000); //enable data rdy int
 8000ab2:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000ab6:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000aba:	8819      	ldrh	r1, [r3, #0]
 8000abc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac0:	9302      	str	r3, [sp, #8]
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	9301      	str	r3, [sp, #4]
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	9300      	str	r3, [sp, #0]
 8000aca:	2301      	movs	r3, #1
 8000acc:	2238      	movs	r2, #56	; 0x38
 8000ace:	481e      	ldr	r0, [pc, #120]	; (8000b48 <main+0x318>)
 8000ad0:	f001 fce0 	bl	8002494 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8000ad4:	2064      	movs	r0, #100	; 0x64
 8000ad6:	f000 fce1 	bl	800149c <HAL_Delay>


  //HAL_NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt
  HAL_TIM_Base_Start(&htim2);
 8000ada:	481c      	ldr	r0, [pc, #112]	; (8000b4c <main+0x31c>)
 8000adc:	f003 f893 	bl	8003c06 <HAL_TIM_Base_Start>
  HAL_DMA_RegisterCallback(&hdma_memtomem_dma2_stream0,HAL_DMA_XFER_CPLT_CB_ID , &DMATransferCompleteCallback);
 8000ae0:	4a1b      	ldr	r2, [pc, #108]	; (8000b50 <main+0x320>)
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	481b      	ldr	r0, [pc, #108]	; (8000b54 <main+0x324>)
 8000ae6:	f001 f8bf 	bl	8001c68 <HAL_DMA_RegisterCallback>
  HAL_UART_Receive_IT(&huart2, &uartByte, 1);
 8000aea:	2201      	movs	r2, #1
 8000aec:	491a      	ldr	r1, [pc, #104]	; (8000b58 <main+0x328>)
 8000aee:	481b      	ldr	r0, [pc, #108]	; (8000b5c <main+0x32c>)
 8000af0:	f003 fc00 	bl	80042f4 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(capturestate)
 8000af4:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <main+0x330>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	2b03      	cmp	r3, #3
 8000afc:	f200 8185 	bhi.w	8000e0a <main+0x5da>
 8000b00:	a201      	add	r2, pc, #4	; (adr r2, 8000b08 <main+0x2d8>)
 8000b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b06:	bf00      	nop
 8000b08:	08000b19 	.word	0x08000b19
 8000b0c:	08000b69 	.word	0x08000b69
 8000b10:	08000ccd 	.word	0x08000ccd
 8000b14:	08000cd5 	.word	0x08000cd5
	  {
	  case CAPTURESTATE_IDLE:
		  if(uartByteReceived)
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <main+0x334>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f000 8175 	beq.w	8000e0e <main+0x5de>
		  {
			  if(uartByte == 's')
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <main+0x328>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b73      	cmp	r3, #115	; 0x73
 8000b2a:	d106      	bne.n	8000b3a <main+0x30a>
			  {
				  capturestate = CAPTURESTATE_CAPTURING;
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <main+0x330>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	701a      	strb	r2, [r3, #0]
				  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <main+0x31c>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2200      	movs	r2, #0
 8000b38:	625a      	str	r2, [r3, #36]	; 0x24
			  }
			  uartByteReceived = 0;
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <main+0x334>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8000b40:	e165      	b.n	8000e0e <main+0x5de>
 8000b42:	bf00      	nop
 8000b44:	20000001 	.word	0x20000001
 8000b48:	20000108 	.word	0x20000108
 8000b4c:	20005f5c 	.word	0x20005f5c
 8000b50:	08000f85 	.word	0x08000f85
 8000b54:	200000a8 	.word	0x200000a8
 8000b58:	2000015e 	.word	0x2000015e
 8000b5c:	20005ffc 	.word	0x20005ffc
 8000b60:	20000091 	.word	0x20000091
 8000b64:	20000092 	.word	0x20000092
	  case CAPTURESTATE_CAPTURING:
		  HAL_I2C_Mem_Read(&hi2c1, mpu6050addr, MPU6050_RA_INT_STATUS, 1, &statusbuff, 1, HAL_MAX_DELAY);
 8000b68:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000b6c:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000b70:	8819      	ldrh	r1, [r3, #0]
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295
 8000b76:	9302      	str	r3, [sp, #8]
 8000b78:	2301      	movs	r3, #1
 8000b7a:	9301      	str	r3, [sp, #4]
 8000b7c:	4ba6      	ldr	r3, [pc, #664]	; (8000e18 <main+0x5e8>)
 8000b7e:	9300      	str	r3, [sp, #0]
 8000b80:	2301      	movs	r3, #1
 8000b82:	223a      	movs	r2, #58	; 0x3a
 8000b84:	48a5      	ldr	r0, [pc, #660]	; (8000e1c <main+0x5ec>)
 8000b86:	f001 fd7f 	bl	8002688 <HAL_I2C_Mem_Read>
	  	  if(statusbuff & 0b00000001)
 8000b8a:	4ba3      	ldr	r3, [pc, #652]	; (8000e18 <main+0x5e8>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f000 813d 	beq.w	8000e12 <main+0x5e2>
	  	  {
	  		  currtimerval = __HAL_TIM_GET_COUNTER(&htim2);
 8000b98:	4ba1      	ldr	r3, [pc, #644]	; (8000e20 <main+0x5f0>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b9e:	4aa1      	ldr	r2, [pc, #644]	; (8000e24 <main+0x5f4>)
 8000ba0:	6013      	str	r3, [r2, #0]
	  		  HAL_I2C_Mem_Read(&hi2c1, mpu6050addr, MPU6050_RA_INT_STATUS, 1, &statusbuff, 1, HAL_MAX_DELAY);
 8000ba2:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000ba6:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000baa:	8819      	ldrh	r1, [r3, #0]
 8000bac:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb0:	9302      	str	r3, [sp, #8]
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	9301      	str	r3, [sp, #4]
 8000bb6:	4b98      	ldr	r3, [pc, #608]	; (8000e18 <main+0x5e8>)
 8000bb8:	9300      	str	r3, [sp, #0]
 8000bba:	2301      	movs	r3, #1
 8000bbc:	223a      	movs	r2, #58	; 0x3a
 8000bbe:	4897      	ldr	r0, [pc, #604]	; (8000e1c <main+0x5ec>)
 8000bc0:	f001 fd62 	bl	8002688 <HAL_I2C_Mem_Read>
	  		  HAL_I2C_Mem_Read(&hi2c1, mpu6050addr, MPU6050_RA_ACCEL_XOUT_H, 1, recdata, 6, HAL_MAX_DELAY);
 8000bc4:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000bc8:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000bcc:	8819      	ldrh	r1, [r3, #0]
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	9302      	str	r3, [sp, #8]
 8000bd4:	2306      	movs	r3, #6
 8000bd6:	9301      	str	r3, [sp, #4]
 8000bd8:	4b93      	ldr	r3, [pc, #588]	; (8000e28 <main+0x5f8>)
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	2301      	movs	r3, #1
 8000bde:	223b      	movs	r2, #59	; 0x3b
 8000be0:	488e      	ldr	r0, [pc, #568]	; (8000e1c <main+0x5ec>)
 8000be2:	f001 fd51 	bl	8002688 <HAL_I2C_Mem_Read>
	  		  data[writeptr].x.LowerByte = recdata[1];
 8000be6:	4b91      	ldr	r3, [pc, #580]	; (8000e2c <main+0x5fc>)
 8000be8:	881b      	ldrh	r3, [r3, #0]
 8000bea:	4619      	mov	r1, r3
 8000bec:	4b8e      	ldr	r3, [pc, #568]	; (8000e28 <main+0x5f8>)
 8000bee:	7858      	ldrb	r0, [r3, #1]
 8000bf0:	4a8f      	ldr	r2, [pc, #572]	; (8000e30 <main+0x600>)
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	440b      	add	r3, r1
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	4413      	add	r3, r2
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	701a      	strb	r2, [r3, #0]
	  		  data[writeptr].x.UpperByte = recdata[0];
 8000c00:	4b8a      	ldr	r3, [pc, #552]	; (8000e2c <main+0x5fc>)
 8000c02:	881b      	ldrh	r3, [r3, #0]
 8000c04:	4619      	mov	r1, r3
 8000c06:	4b88      	ldr	r3, [pc, #544]	; (8000e28 <main+0x5f8>)
 8000c08:	7818      	ldrb	r0, [r3, #0]
 8000c0a:	4a89      	ldr	r2, [pc, #548]	; (8000e30 <main+0x600>)
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	440b      	add	r3, r1
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	4413      	add	r3, r2
 8000c16:	3301      	adds	r3, #1
 8000c18:	4602      	mov	r2, r0
 8000c1a:	701a      	strb	r2, [r3, #0]
	  		  data[writeptr].y.LowerByte = recdata[3];
 8000c1c:	4b83      	ldr	r3, [pc, #524]	; (8000e2c <main+0x5fc>)
 8000c1e:	881b      	ldrh	r3, [r3, #0]
 8000c20:	4619      	mov	r1, r3
 8000c22:	4b81      	ldr	r3, [pc, #516]	; (8000e28 <main+0x5f8>)
 8000c24:	78d8      	ldrb	r0, [r3, #3]
 8000c26:	4a82      	ldr	r2, [pc, #520]	; (8000e30 <main+0x600>)
 8000c28:	460b      	mov	r3, r1
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	440b      	add	r3, r1
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	4413      	add	r3, r2
 8000c32:	3302      	adds	r3, #2
 8000c34:	4602      	mov	r2, r0
 8000c36:	701a      	strb	r2, [r3, #0]
	  		  data[writeptr].y.UpperByte = recdata[2];
 8000c38:	4b7c      	ldr	r3, [pc, #496]	; (8000e2c <main+0x5fc>)
 8000c3a:	881b      	ldrh	r3, [r3, #0]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4b7a      	ldr	r3, [pc, #488]	; (8000e28 <main+0x5f8>)
 8000c40:	7898      	ldrb	r0, [r3, #2]
 8000c42:	4a7b      	ldr	r2, [pc, #492]	; (8000e30 <main+0x600>)
 8000c44:	460b      	mov	r3, r1
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	440b      	add	r3, r1
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	4413      	add	r3, r2
 8000c4e:	3303      	adds	r3, #3
 8000c50:	4602      	mov	r2, r0
 8000c52:	701a      	strb	r2, [r3, #0]
	  		  data[writeptr].z.LowerByte = recdata[5];
 8000c54:	4b75      	ldr	r3, [pc, #468]	; (8000e2c <main+0x5fc>)
 8000c56:	881b      	ldrh	r3, [r3, #0]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4b73      	ldr	r3, [pc, #460]	; (8000e28 <main+0x5f8>)
 8000c5c:	7958      	ldrb	r0, [r3, #5]
 8000c5e:	4a74      	ldr	r2, [pc, #464]	; (8000e30 <main+0x600>)
 8000c60:	460b      	mov	r3, r1
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	440b      	add	r3, r1
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	4413      	add	r3, r2
 8000c6a:	3304      	adds	r3, #4
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	701a      	strb	r2, [r3, #0]
	  		  data[writeptr].z.UpperByte = recdata[4];
 8000c70:	4b6e      	ldr	r3, [pc, #440]	; (8000e2c <main+0x5fc>)
 8000c72:	881b      	ldrh	r3, [r3, #0]
 8000c74:	4619      	mov	r1, r3
 8000c76:	4b6c      	ldr	r3, [pc, #432]	; (8000e28 <main+0x5f8>)
 8000c78:	7918      	ldrb	r0, [r3, #4]
 8000c7a:	4a6d      	ldr	r2, [pc, #436]	; (8000e30 <main+0x600>)
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	440b      	add	r3, r1
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	4413      	add	r3, r2
 8000c86:	3305      	adds	r3, #5
 8000c88:	4602      	mov	r2, r0
 8000c8a:	701a      	strb	r2, [r3, #0]
	  		  data[writeptr].micros = currtimerval;
 8000c8c:	4b67      	ldr	r3, [pc, #412]	; (8000e2c <main+0x5fc>)
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	4618      	mov	r0, r3
 8000c92:	4b64      	ldr	r3, [pc, #400]	; (8000e24 <main+0x5f4>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	4966      	ldr	r1, [pc, #408]	; (8000e30 <main+0x600>)
 8000c98:	4603      	mov	r3, r0
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	4403      	add	r3, r0
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	440b      	add	r3, r1
 8000ca2:	3308      	adds	r3, #8
 8000ca4:	601a      	str	r2, [r3, #0]
	  		  writeptr++;
 8000ca6:	4b61      	ldr	r3, [pc, #388]	; (8000e2c <main+0x5fc>)
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	3301      	adds	r3, #1
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	4b5f      	ldr	r3, [pc, #380]	; (8000e2c <main+0x5fc>)
 8000cb0:	801a      	strh	r2, [r3, #0]
	  		  if(writeptr >= SAMPLECOUNT)
 8000cb2:	4b5e      	ldr	r3, [pc, #376]	; (8000e2c <main+0x5fc>)
 8000cb4:	881b      	ldrh	r3, [r3, #0]
 8000cb6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000cba:	f0c0 80aa 	bcc.w	8000e12 <main+0x5e2>
	  		  {
	  			  writeptr = 0;
 8000cbe:	4b5b      	ldr	r3, [pc, #364]	; (8000e2c <main+0x5fc>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	801a      	strh	r2, [r3, #0]
	  			  capturestate = CAPTURESTATE_TRIGGERED;
 8000cc4:	4b5b      	ldr	r3, [pc, #364]	; (8000e34 <main+0x604>)
 8000cc6:	2202      	movs	r2, #2
 8000cc8:	701a      	strb	r2, [r3, #0]
	  		  }
	  	  }
		  break;
 8000cca:	e0a2      	b.n	8000e12 <main+0x5e2>
	  case CAPTURESTATE_TRIGGERED:
		  capturestate = CAPTURESTATE_TRANSMITTING;
 8000ccc:	4b59      	ldr	r3, [pc, #356]	; (8000e34 <main+0x604>)
 8000cce:	2203      	movs	r2, #3
 8000cd0:	701a      	strb	r2, [r3, #0]
		  break;
 8000cd2:	e09f      	b.n	8000e14 <main+0x5e4>
	  case CAPTURESTATE_TRANSMITTING:
		  n = sprintf(buffer, "Start\n");
 8000cd4:	4b58      	ldr	r3, [pc, #352]	; (8000e38 <main+0x608>)
 8000cd6:	4a59      	ldr	r2, [pc, #356]	; (8000e3c <main+0x60c>)
 8000cd8:	6810      	ldr	r0, [r2, #0]
 8000cda:	6018      	str	r0, [r3, #0]
 8000cdc:	8891      	ldrh	r1, [r2, #4]
 8000cde:	7992      	ldrb	r2, [r2, #6]
 8000ce0:	8099      	strh	r1, [r3, #4]
 8000ce2:	719a      	strb	r2, [r3, #6]
 8000ce4:	2306      	movs	r3, #6
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	4b55      	ldr	r3, [pc, #340]	; (8000e40 <main+0x610>)
 8000cea:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, buffer, n, HAL_MAX_DELAY);
 8000cec:	4b54      	ldr	r3, [pc, #336]	; (8000e40 <main+0x610>)
 8000cee:	881a      	ldrh	r2, [r3, #0]
 8000cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf4:	4950      	ldr	r1, [pc, #320]	; (8000e38 <main+0x608>)
 8000cf6:	4853      	ldr	r0, [pc, #332]	; (8000e44 <main+0x614>)
 8000cf8:	f003 fa63 	bl	80041c2 <HAL_UART_Transmit>
		  for(int i = 0; i<SAMPLECOUNT ; i++)
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
 8000d02:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 8000d06:	6013      	str	r3, [r2, #0]
 8000d08:	e05e      	b.n	8000dc8 <main+0x598>
	  		  {
	  			  while(!uartTxComplete)
 8000d0a:	bf00      	nop
 8000d0c:	4b4e      	ldr	r3, [pc, #312]	; (8000e48 <main+0x618>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d0fa      	beq.n	8000d0c <main+0x4dc>
	  			  {
	  			  }
	  			  n = sprintf(buffer, "%u,%d,%d,%d\n",data[i].micros, data[i].x.Word, data[i].y.Word, data[i].z.Word);
 8000d16:	4946      	ldr	r1, [pc, #280]	; (8000e30 <main+0x600>)
 8000d18:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000d1c:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	4613      	mov	r3, r2
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	4413      	add	r3, r2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	440b      	add	r3, r1
 8000d2c:	3308      	adds	r3, #8
 8000d2e:	6818      	ldr	r0, [r3, #0]
 8000d30:	493f      	ldr	r1, [pc, #252]	; (8000e30 <main+0x600>)
 8000d32:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000d36:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	4413      	add	r3, r2
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	440b      	add	r3, r1
 8000d46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d4a:	461d      	mov	r5, r3
 8000d4c:	4938      	ldr	r1, [pc, #224]	; (8000e30 <main+0x600>)
 8000d4e:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000d52:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	4413      	add	r3, r2
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	440b      	add	r3, r1
 8000d62:	3302      	adds	r3, #2
 8000d64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d68:	461c      	mov	r4, r3
 8000d6a:	4931      	ldr	r1, [pc, #196]	; (8000e30 <main+0x600>)
 8000d6c:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000d70:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	4613      	mov	r3, r2
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	4413      	add	r3, r2
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	440b      	add	r3, r1
 8000d80:	3304      	adds	r3, #4
 8000d82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d86:	9301      	str	r3, [sp, #4]
 8000d88:	9400      	str	r4, [sp, #0]
 8000d8a:	462b      	mov	r3, r5
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	492f      	ldr	r1, [pc, #188]	; (8000e4c <main+0x61c>)
 8000d90:	4829      	ldr	r0, [pc, #164]	; (8000e38 <main+0x608>)
 8000d92:	f004 fa35 	bl	8005200 <siprintf>
 8000d96:	4603      	mov	r3, r0
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	4b29      	ldr	r3, [pc, #164]	; (8000e40 <main+0x610>)
 8000d9c:	801a      	strh	r2, [r3, #0]
	  			  HAL_UART_Transmit_DMA(&huart2, buffer, n);
 8000d9e:	4b28      	ldr	r3, [pc, #160]	; (8000e40 <main+0x610>)
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	461a      	mov	r2, r3
 8000da4:	4924      	ldr	r1, [pc, #144]	; (8000e38 <main+0x608>)
 8000da6:	4827      	ldr	r0, [pc, #156]	; (8000e44 <main+0x614>)
 8000da8:	f003 fafa 	bl	80043a0 <HAL_UART_Transmit_DMA>
	  			  uartTxComplete = 0;
 8000dac:	4b26      	ldr	r3, [pc, #152]	; (8000e48 <main+0x618>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]
		  for(int i = 0; i<SAMPLECOUNT ; i++)
 8000db2:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000db6:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
 8000dc2:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 8000dc6:	6013      	str	r3, [r2, #0]
 8000dc8:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000dcc:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000dd6:	db98      	blt.n	8000d0a <main+0x4da>
	  		  }
		  HAL_Delay(100);
 8000dd8:	2064      	movs	r0, #100	; 0x64
 8000dda:	f000 fb5f 	bl	800149c <HAL_Delay>
		  n = sprintf(buffer, "Stop\n");
 8000dde:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <main+0x608>)
 8000de0:	4a1b      	ldr	r2, [pc, #108]	; (8000e50 <main+0x620>)
 8000de2:	6810      	ldr	r0, [r2, #0]
 8000de4:	6018      	str	r0, [r3, #0]
 8000de6:	8892      	ldrh	r2, [r2, #4]
 8000de8:	809a      	strh	r2, [r3, #4]
 8000dea:	2305      	movs	r3, #5
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <main+0x610>)
 8000df0:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, buffer, n, HAL_MAX_DELAY);
 8000df2:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <main+0x610>)
 8000df4:	881a      	ldrh	r2, [r3, #0]
 8000df6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfa:	490f      	ldr	r1, [pc, #60]	; (8000e38 <main+0x608>)
 8000dfc:	4811      	ldr	r0, [pc, #68]	; (8000e44 <main+0x614>)
 8000dfe:	f003 f9e0 	bl	80041c2 <HAL_UART_Transmit>
		  capturestate = CAPTURESTATE_IDLE;
 8000e02:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <main+0x604>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	701a      	strb	r2, [r3, #0]
		  break;
 8000e08:	e004      	b.n	8000e14 <main+0x5e4>
	  default:
		  break;
 8000e0a:	bf00      	nop
 8000e0c:	e672      	b.n	8000af4 <main+0x2c4>
		  break;
 8000e0e:	bf00      	nop
 8000e10:	e670      	b.n	8000af4 <main+0x2c4>
		  break;
 8000e12:	bf00      	nop
	  switch(capturestate)
 8000e14:	e66e      	b.n	8000af4 <main+0x2c4>
 8000e16:	bf00      	nop
 8000e18:	20000001 	.word	0x20000001
 8000e1c:	20000108 	.word	0x20000108
 8000e20:	20005f5c 	.word	0x20005f5c
 8000e24:	20000094 	.word	0x20000094
 8000e28:	20000160 	.word	0x20000160
 8000e2c:	20000098 	.word	0x20000098
 8000e30:	2000019c 	.word	0x2000019c
 8000e34:	20000091 	.word	0x20000091
 8000e38:	20000168 	.word	0x20000168
 8000e3c:	08005a24 	.word	0x08005a24
 8000e40:	2000015c 	.word	0x2000015c
 8000e44:	20005ffc 	.word	0x20005ffc
 8000e48:	20000000 	.word	0x20000000
 8000e4c:	08005a2c 	.word	0x08005a2c
 8000e50:	08005a3c 	.word	0x08005a3c

08000e54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b094      	sub	sp, #80	; 0x50
 8000e58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e5a:	f107 031c 	add.w	r3, r7, #28
 8000e5e:	2234      	movs	r2, #52	; 0x34
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f004 f9c4 	bl	80051f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e68:	f107 0308 	add.w	r3, r7, #8
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e78:	2300      	movs	r3, #0
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	4b2c      	ldr	r3, [pc, #176]	; (8000f30 <SystemClock_Config+0xdc>)
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e80:	4a2b      	ldr	r2, [pc, #172]	; (8000f30 <SystemClock_Config+0xdc>)
 8000e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e86:	6413      	str	r3, [r2, #64]	; 0x40
 8000e88:	4b29      	ldr	r3, [pc, #164]	; (8000f30 <SystemClock_Config+0xdc>)
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e94:	2300      	movs	r3, #0
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	4b26      	ldr	r3, [pc, #152]	; (8000f34 <SystemClock_Config+0xe0>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a25      	ldr	r2, [pc, #148]	; (8000f34 <SystemClock_Config+0xe0>)
 8000e9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ea2:	6013      	str	r3, [r2, #0]
 8000ea4:	4b23      	ldr	r3, [pc, #140]	; (8000f34 <SystemClock_Config+0xe0>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000eac:	603b      	str	r3, [r7, #0]
 8000eae:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eb8:	2310      	movs	r3, #16
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ec4:	2308      	movs	r3, #8
 8000ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000ec8:	23b4      	movs	r3, #180	; 0xb4
 8000eca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed8:	f107 031c 	add.w	r3, r7, #28
 8000edc:	4618      	mov	r0, r3
 8000ede:	f002 fc0d 	bl	80036fc <HAL_RCC_OscConfig>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ee8:	f000 f85c 	bl	8000fa4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000eec:	f002 f94a 	bl	8003184 <HAL_PWREx_EnableOverDrive>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ef6:	f000 f855 	bl	8000fa4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000efa:	230f      	movs	r3, #15
 8000efc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000efe:	2302      	movs	r3, #2
 8000f00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f06:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f10:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f12:	f107 0308 	add.w	r3, r7, #8
 8000f16:	2105      	movs	r1, #5
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f002 f983 	bl	8003224 <HAL_RCC_ClockConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000f24:	f000 f83e 	bl	8000fa4 <Error_Handler>
  }
}
 8000f28:	bf00      	nop
 8000f2a:	3750      	adds	r7, #80	; 0x50
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40007000 	.word	0x40007000

08000f38 <HAL_UART_TxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
	i2cRecComplete = 1;
}
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	uartTxComplete = 1;
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <HAL_UART_TxCpltCallback+0x1c>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	701a      	strb	r2, [r3, #0]
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000000 	.word	0x20000000

08000f58 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	uartByteReceived = 1;
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <HAL_UART_RxCpltCallback+0x20>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, &uartByte, 1);
 8000f66:	2201      	movs	r2, #1
 8000f68:	4904      	ldr	r1, [pc, #16]	; (8000f7c <HAL_UART_RxCpltCallback+0x24>)
 8000f6a:	4805      	ldr	r0, [pc, #20]	; (8000f80 <HAL_UART_RxCpltCallback+0x28>)
 8000f6c:	f003 f9c2 	bl	80042f4 <HAL_UART_Receive_IT>
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000092 	.word	0x20000092
 8000f7c:	2000015e 	.word	0x2000015e
 8000f80:	20005ffc 	.word	0x20005ffc

08000f84 <DMATransferCompleteCallback>:
void DMATransferCompleteCallback(DMA_HandleTypeDef *hdma)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	dmaTransferComplete = 1;
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <DMATransferCompleteCallback+0x1c>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	701a      	strb	r2, [r3, #0]
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	20000090 	.word	0x20000090

08000fa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <HAL_MspInit+0x4c>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	4a0f      	ldr	r2, [pc, #60]	; (8001000 <HAL_MspInit+0x4c>)
 8000fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fca:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <HAL_MspInit+0x4c>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	603b      	str	r3, [r7, #0]
 8000fda:	4b09      	ldr	r3, [pc, #36]	; (8001000 <HAL_MspInit+0x4c>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	4a08      	ldr	r2, [pc, #32]	; (8001000 <HAL_MspInit+0x4c>)
 8000fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_MspInit+0x4c>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fee:	603b      	str	r3, [r7, #0]
 8000ff0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	40023800 	.word	0x40023800

08001004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001016:	e7fe      	b.n	8001016 <HardFault_Handler+0x4>

08001018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800101c:	e7fe      	b.n	800101c <MemManage_Handler+0x4>

0800101e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001022:	e7fe      	b.n	8001022 <BusFault_Handler+0x4>

08001024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001028:	e7fe      	b.n	8001028 <UsageFault_Handler+0x4>

0800102a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001058:	f000 fa00 	bl	800145c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}

08001060 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001064:	4802      	ldr	r0, [pc, #8]	; (8001070 <DMA1_Stream6_IRQHandler+0x10>)
 8001066:	f000 fc75 	bl	8001954 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20005f9c 	.word	0x20005f9c

08001074 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001078:	4802      	ldr	r0, [pc, #8]	; (8001084 <USART2_IRQHandler+0x10>)
 800107a:	f003 f9fd 	bl	8004478 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20005ffc 	.word	0x20005ffc

08001088 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 800108c:	4802      	ldr	r0, [pc, #8]	; (8001098 <DMA2_Stream0_IRQHandler+0x10>)
 800108e:	f000 fc61 	bl	8001954 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200000a8 	.word	0x200000a8

0800109c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a4:	4a14      	ldr	r2, [pc, #80]	; (80010f8 <_sbrk+0x5c>)
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <_sbrk+0x60>)
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b0:	4b13      	ldr	r3, [pc, #76]	; (8001100 <_sbrk+0x64>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d102      	bne.n	80010be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <_sbrk+0x64>)
 80010ba:	4a12      	ldr	r2, [pc, #72]	; (8001104 <_sbrk+0x68>)
 80010bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <_sbrk+0x64>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d207      	bcs.n	80010dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010cc:	f004 f866 	bl	800519c <__errno>
 80010d0:	4602      	mov	r2, r0
 80010d2:	230c      	movs	r3, #12
 80010d4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	e009      	b.n	80010f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <_sbrk+0x64>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010e2:	4b07      	ldr	r3, [pc, #28]	; (8001100 <_sbrk+0x64>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	4a05      	ldr	r2, [pc, #20]	; (8001100 <_sbrk+0x64>)
 80010ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ee:	68fb      	ldr	r3, [r7, #12]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20020000 	.word	0x20020000
 80010fc:	00000400 	.word	0x00000400
 8001100:	2000009c 	.word	0x2000009c
 8001104:	20006048 	.word	0x20006048

08001108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800110c:	4b08      	ldr	r3, [pc, #32]	; (8001130 <SystemInit+0x28>)
 800110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001112:	4a07      	ldr	r2, [pc, #28]	; (8001130 <SystemInit+0x28>)
 8001114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <SystemInit+0x28>)
 800111e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001122:	609a      	str	r2, [r3, #8]
#endif
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800113a:	f107 0308 	add.w	r3, r7, #8
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001148:	463b      	mov	r3, r7
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001150:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <MX_TIM2_Init+0x94>)
 8001152:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001156:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 89;
 8001158:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <MX_TIM2_Init+0x94>)
 800115a:	2259      	movs	r2, #89	; 0x59
 800115c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115e:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <MX_TIM2_Init+0x94>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001164:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <MX_TIM2_Init+0x94>)
 8001166:	f04f 32ff 	mov.w	r2, #4294967295
 800116a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800116c:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <MX_TIM2_Init+0x94>)
 800116e:	2200      	movs	r2, #0
 8001170:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <MX_TIM2_Init+0x94>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001178:	4813      	ldr	r0, [pc, #76]	; (80011c8 <MX_TIM2_Init+0x94>)
 800117a:	f002 fd19 	bl	8003bb0 <HAL_TIM_Base_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001184:	f7ff ff0e 	bl	8000fa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001188:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800118c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800118e:	f107 0308 	add.w	r3, r7, #8
 8001192:	4619      	mov	r1, r3
 8001194:	480c      	ldr	r0, [pc, #48]	; (80011c8 <MX_TIM2_Init+0x94>)
 8001196:	f002 fd5a 	bl	8003c4e <HAL_TIM_ConfigClockSource>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011a0:	f7ff ff00 	bl	8000fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a4:	2300      	movs	r3, #0
 80011a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011ac:	463b      	mov	r3, r7
 80011ae:	4619      	mov	r1, r3
 80011b0:	4805      	ldr	r0, [pc, #20]	; (80011c8 <MX_TIM2_Init+0x94>)
 80011b2:	f002 ff3d 	bl	8004030 <HAL_TIMEx_MasterConfigSynchronization>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011bc:	f7ff fef2 	bl	8000fa4 <Error_Handler>
  }

}
 80011c0:	bf00      	nop
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20005f5c 	.word	0x20005f5c

080011cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011dc:	d10d      	bne.n	80011fa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <HAL_TIM_Base_MspInit+0x3c>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	4a08      	ldr	r2, [pc, #32]	; (8001208 <HAL_TIM_Base_MspInit+0x3c>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6413      	str	r3, [r2, #64]	; 0x40
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_TIM_Base_MspInit+0x3c>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80011fa:	bf00      	nop
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800

0800120c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001210:	4b10      	ldr	r3, [pc, #64]	; (8001254 <MX_USART2_UART_Init+0x48>)
 8001212:	4a11      	ldr	r2, [pc, #68]	; (8001258 <MX_USART2_UART_Init+0x4c>)
 8001214:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2000000;
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <MX_USART2_UART_Init+0x48>)
 8001218:	4a10      	ldr	r2, [pc, #64]	; (800125c <MX_USART2_UART_Init+0x50>)
 800121a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800121c:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <MX_USART2_UART_Init+0x48>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <MX_USART2_UART_Init+0x48>)
 8001224:	2200      	movs	r2, #0
 8001226:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001228:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <MX_USART2_UART_Init+0x48>)
 800122a:	2200      	movs	r2, #0
 800122c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <MX_USART2_UART_Init+0x48>)
 8001230:	220c      	movs	r2, #12
 8001232:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001234:	4b07      	ldr	r3, [pc, #28]	; (8001254 <MX_USART2_UART_Init+0x48>)
 8001236:	2200      	movs	r2, #0
 8001238:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <MX_USART2_UART_Init+0x48>)
 800123c:	2200      	movs	r2, #0
 800123e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001240:	4804      	ldr	r0, [pc, #16]	; (8001254 <MX_USART2_UART_Init+0x48>)
 8001242:	f002 ff71 	bl	8004128 <HAL_UART_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 800124c:	f7ff feaa 	bl	8000fa4 <Error_Handler>
  }

}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20005ffc 	.word	0x20005ffc
 8001258:	40004400 	.word	0x40004400
 800125c:	001e8480 	.word	0x001e8480

08001260 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	; 0x28
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a34      	ldr	r2, [pc, #208]	; (8001350 <HAL_UART_MspInit+0xf0>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d161      	bne.n	8001346 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	4b33      	ldr	r3, [pc, #204]	; (8001354 <HAL_UART_MspInit+0xf4>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	4a32      	ldr	r2, [pc, #200]	; (8001354 <HAL_UART_MspInit+0xf4>)
 800128c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001290:	6413      	str	r3, [r2, #64]	; 0x40
 8001292:	4b30      	ldr	r3, [pc, #192]	; (8001354 <HAL_UART_MspInit+0xf4>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	4b2c      	ldr	r3, [pc, #176]	; (8001354 <HAL_UART_MspInit+0xf4>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a2b      	ldr	r2, [pc, #172]	; (8001354 <HAL_UART_MspInit+0xf4>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b29      	ldr	r3, [pc, #164]	; (8001354 <HAL_UART_MspInit+0xf4>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012ba:	230c      	movs	r3, #12
 80012bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012be:	2302      	movs	r3, #2
 80012c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c6:	2303      	movs	r3, #3
 80012c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012ca:	2307      	movs	r3, #7
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	4619      	mov	r1, r3
 80012d4:	4820      	ldr	r0, [pc, #128]	; (8001358 <HAL_UART_MspInit+0xf8>)
 80012d6:	f000 fdf9 	bl	8001ecc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80012da:	4b20      	ldr	r3, [pc, #128]	; (800135c <HAL_UART_MspInit+0xfc>)
 80012dc:	4a20      	ldr	r2, [pc, #128]	; (8001360 <HAL_UART_MspInit+0x100>)
 80012de:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80012e0:	4b1e      	ldr	r3, [pc, #120]	; (800135c <HAL_UART_MspInit+0xfc>)
 80012e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012e6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012e8:	4b1c      	ldr	r3, [pc, #112]	; (800135c <HAL_UART_MspInit+0xfc>)
 80012ea:	2240      	movs	r2, #64	; 0x40
 80012ec:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ee:	4b1b      	ldr	r3, [pc, #108]	; (800135c <HAL_UART_MspInit+0xfc>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012f4:	4b19      	ldr	r3, [pc, #100]	; (800135c <HAL_UART_MspInit+0xfc>)
 80012f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012fa:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012fc:	4b17      	ldr	r3, [pc, #92]	; (800135c <HAL_UART_MspInit+0xfc>)
 80012fe:	2200      	movs	r2, #0
 8001300:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001302:	4b16      	ldr	r3, [pc, #88]	; (800135c <HAL_UART_MspInit+0xfc>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001308:	4b14      	ldr	r3, [pc, #80]	; (800135c <HAL_UART_MspInit+0xfc>)
 800130a:	2200      	movs	r2, #0
 800130c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800130e:	4b13      	ldr	r3, [pc, #76]	; (800135c <HAL_UART_MspInit+0xfc>)
 8001310:	2200      	movs	r2, #0
 8001312:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <HAL_UART_MspInit+0xfc>)
 8001316:	2200      	movs	r2, #0
 8001318:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800131a:	4810      	ldr	r0, [pc, #64]	; (800135c <HAL_UART_MspInit+0xfc>)
 800131c:	f000 f9f2 	bl	8001704 <HAL_DMA_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001326:	f7ff fe3d 	bl	8000fa4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a0b      	ldr	r2, [pc, #44]	; (800135c <HAL_UART_MspInit+0xfc>)
 800132e:	631a      	str	r2, [r3, #48]	; 0x30
 8001330:	4a0a      	ldr	r2, [pc, #40]	; (800135c <HAL_UART_MspInit+0xfc>)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	2026      	movs	r0, #38	; 0x26
 800133c:	f000 f9ab 	bl	8001696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001340:	2026      	movs	r0, #38	; 0x26
 8001342:	f000 f9c4 	bl	80016ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001346:	bf00      	nop
 8001348:	3728      	adds	r7, #40	; 0x28
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40004400 	.word	0x40004400
 8001354:	40023800 	.word	0x40023800
 8001358:	40020000 	.word	0x40020000
 800135c:	20005f9c 	.word	0x20005f9c
 8001360:	400260a0 	.word	0x400260a0

08001364 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001364:	f8df d034 	ldr.w	sp, [pc, #52]	; 800139c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001368:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800136a:	e003      	b.n	8001374 <LoopCopyDataInit>

0800136c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800136e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001370:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001372:	3104      	adds	r1, #4

08001374 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001374:	480b      	ldr	r0, [pc, #44]	; (80013a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001376:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001378:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800137a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800137c:	d3f6      	bcc.n	800136c <CopyDataInit>
  ldr  r2, =_sbss
 800137e:	4a0b      	ldr	r2, [pc, #44]	; (80013ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001380:	e002      	b.n	8001388 <LoopFillZerobss>

08001382 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001382:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001384:	f842 3b04 	str.w	r3, [r2], #4

08001388 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001388:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800138a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800138c:	d3f9      	bcc.n	8001382 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800138e:	f7ff febb 	bl	8001108 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001392:	f003 ff09 	bl	80051a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001396:	f7ff fa4b 	bl	8000830 <main>
  bx  lr    
 800139a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800139c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80013a0:	08005aa8 	.word	0x08005aa8
  ldr  r0, =_sdata
 80013a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80013a8:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80013ac:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80013b0:	20006044 	.word	0x20006044

080013b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013b4:	e7fe      	b.n	80013b4 <ADC_IRQHandler>
	...

080013b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013bc:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <HAL_Init+0x40>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0d      	ldr	r2, [pc, #52]	; (80013f8 <HAL_Init+0x40>)
 80013c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <HAL_Init+0x40>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <HAL_Init+0x40>)
 80013ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <HAL_Init+0x40>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a07      	ldr	r2, [pc, #28]	; (80013f8 <HAL_Init+0x40>)
 80013da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e0:	2003      	movs	r0, #3
 80013e2:	f000 f94d 	bl	8001680 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013e6:	2000      	movs	r0, #0
 80013e8:	f000 f808 	bl	80013fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013ec:	f7ff fde2 	bl	8000fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40023c00 	.word	0x40023c00

080013fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <HAL_InitTick+0x54>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <HAL_InitTick+0x58>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	4619      	mov	r1, r3
 800140e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001412:	fbb3 f3f1 	udiv	r3, r3, r1
 8001416:	fbb2 f3f3 	udiv	r3, r2, r3
 800141a:	4618      	mov	r0, r3
 800141c:	f000 f965 	bl	80016ea <HAL_SYSTICK_Config>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e00e      	b.n	8001448 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b0f      	cmp	r3, #15
 800142e:	d80a      	bhi.n	8001446 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001430:	2200      	movs	r2, #0
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	f04f 30ff 	mov.w	r0, #4294967295
 8001438:	f000 f92d 	bl	8001696 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800143c:	4a06      	ldr	r2, [pc, #24]	; (8001458 <HAL_InitTick+0x5c>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001442:	2300      	movs	r3, #0
 8001444:	e000      	b.n	8001448 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
}
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000004 	.word	0x20000004
 8001454:	2000000c 	.word	0x2000000c
 8001458:	20000008 	.word	0x20000008

0800145c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_IncTick+0x20>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_IncTick+0x24>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4413      	add	r3, r2
 800146c:	4a04      	ldr	r2, [pc, #16]	; (8001480 <HAL_IncTick+0x24>)
 800146e:	6013      	str	r3, [r2, #0]
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	2000000c 	.word	0x2000000c
 8001480:	2000603c 	.word	0x2000603c

08001484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return uwTick;
 8001488:	4b03      	ldr	r3, [pc, #12]	; (8001498 <HAL_GetTick+0x14>)
 800148a:	681b      	ldr	r3, [r3, #0]
}
 800148c:	4618      	mov	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	2000603c 	.word	0x2000603c

0800149c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a4:	f7ff ffee 	bl	8001484 <HAL_GetTick>
 80014a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b4:	d005      	beq.n	80014c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <HAL_Delay+0x40>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4413      	add	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014c2:	bf00      	nop
 80014c4:	f7ff ffde 	bl	8001484 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d8f7      	bhi.n	80014c4 <HAL_Delay+0x28>
  {
  }
}
 80014d4:	bf00      	nop
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	2000000c 	.word	0x2000000c

080014e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <__NVIC_SetPriorityGrouping+0x44>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014fc:	4013      	ands	r3, r2
 80014fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001508:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800150c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001512:	4a04      	ldr	r2, [pc, #16]	; (8001524 <__NVIC_SetPriorityGrouping+0x44>)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	60d3      	str	r3, [r2, #12]
}
 8001518:	bf00      	nop
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <__NVIC_GetPriorityGrouping+0x18>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	0a1b      	lsrs	r3, r3, #8
 8001532:	f003 0307 	and.w	r3, r3, #7
}
 8001536:	4618      	mov	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	2b00      	cmp	r3, #0
 8001554:	db0b      	blt.n	800156e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	f003 021f 	and.w	r2, r3, #31
 800155c:	4907      	ldr	r1, [pc, #28]	; (800157c <__NVIC_EnableIRQ+0x38>)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	095b      	lsrs	r3, r3, #5
 8001564:	2001      	movs	r0, #1
 8001566:	fa00 f202 	lsl.w	r2, r0, r2
 800156a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	e000e100 	.word	0xe000e100

08001580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	6039      	str	r1, [r7, #0]
 800158a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001590:	2b00      	cmp	r3, #0
 8001592:	db0a      	blt.n	80015aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	b2da      	uxtb	r2, r3
 8001598:	490c      	ldr	r1, [pc, #48]	; (80015cc <__NVIC_SetPriority+0x4c>)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	0112      	lsls	r2, r2, #4
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	440b      	add	r3, r1
 80015a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a8:	e00a      	b.n	80015c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4908      	ldr	r1, [pc, #32]	; (80015d0 <__NVIC_SetPriority+0x50>)
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	3b04      	subs	r3, #4
 80015b8:	0112      	lsls	r2, r2, #4
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	440b      	add	r3, r1
 80015be:	761a      	strb	r2, [r3, #24]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000e100 	.word	0xe000e100
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b089      	sub	sp, #36	; 0x24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f1c3 0307 	rsb	r3, r3, #7
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	bf28      	it	cs
 80015f2:	2304      	movcs	r3, #4
 80015f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3304      	adds	r3, #4
 80015fa:	2b06      	cmp	r3, #6
 80015fc:	d902      	bls.n	8001604 <NVIC_EncodePriority+0x30>
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3b03      	subs	r3, #3
 8001602:	e000      	b.n	8001606 <NVIC_EncodePriority+0x32>
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001608:	f04f 32ff 	mov.w	r2, #4294967295
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43da      	mvns	r2, r3
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	401a      	ands	r2, r3
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800161c:	f04f 31ff 	mov.w	r1, #4294967295
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	fa01 f303 	lsl.w	r3, r1, r3
 8001626:	43d9      	mvns	r1, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800162c:	4313      	orrs	r3, r2
         );
}
 800162e:	4618      	mov	r0, r3
 8001630:	3724      	adds	r7, #36	; 0x24
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
	...

0800163c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3b01      	subs	r3, #1
 8001648:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800164c:	d301      	bcc.n	8001652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800164e:	2301      	movs	r3, #1
 8001650:	e00f      	b.n	8001672 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001652:	4a0a      	ldr	r2, [pc, #40]	; (800167c <SysTick_Config+0x40>)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3b01      	subs	r3, #1
 8001658:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800165a:	210f      	movs	r1, #15
 800165c:	f04f 30ff 	mov.w	r0, #4294967295
 8001660:	f7ff ff8e 	bl	8001580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001664:	4b05      	ldr	r3, [pc, #20]	; (800167c <SysTick_Config+0x40>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800166a:	4b04      	ldr	r3, [pc, #16]	; (800167c <SysTick_Config+0x40>)
 800166c:	2207      	movs	r2, #7
 800166e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	e000e010 	.word	0xe000e010

08001680 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff ff29 	bl	80014e0 <__NVIC_SetPriorityGrouping>
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001696:	b580      	push	{r7, lr}
 8001698:	b086      	sub	sp, #24
 800169a:	af00      	add	r7, sp, #0
 800169c:	4603      	mov	r3, r0
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	607a      	str	r2, [r7, #4]
 80016a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a8:	f7ff ff3e 	bl	8001528 <__NVIC_GetPriorityGrouping>
 80016ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	68b9      	ldr	r1, [r7, #8]
 80016b2:	6978      	ldr	r0, [r7, #20]
 80016b4:	f7ff ff8e 	bl	80015d4 <NVIC_EncodePriority>
 80016b8:	4602      	mov	r2, r0
 80016ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016be:	4611      	mov	r1, r2
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff5d 	bl	8001580 <__NVIC_SetPriority>
}
 80016c6:	bf00      	nop
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	4603      	mov	r3, r0
 80016d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff31 	bl	8001544 <__NVIC_EnableIRQ>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff ffa2 	bl	800163c <SysTick_Config>
 80016f8:	4603      	mov	r3, r0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001710:	f7ff feb8 	bl	8001484 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e099      	b.n	8001854 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2202      	movs	r2, #2
 800172c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 0201 	bic.w	r2, r2, #1
 800173e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001740:	e00f      	b.n	8001762 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001742:	f7ff fe9f 	bl	8001484 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b05      	cmp	r3, #5
 800174e:	d908      	bls.n	8001762 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2220      	movs	r2, #32
 8001754:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2203      	movs	r2, #3
 800175a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e078      	b.n	8001854 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1e8      	bne.n	8001742 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	4b38      	ldr	r3, [pc, #224]	; (800185c <HAL_DMA_Init+0x158>)
 800177c:	4013      	ands	r3, r2
 800177e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800178e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800179a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b8:	2b04      	cmp	r3, #4
 80017ba:	d107      	bne.n	80017cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c4:	4313      	orrs	r3, r2
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	f023 0307 	bic.w	r3, r3, #7
 80017e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	d117      	bne.n	8001826 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00e      	beq.n	8001826 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f000 fae5 	bl	8001dd8 <DMA_CheckFifoParam>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d008      	beq.n	8001826 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2240      	movs	r2, #64	; 0x40
 8001818:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2201      	movs	r2, #1
 800181e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001822:	2301      	movs	r3, #1
 8001824:	e016      	b.n	8001854 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f000 fa9c 	bl	8001d6c <DMA_CalcBaseAndBitshift>
 8001834:	4603      	mov	r3, r0
 8001836:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800183c:	223f      	movs	r2, #63	; 0x3f
 800183e:	409a      	lsls	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	f010803f 	.word	0xf010803f

08001860 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
 800186c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800186e:	2300      	movs	r3, #0
 8001870:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001876:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800187e:	2b01      	cmp	r3, #1
 8001880:	d101      	bne.n	8001886 <HAL_DMA_Start_IT+0x26>
 8001882:	2302      	movs	r3, #2
 8001884:	e040      	b.n	8001908 <HAL_DMA_Start_IT+0xa8>
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2201      	movs	r2, #1
 800188a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b01      	cmp	r3, #1
 8001898:	d12f      	bne.n	80018fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2202      	movs	r2, #2
 800189e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2200      	movs	r2, #0
 80018a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	68b9      	ldr	r1, [r7, #8]
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f000 fa2e 	bl	8001d10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b8:	223f      	movs	r2, #63	; 0x3f
 80018ba:	409a      	lsls	r2, r3
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f042 0216 	orr.w	r2, r2, #22
 80018ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d007      	beq.n	80018e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f042 0208 	orr.w	r2, r2, #8
 80018e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f042 0201 	orr.w	r2, r2, #1
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	e005      	b.n	8001906 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001902:	2302      	movs	r3, #2
 8001904:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001906:	7dfb      	ldrb	r3, [r7, #23]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d004      	beq.n	800192e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2280      	movs	r2, #128	; 0x80
 8001928:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e00c      	b.n	8001948 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2205      	movs	r2, #5
 8001932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f022 0201 	bic.w	r2, r2, #1
 8001944:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800195c:	2300      	movs	r3, #0
 800195e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001960:	4b92      	ldr	r3, [pc, #584]	; (8001bac <HAL_DMA_IRQHandler+0x258>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a92      	ldr	r2, [pc, #584]	; (8001bb0 <HAL_DMA_IRQHandler+0x25c>)
 8001966:	fba2 2303 	umull	r2, r3, r2, r3
 800196a:	0a9b      	lsrs	r3, r3, #10
 800196c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001972:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197e:	2208      	movs	r2, #8
 8001980:	409a      	lsls	r2, r3
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	4013      	ands	r3, r2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d01a      	beq.n	80019c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b00      	cmp	r3, #0
 8001996:	d013      	beq.n	80019c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 0204 	bic.w	r2, r2, #4
 80019a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ac:	2208      	movs	r2, #8
 80019ae:	409a      	lsls	r2, r3
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b8:	f043 0201 	orr.w	r2, r3, #1
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c4:	2201      	movs	r2, #1
 80019c6:	409a      	lsls	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4013      	ands	r3, r2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d012      	beq.n	80019f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00b      	beq.n	80019f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e2:	2201      	movs	r2, #1
 80019e4:	409a      	lsls	r2, r3
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ee:	f043 0202 	orr.w	r2, r3, #2
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019fa:	2204      	movs	r2, #4
 80019fc:	409a      	lsls	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	4013      	ands	r3, r2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d012      	beq.n	8001a2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00b      	beq.n	8001a2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a18:	2204      	movs	r2, #4
 8001a1a:	409a      	lsls	r2, r3
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a24:	f043 0204 	orr.w	r2, r3, #4
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a30:	2210      	movs	r2, #16
 8001a32:	409a      	lsls	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4013      	ands	r3, r2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d043      	beq.n	8001ac4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d03c      	beq.n	8001ac4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4e:	2210      	movs	r2, #16
 8001a50:	409a      	lsls	r2, r3
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d018      	beq.n	8001a96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d108      	bne.n	8001a84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d024      	beq.n	8001ac4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	4798      	blx	r3
 8001a82:	e01f      	b.n	8001ac4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d01b      	beq.n	8001ac4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	4798      	blx	r3
 8001a94:	e016      	b.n	8001ac4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d107      	bne.n	8001ab4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 0208 	bic.w	r2, r2, #8
 8001ab2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac8:	2220      	movs	r2, #32
 8001aca:	409a      	lsls	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f000 808e 	beq.w	8001bf2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0310 	and.w	r3, r3, #16
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 8086 	beq.w	8001bf2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aea:	2220      	movs	r2, #32
 8001aec:	409a      	lsls	r2, r3
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b05      	cmp	r3, #5
 8001afc:	d136      	bne.n	8001b6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 0216 	bic.w	r2, r2, #22
 8001b0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	695a      	ldr	r2, [r3, #20]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d103      	bne.n	8001b2e <HAL_DMA_IRQHandler+0x1da>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d007      	beq.n	8001b3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0208 	bic.w	r2, r2, #8
 8001b3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b42:	223f      	movs	r2, #63	; 0x3f
 8001b44:	409a      	lsls	r2, r3
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d07d      	beq.n	8001c5e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	4798      	blx	r3
        }
        return;
 8001b6a:	e078      	b.n	8001c5e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d01c      	beq.n	8001bb4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d108      	bne.n	8001b9a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d030      	beq.n	8001bf2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	4798      	blx	r3
 8001b98:	e02b      	b.n	8001bf2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d027      	beq.n	8001bf2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	4798      	blx	r3
 8001baa:	e022      	b.n	8001bf2 <HAL_DMA_IRQHandler+0x29e>
 8001bac:	20000004 	.word	0x20000004
 8001bb0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d10f      	bne.n	8001be2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0210 	bic.w	r2, r2, #16
 8001bd0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d032      	beq.n	8001c60 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d022      	beq.n	8001c4c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2205      	movs	r2, #5
 8001c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 0201 	bic.w	r2, r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	3301      	adds	r3, #1
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d307      	bcc.n	8001c3a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1f2      	bne.n	8001c1e <HAL_DMA_IRQHandler+0x2ca>
 8001c38:	e000      	b.n	8001c3c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001c3a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d005      	beq.n	8001c60 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	4798      	blx	r3
 8001c5c:	e000      	b.n	8001c60 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001c5e:	bf00      	nop
    }
  }
}
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop

08001c68 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b087      	sub	sp, #28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	460b      	mov	r3, r1
 8001c72:	607a      	str	r2, [r7, #4]
 8001c74:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d101      	bne.n	8001c88 <HAL_DMA_RegisterCallback+0x20>
 8001c84:	2302      	movs	r3, #2
 8001c86:	e03c      	b.n	8001d02 <HAL_DMA_RegisterCallback+0x9a>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d129      	bne.n	8001cf0 <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 8001c9c:	7afb      	ldrb	r3, [r7, #11]
 8001c9e:	2b05      	cmp	r3, #5
 8001ca0:	d829      	bhi.n	8001cf6 <HAL_DMA_RegisterCallback+0x8e>
 8001ca2:	a201      	add	r2, pc, #4	; (adr r2, 8001ca8 <HAL_DMA_RegisterCallback+0x40>)
 8001ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca8:	08001cc1 	.word	0x08001cc1
 8001cac:	08001cc9 	.word	0x08001cc9
 8001cb0:	08001cd1 	.word	0x08001cd1
 8001cb4:	08001cd9 	.word	0x08001cd9
 8001cb8:	08001ce1 	.word	0x08001ce1
 8001cbc:	08001ce9 	.word	0x08001ce9
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8001cc6:	e017      	b.n	8001cf8 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8001cce:	e013      	b.n	8001cf8 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8001cd6:	e00f      	b.n	8001cf8 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8001cde:	e00b      	b.n	8001cf8 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8001ce6:	e007      	b.n	8001cf8 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8001cee:	e003      	b.n	8001cf8 <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	75fb      	strb	r3, [r7, #23]
 8001cf4:	e000      	b.n	8001cf8 <HAL_DMA_RegisterCallback+0x90>
      break;
 8001cf6:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8001d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	371c      	adds	r7, #28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop

08001d10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	2b40      	cmp	r3, #64	; 0x40
 8001d3c:	d108      	bne.n	8001d50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d4e:	e007      	b.n	8001d60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68ba      	ldr	r2, [r7, #8]
 8001d56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	60da      	str	r2, [r3, #12]
}
 8001d60:	bf00      	nop
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	3b10      	subs	r3, #16
 8001d7c:	4a14      	ldr	r2, [pc, #80]	; (8001dd0 <DMA_CalcBaseAndBitshift+0x64>)
 8001d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d82:	091b      	lsrs	r3, r3, #4
 8001d84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d86:	4a13      	ldr	r2, [pc, #76]	; (8001dd4 <DMA_CalcBaseAndBitshift+0x68>)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2b03      	cmp	r3, #3
 8001d98:	d909      	bls.n	8001dae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001da2:	f023 0303 	bic.w	r3, r3, #3
 8001da6:	1d1a      	adds	r2, r3, #4
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	659a      	str	r2, [r3, #88]	; 0x58
 8001dac:	e007      	b.n	8001dbe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001db6:	f023 0303 	bic.w	r3, r3, #3
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	aaaaaaab 	.word	0xaaaaaaab
 8001dd4:	08005a5c 	.word	0x08005a5c

08001dd8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d11f      	bne.n	8001e32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2b03      	cmp	r3, #3
 8001df6:	d855      	bhi.n	8001ea4 <DMA_CheckFifoParam+0xcc>
 8001df8:	a201      	add	r2, pc, #4	; (adr r2, 8001e00 <DMA_CheckFifoParam+0x28>)
 8001dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfe:	bf00      	nop
 8001e00:	08001e11 	.word	0x08001e11
 8001e04:	08001e23 	.word	0x08001e23
 8001e08:	08001e11 	.word	0x08001e11
 8001e0c:	08001ea5 	.word	0x08001ea5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d045      	beq.n	8001ea8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e20:	e042      	b.n	8001ea8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e2a:	d13f      	bne.n	8001eac <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e30:	e03c      	b.n	8001eac <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e3a:	d121      	bne.n	8001e80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2b03      	cmp	r3, #3
 8001e40:	d836      	bhi.n	8001eb0 <DMA_CheckFifoParam+0xd8>
 8001e42:	a201      	add	r2, pc, #4	; (adr r2, 8001e48 <DMA_CheckFifoParam+0x70>)
 8001e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e48:	08001e59 	.word	0x08001e59
 8001e4c:	08001e5f 	.word	0x08001e5f
 8001e50:	08001e59 	.word	0x08001e59
 8001e54:	08001e71 	.word	0x08001e71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8001e5c:	e02f      	b.n	8001ebe <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d024      	beq.n	8001eb4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e6e:	e021      	b.n	8001eb4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e78:	d11e      	bne.n	8001eb8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e7e:	e01b      	b.n	8001eb8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d902      	bls.n	8001e8c <DMA_CheckFifoParam+0xb4>
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	d003      	beq.n	8001e92 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e8a:	e018      	b.n	8001ebe <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8001e90:	e015      	b.n	8001ebe <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00e      	beq.n	8001ebc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	73fb      	strb	r3, [r7, #15]
      break;
 8001ea2:	e00b      	b.n	8001ebc <DMA_CheckFifoParam+0xe4>
      break;
 8001ea4:	bf00      	nop
 8001ea6:	e00a      	b.n	8001ebe <DMA_CheckFifoParam+0xe6>
      break;
 8001ea8:	bf00      	nop
 8001eaa:	e008      	b.n	8001ebe <DMA_CheckFifoParam+0xe6>
      break;
 8001eac:	bf00      	nop
 8001eae:	e006      	b.n	8001ebe <DMA_CheckFifoParam+0xe6>
      break;
 8001eb0:	bf00      	nop
 8001eb2:	e004      	b.n	8001ebe <DMA_CheckFifoParam+0xe6>
      break;
 8001eb4:	bf00      	nop
 8001eb6:	e002      	b.n	8001ebe <DMA_CheckFifoParam+0xe6>
      break;   
 8001eb8:	bf00      	nop
 8001eba:	e000      	b.n	8001ebe <DMA_CheckFifoParam+0xe6>
      break;
 8001ebc:	bf00      	nop
    }
  } 
  
  return status; 
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b089      	sub	sp, #36	; 0x24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	e165      	b.n	80021b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ee8:	2201      	movs	r2, #1
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	f040 8154 	bne.w	80021ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d00b      	beq.n	8001f26 <HAL_GPIO_Init+0x5a>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d007      	beq.n	8001f26 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f1a:	2b11      	cmp	r3, #17
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b12      	cmp	r3, #18
 8001f24:	d130      	bne.n	8001f88 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	2203      	movs	r2, #3
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	091b      	lsrs	r3, r3, #4
 8001f72:	f003 0201 	and.w	r2, r3, #1
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	2203      	movs	r2, #3
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d003      	beq.n	8001fc8 <HAL_GPIO_Init+0xfc>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b12      	cmp	r3, #18
 8001fc6:	d123      	bne.n	8002010 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	08da      	lsrs	r2, r3, #3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3208      	adds	r2, #8
 8001fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	220f      	movs	r2, #15
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	08da      	lsrs	r2, r3, #3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3208      	adds	r2, #8
 800200a:	69b9      	ldr	r1, [r7, #24]
 800200c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	2203      	movs	r2, #3
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 0203 	and.w	r2, r3, #3
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 80ae 	beq.w	80021ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	4b5c      	ldr	r3, [pc, #368]	; (80021c8 <HAL_GPIO_Init+0x2fc>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	4a5b      	ldr	r2, [pc, #364]	; (80021c8 <HAL_GPIO_Init+0x2fc>)
 800205c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002060:	6453      	str	r3, [r2, #68]	; 0x44
 8002062:	4b59      	ldr	r3, [pc, #356]	; (80021c8 <HAL_GPIO_Init+0x2fc>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800206e:	4a57      	ldr	r2, [pc, #348]	; (80021cc <HAL_GPIO_Init+0x300>)
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	089b      	lsrs	r3, r3, #2
 8002074:	3302      	adds	r3, #2
 8002076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	220f      	movs	r2, #15
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4013      	ands	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a4e      	ldr	r2, [pc, #312]	; (80021d0 <HAL_GPIO_Init+0x304>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d025      	beq.n	80020e6 <HAL_GPIO_Init+0x21a>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a4d      	ldr	r2, [pc, #308]	; (80021d4 <HAL_GPIO_Init+0x308>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d01f      	beq.n	80020e2 <HAL_GPIO_Init+0x216>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a4c      	ldr	r2, [pc, #304]	; (80021d8 <HAL_GPIO_Init+0x30c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d019      	beq.n	80020de <HAL_GPIO_Init+0x212>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a4b      	ldr	r2, [pc, #300]	; (80021dc <HAL_GPIO_Init+0x310>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d013      	beq.n	80020da <HAL_GPIO_Init+0x20e>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a4a      	ldr	r2, [pc, #296]	; (80021e0 <HAL_GPIO_Init+0x314>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d00d      	beq.n	80020d6 <HAL_GPIO_Init+0x20a>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a49      	ldr	r2, [pc, #292]	; (80021e4 <HAL_GPIO_Init+0x318>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d007      	beq.n	80020d2 <HAL_GPIO_Init+0x206>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a48      	ldr	r2, [pc, #288]	; (80021e8 <HAL_GPIO_Init+0x31c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d101      	bne.n	80020ce <HAL_GPIO_Init+0x202>
 80020ca:	2306      	movs	r3, #6
 80020cc:	e00c      	b.n	80020e8 <HAL_GPIO_Init+0x21c>
 80020ce:	2307      	movs	r3, #7
 80020d0:	e00a      	b.n	80020e8 <HAL_GPIO_Init+0x21c>
 80020d2:	2305      	movs	r3, #5
 80020d4:	e008      	b.n	80020e8 <HAL_GPIO_Init+0x21c>
 80020d6:	2304      	movs	r3, #4
 80020d8:	e006      	b.n	80020e8 <HAL_GPIO_Init+0x21c>
 80020da:	2303      	movs	r3, #3
 80020dc:	e004      	b.n	80020e8 <HAL_GPIO_Init+0x21c>
 80020de:	2302      	movs	r3, #2
 80020e0:	e002      	b.n	80020e8 <HAL_GPIO_Init+0x21c>
 80020e2:	2301      	movs	r3, #1
 80020e4:	e000      	b.n	80020e8 <HAL_GPIO_Init+0x21c>
 80020e6:	2300      	movs	r3, #0
 80020e8:	69fa      	ldr	r2, [r7, #28]
 80020ea:	f002 0203 	and.w	r2, r2, #3
 80020ee:	0092      	lsls	r2, r2, #2
 80020f0:	4093      	lsls	r3, r2
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020f8:	4934      	ldr	r1, [pc, #208]	; (80021cc <HAL_GPIO_Init+0x300>)
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	089b      	lsrs	r3, r3, #2
 80020fe:	3302      	adds	r3, #2
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002106:	4b39      	ldr	r3, [pc, #228]	; (80021ec <HAL_GPIO_Init+0x320>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	43db      	mvns	r3, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4013      	ands	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800212a:	4a30      	ldr	r2, [pc, #192]	; (80021ec <HAL_GPIO_Init+0x320>)
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002130:	4b2e      	ldr	r3, [pc, #184]	; (80021ec <HAL_GPIO_Init+0x320>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002154:	4a25      	ldr	r2, [pc, #148]	; (80021ec <HAL_GPIO_Init+0x320>)
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800215a:	4b24      	ldr	r3, [pc, #144]	; (80021ec <HAL_GPIO_Init+0x320>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	43db      	mvns	r3, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4013      	ands	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800217e:	4a1b      	ldr	r2, [pc, #108]	; (80021ec <HAL_GPIO_Init+0x320>)
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002184:	4b19      	ldr	r3, [pc, #100]	; (80021ec <HAL_GPIO_Init+0x320>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d003      	beq.n	80021a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021a8:	4a10      	ldr	r2, [pc, #64]	; (80021ec <HAL_GPIO_Init+0x320>)
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3301      	adds	r3, #1
 80021b2:	61fb      	str	r3, [r7, #28]
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	2b0f      	cmp	r3, #15
 80021b8:	f67f ae96 	bls.w	8001ee8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021bc:	bf00      	nop
 80021be:	3724      	adds	r7, #36	; 0x24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40013800 	.word	0x40013800
 80021d0:	40020000 	.word	0x40020000
 80021d4:	40020400 	.word	0x40020400
 80021d8:	40020800 	.word	0x40020800
 80021dc:	40020c00 	.word	0x40020c00
 80021e0:	40021000 	.word	0x40021000
 80021e4:	40021400 	.word	0x40021400
 80021e8:	40021800 	.word	0x40021800
 80021ec:	40013c00 	.word	0x40013c00

080021f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	807b      	strh	r3, [r7, #2]
 80021fc:	4613      	mov	r3, r2
 80021fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002200:	787b      	ldrb	r3, [r7, #1]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002206:	887a      	ldrh	r2, [r7, #2]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800220c:	e003      	b.n	8002216 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800220e:	887b      	ldrh	r3, [r7, #2]
 8002210:	041a      	lsls	r2, r3, #16
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	619a      	str	r2, [r3, #24]
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
	...

08002224 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e11f      	b.n	8002476 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d106      	bne.n	8002250 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7fe faa8 	bl	80007a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2224      	movs	r2, #36	; 0x24
 8002254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 0201 	bic.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002276:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002286:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002288:	f001 f8be 	bl	8003408 <HAL_RCC_GetPCLK1Freq>
 800228c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	4a7b      	ldr	r2, [pc, #492]	; (8002480 <HAL_I2C_Init+0x25c>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d807      	bhi.n	80022a8 <HAL_I2C_Init+0x84>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4a7a      	ldr	r2, [pc, #488]	; (8002484 <HAL_I2C_Init+0x260>)
 800229c:	4293      	cmp	r3, r2
 800229e:	bf94      	ite	ls
 80022a0:	2301      	movls	r3, #1
 80022a2:	2300      	movhi	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	e006      	b.n	80022b6 <HAL_I2C_Init+0x92>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4a77      	ldr	r2, [pc, #476]	; (8002488 <HAL_I2C_Init+0x264>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	bf94      	ite	ls
 80022b0:	2301      	movls	r3, #1
 80022b2:	2300      	movhi	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e0db      	b.n	8002476 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	4a72      	ldr	r2, [pc, #456]	; (800248c <HAL_I2C_Init+0x268>)
 80022c2:	fba2 2303 	umull	r2, r3, r2, r3
 80022c6:	0c9b      	lsrs	r3, r3, #18
 80022c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	430a      	orrs	r2, r1
 80022dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	4a64      	ldr	r2, [pc, #400]	; (8002480 <HAL_I2C_Init+0x25c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d802      	bhi.n	80022f8 <HAL_I2C_Init+0xd4>
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	3301      	adds	r3, #1
 80022f6:	e009      	b.n	800230c <HAL_I2C_Init+0xe8>
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022fe:	fb02 f303 	mul.w	r3, r2, r3
 8002302:	4a63      	ldr	r2, [pc, #396]	; (8002490 <HAL_I2C_Init+0x26c>)
 8002304:	fba2 2303 	umull	r2, r3, r2, r3
 8002308:	099b      	lsrs	r3, r3, #6
 800230a:	3301      	adds	r3, #1
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6812      	ldr	r2, [r2, #0]
 8002310:	430b      	orrs	r3, r1
 8002312:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800231e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	4956      	ldr	r1, [pc, #344]	; (8002480 <HAL_I2C_Init+0x25c>)
 8002328:	428b      	cmp	r3, r1
 800232a:	d80d      	bhi.n	8002348 <HAL_I2C_Init+0x124>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	1e59      	subs	r1, r3, #1
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	fbb1 f3f3 	udiv	r3, r1, r3
 800233a:	3301      	adds	r3, #1
 800233c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002340:	2b04      	cmp	r3, #4
 8002342:	bf38      	it	cc
 8002344:	2304      	movcc	r3, #4
 8002346:	e04f      	b.n	80023e8 <HAL_I2C_Init+0x1c4>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d111      	bne.n	8002374 <HAL_I2C_Init+0x150>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	1e58      	subs	r0, r3, #1
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6859      	ldr	r1, [r3, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	440b      	add	r3, r1
 800235e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002362:	3301      	adds	r3, #1
 8002364:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002368:	2b00      	cmp	r3, #0
 800236a:	bf0c      	ite	eq
 800236c:	2301      	moveq	r3, #1
 800236e:	2300      	movne	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	e012      	b.n	800239a <HAL_I2C_Init+0x176>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	1e58      	subs	r0, r3, #1
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6859      	ldr	r1, [r3, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	0099      	lsls	r1, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	fbb0 f3f3 	udiv	r3, r0, r3
 800238a:	3301      	adds	r3, #1
 800238c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002390:	2b00      	cmp	r3, #0
 8002392:	bf0c      	ite	eq
 8002394:	2301      	moveq	r3, #1
 8002396:	2300      	movne	r3, #0
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <HAL_I2C_Init+0x17e>
 800239e:	2301      	movs	r3, #1
 80023a0:	e022      	b.n	80023e8 <HAL_I2C_Init+0x1c4>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10e      	bne.n	80023c8 <HAL_I2C_Init+0x1a4>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	1e58      	subs	r0, r3, #1
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6859      	ldr	r1, [r3, #4]
 80023b2:	460b      	mov	r3, r1
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	440b      	add	r3, r1
 80023b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80023bc:	3301      	adds	r3, #1
 80023be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023c6:	e00f      	b.n	80023e8 <HAL_I2C_Init+0x1c4>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	1e58      	subs	r0, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6859      	ldr	r1, [r3, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	0099      	lsls	r1, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	fbb0 f3f3 	udiv	r3, r0, r3
 80023de:	3301      	adds	r3, #1
 80023e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	6809      	ldr	r1, [r1, #0]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69da      	ldr	r2, [r3, #28]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002416:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6911      	ldr	r1, [r2, #16]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	68d2      	ldr	r2, [r2, #12]
 8002422:	4311      	orrs	r1, r2
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6812      	ldr	r2, [r2, #0]
 8002428:	430b      	orrs	r3, r1
 800242a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	695a      	ldr	r2, [r3, #20]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	430a      	orrs	r2, r1
 8002446:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0201 	orr.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2220      	movs	r2, #32
 8002462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	000186a0 	.word	0x000186a0
 8002484:	001e847f 	.word	0x001e847f
 8002488:	003d08ff 	.word	0x003d08ff
 800248c:	431bde83 	.word	0x431bde83
 8002490:	10624dd3 	.word	0x10624dd3

08002494 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af02      	add	r7, sp, #8
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	4608      	mov	r0, r1
 800249e:	4611      	mov	r1, r2
 80024a0:	461a      	mov	r2, r3
 80024a2:	4603      	mov	r3, r0
 80024a4:	817b      	strh	r3, [r7, #10]
 80024a6:	460b      	mov	r3, r1
 80024a8:	813b      	strh	r3, [r7, #8]
 80024aa:	4613      	mov	r3, r2
 80024ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024ae:	f7fe ffe9 	bl	8001484 <HAL_GetTick>
 80024b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b20      	cmp	r3, #32
 80024be:	f040 80d9 	bne.w	8002674 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	2319      	movs	r3, #25
 80024c8:	2201      	movs	r2, #1
 80024ca:	496d      	ldr	r1, [pc, #436]	; (8002680 <HAL_I2C_Mem_Write+0x1ec>)
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 fc7b 	bl	8002dc8 <I2C_WaitOnFlagUntilTimeout>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80024d8:	2302      	movs	r3, #2
 80024da:	e0cc      	b.n	8002676 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d101      	bne.n	80024ea <HAL_I2C_Mem_Write+0x56>
 80024e6:	2302      	movs	r3, #2
 80024e8:	e0c5      	b.n	8002676 <HAL_I2C_Mem_Write+0x1e2>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d007      	beq.n	8002510 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0201 	orr.w	r2, r2, #1
 800250e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800251e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2221      	movs	r2, #33	; 0x21
 8002524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2240      	movs	r2, #64	; 0x40
 800252c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a3a      	ldr	r2, [r7, #32]
 800253a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002540:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4a4d      	ldr	r2, [pc, #308]	; (8002684 <HAL_I2C_Mem_Write+0x1f0>)
 8002550:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002552:	88f8      	ldrh	r0, [r7, #6]
 8002554:	893a      	ldrh	r2, [r7, #8]
 8002556:	8979      	ldrh	r1, [r7, #10]
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	9301      	str	r3, [sp, #4]
 800255c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	4603      	mov	r3, r0
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f000 fab6 	bl	8002ad4 <I2C_RequestMemoryWrite>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d052      	beq.n	8002614 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e081      	b.n	8002676 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 fcfc 	bl	8002f74 <I2C_WaitOnTXEFlagUntilTimeout>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00d      	beq.n	800259e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	2b04      	cmp	r3, #4
 8002588:	d107      	bne.n	800259a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002598:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e06b      	b.n	8002676 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	781a      	ldrb	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	1c5a      	adds	r2, r3, #1
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b04      	cmp	r3, #4
 80025da:	d11b      	bne.n	8002614 <HAL_I2C_Mem_Write+0x180>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d017      	beq.n	8002614 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e8:	781a      	ldrb	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fe:	3b01      	subs	r3, #1
 8002600:	b29a      	uxth	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260a:	b29b      	uxth	r3, r3
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1aa      	bne.n	8002572 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 fce8 	bl	8002ff6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00d      	beq.n	8002648 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	2b04      	cmp	r3, #4
 8002632:	d107      	bne.n	8002644 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002642:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e016      	b.n	8002676 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002656:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2220      	movs	r2, #32
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002670:	2300      	movs	r3, #0
 8002672:	e000      	b.n	8002676 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002674:	2302      	movs	r3, #2
  }
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	00100002 	.word	0x00100002
 8002684:	ffff0000 	.word	0xffff0000

08002688 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08c      	sub	sp, #48	; 0x30
 800268c:	af02      	add	r7, sp, #8
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	4608      	mov	r0, r1
 8002692:	4611      	mov	r1, r2
 8002694:	461a      	mov	r2, r3
 8002696:	4603      	mov	r3, r0
 8002698:	817b      	strh	r3, [r7, #10]
 800269a:	460b      	mov	r3, r1
 800269c:	813b      	strh	r3, [r7, #8]
 800269e:	4613      	mov	r3, r2
 80026a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026a2:	f7fe feef 	bl	8001484 <HAL_GetTick>
 80026a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b20      	cmp	r3, #32
 80026b2:	f040 8208 	bne.w	8002ac6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	2319      	movs	r3, #25
 80026bc:	2201      	movs	r2, #1
 80026be:	497b      	ldr	r1, [pc, #492]	; (80028ac <HAL_I2C_Mem_Read+0x224>)
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 fb81 	bl	8002dc8 <I2C_WaitOnFlagUntilTimeout>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80026cc:	2302      	movs	r3, #2
 80026ce:	e1fb      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_I2C_Mem_Read+0x56>
 80026da:	2302      	movs	r3, #2
 80026dc:	e1f4      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d007      	beq.n	8002704 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0201 	orr.w	r2, r2, #1
 8002702:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002712:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2222      	movs	r2, #34	; 0x22
 8002718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2240      	movs	r2, #64	; 0x40
 8002720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800272e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002734:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273a:	b29a      	uxth	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4a5b      	ldr	r2, [pc, #364]	; (80028b0 <HAL_I2C_Mem_Read+0x228>)
 8002744:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002746:	88f8      	ldrh	r0, [r7, #6]
 8002748:	893a      	ldrh	r2, [r7, #8]
 800274a:	8979      	ldrh	r1, [r7, #10]
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	9301      	str	r3, [sp, #4]
 8002750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	4603      	mov	r3, r0
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 fa50 	bl	8002bfc <I2C_RequestMemoryRead>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e1b0      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276a:	2b00      	cmp	r3, #0
 800276c:	d113      	bne.n	8002796 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800276e:	2300      	movs	r3, #0
 8002770:	623b      	str	r3, [r7, #32]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	623b      	str	r3, [r7, #32]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	623b      	str	r3, [r7, #32]
 8002782:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	e184      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279a:	2b01      	cmp	r3, #1
 800279c:	d11b      	bne.n	80027d6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	61fb      	str	r3, [r7, #28]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	61fb      	str	r3, [r7, #28]
 80027c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	e164      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d11b      	bne.n	8002816 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027fe:	2300      	movs	r3, #0
 8002800:	61bb      	str	r3, [r7, #24]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	61bb      	str	r3, [r7, #24]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	61bb      	str	r3, [r7, #24]
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	e144      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800282c:	e138      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002832:	2b03      	cmp	r3, #3
 8002834:	f200 80f1 	bhi.w	8002a1a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283c:	2b01      	cmp	r3, #1
 800283e:	d123      	bne.n	8002888 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002842:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 fc17 	bl	8003078 <I2C_WaitOnRXNEFlagUntilTimeout>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e139      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	691a      	ldr	r2, [r3, #16]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287c:	b29b      	uxth	r3, r3
 800287e:	3b01      	subs	r3, #1
 8002880:	b29a      	uxth	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002886:	e10b      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288c:	2b02      	cmp	r3, #2
 800288e:	d14e      	bne.n	800292e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002896:	2200      	movs	r2, #0
 8002898:	4906      	ldr	r1, [pc, #24]	; (80028b4 <HAL_I2C_Mem_Read+0x22c>)
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 fa94 	bl	8002dc8 <I2C_WaitOnFlagUntilTimeout>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d008      	beq.n	80028b8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e10e      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
 80028aa:	bf00      	nop
 80028ac:	00100002 	.word	0x00100002
 80028b0:	ffff0000 	.word	0xffff0000
 80028b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691a      	ldr	r2, [r3, #16]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	691a      	ldr	r2, [r3, #16]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	1c5a      	adds	r2, r3, #1
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002916:	3b01      	subs	r3, #1
 8002918:	b29a      	uxth	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002922:	b29b      	uxth	r3, r3
 8002924:	3b01      	subs	r3, #1
 8002926:	b29a      	uxth	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800292c:	e0b8      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002934:	2200      	movs	r2, #0
 8002936:	4966      	ldr	r1, [pc, #408]	; (8002ad0 <HAL_I2C_Mem_Read+0x448>)
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 fa45 	bl	8002dc8 <I2C_WaitOnFlagUntilTimeout>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0bf      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002956:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691a      	ldr	r2, [r3, #16]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002980:	b29b      	uxth	r3, r3
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002990:	2200      	movs	r2, #0
 8002992:	494f      	ldr	r1, [pc, #316]	; (8002ad0 <HAL_I2C_Mem_Read+0x448>)
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 fa17 	bl	8002dc8 <I2C_WaitOnFlagUntilTimeout>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e091      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691a      	ldr	r2, [r3, #16]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029dc:	b29b      	uxth	r3, r3
 80029de:	3b01      	subs	r3, #1
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	691a      	ldr	r2, [r3, #16]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	1c5a      	adds	r2, r3, #1
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a18:	e042      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 fb2a 	bl	8003078 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e04c      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	691a      	ldr	r2, [r3, #16]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d118      	bne.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	691a      	ldr	r2, [r3, #16]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	1c5a      	adds	r2, r3, #1
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f47f aec2 	bne.w	800282e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2220      	movs	r2, #32
 8002aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e000      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002ac6:	2302      	movs	r3, #2
  }
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3728      	adds	r7, #40	; 0x28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	00010004 	.word	0x00010004

08002ad4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b088      	sub	sp, #32
 8002ad8:	af02      	add	r7, sp, #8
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	4608      	mov	r0, r1
 8002ade:	4611      	mov	r1, r2
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	817b      	strh	r3, [r7, #10]
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	813b      	strh	r3, [r7, #8]
 8002aea:	4613      	mov	r3, r2
 8002aec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002afc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 f95c 	bl	8002dc8 <I2C_WaitOnFlagUntilTimeout>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00c      	beq.n	8002b30 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e05f      	b.n	8002bf0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b30:	897b      	ldrh	r3, [r7, #10]
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	461a      	mov	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b3e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b42:	6a3a      	ldr	r2, [r7, #32]
 8002b44:	492c      	ldr	r1, [pc, #176]	; (8002bf8 <I2C_RequestMemoryWrite+0x124>)
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 f995 	bl	8002e76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e04c      	b.n	8002bf0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b56:	2300      	movs	r3, #0
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	617b      	str	r3, [r7, #20]
 8002b6a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b6e:	6a39      	ldr	r1, [r7, #32]
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 f9ff 	bl	8002f74 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00d      	beq.n	8002b98 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	d107      	bne.n	8002b94 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b92:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e02b      	b.n	8002bf0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b98:	88fb      	ldrh	r3, [r7, #6]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d105      	bne.n	8002baa <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b9e:	893b      	ldrh	r3, [r7, #8]
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	611a      	str	r2, [r3, #16]
 8002ba8:	e021      	b.n	8002bee <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002baa:	893b      	ldrh	r3, [r7, #8]
 8002bac:	0a1b      	lsrs	r3, r3, #8
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bba:	6a39      	ldr	r1, [r7, #32]
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 f9d9 	bl	8002f74 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00d      	beq.n	8002be4 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d107      	bne.n	8002be0 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bde:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e005      	b.n	8002bf0 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002be4:	893b      	ldrh	r3, [r7, #8]
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3718      	adds	r7, #24
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	00010002 	.word	0x00010002

08002bfc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af02      	add	r7, sp, #8
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	4608      	mov	r0, r1
 8002c06:	4611      	mov	r1, r2
 8002c08:	461a      	mov	r2, r3
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	817b      	strh	r3, [r7, #10]
 8002c0e:	460b      	mov	r3, r1
 8002c10:	813b      	strh	r3, [r7, #8]
 8002c12:	4613      	mov	r3, r2
 8002c14:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c24:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 f8c0 	bl	8002dc8 <I2C_WaitOnFlagUntilTimeout>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00c      	beq.n	8002c68 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e0a9      	b.n	8002dbc <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c68:	897b      	ldrh	r3, [r7, #10]
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c76:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	6a3a      	ldr	r2, [r7, #32]
 8002c7c:	4951      	ldr	r1, [pc, #324]	; (8002dc4 <I2C_RequestMemoryRead+0x1c8>)
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 f8f9 	bl	8002e76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e096      	b.n	8002dbc <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c8e:	2300      	movs	r3, #0
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	617b      	str	r3, [r7, #20]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	617b      	str	r3, [r7, #20]
 8002ca2:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca6:	6a39      	ldr	r1, [r7, #32]
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 f963 	bl	8002f74 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00d      	beq.n	8002cd0 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	2b04      	cmp	r3, #4
 8002cba:	d107      	bne.n	8002ccc <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e075      	b.n	8002dbc <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cd0:	88fb      	ldrh	r3, [r7, #6]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d105      	bne.n	8002ce2 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cd6:	893b      	ldrh	r3, [r7, #8]
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	611a      	str	r2, [r3, #16]
 8002ce0:	e021      	b.n	8002d26 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ce2:	893b      	ldrh	r3, [r7, #8]
 8002ce4:	0a1b      	lsrs	r3, r3, #8
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf2:	6a39      	ldr	r1, [r7, #32]
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f000 f93d 	bl	8002f74 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00d      	beq.n	8002d1c <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d107      	bne.n	8002d18 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d16:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e04f      	b.n	8002dbc <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d1c:	893b      	ldrh	r3, [r7, #8]
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d28:	6a39      	ldr	r1, [r7, #32]
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f000 f922 	bl	8002f74 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00d      	beq.n	8002d52 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d107      	bne.n	8002d4e <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e034      	b.n	8002dbc <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 f82a 	bl	8002dc8 <I2C_WaitOnFlagUntilTimeout>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00c      	beq.n	8002d94 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e013      	b.n	8002dbc <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d94:	897b      	ldrh	r3, [r7, #10]
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	6a3a      	ldr	r2, [r7, #32]
 8002da8:	4906      	ldr	r1, [pc, #24]	; (8002dc4 <I2C_RequestMemoryRead+0x1c8>)
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f000 f863 	bl	8002e76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	00010002 	.word	0x00010002

08002dc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dd8:	e025      	b.n	8002e26 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de0:	d021      	beq.n	8002e26 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de2:	f7fe fb4f 	bl	8001484 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d302      	bcc.n	8002df8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d116      	bne.n	8002e26 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2220      	movs	r2, #32
 8002e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	f043 0220 	orr.w	r2, r3, #32
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e023      	b.n	8002e6e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	0c1b      	lsrs	r3, r3, #16
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d10d      	bne.n	8002e4c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	43da      	mvns	r2, r3
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	bf0c      	ite	eq
 8002e42:	2301      	moveq	r3, #1
 8002e44:	2300      	movne	r3, #0
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	461a      	mov	r2, r3
 8002e4a:	e00c      	b.n	8002e66 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	43da      	mvns	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	4013      	ands	r3, r2
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	bf0c      	ite	eq
 8002e5e:	2301      	moveq	r3, #1
 8002e60:	2300      	movne	r3, #0
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	461a      	mov	r2, r3
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d0b6      	beq.n	8002dda <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b084      	sub	sp, #16
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	60f8      	str	r0, [r7, #12]
 8002e7e:	60b9      	str	r1, [r7, #8]
 8002e80:	607a      	str	r2, [r7, #4]
 8002e82:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e84:	e051      	b.n	8002f2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e94:	d123      	bne.n	8002ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ea4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002eae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	f043 0204 	orr.w	r2, r3, #4
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e046      	b.n	8002f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee4:	d021      	beq.n	8002f2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee6:	f7fe facd 	bl	8001484 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d302      	bcc.n	8002efc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d116      	bne.n	8002f2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2220      	movs	r2, #32
 8002f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	f043 0220 	orr.w	r2, r3, #32
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e020      	b.n	8002f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	0c1b      	lsrs	r3, r3, #16
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d10c      	bne.n	8002f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	43da      	mvns	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	bf14      	ite	ne
 8002f46:	2301      	movne	r3, #1
 8002f48:	2300      	moveq	r3, #0
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	e00b      	b.n	8002f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	43da      	mvns	r2, r3
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	bf14      	ite	ne
 8002f60:	2301      	movne	r3, #1
 8002f62:	2300      	moveq	r3, #0
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d18d      	bne.n	8002e86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f80:	e02d      	b.n	8002fde <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 f8ce 	bl	8003124 <I2C_IsAcknowledgeFailed>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e02d      	b.n	8002fee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f98:	d021      	beq.n	8002fde <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9a:	f7fe fa73 	bl	8001484 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d302      	bcc.n	8002fb0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d116      	bne.n	8002fde <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	f043 0220 	orr.w	r2, r3, #32
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e007      	b.n	8002fee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe8:	2b80      	cmp	r3, #128	; 0x80
 8002fea:	d1ca      	bne.n	8002f82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b084      	sub	sp, #16
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	60f8      	str	r0, [r7, #12]
 8002ffe:	60b9      	str	r1, [r7, #8]
 8003000:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003002:	e02d      	b.n	8003060 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 f88d 	bl	8003124 <I2C_IsAcknowledgeFailed>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e02d      	b.n	8003070 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301a:	d021      	beq.n	8003060 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800301c:	f7fe fa32 	bl	8001484 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	429a      	cmp	r2, r3
 800302a:	d302      	bcc.n	8003032 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d116      	bne.n	8003060 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	f043 0220 	orr.w	r2, r3, #32
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e007      	b.n	8003070 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	2b04      	cmp	r3, #4
 800306c:	d1ca      	bne.n	8003004 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003084:	e042      	b.n	800310c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	f003 0310 	and.w	r3, r3, #16
 8003090:	2b10      	cmp	r3, #16
 8003092:	d119      	bne.n	80030c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f06f 0210 	mvn.w	r2, #16
 800309c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2220      	movs	r2, #32
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e029      	b.n	800311c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c8:	f7fe f9dc 	bl	8001484 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d302      	bcc.n	80030de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d116      	bne.n	800310c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2220      	movs	r2, #32
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	f043 0220 	orr.w	r2, r3, #32
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e007      	b.n	800311c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003116:	2b40      	cmp	r3, #64	; 0x40
 8003118:	d1b5      	bne.n	8003086 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800313a:	d11b      	bne.n	8003174 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003144:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	f043 0204 	orr.w	r2, r3, #4
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e000      	b.n	8003176 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
	...

08003184 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	603b      	str	r3, [r7, #0]
 8003192:	4b20      	ldr	r3, [pc, #128]	; (8003214 <HAL_PWREx_EnableOverDrive+0x90>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	4a1f      	ldr	r2, [pc, #124]	; (8003214 <HAL_PWREx_EnableOverDrive+0x90>)
 8003198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800319c:	6413      	str	r3, [r2, #64]	; 0x40
 800319e:	4b1d      	ldr	r3, [pc, #116]	; (8003214 <HAL_PWREx_EnableOverDrive+0x90>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80031aa:	4b1b      	ldr	r3, [pc, #108]	; (8003218 <HAL_PWREx_EnableOverDrive+0x94>)
 80031ac:	2201      	movs	r2, #1
 80031ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031b0:	f7fe f968 	bl	8001484 <HAL_GetTick>
 80031b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80031b6:	e009      	b.n	80031cc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80031b8:	f7fe f964 	bl	8001484 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031c6:	d901      	bls.n	80031cc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e01f      	b.n	800320c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80031cc:	4b13      	ldr	r3, [pc, #76]	; (800321c <HAL_PWREx_EnableOverDrive+0x98>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d8:	d1ee      	bne.n	80031b8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80031da:	4b11      	ldr	r3, [pc, #68]	; (8003220 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031dc:	2201      	movs	r2, #1
 80031de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031e0:	f7fe f950 	bl	8001484 <HAL_GetTick>
 80031e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80031e6:	e009      	b.n	80031fc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80031e8:	f7fe f94c 	bl	8001484 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031f6:	d901      	bls.n	80031fc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e007      	b.n	800320c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80031fc:	4b07      	ldr	r3, [pc, #28]	; (800321c <HAL_PWREx_EnableOverDrive+0x98>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003204:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003208:	d1ee      	bne.n	80031e8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40023800 	.word	0x40023800
 8003218:	420e0040 	.word	0x420e0040
 800321c:	40007000 	.word	0x40007000
 8003220:	420e0044 	.word	0x420e0044

08003224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e0cc      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003238:	4b68      	ldr	r3, [pc, #416]	; (80033dc <HAL_RCC_ClockConfig+0x1b8>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 030f 	and.w	r3, r3, #15
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d90c      	bls.n	8003260 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003246:	4b65      	ldr	r3, [pc, #404]	; (80033dc <HAL_RCC_ClockConfig+0x1b8>)
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800324e:	4b63      	ldr	r3, [pc, #396]	; (80033dc <HAL_RCC_ClockConfig+0x1b8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	429a      	cmp	r2, r3
 800325a:	d001      	beq.n	8003260 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e0b8      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d020      	beq.n	80032ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003278:	4b59      	ldr	r3, [pc, #356]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	4a58      	ldr	r2, [pc, #352]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003282:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0308 	and.w	r3, r3, #8
 800328c:	2b00      	cmp	r3, #0
 800328e:	d005      	beq.n	800329c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003290:	4b53      	ldr	r3, [pc, #332]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	4a52      	ldr	r2, [pc, #328]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800329a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800329c:	4b50      	ldr	r3, [pc, #320]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	494d      	ldr	r1, [pc, #308]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d044      	beq.n	8003344 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d107      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c2:	4b47      	ldr	r3, [pc, #284]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d119      	bne.n	8003302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e07f      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d003      	beq.n	80032e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032de:	2b03      	cmp	r3, #3
 80032e0:	d107      	bne.n	80032f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e2:	4b3f      	ldr	r3, [pc, #252]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d109      	bne.n	8003302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e06f      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f2:	4b3b      	ldr	r3, [pc, #236]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e067      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003302:	4b37      	ldr	r3, [pc, #220]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f023 0203 	bic.w	r2, r3, #3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	4934      	ldr	r1, [pc, #208]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003310:	4313      	orrs	r3, r2
 8003312:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003314:	f7fe f8b6 	bl	8001484 <HAL_GetTick>
 8003318:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800331a:	e00a      	b.n	8003332 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800331c:	f7fe f8b2 	bl	8001484 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	f241 3288 	movw	r2, #5000	; 0x1388
 800332a:	4293      	cmp	r3, r2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e04f      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003332:	4b2b      	ldr	r3, [pc, #172]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 020c 	and.w	r2, r3, #12
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	429a      	cmp	r2, r3
 8003342:	d1eb      	bne.n	800331c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003344:	4b25      	ldr	r3, [pc, #148]	; (80033dc <HAL_RCC_ClockConfig+0x1b8>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 030f 	and.w	r3, r3, #15
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d20c      	bcs.n	800336c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003352:	4b22      	ldr	r3, [pc, #136]	; (80033dc <HAL_RCC_ClockConfig+0x1b8>)
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800335a:	4b20      	ldr	r3, [pc, #128]	; (80033dc <HAL_RCC_ClockConfig+0x1b8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d001      	beq.n	800336c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e032      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d008      	beq.n	800338a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003378:	4b19      	ldr	r3, [pc, #100]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	4916      	ldr	r1, [pc, #88]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	4313      	orrs	r3, r2
 8003388:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0308 	and.w	r3, r3, #8
 8003392:	2b00      	cmp	r3, #0
 8003394:	d009      	beq.n	80033aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003396:	4b12      	ldr	r3, [pc, #72]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	490e      	ldr	r1, [pc, #56]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033aa:	f000 f855 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 80033ae:	4601      	mov	r1, r0
 80033b0:	4b0b      	ldr	r3, [pc, #44]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	091b      	lsrs	r3, r3, #4
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	4a0a      	ldr	r2, [pc, #40]	; (80033e4 <HAL_RCC_ClockConfig+0x1c0>)
 80033bc:	5cd3      	ldrb	r3, [r2, r3]
 80033be:	fa21 f303 	lsr.w	r3, r1, r3
 80033c2:	4a09      	ldr	r2, [pc, #36]	; (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 80033c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033c6:	4b09      	ldr	r3, [pc, #36]	; (80033ec <HAL_RCC_ClockConfig+0x1c8>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fe f816 	bl	80013fc <HAL_InitTick>

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40023c00 	.word	0x40023c00
 80033e0:	40023800 	.word	0x40023800
 80033e4:	08005a44 	.word	0x08005a44
 80033e8:	20000004 	.word	0x20000004
 80033ec:	20000008 	.word	0x20000008

080033f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033f4:	4b03      	ldr	r3, [pc, #12]	; (8003404 <HAL_RCC_GetHCLKFreq+0x14>)
 80033f6:	681b      	ldr	r3, [r3, #0]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	20000004 	.word	0x20000004

08003408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800340c:	f7ff fff0 	bl	80033f0 <HAL_RCC_GetHCLKFreq>
 8003410:	4601      	mov	r1, r0
 8003412:	4b05      	ldr	r3, [pc, #20]	; (8003428 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	0a9b      	lsrs	r3, r3, #10
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	4a03      	ldr	r2, [pc, #12]	; (800342c <HAL_RCC_GetPCLK1Freq+0x24>)
 800341e:	5cd3      	ldrb	r3, [r2, r3]
 8003420:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003424:	4618      	mov	r0, r3
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40023800 	.word	0x40023800
 800342c:	08005a54 	.word	0x08005a54

08003430 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003434:	f7ff ffdc 	bl	80033f0 <HAL_RCC_GetHCLKFreq>
 8003438:	4601      	mov	r1, r0
 800343a:	4b05      	ldr	r3, [pc, #20]	; (8003450 <HAL_RCC_GetPCLK2Freq+0x20>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	0b5b      	lsrs	r3, r3, #13
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	4a03      	ldr	r2, [pc, #12]	; (8003454 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003446:	5cd3      	ldrb	r3, [r2, r3]
 8003448:	fa21 f303 	lsr.w	r3, r1, r3
}
 800344c:	4618      	mov	r0, r3
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40023800 	.word	0x40023800
 8003454:	08005a54 	.word	0x08005a54

08003458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800345a:	b087      	sub	sp, #28
 800345c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800345e:	2300      	movs	r3, #0
 8003460:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003462:	2300      	movs	r3, #0
 8003464:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800346a:	2300      	movs	r3, #0
 800346c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800346e:	2300      	movs	r3, #0
 8003470:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003472:	4b9f      	ldr	r3, [pc, #636]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x298>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 030c 	and.w	r3, r3, #12
 800347a:	2b0c      	cmp	r3, #12
 800347c:	f200 8130 	bhi.w	80036e0 <HAL_RCC_GetSysClockFreq+0x288>
 8003480:	a201      	add	r2, pc, #4	; (adr r2, 8003488 <HAL_RCC_GetSysClockFreq+0x30>)
 8003482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003486:	bf00      	nop
 8003488:	080034bd 	.word	0x080034bd
 800348c:	080036e1 	.word	0x080036e1
 8003490:	080036e1 	.word	0x080036e1
 8003494:	080036e1 	.word	0x080036e1
 8003498:	080034c3 	.word	0x080034c3
 800349c:	080036e1 	.word	0x080036e1
 80034a0:	080036e1 	.word	0x080036e1
 80034a4:	080036e1 	.word	0x080036e1
 80034a8:	080034c9 	.word	0x080034c9
 80034ac:	080036e1 	.word	0x080036e1
 80034b0:	080036e1 	.word	0x080036e1
 80034b4:	080036e1 	.word	0x080036e1
 80034b8:	080035d7 	.word	0x080035d7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034bc:	4b8d      	ldr	r3, [pc, #564]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x29c>)
 80034be:	613b      	str	r3, [r7, #16]
       break;
 80034c0:	e111      	b.n	80036e6 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034c2:	4b8d      	ldr	r3, [pc, #564]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80034c4:	613b      	str	r3, [r7, #16]
      break;
 80034c6:	e10e      	b.n	80036e6 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034c8:	4b89      	ldr	r3, [pc, #548]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x298>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034d0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034d2:	4b87      	ldr	r3, [pc, #540]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x298>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d023      	beq.n	8003526 <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034de:	4b84      	ldr	r3, [pc, #528]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x298>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	099b      	lsrs	r3, r3, #6
 80034e4:	f04f 0400 	mov.w	r4, #0
 80034e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80034ec:	f04f 0200 	mov.w	r2, #0
 80034f0:	ea03 0501 	and.w	r5, r3, r1
 80034f4:	ea04 0602 	and.w	r6, r4, r2
 80034f8:	4a7f      	ldr	r2, [pc, #508]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80034fa:	fb02 f106 	mul.w	r1, r2, r6
 80034fe:	2200      	movs	r2, #0
 8003500:	fb02 f205 	mul.w	r2, r2, r5
 8003504:	440a      	add	r2, r1
 8003506:	497c      	ldr	r1, [pc, #496]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003508:	fba5 0101 	umull	r0, r1, r5, r1
 800350c:	1853      	adds	r3, r2, r1
 800350e:	4619      	mov	r1, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f04f 0400 	mov.w	r4, #0
 8003516:	461a      	mov	r2, r3
 8003518:	4623      	mov	r3, r4
 800351a:	f7fc fec9 	bl	80002b0 <__aeabi_uldivmod>
 800351e:	4603      	mov	r3, r0
 8003520:	460c      	mov	r4, r1
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	e049      	b.n	80035ba <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003526:	4b72      	ldr	r3, [pc, #456]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x298>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	099b      	lsrs	r3, r3, #6
 800352c:	f04f 0400 	mov.w	r4, #0
 8003530:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003534:	f04f 0200 	mov.w	r2, #0
 8003538:	ea03 0501 	and.w	r5, r3, r1
 800353c:	ea04 0602 	and.w	r6, r4, r2
 8003540:	4629      	mov	r1, r5
 8003542:	4632      	mov	r2, r6
 8003544:	f04f 0300 	mov.w	r3, #0
 8003548:	f04f 0400 	mov.w	r4, #0
 800354c:	0154      	lsls	r4, r2, #5
 800354e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003552:	014b      	lsls	r3, r1, #5
 8003554:	4619      	mov	r1, r3
 8003556:	4622      	mov	r2, r4
 8003558:	1b49      	subs	r1, r1, r5
 800355a:	eb62 0206 	sbc.w	r2, r2, r6
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	f04f 0400 	mov.w	r4, #0
 8003566:	0194      	lsls	r4, r2, #6
 8003568:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800356c:	018b      	lsls	r3, r1, #6
 800356e:	1a5b      	subs	r3, r3, r1
 8003570:	eb64 0402 	sbc.w	r4, r4, r2
 8003574:	f04f 0100 	mov.w	r1, #0
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	00e2      	lsls	r2, r4, #3
 800357e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003582:	00d9      	lsls	r1, r3, #3
 8003584:	460b      	mov	r3, r1
 8003586:	4614      	mov	r4, r2
 8003588:	195b      	adds	r3, r3, r5
 800358a:	eb44 0406 	adc.w	r4, r4, r6
 800358e:	f04f 0100 	mov.w	r1, #0
 8003592:	f04f 0200 	mov.w	r2, #0
 8003596:	02a2      	lsls	r2, r4, #10
 8003598:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800359c:	0299      	lsls	r1, r3, #10
 800359e:	460b      	mov	r3, r1
 80035a0:	4614      	mov	r4, r2
 80035a2:	4618      	mov	r0, r3
 80035a4:	4621      	mov	r1, r4
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f04f 0400 	mov.w	r4, #0
 80035ac:	461a      	mov	r2, r3
 80035ae:	4623      	mov	r3, r4
 80035b0:	f7fc fe7e 	bl	80002b0 <__aeabi_uldivmod>
 80035b4:	4603      	mov	r3, r0
 80035b6:	460c      	mov	r4, r1
 80035b8:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035ba:	4b4d      	ldr	r3, [pc, #308]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x298>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	0c1b      	lsrs	r3, r3, #16
 80035c0:	f003 0303 	and.w	r3, r3, #3
 80035c4:	3301      	adds	r3, #1
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d2:	613b      	str	r3, [r7, #16]
      break;
 80035d4:	e087      	b.n	80036e6 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035d6:	4b46      	ldr	r3, [pc, #280]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x298>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035de:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035e0:	4b43      	ldr	r3, [pc, #268]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x298>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d023      	beq.n	8003634 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ec:	4b40      	ldr	r3, [pc, #256]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x298>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	099b      	lsrs	r3, r3, #6
 80035f2:	f04f 0400 	mov.w	r4, #0
 80035f6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	ea03 0501 	and.w	r5, r3, r1
 8003602:	ea04 0602 	and.w	r6, r4, r2
 8003606:	4a3c      	ldr	r2, [pc, #240]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003608:	fb02 f106 	mul.w	r1, r2, r6
 800360c:	2200      	movs	r2, #0
 800360e:	fb02 f205 	mul.w	r2, r2, r5
 8003612:	440a      	add	r2, r1
 8003614:	4938      	ldr	r1, [pc, #224]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003616:	fba5 0101 	umull	r0, r1, r5, r1
 800361a:	1853      	adds	r3, r2, r1
 800361c:	4619      	mov	r1, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f04f 0400 	mov.w	r4, #0
 8003624:	461a      	mov	r2, r3
 8003626:	4623      	mov	r3, r4
 8003628:	f7fc fe42 	bl	80002b0 <__aeabi_uldivmod>
 800362c:	4603      	mov	r3, r0
 800362e:	460c      	mov	r4, r1
 8003630:	617b      	str	r3, [r7, #20]
 8003632:	e049      	b.n	80036c8 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003634:	4b2e      	ldr	r3, [pc, #184]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x298>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	099b      	lsrs	r3, r3, #6
 800363a:	f04f 0400 	mov.w	r4, #0
 800363e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003642:	f04f 0200 	mov.w	r2, #0
 8003646:	ea03 0501 	and.w	r5, r3, r1
 800364a:	ea04 0602 	and.w	r6, r4, r2
 800364e:	4629      	mov	r1, r5
 8003650:	4632      	mov	r2, r6
 8003652:	f04f 0300 	mov.w	r3, #0
 8003656:	f04f 0400 	mov.w	r4, #0
 800365a:	0154      	lsls	r4, r2, #5
 800365c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003660:	014b      	lsls	r3, r1, #5
 8003662:	4619      	mov	r1, r3
 8003664:	4622      	mov	r2, r4
 8003666:	1b49      	subs	r1, r1, r5
 8003668:	eb62 0206 	sbc.w	r2, r2, r6
 800366c:	f04f 0300 	mov.w	r3, #0
 8003670:	f04f 0400 	mov.w	r4, #0
 8003674:	0194      	lsls	r4, r2, #6
 8003676:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800367a:	018b      	lsls	r3, r1, #6
 800367c:	1a5b      	subs	r3, r3, r1
 800367e:	eb64 0402 	sbc.w	r4, r4, r2
 8003682:	f04f 0100 	mov.w	r1, #0
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	00e2      	lsls	r2, r4, #3
 800368c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003690:	00d9      	lsls	r1, r3, #3
 8003692:	460b      	mov	r3, r1
 8003694:	4614      	mov	r4, r2
 8003696:	195b      	adds	r3, r3, r5
 8003698:	eb44 0406 	adc.w	r4, r4, r6
 800369c:	f04f 0100 	mov.w	r1, #0
 80036a0:	f04f 0200 	mov.w	r2, #0
 80036a4:	02a2      	lsls	r2, r4, #10
 80036a6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80036aa:	0299      	lsls	r1, r3, #10
 80036ac:	460b      	mov	r3, r1
 80036ae:	4614      	mov	r4, r2
 80036b0:	4618      	mov	r0, r3
 80036b2:	4621      	mov	r1, r4
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f04f 0400 	mov.w	r4, #0
 80036ba:	461a      	mov	r2, r3
 80036bc:	4623      	mov	r3, r4
 80036be:	f7fc fdf7 	bl	80002b0 <__aeabi_uldivmod>
 80036c2:	4603      	mov	r3, r0
 80036c4:	460c      	mov	r4, r1
 80036c6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80036c8:	4b09      	ldr	r3, [pc, #36]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x298>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	0f1b      	lsrs	r3, r3, #28
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036dc:	613b      	str	r3, [r7, #16]
      break;
 80036de:	e002      	b.n	80036e6 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036e0:	4b04      	ldr	r3, [pc, #16]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x29c>)
 80036e2:	613b      	str	r3, [r7, #16]
      break;
 80036e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036e6:	693b      	ldr	r3, [r7, #16]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	371c      	adds	r7, #28
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036f0:	40023800 	.word	0x40023800
 80036f4:	00f42400 	.word	0x00f42400
 80036f8:	017d7840 	.word	0x017d7840

080036fc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003704:	2300      	movs	r3, #0
 8003706:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 8083 	beq.w	800381c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003716:	4b95      	ldr	r3, [pc, #596]	; (800396c <HAL_RCC_OscConfig+0x270>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 030c 	and.w	r3, r3, #12
 800371e:	2b04      	cmp	r3, #4
 8003720:	d019      	beq.n	8003756 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003722:	4b92      	ldr	r3, [pc, #584]	; (800396c <HAL_RCC_OscConfig+0x270>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800372a:	2b08      	cmp	r3, #8
 800372c:	d106      	bne.n	800373c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800372e:	4b8f      	ldr	r3, [pc, #572]	; (800396c <HAL_RCC_OscConfig+0x270>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003736:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800373a:	d00c      	beq.n	8003756 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800373c:	4b8b      	ldr	r3, [pc, #556]	; (800396c <HAL_RCC_OscConfig+0x270>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003744:	2b0c      	cmp	r3, #12
 8003746:	d112      	bne.n	800376e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003748:	4b88      	ldr	r3, [pc, #544]	; (800396c <HAL_RCC_OscConfig+0x270>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003750:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003754:	d10b      	bne.n	800376e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003756:	4b85      	ldr	r3, [pc, #532]	; (800396c <HAL_RCC_OscConfig+0x270>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d05b      	beq.n	800381a <HAL_RCC_OscConfig+0x11e>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d157      	bne.n	800381a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e216      	b.n	8003b9c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003776:	d106      	bne.n	8003786 <HAL_RCC_OscConfig+0x8a>
 8003778:	4b7c      	ldr	r3, [pc, #496]	; (800396c <HAL_RCC_OscConfig+0x270>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a7b      	ldr	r2, [pc, #492]	; (800396c <HAL_RCC_OscConfig+0x270>)
 800377e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003782:	6013      	str	r3, [r2, #0]
 8003784:	e01d      	b.n	80037c2 <HAL_RCC_OscConfig+0xc6>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800378e:	d10c      	bne.n	80037aa <HAL_RCC_OscConfig+0xae>
 8003790:	4b76      	ldr	r3, [pc, #472]	; (800396c <HAL_RCC_OscConfig+0x270>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a75      	ldr	r2, [pc, #468]	; (800396c <HAL_RCC_OscConfig+0x270>)
 8003796:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800379a:	6013      	str	r3, [r2, #0]
 800379c:	4b73      	ldr	r3, [pc, #460]	; (800396c <HAL_RCC_OscConfig+0x270>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a72      	ldr	r2, [pc, #456]	; (800396c <HAL_RCC_OscConfig+0x270>)
 80037a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a6:	6013      	str	r3, [r2, #0]
 80037a8:	e00b      	b.n	80037c2 <HAL_RCC_OscConfig+0xc6>
 80037aa:	4b70      	ldr	r3, [pc, #448]	; (800396c <HAL_RCC_OscConfig+0x270>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a6f      	ldr	r2, [pc, #444]	; (800396c <HAL_RCC_OscConfig+0x270>)
 80037b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	4b6d      	ldr	r3, [pc, #436]	; (800396c <HAL_RCC_OscConfig+0x270>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a6c      	ldr	r2, [pc, #432]	; (800396c <HAL_RCC_OscConfig+0x270>)
 80037bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037c0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d013      	beq.n	80037f2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ca:	f7fd fe5b 	bl	8001484 <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037d2:	f7fd fe57 	bl	8001484 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b64      	cmp	r3, #100	; 0x64
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e1db      	b.n	8003b9c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e4:	4b61      	ldr	r3, [pc, #388]	; (800396c <HAL_RCC_OscConfig+0x270>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0f0      	beq.n	80037d2 <HAL_RCC_OscConfig+0xd6>
 80037f0:	e014      	b.n	800381c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f2:	f7fd fe47 	bl	8001484 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037fa:	f7fd fe43 	bl	8001484 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b64      	cmp	r3, #100	; 0x64
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e1c7      	b.n	8003b9c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800380c:	4b57      	ldr	r3, [pc, #348]	; (800396c <HAL_RCC_OscConfig+0x270>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1f0      	bne.n	80037fa <HAL_RCC_OscConfig+0xfe>
 8003818:	e000      	b.n	800381c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800381a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d06f      	beq.n	8003908 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003828:	4b50      	ldr	r3, [pc, #320]	; (800396c <HAL_RCC_OscConfig+0x270>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 030c 	and.w	r3, r3, #12
 8003830:	2b00      	cmp	r3, #0
 8003832:	d017      	beq.n	8003864 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003834:	4b4d      	ldr	r3, [pc, #308]	; (800396c <HAL_RCC_OscConfig+0x270>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800383c:	2b08      	cmp	r3, #8
 800383e:	d105      	bne.n	800384c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003840:	4b4a      	ldr	r3, [pc, #296]	; (800396c <HAL_RCC_OscConfig+0x270>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00b      	beq.n	8003864 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800384c:	4b47      	ldr	r3, [pc, #284]	; (800396c <HAL_RCC_OscConfig+0x270>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003854:	2b0c      	cmp	r3, #12
 8003856:	d11c      	bne.n	8003892 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003858:	4b44      	ldr	r3, [pc, #272]	; (800396c <HAL_RCC_OscConfig+0x270>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d116      	bne.n	8003892 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003864:	4b41      	ldr	r3, [pc, #260]	; (800396c <HAL_RCC_OscConfig+0x270>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d005      	beq.n	800387c <HAL_RCC_OscConfig+0x180>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d001      	beq.n	800387c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e18f      	b.n	8003b9c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800387c:	4b3b      	ldr	r3, [pc, #236]	; (800396c <HAL_RCC_OscConfig+0x270>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	4938      	ldr	r1, [pc, #224]	; (800396c <HAL_RCC_OscConfig+0x270>)
 800388c:	4313      	orrs	r3, r2
 800388e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003890:	e03a      	b.n	8003908 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d020      	beq.n	80038dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800389a:	4b35      	ldr	r3, [pc, #212]	; (8003970 <HAL_RCC_OscConfig+0x274>)
 800389c:	2201      	movs	r2, #1
 800389e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a0:	f7fd fdf0 	bl	8001484 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038a8:	f7fd fdec 	bl	8001484 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e170      	b.n	8003b9c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ba:	4b2c      	ldr	r3, [pc, #176]	; (800396c <HAL_RCC_OscConfig+0x270>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0f0      	beq.n	80038a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c6:	4b29      	ldr	r3, [pc, #164]	; (800396c <HAL_RCC_OscConfig+0x270>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	4925      	ldr	r1, [pc, #148]	; (800396c <HAL_RCC_OscConfig+0x270>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	600b      	str	r3, [r1, #0]
 80038da:	e015      	b.n	8003908 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038dc:	4b24      	ldr	r3, [pc, #144]	; (8003970 <HAL_RCC_OscConfig+0x274>)
 80038de:	2200      	movs	r2, #0
 80038e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e2:	f7fd fdcf 	bl	8001484 <HAL_GetTick>
 80038e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038e8:	e008      	b.n	80038fc <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ea:	f7fd fdcb 	bl	8001484 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e14f      	b.n	8003b9c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038fc:	4b1b      	ldr	r3, [pc, #108]	; (800396c <HAL_RCC_OscConfig+0x270>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1f0      	bne.n	80038ea <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0308 	and.w	r3, r3, #8
 8003910:	2b00      	cmp	r3, #0
 8003912:	d037      	beq.n	8003984 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d016      	beq.n	800394a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800391c:	4b15      	ldr	r3, [pc, #84]	; (8003974 <HAL_RCC_OscConfig+0x278>)
 800391e:	2201      	movs	r2, #1
 8003920:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003922:	f7fd fdaf 	bl	8001484 <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003928:	e008      	b.n	800393c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800392a:	f7fd fdab 	bl	8001484 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e12f      	b.n	8003b9c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800393c:	4b0b      	ldr	r3, [pc, #44]	; (800396c <HAL_RCC_OscConfig+0x270>)
 800393e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0f0      	beq.n	800392a <HAL_RCC_OscConfig+0x22e>
 8003948:	e01c      	b.n	8003984 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800394a:	4b0a      	ldr	r3, [pc, #40]	; (8003974 <HAL_RCC_OscConfig+0x278>)
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003950:	f7fd fd98 	bl	8001484 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003956:	e00f      	b.n	8003978 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003958:	f7fd fd94 	bl	8001484 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d908      	bls.n	8003978 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e118      	b.n	8003b9c <HAL_RCC_OscConfig+0x4a0>
 800396a:	bf00      	nop
 800396c:	40023800 	.word	0x40023800
 8003970:	42470000 	.word	0x42470000
 8003974:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003978:	4b8a      	ldr	r3, [pc, #552]	; (8003ba4 <HAL_RCC_OscConfig+0x4a8>)
 800397a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1e9      	bne.n	8003958 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 8097 	beq.w	8003ac0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003992:	2300      	movs	r3, #0
 8003994:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003996:	4b83      	ldr	r3, [pc, #524]	; (8003ba4 <HAL_RCC_OscConfig+0x4a8>)
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10f      	bne.n	80039c2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039a2:	2300      	movs	r3, #0
 80039a4:	60fb      	str	r3, [r7, #12]
 80039a6:	4b7f      	ldr	r3, [pc, #508]	; (8003ba4 <HAL_RCC_OscConfig+0x4a8>)
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	4a7e      	ldr	r2, [pc, #504]	; (8003ba4 <HAL_RCC_OscConfig+0x4a8>)
 80039ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b0:	6413      	str	r3, [r2, #64]	; 0x40
 80039b2:	4b7c      	ldr	r3, [pc, #496]	; (8003ba4 <HAL_RCC_OscConfig+0x4a8>)
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ba:	60fb      	str	r3, [r7, #12]
 80039bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80039be:	2301      	movs	r3, #1
 80039c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c2:	4b79      	ldr	r3, [pc, #484]	; (8003ba8 <HAL_RCC_OscConfig+0x4ac>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d118      	bne.n	8003a00 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ce:	4b76      	ldr	r3, [pc, #472]	; (8003ba8 <HAL_RCC_OscConfig+0x4ac>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a75      	ldr	r2, [pc, #468]	; (8003ba8 <HAL_RCC_OscConfig+0x4ac>)
 80039d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039da:	f7fd fd53 	bl	8001484 <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039e2:	f7fd fd4f 	bl	8001484 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e0d3      	b.n	8003b9c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f4:	4b6c      	ldr	r3, [pc, #432]	; (8003ba8 <HAL_RCC_OscConfig+0x4ac>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0f0      	beq.n	80039e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d106      	bne.n	8003a16 <HAL_RCC_OscConfig+0x31a>
 8003a08:	4b66      	ldr	r3, [pc, #408]	; (8003ba4 <HAL_RCC_OscConfig+0x4a8>)
 8003a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0c:	4a65      	ldr	r2, [pc, #404]	; (8003ba4 <HAL_RCC_OscConfig+0x4a8>)
 8003a0e:	f043 0301 	orr.w	r3, r3, #1
 8003a12:	6713      	str	r3, [r2, #112]	; 0x70
 8003a14:	e01c      	b.n	8003a50 <HAL_RCC_OscConfig+0x354>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	2b05      	cmp	r3, #5
 8003a1c:	d10c      	bne.n	8003a38 <HAL_RCC_OscConfig+0x33c>
 8003a1e:	4b61      	ldr	r3, [pc, #388]	; (8003ba4 <HAL_RCC_OscConfig+0x4a8>)
 8003a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a22:	4a60      	ldr	r2, [pc, #384]	; (8003ba4 <HAL_RCC_OscConfig+0x4a8>)
 8003a24:	f043 0304 	orr.w	r3, r3, #4
 8003a28:	6713      	str	r3, [r2, #112]	; 0x70
 8003a2a:	4b5e      	ldr	r3, [pc, #376]	; (8003ba4 <HAL_RCC_OscConfig+0x4a8>)
 8003a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2e:	4a5d      	ldr	r2, [pc, #372]	; (8003ba4 <HAL_RCC_OscConfig+0x4a8>)
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	6713      	str	r3, [r2, #112]	; 0x70
 8003a36:	e00b      	b.n	8003a50 <HAL_RCC_OscConfig+0x354>
 8003a38:	4b5a      	ldr	r3, [pc, #360]	; (8003ba4 <HAL_RCC_OscConfig+0x4a8>)
 8003a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3c:	4a59      	ldr	r2, [pc, #356]	; (8003ba4 <HAL_RCC_OscConfig+0x4a8>)
 8003a3e:	f023 0301 	bic.w	r3, r3, #1
 8003a42:	6713      	str	r3, [r2, #112]	; 0x70
 8003a44:	4b57      	ldr	r3, [pc, #348]	; (8003ba4 <HAL_RCC_OscConfig+0x4a8>)
 8003a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a48:	4a56      	ldr	r2, [pc, #344]	; (8003ba4 <HAL_RCC_OscConfig+0x4a8>)
 8003a4a:	f023 0304 	bic.w	r3, r3, #4
 8003a4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d015      	beq.n	8003a84 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a58:	f7fd fd14 	bl	8001484 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a5e:	e00a      	b.n	8003a76 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a60:	f7fd fd10 	bl	8001484 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e092      	b.n	8003b9c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a76:	4b4b      	ldr	r3, [pc, #300]	; (8003ba4 <HAL_RCC_OscConfig+0x4a8>)
 8003a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0ee      	beq.n	8003a60 <HAL_RCC_OscConfig+0x364>
 8003a82:	e014      	b.n	8003aae <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a84:	f7fd fcfe 	bl	8001484 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a8a:	e00a      	b.n	8003aa2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a8c:	f7fd fcfa 	bl	8001484 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e07c      	b.n	8003b9c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aa2:	4b40      	ldr	r3, [pc, #256]	; (8003ba4 <HAL_RCC_OscConfig+0x4a8>)
 8003aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1ee      	bne.n	8003a8c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aae:	7dfb      	ldrb	r3, [r7, #23]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d105      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab4:	4b3b      	ldr	r3, [pc, #236]	; (8003ba4 <HAL_RCC_OscConfig+0x4a8>)
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab8:	4a3a      	ldr	r2, [pc, #232]	; (8003ba4 <HAL_RCC_OscConfig+0x4a8>)
 8003aba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003abe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d068      	beq.n	8003b9a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ac8:	4b36      	ldr	r3, [pc, #216]	; (8003ba4 <HAL_RCC_OscConfig+0x4a8>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f003 030c 	and.w	r3, r3, #12
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d060      	beq.n	8003b96 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d145      	bne.n	8003b68 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003adc:	4b33      	ldr	r3, [pc, #204]	; (8003bac <HAL_RCC_OscConfig+0x4b0>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae2:	f7fd fccf 	bl	8001484 <HAL_GetTick>
 8003ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae8:	e008      	b.n	8003afc <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aea:	f7fd fccb 	bl	8001484 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e04f      	b.n	8003b9c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003afc:	4b29      	ldr	r3, [pc, #164]	; (8003ba4 <HAL_RCC_OscConfig+0x4a8>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1f0      	bne.n	8003aea <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	69da      	ldr	r2, [r3, #28]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	431a      	orrs	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	019b      	lsls	r3, r3, #6
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1e:	085b      	lsrs	r3, r3, #1
 8003b20:	3b01      	subs	r3, #1
 8003b22:	041b      	lsls	r3, r3, #16
 8003b24:	431a      	orrs	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2a:	061b      	lsls	r3, r3, #24
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b32:	071b      	lsls	r3, r3, #28
 8003b34:	491b      	ldr	r1, [pc, #108]	; (8003ba4 <HAL_RCC_OscConfig+0x4a8>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b3a:	4b1c      	ldr	r3, [pc, #112]	; (8003bac <HAL_RCC_OscConfig+0x4b0>)
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b40:	f7fd fca0 	bl	8001484 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b48:	f7fd fc9c 	bl	8001484 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e020      	b.n	8003b9c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b5a:	4b12      	ldr	r3, [pc, #72]	; (8003ba4 <HAL_RCC_OscConfig+0x4a8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0f0      	beq.n	8003b48 <HAL_RCC_OscConfig+0x44c>
 8003b66:	e018      	b.n	8003b9a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b68:	4b10      	ldr	r3, [pc, #64]	; (8003bac <HAL_RCC_OscConfig+0x4b0>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6e:	f7fd fc89 	bl	8001484 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b74:	e008      	b.n	8003b88 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b76:	f7fd fc85 	bl	8001484 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e009      	b.n	8003b9c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b88:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <HAL_RCC_OscConfig+0x4a8>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1f0      	bne.n	8003b76 <HAL_RCC_OscConfig+0x47a>
 8003b94:	e001      	b.n	8003b9a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e000      	b.n	8003b9c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3718      	adds	r7, #24
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	40007000 	.word	0x40007000
 8003bac:	42470060 	.word	0x42470060

08003bb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e01d      	b.n	8003bfe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d106      	bne.n	8003bdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7fd faf8 	bl	80011cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3304      	adds	r3, #4
 8003bec:	4619      	mov	r1, r3
 8003bee:	4610      	mov	r0, r2
 8003bf0:	f000 f8e4 	bl	8003dbc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b085      	sub	sp, #20
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2202      	movs	r2, #2
 8003c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2b06      	cmp	r3, #6
 8003c26:	d007      	beq.n	8003c38 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0201 	orr.w	r2, r2, #1
 8003c36:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b084      	sub	sp, #16
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
 8003c56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d101      	bne.n	8003c66 <HAL_TIM_ConfigClockSource+0x18>
 8003c62:	2302      	movs	r3, #2
 8003c64:	e0a6      	b.n	8003db4 <HAL_TIM_ConfigClockSource+0x166>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2202      	movs	r2, #2
 8003c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c84:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c8c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2b40      	cmp	r3, #64	; 0x40
 8003c9c:	d067      	beq.n	8003d6e <HAL_TIM_ConfigClockSource+0x120>
 8003c9e:	2b40      	cmp	r3, #64	; 0x40
 8003ca0:	d80b      	bhi.n	8003cba <HAL_TIM_ConfigClockSource+0x6c>
 8003ca2:	2b10      	cmp	r3, #16
 8003ca4:	d073      	beq.n	8003d8e <HAL_TIM_ConfigClockSource+0x140>
 8003ca6:	2b10      	cmp	r3, #16
 8003ca8:	d802      	bhi.n	8003cb0 <HAL_TIM_ConfigClockSource+0x62>
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d06f      	beq.n	8003d8e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003cae:	e078      	b.n	8003da2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003cb0:	2b20      	cmp	r3, #32
 8003cb2:	d06c      	beq.n	8003d8e <HAL_TIM_ConfigClockSource+0x140>
 8003cb4:	2b30      	cmp	r3, #48	; 0x30
 8003cb6:	d06a      	beq.n	8003d8e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003cb8:	e073      	b.n	8003da2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003cba:	2b70      	cmp	r3, #112	; 0x70
 8003cbc:	d00d      	beq.n	8003cda <HAL_TIM_ConfigClockSource+0x8c>
 8003cbe:	2b70      	cmp	r3, #112	; 0x70
 8003cc0:	d804      	bhi.n	8003ccc <HAL_TIM_ConfigClockSource+0x7e>
 8003cc2:	2b50      	cmp	r3, #80	; 0x50
 8003cc4:	d033      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0xe0>
 8003cc6:	2b60      	cmp	r3, #96	; 0x60
 8003cc8:	d041      	beq.n	8003d4e <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003cca:	e06a      	b.n	8003da2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd0:	d066      	beq.n	8003da0 <HAL_TIM_ConfigClockSource+0x152>
 8003cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cd6:	d017      	beq.n	8003d08 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003cd8:	e063      	b.n	8003da2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6818      	ldr	r0, [r3, #0]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	6899      	ldr	r1, [r3, #8]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	f000 f981 	bl	8003ff0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cfc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	609a      	str	r2, [r3, #8]
      break;
 8003d06:	e04c      	b.n	8003da2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6818      	ldr	r0, [r3, #0]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	6899      	ldr	r1, [r3, #8]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	f000 f96a 	bl	8003ff0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689a      	ldr	r2, [r3, #8]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d2a:	609a      	str	r2, [r3, #8]
      break;
 8003d2c:	e039      	b.n	8003da2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6818      	ldr	r0, [r3, #0]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	6859      	ldr	r1, [r3, #4]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	f000 f8de 	bl	8003efc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2150      	movs	r1, #80	; 0x50
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 f937 	bl	8003fba <TIM_ITRx_SetConfig>
      break;
 8003d4c:	e029      	b.n	8003da2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	6859      	ldr	r1, [r3, #4]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	f000 f8fd 	bl	8003f5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2160      	movs	r1, #96	; 0x60
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 f927 	bl	8003fba <TIM_ITRx_SetConfig>
      break;
 8003d6c:	e019      	b.n	8003da2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6818      	ldr	r0, [r3, #0]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	6859      	ldr	r1, [r3, #4]
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	f000 f8be 	bl	8003efc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2140      	movs	r1, #64	; 0x40
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 f917 	bl	8003fba <TIM_ITRx_SetConfig>
      break;
 8003d8c:	e009      	b.n	8003da2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4619      	mov	r1, r3
 8003d98:	4610      	mov	r0, r2
 8003d9a:	f000 f90e 	bl	8003fba <TIM_ITRx_SetConfig>
      break;
 8003d9e:	e000      	b.n	8003da2 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003da0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a40      	ldr	r2, [pc, #256]	; (8003ed0 <TIM_Base_SetConfig+0x114>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d013      	beq.n	8003dfc <TIM_Base_SetConfig+0x40>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dda:	d00f      	beq.n	8003dfc <TIM_Base_SetConfig+0x40>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a3d      	ldr	r2, [pc, #244]	; (8003ed4 <TIM_Base_SetConfig+0x118>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d00b      	beq.n	8003dfc <TIM_Base_SetConfig+0x40>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a3c      	ldr	r2, [pc, #240]	; (8003ed8 <TIM_Base_SetConfig+0x11c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d007      	beq.n	8003dfc <TIM_Base_SetConfig+0x40>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a3b      	ldr	r2, [pc, #236]	; (8003edc <TIM_Base_SetConfig+0x120>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d003      	beq.n	8003dfc <TIM_Base_SetConfig+0x40>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a3a      	ldr	r2, [pc, #232]	; (8003ee0 <TIM_Base_SetConfig+0x124>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d108      	bne.n	8003e0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a2f      	ldr	r2, [pc, #188]	; (8003ed0 <TIM_Base_SetConfig+0x114>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d02b      	beq.n	8003e6e <TIM_Base_SetConfig+0xb2>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e1c:	d027      	beq.n	8003e6e <TIM_Base_SetConfig+0xb2>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a2c      	ldr	r2, [pc, #176]	; (8003ed4 <TIM_Base_SetConfig+0x118>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d023      	beq.n	8003e6e <TIM_Base_SetConfig+0xb2>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a2b      	ldr	r2, [pc, #172]	; (8003ed8 <TIM_Base_SetConfig+0x11c>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d01f      	beq.n	8003e6e <TIM_Base_SetConfig+0xb2>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a2a      	ldr	r2, [pc, #168]	; (8003edc <TIM_Base_SetConfig+0x120>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d01b      	beq.n	8003e6e <TIM_Base_SetConfig+0xb2>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a29      	ldr	r2, [pc, #164]	; (8003ee0 <TIM_Base_SetConfig+0x124>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d017      	beq.n	8003e6e <TIM_Base_SetConfig+0xb2>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a28      	ldr	r2, [pc, #160]	; (8003ee4 <TIM_Base_SetConfig+0x128>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d013      	beq.n	8003e6e <TIM_Base_SetConfig+0xb2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a27      	ldr	r2, [pc, #156]	; (8003ee8 <TIM_Base_SetConfig+0x12c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d00f      	beq.n	8003e6e <TIM_Base_SetConfig+0xb2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a26      	ldr	r2, [pc, #152]	; (8003eec <TIM_Base_SetConfig+0x130>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d00b      	beq.n	8003e6e <TIM_Base_SetConfig+0xb2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a25      	ldr	r2, [pc, #148]	; (8003ef0 <TIM_Base_SetConfig+0x134>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d007      	beq.n	8003e6e <TIM_Base_SetConfig+0xb2>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a24      	ldr	r2, [pc, #144]	; (8003ef4 <TIM_Base_SetConfig+0x138>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d003      	beq.n	8003e6e <TIM_Base_SetConfig+0xb2>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a23      	ldr	r2, [pc, #140]	; (8003ef8 <TIM_Base_SetConfig+0x13c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d108      	bne.n	8003e80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a0a      	ldr	r2, [pc, #40]	; (8003ed0 <TIM_Base_SetConfig+0x114>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d003      	beq.n	8003eb4 <TIM_Base_SetConfig+0xf8>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a0c      	ldr	r2, [pc, #48]	; (8003ee0 <TIM_Base_SetConfig+0x124>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d103      	bne.n	8003ebc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	691a      	ldr	r2, [r3, #16]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	615a      	str	r2, [r3, #20]
}
 8003ec2:	bf00      	nop
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	40010000 	.word	0x40010000
 8003ed4:	40000400 	.word	0x40000400
 8003ed8:	40000800 	.word	0x40000800
 8003edc:	40000c00 	.word	0x40000c00
 8003ee0:	40010400 	.word	0x40010400
 8003ee4:	40014000 	.word	0x40014000
 8003ee8:	40014400 	.word	0x40014400
 8003eec:	40014800 	.word	0x40014800
 8003ef0:	40001800 	.word	0x40001800
 8003ef4:	40001c00 	.word	0x40001c00
 8003ef8:	40002000 	.word	0x40002000

08003efc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b087      	sub	sp, #28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	f023 0201 	bic.w	r2, r3, #1
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	011b      	lsls	r3, r3, #4
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f023 030a 	bic.w	r3, r3, #10
 8003f38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	621a      	str	r2, [r3, #32]
}
 8003f4e:	bf00      	nop
 8003f50:	371c      	adds	r7, #28
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b087      	sub	sp, #28
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	60f8      	str	r0, [r7, #12]
 8003f62:	60b9      	str	r1, [r7, #8]
 8003f64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	f023 0210 	bic.w	r2, r3, #16
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	031b      	lsls	r3, r3, #12
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	011b      	lsls	r3, r3, #4
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	621a      	str	r2, [r3, #32]
}
 8003fae:	bf00      	nop
 8003fb0:	371c      	adds	r7, #28
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b085      	sub	sp, #20
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
 8003fc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	f043 0307 	orr.w	r3, r3, #7
 8003fdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	609a      	str	r2, [r3, #8]
}
 8003fe4:	bf00      	nop
 8003fe6:	3714      	adds	r7, #20
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b087      	sub	sp, #28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
 8003ffc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800400a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	021a      	lsls	r2, r3, #8
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	431a      	orrs	r2, r3
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	4313      	orrs	r3, r2
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	4313      	orrs	r3, r2
 800401c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	609a      	str	r2, [r3, #8]
}
 8004024:	bf00      	nop
 8004026:	371c      	adds	r7, #28
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004040:	2b01      	cmp	r3, #1
 8004042:	d101      	bne.n	8004048 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004044:	2302      	movs	r3, #2
 8004046:	e05a      	b.n	80040fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2202      	movs	r2, #2
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800406e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	4313      	orrs	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a21      	ldr	r2, [pc, #132]	; (800410c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d022      	beq.n	80040d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004094:	d01d      	beq.n	80040d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a1d      	ldr	r2, [pc, #116]	; (8004110 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d018      	beq.n	80040d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a1b      	ldr	r2, [pc, #108]	; (8004114 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d013      	beq.n	80040d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a1a      	ldr	r2, [pc, #104]	; (8004118 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d00e      	beq.n	80040d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a18      	ldr	r2, [pc, #96]	; (800411c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d009      	beq.n	80040d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a17      	ldr	r2, [pc, #92]	; (8004120 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d004      	beq.n	80040d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a15      	ldr	r2, [pc, #84]	; (8004124 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d10c      	bne.n	80040ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40010000 	.word	0x40010000
 8004110:	40000400 	.word	0x40000400
 8004114:	40000800 	.word	0x40000800
 8004118:	40000c00 	.word	0x40000c00
 800411c:	40010400 	.word	0x40010400
 8004120:	40014000 	.word	0x40014000
 8004124:	40001800 	.word	0x40001800

08004128 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e03f      	b.n	80041ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d106      	bne.n	8004154 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7fd f886 	bl	8001260 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2224      	movs	r2, #36	; 0x24
 8004158:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68da      	ldr	r2, [r3, #12]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800416a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 fc99 	bl	8004aa4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	691a      	ldr	r2, [r3, #16]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004180:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	695a      	ldr	r2, [r3, #20]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004190:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68da      	ldr	r2, [r3, #12]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2220      	movs	r2, #32
 80041ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2220      	movs	r2, #32
 80041b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b088      	sub	sp, #32
 80041c6:	af02      	add	r7, sp, #8
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	603b      	str	r3, [r7, #0]
 80041ce:	4613      	mov	r3, r2
 80041d0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80041d2:	2300      	movs	r3, #0
 80041d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b20      	cmp	r3, #32
 80041e0:	f040 8083 	bne.w	80042ea <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <HAL_UART_Transmit+0x2e>
 80041ea:	88fb      	ldrh	r3, [r7, #6]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e07b      	b.n	80042ec <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d101      	bne.n	8004202 <HAL_UART_Transmit+0x40>
 80041fe:	2302      	movs	r3, #2
 8004200:	e074      	b.n	80042ec <HAL_UART_Transmit+0x12a>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2221      	movs	r2, #33	; 0x21
 8004214:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004218:	f7fd f934 	bl	8001484 <HAL_GetTick>
 800421c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	88fa      	ldrh	r2, [r7, #6]
 8004222:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	88fa      	ldrh	r2, [r7, #6]
 8004228:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004232:	e042      	b.n	80042ba <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004238:	b29b      	uxth	r3, r3
 800423a:	3b01      	subs	r3, #1
 800423c:	b29a      	uxth	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800424a:	d122      	bne.n	8004292 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	9300      	str	r3, [sp, #0]
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	2200      	movs	r2, #0
 8004254:	2180      	movs	r1, #128	; 0x80
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 faa3 	bl	80047a2 <UART_WaitOnFlagUntilTimeout>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e042      	b.n	80042ec <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	881b      	ldrh	r3, [r3, #0]
 800426e:	461a      	mov	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004278:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d103      	bne.n	800428a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	3302      	adds	r3, #2
 8004286:	60bb      	str	r3, [r7, #8]
 8004288:	e017      	b.n	80042ba <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	3301      	adds	r3, #1
 800428e:	60bb      	str	r3, [r7, #8]
 8004290:	e013      	b.n	80042ba <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	2200      	movs	r2, #0
 800429a:	2180      	movs	r1, #128	; 0x80
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f000 fa80 	bl	80047a2 <UART_WaitOnFlagUntilTimeout>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e01f      	b.n	80042ec <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	60ba      	str	r2, [r7, #8]
 80042b2:	781a      	ldrb	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042be:	b29b      	uxth	r3, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1b7      	bne.n	8004234 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	2200      	movs	r2, #0
 80042cc:	2140      	movs	r1, #64	; 0x40
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f000 fa67 	bl	80047a2 <UART_WaitOnFlagUntilTimeout>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e006      	b.n	80042ec <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2220      	movs	r2, #32
 80042e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80042e6:	2300      	movs	r3, #0
 80042e8:	e000      	b.n	80042ec <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80042ea:	2302      	movs	r3, #2
  }
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3718      	adds	r7, #24
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	4613      	mov	r3, r2
 8004300:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b20      	cmp	r3, #32
 800430c:	d140      	bne.n	8004390 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d002      	beq.n	800431a <HAL_UART_Receive_IT+0x26>
 8004314:	88fb      	ldrh	r3, [r7, #6]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e039      	b.n	8004392 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004324:	2b01      	cmp	r3, #1
 8004326:	d101      	bne.n	800432c <HAL_UART_Receive_IT+0x38>
 8004328:	2302      	movs	r3, #2
 800432a:	e032      	b.n	8004392 <HAL_UART_Receive_IT+0x9e>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	88fa      	ldrh	r2, [r7, #6]
 800433e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	88fa      	ldrh	r2, [r7, #6]
 8004344:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2222      	movs	r2, #34	; 0x22
 8004350:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68da      	ldr	r2, [r3, #12]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800436a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	695a      	ldr	r2, [r3, #20]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 0201 	orr.w	r2, r2, #1
 800437a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68da      	ldr	r2, [r3, #12]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 0220 	orr.w	r2, r2, #32
 800438a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800438c:	2300      	movs	r3, #0
 800438e:	e000      	b.n	8004392 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004390:	2302      	movs	r3, #2
  }
}
 8004392:	4618      	mov	r0, r3
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
	...

080043a0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	4613      	mov	r3, r2
 80043ac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b20      	cmp	r3, #32
 80043b8:	d153      	bne.n	8004462 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d002      	beq.n	80043c6 <HAL_UART_Transmit_DMA+0x26>
 80043c0:	88fb      	ldrh	r3, [r7, #6]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e04c      	b.n	8004464 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d101      	bne.n	80043d8 <HAL_UART_Transmit_DMA+0x38>
 80043d4:	2302      	movs	r3, #2
 80043d6:	e045      	b.n	8004464 <HAL_UART_Transmit_DMA+0xc4>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	88fa      	ldrh	r2, [r7, #6]
 80043ea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	88fa      	ldrh	r2, [r7, #6]
 80043f0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2221      	movs	r2, #33	; 0x21
 80043fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004404:	4a19      	ldr	r2, [pc, #100]	; (800446c <HAL_UART_Transmit_DMA+0xcc>)
 8004406:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440c:	4a18      	ldr	r2, [pc, #96]	; (8004470 <HAL_UART_Transmit_DMA+0xd0>)
 800440e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004414:	4a17      	ldr	r2, [pc, #92]	; (8004474 <HAL_UART_Transmit_DMA+0xd4>)
 8004416:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441c:	2200      	movs	r2, #0
 800441e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8004420:	f107 0308 	add.w	r3, r7, #8
 8004424:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	6819      	ldr	r1, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	3304      	adds	r3, #4
 8004434:	461a      	mov	r2, r3
 8004436:	88fb      	ldrh	r3, [r7, #6]
 8004438:	f7fd fa12 	bl	8001860 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004444:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	695a      	ldr	r2, [r3, #20]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800445c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800445e:	2300      	movs	r3, #0
 8004460:	e000      	b.n	8004464 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8004462:	2302      	movs	r3, #2
  }
}
 8004464:	4618      	mov	r0, r3
 8004466:	3718      	adds	r7, #24
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	080046a1 	.word	0x080046a1
 8004470:	080046f3 	.word	0x080046f3
 8004474:	0800470f 	.word	0x0800470f

08004478 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004498:	2300      	movs	r3, #0
 800449a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800449c:	2300      	movs	r3, #0
 800449e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	f003 030f 	and.w	r3, r3, #15
 80044a6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10d      	bne.n	80044ca <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	f003 0320 	and.w	r3, r3, #32
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d008      	beq.n	80044ca <HAL_UART_IRQHandler+0x52>
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	f003 0320 	and.w	r3, r3, #32
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 fa6d 	bl	80049a2 <UART_Receive_IT>
      return;
 80044c8:	e0d1      	b.n	800466e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 80b0 	beq.w	8004632 <HAL_UART_IRQHandler+0x1ba>
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d105      	bne.n	80044e8 <HAL_UART_IRQHandler+0x70>
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 80a5 	beq.w	8004632 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00a      	beq.n	8004508 <HAL_UART_IRQHandler+0x90>
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d005      	beq.n	8004508 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004500:	f043 0201 	orr.w	r2, r3, #1
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f003 0304 	and.w	r3, r3, #4
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <HAL_UART_IRQHandler+0xb0>
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b00      	cmp	r3, #0
 800451a:	d005      	beq.n	8004528 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004520:	f043 0202 	orr.w	r2, r3, #2
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00a      	beq.n	8004548 <HAL_UART_IRQHandler+0xd0>
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	2b00      	cmp	r3, #0
 800453a:	d005      	beq.n	8004548 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004540:	f043 0204 	orr.w	r2, r3, #4
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00f      	beq.n	8004572 <HAL_UART_IRQHandler+0xfa>
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	f003 0320 	and.w	r3, r3, #32
 8004558:	2b00      	cmp	r3, #0
 800455a:	d104      	bne.n	8004566 <HAL_UART_IRQHandler+0xee>
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d005      	beq.n	8004572 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800456a:	f043 0208 	orr.w	r2, r3, #8
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004576:	2b00      	cmp	r3, #0
 8004578:	d078      	beq.n	800466c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	f003 0320 	and.w	r3, r3, #32
 8004580:	2b00      	cmp	r3, #0
 8004582:	d007      	beq.n	8004594 <HAL_UART_IRQHandler+0x11c>
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	f003 0320 	and.w	r3, r3, #32
 800458a:	2b00      	cmp	r3, #0
 800458c:	d002      	beq.n	8004594 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 fa07 	bl	80049a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459e:	2b40      	cmp	r3, #64	; 0x40
 80045a0:	bf0c      	ite	eq
 80045a2:	2301      	moveq	r3, #1
 80045a4:	2300      	movne	r3, #0
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ae:	f003 0308 	and.w	r3, r3, #8
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d102      	bne.n	80045bc <HAL_UART_IRQHandler+0x144>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d031      	beq.n	8004620 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f950 	bl	8004862 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045cc:	2b40      	cmp	r3, #64	; 0x40
 80045ce:	d123      	bne.n	8004618 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	695a      	ldr	r2, [r3, #20]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045de:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d013      	beq.n	8004610 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ec:	4a21      	ldr	r2, [pc, #132]	; (8004674 <HAL_UART_IRQHandler+0x1fc>)
 80045ee:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7fd f98b 	bl	8001910 <HAL_DMA_Abort_IT>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d016      	beq.n	800462e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800460a:	4610      	mov	r0, r2
 800460c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800460e:	e00e      	b.n	800462e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 f83b 	bl	800468c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004616:	e00a      	b.n	800462e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 f837 	bl	800468c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800461e:	e006      	b.n	800462e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f833 	bl	800468c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800462c:	e01e      	b.n	800466c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800462e:	bf00      	nop
    return;
 8004630:	e01c      	b.n	800466c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004638:	2b00      	cmp	r3, #0
 800463a:	d008      	beq.n	800464e <HAL_UART_IRQHandler+0x1d6>
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f93d 	bl	80048c6 <UART_Transmit_IT>
    return;
 800464c:	e00f      	b.n	800466e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00a      	beq.n	800466e <HAL_UART_IRQHandler+0x1f6>
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465e:	2b00      	cmp	r3, #0
 8004660:	d005      	beq.n	800466e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f985 	bl	8004972 <UART_EndTransmit_IT>
    return;
 8004668:	bf00      	nop
 800466a:	e000      	b.n	800466e <HAL_UART_IRQHandler+0x1f6>
    return;
 800466c:	bf00      	nop
  }
}
 800466e:	3720      	adds	r7, #32
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	0800489f 	.word	0x0800489f

08004678 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ac:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d113      	bne.n	80046e4 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	695a      	ldr	r2, [r3, #20]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046d0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68da      	ldr	r2, [r3, #12]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046e0:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80046e2:	e002      	b.n	80046ea <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f7fc fc27 	bl	8000f38 <HAL_UART_TxCpltCallback>
}
 80046ea:	bf00      	nop
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b084      	sub	sp, #16
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f7ff ffb9 	bl	8004678 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004706:	bf00      	nop
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b084      	sub	sp, #16
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004716:	2300      	movs	r3, #0
 8004718:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800472a:	2b80      	cmp	r3, #128	; 0x80
 800472c:	bf0c      	ite	eq
 800472e:	2301      	moveq	r3, #1
 8004730:	2300      	movne	r3, #0
 8004732:	b2db      	uxtb	r3, r3
 8004734:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b21      	cmp	r3, #33	; 0x21
 8004740:	d108      	bne.n	8004754 <UART_DMAError+0x46>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d005      	beq.n	8004754 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	2200      	movs	r2, #0
 800474c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800474e:	68b8      	ldr	r0, [r7, #8]
 8004750:	f000 f871 	bl	8004836 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475e:	2b40      	cmp	r3, #64	; 0x40
 8004760:	bf0c      	ite	eq
 8004762:	2301      	moveq	r3, #1
 8004764:	2300      	movne	r3, #0
 8004766:	b2db      	uxtb	r3, r3
 8004768:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b22      	cmp	r3, #34	; 0x22
 8004774:	d108      	bne.n	8004788 <UART_DMAError+0x7a>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d005      	beq.n	8004788 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2200      	movs	r2, #0
 8004780:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004782:	68b8      	ldr	r0, [r7, #8]
 8004784:	f000 f86d 	bl	8004862 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478c:	f043 0210 	orr.w	r2, r3, #16
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004794:	68b8      	ldr	r0, [r7, #8]
 8004796:	f7ff ff79 	bl	800468c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800479a:	bf00      	nop
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b084      	sub	sp, #16
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	60f8      	str	r0, [r7, #12]
 80047aa:	60b9      	str	r1, [r7, #8]
 80047ac:	603b      	str	r3, [r7, #0]
 80047ae:	4613      	mov	r3, r2
 80047b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047b2:	e02c      	b.n	800480e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ba:	d028      	beq.n	800480e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d007      	beq.n	80047d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80047c2:	f7fc fe5f 	bl	8001484 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d21d      	bcs.n	800480e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68da      	ldr	r2, [r3, #12]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047e0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	695a      	ldr	r2, [r3, #20]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0201 	bic.w	r2, r2, #1
 80047f0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2220      	movs	r2, #32
 80047f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2220      	movs	r2, #32
 80047fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e00f      	b.n	800482e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	4013      	ands	r3, r2
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	429a      	cmp	r2, r3
 800481c:	bf0c      	ite	eq
 800481e:	2301      	moveq	r3, #1
 8004820:	2300      	movne	r3, #0
 8004822:	b2db      	uxtb	r3, r3
 8004824:	461a      	mov	r2, r3
 8004826:	79fb      	ldrb	r3, [r7, #7]
 8004828:	429a      	cmp	r2, r3
 800482a:	d0c3      	beq.n	80047b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68da      	ldr	r2, [r3, #12]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800484c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2220      	movs	r2, #32
 8004852:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68da      	ldr	r2, [r3, #12]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004878:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	695a      	ldr	r2, [r3, #20]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 0201 	bic.w	r2, r2, #1
 8004888:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2220      	movs	r2, #32
 800488e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b084      	sub	sp, #16
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f7ff fee7 	bl	800468c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048be:	bf00      	nop
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b085      	sub	sp, #20
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b21      	cmp	r3, #33	; 0x21
 80048d8:	d144      	bne.n	8004964 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048e2:	d11a      	bne.n	800491a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	881b      	ldrh	r3, [r3, #0]
 80048ee:	461a      	mov	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048f8:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d105      	bne.n	800490e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	1c9a      	adds	r2, r3, #2
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	621a      	str	r2, [r3, #32]
 800490c:	e00e      	b.n	800492c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	1c5a      	adds	r2, r3, #1
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	621a      	str	r2, [r3, #32]
 8004918:	e008      	b.n	800492c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	1c59      	adds	r1, r3, #1
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	6211      	str	r1, [r2, #32]
 8004924:	781a      	ldrb	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004930:	b29b      	uxth	r3, r3
 8004932:	3b01      	subs	r3, #1
 8004934:	b29b      	uxth	r3, r3
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	4619      	mov	r1, r3
 800493a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10f      	bne.n	8004960 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68da      	ldr	r2, [r3, #12]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800494e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68da      	ldr	r2, [r3, #12]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800495e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004960:	2300      	movs	r3, #0
 8004962:	e000      	b.n	8004966 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004964:	2302      	movs	r3, #2
  }
}
 8004966:	4618      	mov	r0, r3
 8004968:	3714      	adds	r7, #20
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b082      	sub	sp, #8
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68da      	ldr	r2, [r3, #12]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004988:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2220      	movs	r2, #32
 800498e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7fc fad0 	bl	8000f38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3708      	adds	r7, #8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b084      	sub	sp, #16
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b22      	cmp	r3, #34	; 0x22
 80049b4:	d171      	bne.n	8004a9a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049be:	d123      	bne.n	8004a08 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c4:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10e      	bne.n	80049ec <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049da:	b29a      	uxth	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e4:	1c9a      	adds	r2, r3, #2
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	629a      	str	r2, [r3, #40]	; 0x28
 80049ea:	e029      	b.n	8004a40 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a00:	1c5a      	adds	r2, r3, #1
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	629a      	str	r2, [r3, #40]	; 0x28
 8004a06:	e01b      	b.n	8004a40 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10a      	bne.n	8004a26 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6858      	ldr	r0, [r3, #4]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1a:	1c59      	adds	r1, r3, #1
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	6291      	str	r1, [r2, #40]	; 0x28
 8004a20:	b2c2      	uxtb	r2, r0
 8004a22:	701a      	strb	r2, [r3, #0]
 8004a24:	e00c      	b.n	8004a40 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	b2da      	uxtb	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a32:	1c58      	adds	r0, r3, #1
 8004a34:	6879      	ldr	r1, [r7, #4]
 8004a36:	6288      	str	r0, [r1, #40]	; 0x28
 8004a38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a3c:	b2d2      	uxtb	r2, r2
 8004a3e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	3b01      	subs	r3, #1
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d120      	bne.n	8004a96 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68da      	ldr	r2, [r3, #12]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 0220 	bic.w	r2, r2, #32
 8004a62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68da      	ldr	r2, [r3, #12]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	695a      	ldr	r2, [r3, #20]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 0201 	bic.w	r2, r2, #1
 8004a82:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2220      	movs	r2, #32
 8004a88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f7fc fa63 	bl	8000f58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004a92:	2300      	movs	r3, #0
 8004a94:	e002      	b.n	8004a9c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004a96:	2300      	movs	r3, #0
 8004a98:	e000      	b.n	8004a9c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004a9a:	2302      	movs	r3, #2
  }
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aa8:	b085      	sub	sp, #20
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68da      	ldr	r2, [r3, #12]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	431a      	orrs	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	69db      	ldr	r3, [r3, #28]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004ae6:	f023 030c 	bic.w	r3, r3, #12
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	6812      	ldr	r2, [r2, #0]
 8004aee:	68f9      	ldr	r1, [r7, #12]
 8004af0:	430b      	orrs	r3, r1
 8004af2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	699a      	ldr	r2, [r3, #24]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b12:	f040 818b 	bne.w	8004e2c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4ac1      	ldr	r2, [pc, #772]	; (8004e20 <UART_SetConfig+0x37c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d005      	beq.n	8004b2c <UART_SetConfig+0x88>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4abf      	ldr	r2, [pc, #764]	; (8004e24 <UART_SetConfig+0x380>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	f040 80bd 	bne.w	8004ca6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b2c:	f7fe fc80 	bl	8003430 <HAL_RCC_GetPCLK2Freq>
 8004b30:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	461d      	mov	r5, r3
 8004b36:	f04f 0600 	mov.w	r6, #0
 8004b3a:	46a8      	mov	r8, r5
 8004b3c:	46b1      	mov	r9, r6
 8004b3e:	eb18 0308 	adds.w	r3, r8, r8
 8004b42:	eb49 0409 	adc.w	r4, r9, r9
 8004b46:	4698      	mov	r8, r3
 8004b48:	46a1      	mov	r9, r4
 8004b4a:	eb18 0805 	adds.w	r8, r8, r5
 8004b4e:	eb49 0906 	adc.w	r9, r9, r6
 8004b52:	f04f 0100 	mov.w	r1, #0
 8004b56:	f04f 0200 	mov.w	r2, #0
 8004b5a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004b5e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004b62:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004b66:	4688      	mov	r8, r1
 8004b68:	4691      	mov	r9, r2
 8004b6a:	eb18 0005 	adds.w	r0, r8, r5
 8004b6e:	eb49 0106 	adc.w	r1, r9, r6
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	461d      	mov	r5, r3
 8004b78:	f04f 0600 	mov.w	r6, #0
 8004b7c:	196b      	adds	r3, r5, r5
 8004b7e:	eb46 0406 	adc.w	r4, r6, r6
 8004b82:	461a      	mov	r2, r3
 8004b84:	4623      	mov	r3, r4
 8004b86:	f7fb fb93 	bl	80002b0 <__aeabi_uldivmod>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	460c      	mov	r4, r1
 8004b8e:	461a      	mov	r2, r3
 8004b90:	4ba5      	ldr	r3, [pc, #660]	; (8004e28 <UART_SetConfig+0x384>)
 8004b92:	fba3 2302 	umull	r2, r3, r3, r2
 8004b96:	095b      	lsrs	r3, r3, #5
 8004b98:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	461d      	mov	r5, r3
 8004ba0:	f04f 0600 	mov.w	r6, #0
 8004ba4:	46a9      	mov	r9, r5
 8004ba6:	46b2      	mov	sl, r6
 8004ba8:	eb19 0309 	adds.w	r3, r9, r9
 8004bac:	eb4a 040a 	adc.w	r4, sl, sl
 8004bb0:	4699      	mov	r9, r3
 8004bb2:	46a2      	mov	sl, r4
 8004bb4:	eb19 0905 	adds.w	r9, r9, r5
 8004bb8:	eb4a 0a06 	adc.w	sl, sl, r6
 8004bbc:	f04f 0100 	mov.w	r1, #0
 8004bc0:	f04f 0200 	mov.w	r2, #0
 8004bc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bc8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004bcc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004bd0:	4689      	mov	r9, r1
 8004bd2:	4692      	mov	sl, r2
 8004bd4:	eb19 0005 	adds.w	r0, r9, r5
 8004bd8:	eb4a 0106 	adc.w	r1, sl, r6
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	461d      	mov	r5, r3
 8004be2:	f04f 0600 	mov.w	r6, #0
 8004be6:	196b      	adds	r3, r5, r5
 8004be8:	eb46 0406 	adc.w	r4, r6, r6
 8004bec:	461a      	mov	r2, r3
 8004bee:	4623      	mov	r3, r4
 8004bf0:	f7fb fb5e 	bl	80002b0 <__aeabi_uldivmod>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	460c      	mov	r4, r1
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	4b8b      	ldr	r3, [pc, #556]	; (8004e28 <UART_SetConfig+0x384>)
 8004bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8004c00:	095b      	lsrs	r3, r3, #5
 8004c02:	2164      	movs	r1, #100	; 0x64
 8004c04:	fb01 f303 	mul.w	r3, r1, r3
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	3332      	adds	r3, #50	; 0x32
 8004c0e:	4a86      	ldr	r2, [pc, #536]	; (8004e28 <UART_SetConfig+0x384>)
 8004c10:	fba2 2303 	umull	r2, r3, r2, r3
 8004c14:	095b      	lsrs	r3, r3, #5
 8004c16:	005b      	lsls	r3, r3, #1
 8004c18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c1c:	4498      	add	r8, r3
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	461d      	mov	r5, r3
 8004c22:	f04f 0600 	mov.w	r6, #0
 8004c26:	46a9      	mov	r9, r5
 8004c28:	46b2      	mov	sl, r6
 8004c2a:	eb19 0309 	adds.w	r3, r9, r9
 8004c2e:	eb4a 040a 	adc.w	r4, sl, sl
 8004c32:	4699      	mov	r9, r3
 8004c34:	46a2      	mov	sl, r4
 8004c36:	eb19 0905 	adds.w	r9, r9, r5
 8004c3a:	eb4a 0a06 	adc.w	sl, sl, r6
 8004c3e:	f04f 0100 	mov.w	r1, #0
 8004c42:	f04f 0200 	mov.w	r2, #0
 8004c46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c4a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c4e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c52:	4689      	mov	r9, r1
 8004c54:	4692      	mov	sl, r2
 8004c56:	eb19 0005 	adds.w	r0, r9, r5
 8004c5a:	eb4a 0106 	adc.w	r1, sl, r6
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	461d      	mov	r5, r3
 8004c64:	f04f 0600 	mov.w	r6, #0
 8004c68:	196b      	adds	r3, r5, r5
 8004c6a:	eb46 0406 	adc.w	r4, r6, r6
 8004c6e:	461a      	mov	r2, r3
 8004c70:	4623      	mov	r3, r4
 8004c72:	f7fb fb1d 	bl	80002b0 <__aeabi_uldivmod>
 8004c76:	4603      	mov	r3, r0
 8004c78:	460c      	mov	r4, r1
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	4b6a      	ldr	r3, [pc, #424]	; (8004e28 <UART_SetConfig+0x384>)
 8004c7e:	fba3 1302 	umull	r1, r3, r3, r2
 8004c82:	095b      	lsrs	r3, r3, #5
 8004c84:	2164      	movs	r1, #100	; 0x64
 8004c86:	fb01 f303 	mul.w	r3, r1, r3
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	3332      	adds	r3, #50	; 0x32
 8004c90:	4a65      	ldr	r2, [pc, #404]	; (8004e28 <UART_SetConfig+0x384>)
 8004c92:	fba2 2303 	umull	r2, r3, r2, r3
 8004c96:	095b      	lsrs	r3, r3, #5
 8004c98:	f003 0207 	and.w	r2, r3, #7
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4442      	add	r2, r8
 8004ca2:	609a      	str	r2, [r3, #8]
 8004ca4:	e26f      	b.n	8005186 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ca6:	f7fe fbaf 	bl	8003408 <HAL_RCC_GetPCLK1Freq>
 8004caa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	461d      	mov	r5, r3
 8004cb0:	f04f 0600 	mov.w	r6, #0
 8004cb4:	46a8      	mov	r8, r5
 8004cb6:	46b1      	mov	r9, r6
 8004cb8:	eb18 0308 	adds.w	r3, r8, r8
 8004cbc:	eb49 0409 	adc.w	r4, r9, r9
 8004cc0:	4698      	mov	r8, r3
 8004cc2:	46a1      	mov	r9, r4
 8004cc4:	eb18 0805 	adds.w	r8, r8, r5
 8004cc8:	eb49 0906 	adc.w	r9, r9, r6
 8004ccc:	f04f 0100 	mov.w	r1, #0
 8004cd0:	f04f 0200 	mov.w	r2, #0
 8004cd4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004cd8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004cdc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004ce0:	4688      	mov	r8, r1
 8004ce2:	4691      	mov	r9, r2
 8004ce4:	eb18 0005 	adds.w	r0, r8, r5
 8004ce8:	eb49 0106 	adc.w	r1, r9, r6
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	461d      	mov	r5, r3
 8004cf2:	f04f 0600 	mov.w	r6, #0
 8004cf6:	196b      	adds	r3, r5, r5
 8004cf8:	eb46 0406 	adc.w	r4, r6, r6
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	4623      	mov	r3, r4
 8004d00:	f7fb fad6 	bl	80002b0 <__aeabi_uldivmod>
 8004d04:	4603      	mov	r3, r0
 8004d06:	460c      	mov	r4, r1
 8004d08:	461a      	mov	r2, r3
 8004d0a:	4b47      	ldr	r3, [pc, #284]	; (8004e28 <UART_SetConfig+0x384>)
 8004d0c:	fba3 2302 	umull	r2, r3, r3, r2
 8004d10:	095b      	lsrs	r3, r3, #5
 8004d12:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	461d      	mov	r5, r3
 8004d1a:	f04f 0600 	mov.w	r6, #0
 8004d1e:	46a9      	mov	r9, r5
 8004d20:	46b2      	mov	sl, r6
 8004d22:	eb19 0309 	adds.w	r3, r9, r9
 8004d26:	eb4a 040a 	adc.w	r4, sl, sl
 8004d2a:	4699      	mov	r9, r3
 8004d2c:	46a2      	mov	sl, r4
 8004d2e:	eb19 0905 	adds.w	r9, r9, r5
 8004d32:	eb4a 0a06 	adc.w	sl, sl, r6
 8004d36:	f04f 0100 	mov.w	r1, #0
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d42:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d46:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d4a:	4689      	mov	r9, r1
 8004d4c:	4692      	mov	sl, r2
 8004d4e:	eb19 0005 	adds.w	r0, r9, r5
 8004d52:	eb4a 0106 	adc.w	r1, sl, r6
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	461d      	mov	r5, r3
 8004d5c:	f04f 0600 	mov.w	r6, #0
 8004d60:	196b      	adds	r3, r5, r5
 8004d62:	eb46 0406 	adc.w	r4, r6, r6
 8004d66:	461a      	mov	r2, r3
 8004d68:	4623      	mov	r3, r4
 8004d6a:	f7fb faa1 	bl	80002b0 <__aeabi_uldivmod>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	460c      	mov	r4, r1
 8004d72:	461a      	mov	r2, r3
 8004d74:	4b2c      	ldr	r3, [pc, #176]	; (8004e28 <UART_SetConfig+0x384>)
 8004d76:	fba3 1302 	umull	r1, r3, r3, r2
 8004d7a:	095b      	lsrs	r3, r3, #5
 8004d7c:	2164      	movs	r1, #100	; 0x64
 8004d7e:	fb01 f303 	mul.w	r3, r1, r3
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	00db      	lsls	r3, r3, #3
 8004d86:	3332      	adds	r3, #50	; 0x32
 8004d88:	4a27      	ldr	r2, [pc, #156]	; (8004e28 <UART_SetConfig+0x384>)
 8004d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8e:	095b      	lsrs	r3, r3, #5
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d96:	4498      	add	r8, r3
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	461d      	mov	r5, r3
 8004d9c:	f04f 0600 	mov.w	r6, #0
 8004da0:	46a9      	mov	r9, r5
 8004da2:	46b2      	mov	sl, r6
 8004da4:	eb19 0309 	adds.w	r3, r9, r9
 8004da8:	eb4a 040a 	adc.w	r4, sl, sl
 8004dac:	4699      	mov	r9, r3
 8004dae:	46a2      	mov	sl, r4
 8004db0:	eb19 0905 	adds.w	r9, r9, r5
 8004db4:	eb4a 0a06 	adc.w	sl, sl, r6
 8004db8:	f04f 0100 	mov.w	r1, #0
 8004dbc:	f04f 0200 	mov.w	r2, #0
 8004dc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004dc4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004dc8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004dcc:	4689      	mov	r9, r1
 8004dce:	4692      	mov	sl, r2
 8004dd0:	eb19 0005 	adds.w	r0, r9, r5
 8004dd4:	eb4a 0106 	adc.w	r1, sl, r6
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	461d      	mov	r5, r3
 8004dde:	f04f 0600 	mov.w	r6, #0
 8004de2:	196b      	adds	r3, r5, r5
 8004de4:	eb46 0406 	adc.w	r4, r6, r6
 8004de8:	461a      	mov	r2, r3
 8004dea:	4623      	mov	r3, r4
 8004dec:	f7fb fa60 	bl	80002b0 <__aeabi_uldivmod>
 8004df0:	4603      	mov	r3, r0
 8004df2:	460c      	mov	r4, r1
 8004df4:	461a      	mov	r2, r3
 8004df6:	4b0c      	ldr	r3, [pc, #48]	; (8004e28 <UART_SetConfig+0x384>)
 8004df8:	fba3 1302 	umull	r1, r3, r3, r2
 8004dfc:	095b      	lsrs	r3, r3, #5
 8004dfe:	2164      	movs	r1, #100	; 0x64
 8004e00:	fb01 f303 	mul.w	r3, r1, r3
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	00db      	lsls	r3, r3, #3
 8004e08:	3332      	adds	r3, #50	; 0x32
 8004e0a:	4a07      	ldr	r2, [pc, #28]	; (8004e28 <UART_SetConfig+0x384>)
 8004e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e10:	095b      	lsrs	r3, r3, #5
 8004e12:	f003 0207 	and.w	r2, r3, #7
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4442      	add	r2, r8
 8004e1c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004e1e:	e1b2      	b.n	8005186 <UART_SetConfig+0x6e2>
 8004e20:	40011000 	.word	0x40011000
 8004e24:	40011400 	.word	0x40011400
 8004e28:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4ad7      	ldr	r2, [pc, #860]	; (8005190 <UART_SetConfig+0x6ec>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d005      	beq.n	8004e42 <UART_SetConfig+0x39e>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4ad6      	ldr	r2, [pc, #856]	; (8005194 <UART_SetConfig+0x6f0>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	f040 80d1 	bne.w	8004fe4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e42:	f7fe faf5 	bl	8003430 <HAL_RCC_GetPCLK2Freq>
 8004e46:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	469a      	mov	sl, r3
 8004e4c:	f04f 0b00 	mov.w	fp, #0
 8004e50:	46d0      	mov	r8, sl
 8004e52:	46d9      	mov	r9, fp
 8004e54:	eb18 0308 	adds.w	r3, r8, r8
 8004e58:	eb49 0409 	adc.w	r4, r9, r9
 8004e5c:	4698      	mov	r8, r3
 8004e5e:	46a1      	mov	r9, r4
 8004e60:	eb18 080a 	adds.w	r8, r8, sl
 8004e64:	eb49 090b 	adc.w	r9, r9, fp
 8004e68:	f04f 0100 	mov.w	r1, #0
 8004e6c:	f04f 0200 	mov.w	r2, #0
 8004e70:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004e74:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004e78:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004e7c:	4688      	mov	r8, r1
 8004e7e:	4691      	mov	r9, r2
 8004e80:	eb1a 0508 	adds.w	r5, sl, r8
 8004e84:	eb4b 0609 	adc.w	r6, fp, r9
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	f04f 0200 	mov.w	r2, #0
 8004e92:	f04f 0300 	mov.w	r3, #0
 8004e96:	f04f 0400 	mov.w	r4, #0
 8004e9a:	0094      	lsls	r4, r2, #2
 8004e9c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ea0:	008b      	lsls	r3, r1, #2
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	4623      	mov	r3, r4
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	4631      	mov	r1, r6
 8004eaa:	f7fb fa01 	bl	80002b0 <__aeabi_uldivmod>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	460c      	mov	r4, r1
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	4bb8      	ldr	r3, [pc, #736]	; (8005198 <UART_SetConfig+0x6f4>)
 8004eb6:	fba3 2302 	umull	r2, r3, r3, r2
 8004eba:	095b      	lsrs	r3, r3, #5
 8004ebc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	469b      	mov	fp, r3
 8004ec4:	f04f 0c00 	mov.w	ip, #0
 8004ec8:	46d9      	mov	r9, fp
 8004eca:	46e2      	mov	sl, ip
 8004ecc:	eb19 0309 	adds.w	r3, r9, r9
 8004ed0:	eb4a 040a 	adc.w	r4, sl, sl
 8004ed4:	4699      	mov	r9, r3
 8004ed6:	46a2      	mov	sl, r4
 8004ed8:	eb19 090b 	adds.w	r9, r9, fp
 8004edc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004ee0:	f04f 0100 	mov.w	r1, #0
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004eec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ef0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ef4:	4689      	mov	r9, r1
 8004ef6:	4692      	mov	sl, r2
 8004ef8:	eb1b 0509 	adds.w	r5, fp, r9
 8004efc:	eb4c 060a 	adc.w	r6, ip, sl
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	4619      	mov	r1, r3
 8004f06:	f04f 0200 	mov.w	r2, #0
 8004f0a:	f04f 0300 	mov.w	r3, #0
 8004f0e:	f04f 0400 	mov.w	r4, #0
 8004f12:	0094      	lsls	r4, r2, #2
 8004f14:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f18:	008b      	lsls	r3, r1, #2
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	4623      	mov	r3, r4
 8004f1e:	4628      	mov	r0, r5
 8004f20:	4631      	mov	r1, r6
 8004f22:	f7fb f9c5 	bl	80002b0 <__aeabi_uldivmod>
 8004f26:	4603      	mov	r3, r0
 8004f28:	460c      	mov	r4, r1
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	4b9a      	ldr	r3, [pc, #616]	; (8005198 <UART_SetConfig+0x6f4>)
 8004f2e:	fba3 1302 	umull	r1, r3, r3, r2
 8004f32:	095b      	lsrs	r3, r3, #5
 8004f34:	2164      	movs	r1, #100	; 0x64
 8004f36:	fb01 f303 	mul.w	r3, r1, r3
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	011b      	lsls	r3, r3, #4
 8004f3e:	3332      	adds	r3, #50	; 0x32
 8004f40:	4a95      	ldr	r2, [pc, #596]	; (8005198 <UART_SetConfig+0x6f4>)
 8004f42:	fba2 2303 	umull	r2, r3, r2, r3
 8004f46:	095b      	lsrs	r3, r3, #5
 8004f48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f4c:	4498      	add	r8, r3
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	469b      	mov	fp, r3
 8004f52:	f04f 0c00 	mov.w	ip, #0
 8004f56:	46d9      	mov	r9, fp
 8004f58:	46e2      	mov	sl, ip
 8004f5a:	eb19 0309 	adds.w	r3, r9, r9
 8004f5e:	eb4a 040a 	adc.w	r4, sl, sl
 8004f62:	4699      	mov	r9, r3
 8004f64:	46a2      	mov	sl, r4
 8004f66:	eb19 090b 	adds.w	r9, r9, fp
 8004f6a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004f6e:	f04f 0100 	mov.w	r1, #0
 8004f72:	f04f 0200 	mov.w	r2, #0
 8004f76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f7a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f7e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f82:	4689      	mov	r9, r1
 8004f84:	4692      	mov	sl, r2
 8004f86:	eb1b 0509 	adds.w	r5, fp, r9
 8004f8a:	eb4c 060a 	adc.w	r6, ip, sl
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	4619      	mov	r1, r3
 8004f94:	f04f 0200 	mov.w	r2, #0
 8004f98:	f04f 0300 	mov.w	r3, #0
 8004f9c:	f04f 0400 	mov.w	r4, #0
 8004fa0:	0094      	lsls	r4, r2, #2
 8004fa2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004fa6:	008b      	lsls	r3, r1, #2
 8004fa8:	461a      	mov	r2, r3
 8004faa:	4623      	mov	r3, r4
 8004fac:	4628      	mov	r0, r5
 8004fae:	4631      	mov	r1, r6
 8004fb0:	f7fb f97e 	bl	80002b0 <__aeabi_uldivmod>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	460c      	mov	r4, r1
 8004fb8:	461a      	mov	r2, r3
 8004fba:	4b77      	ldr	r3, [pc, #476]	; (8005198 <UART_SetConfig+0x6f4>)
 8004fbc:	fba3 1302 	umull	r1, r3, r3, r2
 8004fc0:	095b      	lsrs	r3, r3, #5
 8004fc2:	2164      	movs	r1, #100	; 0x64
 8004fc4:	fb01 f303 	mul.w	r3, r1, r3
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	011b      	lsls	r3, r3, #4
 8004fcc:	3332      	adds	r3, #50	; 0x32
 8004fce:	4a72      	ldr	r2, [pc, #456]	; (8005198 <UART_SetConfig+0x6f4>)
 8004fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd4:	095b      	lsrs	r3, r3, #5
 8004fd6:	f003 020f 	and.w	r2, r3, #15
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4442      	add	r2, r8
 8004fe0:	609a      	str	r2, [r3, #8]
 8004fe2:	e0d0      	b.n	8005186 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fe4:	f7fe fa10 	bl	8003408 <HAL_RCC_GetPCLK1Freq>
 8004fe8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	469a      	mov	sl, r3
 8004fee:	f04f 0b00 	mov.w	fp, #0
 8004ff2:	46d0      	mov	r8, sl
 8004ff4:	46d9      	mov	r9, fp
 8004ff6:	eb18 0308 	adds.w	r3, r8, r8
 8004ffa:	eb49 0409 	adc.w	r4, r9, r9
 8004ffe:	4698      	mov	r8, r3
 8005000:	46a1      	mov	r9, r4
 8005002:	eb18 080a 	adds.w	r8, r8, sl
 8005006:	eb49 090b 	adc.w	r9, r9, fp
 800500a:	f04f 0100 	mov.w	r1, #0
 800500e:	f04f 0200 	mov.w	r2, #0
 8005012:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005016:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800501a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800501e:	4688      	mov	r8, r1
 8005020:	4691      	mov	r9, r2
 8005022:	eb1a 0508 	adds.w	r5, sl, r8
 8005026:	eb4b 0609 	adc.w	r6, fp, r9
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	4619      	mov	r1, r3
 8005030:	f04f 0200 	mov.w	r2, #0
 8005034:	f04f 0300 	mov.w	r3, #0
 8005038:	f04f 0400 	mov.w	r4, #0
 800503c:	0094      	lsls	r4, r2, #2
 800503e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005042:	008b      	lsls	r3, r1, #2
 8005044:	461a      	mov	r2, r3
 8005046:	4623      	mov	r3, r4
 8005048:	4628      	mov	r0, r5
 800504a:	4631      	mov	r1, r6
 800504c:	f7fb f930 	bl	80002b0 <__aeabi_uldivmod>
 8005050:	4603      	mov	r3, r0
 8005052:	460c      	mov	r4, r1
 8005054:	461a      	mov	r2, r3
 8005056:	4b50      	ldr	r3, [pc, #320]	; (8005198 <UART_SetConfig+0x6f4>)
 8005058:	fba3 2302 	umull	r2, r3, r3, r2
 800505c:	095b      	lsrs	r3, r3, #5
 800505e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	469b      	mov	fp, r3
 8005066:	f04f 0c00 	mov.w	ip, #0
 800506a:	46d9      	mov	r9, fp
 800506c:	46e2      	mov	sl, ip
 800506e:	eb19 0309 	adds.w	r3, r9, r9
 8005072:	eb4a 040a 	adc.w	r4, sl, sl
 8005076:	4699      	mov	r9, r3
 8005078:	46a2      	mov	sl, r4
 800507a:	eb19 090b 	adds.w	r9, r9, fp
 800507e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005082:	f04f 0100 	mov.w	r1, #0
 8005086:	f04f 0200 	mov.w	r2, #0
 800508a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800508e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005092:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005096:	4689      	mov	r9, r1
 8005098:	4692      	mov	sl, r2
 800509a:	eb1b 0509 	adds.w	r5, fp, r9
 800509e:	eb4c 060a 	adc.w	r6, ip, sl
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	4619      	mov	r1, r3
 80050a8:	f04f 0200 	mov.w	r2, #0
 80050ac:	f04f 0300 	mov.w	r3, #0
 80050b0:	f04f 0400 	mov.w	r4, #0
 80050b4:	0094      	lsls	r4, r2, #2
 80050b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80050ba:	008b      	lsls	r3, r1, #2
 80050bc:	461a      	mov	r2, r3
 80050be:	4623      	mov	r3, r4
 80050c0:	4628      	mov	r0, r5
 80050c2:	4631      	mov	r1, r6
 80050c4:	f7fb f8f4 	bl	80002b0 <__aeabi_uldivmod>
 80050c8:	4603      	mov	r3, r0
 80050ca:	460c      	mov	r4, r1
 80050cc:	461a      	mov	r2, r3
 80050ce:	4b32      	ldr	r3, [pc, #200]	; (8005198 <UART_SetConfig+0x6f4>)
 80050d0:	fba3 1302 	umull	r1, r3, r3, r2
 80050d4:	095b      	lsrs	r3, r3, #5
 80050d6:	2164      	movs	r1, #100	; 0x64
 80050d8:	fb01 f303 	mul.w	r3, r1, r3
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	011b      	lsls	r3, r3, #4
 80050e0:	3332      	adds	r3, #50	; 0x32
 80050e2:	4a2d      	ldr	r2, [pc, #180]	; (8005198 <UART_SetConfig+0x6f4>)
 80050e4:	fba2 2303 	umull	r2, r3, r2, r3
 80050e8:	095b      	lsrs	r3, r3, #5
 80050ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050ee:	4498      	add	r8, r3
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	469b      	mov	fp, r3
 80050f4:	f04f 0c00 	mov.w	ip, #0
 80050f8:	46d9      	mov	r9, fp
 80050fa:	46e2      	mov	sl, ip
 80050fc:	eb19 0309 	adds.w	r3, r9, r9
 8005100:	eb4a 040a 	adc.w	r4, sl, sl
 8005104:	4699      	mov	r9, r3
 8005106:	46a2      	mov	sl, r4
 8005108:	eb19 090b 	adds.w	r9, r9, fp
 800510c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005110:	f04f 0100 	mov.w	r1, #0
 8005114:	f04f 0200 	mov.w	r2, #0
 8005118:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800511c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005120:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005124:	4689      	mov	r9, r1
 8005126:	4692      	mov	sl, r2
 8005128:	eb1b 0509 	adds.w	r5, fp, r9
 800512c:	eb4c 060a 	adc.w	r6, ip, sl
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	4619      	mov	r1, r3
 8005136:	f04f 0200 	mov.w	r2, #0
 800513a:	f04f 0300 	mov.w	r3, #0
 800513e:	f04f 0400 	mov.w	r4, #0
 8005142:	0094      	lsls	r4, r2, #2
 8005144:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005148:	008b      	lsls	r3, r1, #2
 800514a:	461a      	mov	r2, r3
 800514c:	4623      	mov	r3, r4
 800514e:	4628      	mov	r0, r5
 8005150:	4631      	mov	r1, r6
 8005152:	f7fb f8ad 	bl	80002b0 <__aeabi_uldivmod>
 8005156:	4603      	mov	r3, r0
 8005158:	460c      	mov	r4, r1
 800515a:	461a      	mov	r2, r3
 800515c:	4b0e      	ldr	r3, [pc, #56]	; (8005198 <UART_SetConfig+0x6f4>)
 800515e:	fba3 1302 	umull	r1, r3, r3, r2
 8005162:	095b      	lsrs	r3, r3, #5
 8005164:	2164      	movs	r1, #100	; 0x64
 8005166:	fb01 f303 	mul.w	r3, r1, r3
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	011b      	lsls	r3, r3, #4
 800516e:	3332      	adds	r3, #50	; 0x32
 8005170:	4a09      	ldr	r2, [pc, #36]	; (8005198 <UART_SetConfig+0x6f4>)
 8005172:	fba2 2303 	umull	r2, r3, r2, r3
 8005176:	095b      	lsrs	r3, r3, #5
 8005178:	f003 020f 	and.w	r2, r3, #15
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4442      	add	r2, r8
 8005182:	609a      	str	r2, [r3, #8]
}
 8005184:	e7ff      	b.n	8005186 <UART_SetConfig+0x6e2>
 8005186:	bf00      	nop
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005190:	40011000 	.word	0x40011000
 8005194:	40011400 	.word	0x40011400
 8005198:	51eb851f 	.word	0x51eb851f

0800519c <__errno>:
 800519c:	4b01      	ldr	r3, [pc, #4]	; (80051a4 <__errno+0x8>)
 800519e:	6818      	ldr	r0, [r3, #0]
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	20000010 	.word	0x20000010

080051a8 <__libc_init_array>:
 80051a8:	b570      	push	{r4, r5, r6, lr}
 80051aa:	4e0d      	ldr	r6, [pc, #52]	; (80051e0 <__libc_init_array+0x38>)
 80051ac:	4c0d      	ldr	r4, [pc, #52]	; (80051e4 <__libc_init_array+0x3c>)
 80051ae:	1ba4      	subs	r4, r4, r6
 80051b0:	10a4      	asrs	r4, r4, #2
 80051b2:	2500      	movs	r5, #0
 80051b4:	42a5      	cmp	r5, r4
 80051b6:	d109      	bne.n	80051cc <__libc_init_array+0x24>
 80051b8:	4e0b      	ldr	r6, [pc, #44]	; (80051e8 <__libc_init_array+0x40>)
 80051ba:	4c0c      	ldr	r4, [pc, #48]	; (80051ec <__libc_init_array+0x44>)
 80051bc:	f000 fc26 	bl	8005a0c <_init>
 80051c0:	1ba4      	subs	r4, r4, r6
 80051c2:	10a4      	asrs	r4, r4, #2
 80051c4:	2500      	movs	r5, #0
 80051c6:	42a5      	cmp	r5, r4
 80051c8:	d105      	bne.n	80051d6 <__libc_init_array+0x2e>
 80051ca:	bd70      	pop	{r4, r5, r6, pc}
 80051cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80051d0:	4798      	blx	r3
 80051d2:	3501      	adds	r5, #1
 80051d4:	e7ee      	b.n	80051b4 <__libc_init_array+0xc>
 80051d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80051da:	4798      	blx	r3
 80051dc:	3501      	adds	r5, #1
 80051de:	e7f2      	b.n	80051c6 <__libc_init_array+0x1e>
 80051e0:	08005aa0 	.word	0x08005aa0
 80051e4:	08005aa0 	.word	0x08005aa0
 80051e8:	08005aa0 	.word	0x08005aa0
 80051ec:	08005aa4 	.word	0x08005aa4

080051f0 <memset>:
 80051f0:	4402      	add	r2, r0
 80051f2:	4603      	mov	r3, r0
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d100      	bne.n	80051fa <memset+0xa>
 80051f8:	4770      	bx	lr
 80051fa:	f803 1b01 	strb.w	r1, [r3], #1
 80051fe:	e7f9      	b.n	80051f4 <memset+0x4>

08005200 <siprintf>:
 8005200:	b40e      	push	{r1, r2, r3}
 8005202:	b500      	push	{lr}
 8005204:	b09c      	sub	sp, #112	; 0x70
 8005206:	ab1d      	add	r3, sp, #116	; 0x74
 8005208:	9002      	str	r0, [sp, #8]
 800520a:	9006      	str	r0, [sp, #24]
 800520c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005210:	4809      	ldr	r0, [pc, #36]	; (8005238 <siprintf+0x38>)
 8005212:	9107      	str	r1, [sp, #28]
 8005214:	9104      	str	r1, [sp, #16]
 8005216:	4909      	ldr	r1, [pc, #36]	; (800523c <siprintf+0x3c>)
 8005218:	f853 2b04 	ldr.w	r2, [r3], #4
 800521c:	9105      	str	r1, [sp, #20]
 800521e:	6800      	ldr	r0, [r0, #0]
 8005220:	9301      	str	r3, [sp, #4]
 8005222:	a902      	add	r1, sp, #8
 8005224:	f000 f866 	bl	80052f4 <_svfiprintf_r>
 8005228:	9b02      	ldr	r3, [sp, #8]
 800522a:	2200      	movs	r2, #0
 800522c:	701a      	strb	r2, [r3, #0]
 800522e:	b01c      	add	sp, #112	; 0x70
 8005230:	f85d eb04 	ldr.w	lr, [sp], #4
 8005234:	b003      	add	sp, #12
 8005236:	4770      	bx	lr
 8005238:	20000010 	.word	0x20000010
 800523c:	ffff0208 	.word	0xffff0208

08005240 <__ssputs_r>:
 8005240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005244:	688e      	ldr	r6, [r1, #8]
 8005246:	429e      	cmp	r6, r3
 8005248:	4682      	mov	sl, r0
 800524a:	460c      	mov	r4, r1
 800524c:	4690      	mov	r8, r2
 800524e:	4699      	mov	r9, r3
 8005250:	d837      	bhi.n	80052c2 <__ssputs_r+0x82>
 8005252:	898a      	ldrh	r2, [r1, #12]
 8005254:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005258:	d031      	beq.n	80052be <__ssputs_r+0x7e>
 800525a:	6825      	ldr	r5, [r4, #0]
 800525c:	6909      	ldr	r1, [r1, #16]
 800525e:	1a6f      	subs	r7, r5, r1
 8005260:	6965      	ldr	r5, [r4, #20]
 8005262:	2302      	movs	r3, #2
 8005264:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005268:	fb95 f5f3 	sdiv	r5, r5, r3
 800526c:	f109 0301 	add.w	r3, r9, #1
 8005270:	443b      	add	r3, r7
 8005272:	429d      	cmp	r5, r3
 8005274:	bf38      	it	cc
 8005276:	461d      	movcc	r5, r3
 8005278:	0553      	lsls	r3, r2, #21
 800527a:	d530      	bpl.n	80052de <__ssputs_r+0x9e>
 800527c:	4629      	mov	r1, r5
 800527e:	f000 fb2b 	bl	80058d8 <_malloc_r>
 8005282:	4606      	mov	r6, r0
 8005284:	b950      	cbnz	r0, 800529c <__ssputs_r+0x5c>
 8005286:	230c      	movs	r3, #12
 8005288:	f8ca 3000 	str.w	r3, [sl]
 800528c:	89a3      	ldrh	r3, [r4, #12]
 800528e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005292:	81a3      	strh	r3, [r4, #12]
 8005294:	f04f 30ff 	mov.w	r0, #4294967295
 8005298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800529c:	463a      	mov	r2, r7
 800529e:	6921      	ldr	r1, [r4, #16]
 80052a0:	f000 faa8 	bl	80057f4 <memcpy>
 80052a4:	89a3      	ldrh	r3, [r4, #12]
 80052a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80052aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ae:	81a3      	strh	r3, [r4, #12]
 80052b0:	6126      	str	r6, [r4, #16]
 80052b2:	6165      	str	r5, [r4, #20]
 80052b4:	443e      	add	r6, r7
 80052b6:	1bed      	subs	r5, r5, r7
 80052b8:	6026      	str	r6, [r4, #0]
 80052ba:	60a5      	str	r5, [r4, #8]
 80052bc:	464e      	mov	r6, r9
 80052be:	454e      	cmp	r6, r9
 80052c0:	d900      	bls.n	80052c4 <__ssputs_r+0x84>
 80052c2:	464e      	mov	r6, r9
 80052c4:	4632      	mov	r2, r6
 80052c6:	4641      	mov	r1, r8
 80052c8:	6820      	ldr	r0, [r4, #0]
 80052ca:	f000 fa9e 	bl	800580a <memmove>
 80052ce:	68a3      	ldr	r3, [r4, #8]
 80052d0:	1b9b      	subs	r3, r3, r6
 80052d2:	60a3      	str	r3, [r4, #8]
 80052d4:	6823      	ldr	r3, [r4, #0]
 80052d6:	441e      	add	r6, r3
 80052d8:	6026      	str	r6, [r4, #0]
 80052da:	2000      	movs	r0, #0
 80052dc:	e7dc      	b.n	8005298 <__ssputs_r+0x58>
 80052de:	462a      	mov	r2, r5
 80052e0:	f000 fb54 	bl	800598c <_realloc_r>
 80052e4:	4606      	mov	r6, r0
 80052e6:	2800      	cmp	r0, #0
 80052e8:	d1e2      	bne.n	80052b0 <__ssputs_r+0x70>
 80052ea:	6921      	ldr	r1, [r4, #16]
 80052ec:	4650      	mov	r0, sl
 80052ee:	f000 faa5 	bl	800583c <_free_r>
 80052f2:	e7c8      	b.n	8005286 <__ssputs_r+0x46>

080052f4 <_svfiprintf_r>:
 80052f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f8:	461d      	mov	r5, r3
 80052fa:	898b      	ldrh	r3, [r1, #12]
 80052fc:	061f      	lsls	r7, r3, #24
 80052fe:	b09d      	sub	sp, #116	; 0x74
 8005300:	4680      	mov	r8, r0
 8005302:	460c      	mov	r4, r1
 8005304:	4616      	mov	r6, r2
 8005306:	d50f      	bpl.n	8005328 <_svfiprintf_r+0x34>
 8005308:	690b      	ldr	r3, [r1, #16]
 800530a:	b96b      	cbnz	r3, 8005328 <_svfiprintf_r+0x34>
 800530c:	2140      	movs	r1, #64	; 0x40
 800530e:	f000 fae3 	bl	80058d8 <_malloc_r>
 8005312:	6020      	str	r0, [r4, #0]
 8005314:	6120      	str	r0, [r4, #16]
 8005316:	b928      	cbnz	r0, 8005324 <_svfiprintf_r+0x30>
 8005318:	230c      	movs	r3, #12
 800531a:	f8c8 3000 	str.w	r3, [r8]
 800531e:	f04f 30ff 	mov.w	r0, #4294967295
 8005322:	e0c8      	b.n	80054b6 <_svfiprintf_r+0x1c2>
 8005324:	2340      	movs	r3, #64	; 0x40
 8005326:	6163      	str	r3, [r4, #20]
 8005328:	2300      	movs	r3, #0
 800532a:	9309      	str	r3, [sp, #36]	; 0x24
 800532c:	2320      	movs	r3, #32
 800532e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005332:	2330      	movs	r3, #48	; 0x30
 8005334:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005338:	9503      	str	r5, [sp, #12]
 800533a:	f04f 0b01 	mov.w	fp, #1
 800533e:	4637      	mov	r7, r6
 8005340:	463d      	mov	r5, r7
 8005342:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005346:	b10b      	cbz	r3, 800534c <_svfiprintf_r+0x58>
 8005348:	2b25      	cmp	r3, #37	; 0x25
 800534a:	d13e      	bne.n	80053ca <_svfiprintf_r+0xd6>
 800534c:	ebb7 0a06 	subs.w	sl, r7, r6
 8005350:	d00b      	beq.n	800536a <_svfiprintf_r+0x76>
 8005352:	4653      	mov	r3, sl
 8005354:	4632      	mov	r2, r6
 8005356:	4621      	mov	r1, r4
 8005358:	4640      	mov	r0, r8
 800535a:	f7ff ff71 	bl	8005240 <__ssputs_r>
 800535e:	3001      	adds	r0, #1
 8005360:	f000 80a4 	beq.w	80054ac <_svfiprintf_r+0x1b8>
 8005364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005366:	4453      	add	r3, sl
 8005368:	9309      	str	r3, [sp, #36]	; 0x24
 800536a:	783b      	ldrb	r3, [r7, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	f000 809d 	beq.w	80054ac <_svfiprintf_r+0x1b8>
 8005372:	2300      	movs	r3, #0
 8005374:	f04f 32ff 	mov.w	r2, #4294967295
 8005378:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800537c:	9304      	str	r3, [sp, #16]
 800537e:	9307      	str	r3, [sp, #28]
 8005380:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005384:	931a      	str	r3, [sp, #104]	; 0x68
 8005386:	462f      	mov	r7, r5
 8005388:	2205      	movs	r2, #5
 800538a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800538e:	4850      	ldr	r0, [pc, #320]	; (80054d0 <_svfiprintf_r+0x1dc>)
 8005390:	f7fa ff3e 	bl	8000210 <memchr>
 8005394:	9b04      	ldr	r3, [sp, #16]
 8005396:	b9d0      	cbnz	r0, 80053ce <_svfiprintf_r+0xda>
 8005398:	06d9      	lsls	r1, r3, #27
 800539a:	bf44      	itt	mi
 800539c:	2220      	movmi	r2, #32
 800539e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80053a2:	071a      	lsls	r2, r3, #28
 80053a4:	bf44      	itt	mi
 80053a6:	222b      	movmi	r2, #43	; 0x2b
 80053a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80053ac:	782a      	ldrb	r2, [r5, #0]
 80053ae:	2a2a      	cmp	r2, #42	; 0x2a
 80053b0:	d015      	beq.n	80053de <_svfiprintf_r+0xea>
 80053b2:	9a07      	ldr	r2, [sp, #28]
 80053b4:	462f      	mov	r7, r5
 80053b6:	2000      	movs	r0, #0
 80053b8:	250a      	movs	r5, #10
 80053ba:	4639      	mov	r1, r7
 80053bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053c0:	3b30      	subs	r3, #48	; 0x30
 80053c2:	2b09      	cmp	r3, #9
 80053c4:	d94d      	bls.n	8005462 <_svfiprintf_r+0x16e>
 80053c6:	b1b8      	cbz	r0, 80053f8 <_svfiprintf_r+0x104>
 80053c8:	e00f      	b.n	80053ea <_svfiprintf_r+0xf6>
 80053ca:	462f      	mov	r7, r5
 80053cc:	e7b8      	b.n	8005340 <_svfiprintf_r+0x4c>
 80053ce:	4a40      	ldr	r2, [pc, #256]	; (80054d0 <_svfiprintf_r+0x1dc>)
 80053d0:	1a80      	subs	r0, r0, r2
 80053d2:	fa0b f000 	lsl.w	r0, fp, r0
 80053d6:	4318      	orrs	r0, r3
 80053d8:	9004      	str	r0, [sp, #16]
 80053da:	463d      	mov	r5, r7
 80053dc:	e7d3      	b.n	8005386 <_svfiprintf_r+0x92>
 80053de:	9a03      	ldr	r2, [sp, #12]
 80053e0:	1d11      	adds	r1, r2, #4
 80053e2:	6812      	ldr	r2, [r2, #0]
 80053e4:	9103      	str	r1, [sp, #12]
 80053e6:	2a00      	cmp	r2, #0
 80053e8:	db01      	blt.n	80053ee <_svfiprintf_r+0xfa>
 80053ea:	9207      	str	r2, [sp, #28]
 80053ec:	e004      	b.n	80053f8 <_svfiprintf_r+0x104>
 80053ee:	4252      	negs	r2, r2
 80053f0:	f043 0302 	orr.w	r3, r3, #2
 80053f4:	9207      	str	r2, [sp, #28]
 80053f6:	9304      	str	r3, [sp, #16]
 80053f8:	783b      	ldrb	r3, [r7, #0]
 80053fa:	2b2e      	cmp	r3, #46	; 0x2e
 80053fc:	d10c      	bne.n	8005418 <_svfiprintf_r+0x124>
 80053fe:	787b      	ldrb	r3, [r7, #1]
 8005400:	2b2a      	cmp	r3, #42	; 0x2a
 8005402:	d133      	bne.n	800546c <_svfiprintf_r+0x178>
 8005404:	9b03      	ldr	r3, [sp, #12]
 8005406:	1d1a      	adds	r2, r3, #4
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	9203      	str	r2, [sp, #12]
 800540c:	2b00      	cmp	r3, #0
 800540e:	bfb8      	it	lt
 8005410:	f04f 33ff 	movlt.w	r3, #4294967295
 8005414:	3702      	adds	r7, #2
 8005416:	9305      	str	r3, [sp, #20]
 8005418:	4d2e      	ldr	r5, [pc, #184]	; (80054d4 <_svfiprintf_r+0x1e0>)
 800541a:	7839      	ldrb	r1, [r7, #0]
 800541c:	2203      	movs	r2, #3
 800541e:	4628      	mov	r0, r5
 8005420:	f7fa fef6 	bl	8000210 <memchr>
 8005424:	b138      	cbz	r0, 8005436 <_svfiprintf_r+0x142>
 8005426:	2340      	movs	r3, #64	; 0x40
 8005428:	1b40      	subs	r0, r0, r5
 800542a:	fa03 f000 	lsl.w	r0, r3, r0
 800542e:	9b04      	ldr	r3, [sp, #16]
 8005430:	4303      	orrs	r3, r0
 8005432:	3701      	adds	r7, #1
 8005434:	9304      	str	r3, [sp, #16]
 8005436:	7839      	ldrb	r1, [r7, #0]
 8005438:	4827      	ldr	r0, [pc, #156]	; (80054d8 <_svfiprintf_r+0x1e4>)
 800543a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800543e:	2206      	movs	r2, #6
 8005440:	1c7e      	adds	r6, r7, #1
 8005442:	f7fa fee5 	bl	8000210 <memchr>
 8005446:	2800      	cmp	r0, #0
 8005448:	d038      	beq.n	80054bc <_svfiprintf_r+0x1c8>
 800544a:	4b24      	ldr	r3, [pc, #144]	; (80054dc <_svfiprintf_r+0x1e8>)
 800544c:	bb13      	cbnz	r3, 8005494 <_svfiprintf_r+0x1a0>
 800544e:	9b03      	ldr	r3, [sp, #12]
 8005450:	3307      	adds	r3, #7
 8005452:	f023 0307 	bic.w	r3, r3, #7
 8005456:	3308      	adds	r3, #8
 8005458:	9303      	str	r3, [sp, #12]
 800545a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800545c:	444b      	add	r3, r9
 800545e:	9309      	str	r3, [sp, #36]	; 0x24
 8005460:	e76d      	b.n	800533e <_svfiprintf_r+0x4a>
 8005462:	fb05 3202 	mla	r2, r5, r2, r3
 8005466:	2001      	movs	r0, #1
 8005468:	460f      	mov	r7, r1
 800546a:	e7a6      	b.n	80053ba <_svfiprintf_r+0xc6>
 800546c:	2300      	movs	r3, #0
 800546e:	3701      	adds	r7, #1
 8005470:	9305      	str	r3, [sp, #20]
 8005472:	4619      	mov	r1, r3
 8005474:	250a      	movs	r5, #10
 8005476:	4638      	mov	r0, r7
 8005478:	f810 2b01 	ldrb.w	r2, [r0], #1
 800547c:	3a30      	subs	r2, #48	; 0x30
 800547e:	2a09      	cmp	r2, #9
 8005480:	d903      	bls.n	800548a <_svfiprintf_r+0x196>
 8005482:	2b00      	cmp	r3, #0
 8005484:	d0c8      	beq.n	8005418 <_svfiprintf_r+0x124>
 8005486:	9105      	str	r1, [sp, #20]
 8005488:	e7c6      	b.n	8005418 <_svfiprintf_r+0x124>
 800548a:	fb05 2101 	mla	r1, r5, r1, r2
 800548e:	2301      	movs	r3, #1
 8005490:	4607      	mov	r7, r0
 8005492:	e7f0      	b.n	8005476 <_svfiprintf_r+0x182>
 8005494:	ab03      	add	r3, sp, #12
 8005496:	9300      	str	r3, [sp, #0]
 8005498:	4622      	mov	r2, r4
 800549a:	4b11      	ldr	r3, [pc, #68]	; (80054e0 <_svfiprintf_r+0x1ec>)
 800549c:	a904      	add	r1, sp, #16
 800549e:	4640      	mov	r0, r8
 80054a0:	f3af 8000 	nop.w
 80054a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80054a8:	4681      	mov	r9, r0
 80054aa:	d1d6      	bne.n	800545a <_svfiprintf_r+0x166>
 80054ac:	89a3      	ldrh	r3, [r4, #12]
 80054ae:	065b      	lsls	r3, r3, #25
 80054b0:	f53f af35 	bmi.w	800531e <_svfiprintf_r+0x2a>
 80054b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054b6:	b01d      	add	sp, #116	; 0x74
 80054b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054bc:	ab03      	add	r3, sp, #12
 80054be:	9300      	str	r3, [sp, #0]
 80054c0:	4622      	mov	r2, r4
 80054c2:	4b07      	ldr	r3, [pc, #28]	; (80054e0 <_svfiprintf_r+0x1ec>)
 80054c4:	a904      	add	r1, sp, #16
 80054c6:	4640      	mov	r0, r8
 80054c8:	f000 f882 	bl	80055d0 <_printf_i>
 80054cc:	e7ea      	b.n	80054a4 <_svfiprintf_r+0x1b0>
 80054ce:	bf00      	nop
 80054d0:	08005a64 	.word	0x08005a64
 80054d4:	08005a6a 	.word	0x08005a6a
 80054d8:	08005a6e 	.word	0x08005a6e
 80054dc:	00000000 	.word	0x00000000
 80054e0:	08005241 	.word	0x08005241

080054e4 <_printf_common>:
 80054e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054e8:	4691      	mov	r9, r2
 80054ea:	461f      	mov	r7, r3
 80054ec:	688a      	ldr	r2, [r1, #8]
 80054ee:	690b      	ldr	r3, [r1, #16]
 80054f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054f4:	4293      	cmp	r3, r2
 80054f6:	bfb8      	it	lt
 80054f8:	4613      	movlt	r3, r2
 80054fa:	f8c9 3000 	str.w	r3, [r9]
 80054fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005502:	4606      	mov	r6, r0
 8005504:	460c      	mov	r4, r1
 8005506:	b112      	cbz	r2, 800550e <_printf_common+0x2a>
 8005508:	3301      	adds	r3, #1
 800550a:	f8c9 3000 	str.w	r3, [r9]
 800550e:	6823      	ldr	r3, [r4, #0]
 8005510:	0699      	lsls	r1, r3, #26
 8005512:	bf42      	ittt	mi
 8005514:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005518:	3302      	addmi	r3, #2
 800551a:	f8c9 3000 	strmi.w	r3, [r9]
 800551e:	6825      	ldr	r5, [r4, #0]
 8005520:	f015 0506 	ands.w	r5, r5, #6
 8005524:	d107      	bne.n	8005536 <_printf_common+0x52>
 8005526:	f104 0a19 	add.w	sl, r4, #25
 800552a:	68e3      	ldr	r3, [r4, #12]
 800552c:	f8d9 2000 	ldr.w	r2, [r9]
 8005530:	1a9b      	subs	r3, r3, r2
 8005532:	42ab      	cmp	r3, r5
 8005534:	dc28      	bgt.n	8005588 <_printf_common+0xa4>
 8005536:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800553a:	6822      	ldr	r2, [r4, #0]
 800553c:	3300      	adds	r3, #0
 800553e:	bf18      	it	ne
 8005540:	2301      	movne	r3, #1
 8005542:	0692      	lsls	r2, r2, #26
 8005544:	d42d      	bmi.n	80055a2 <_printf_common+0xbe>
 8005546:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800554a:	4639      	mov	r1, r7
 800554c:	4630      	mov	r0, r6
 800554e:	47c0      	blx	r8
 8005550:	3001      	adds	r0, #1
 8005552:	d020      	beq.n	8005596 <_printf_common+0xb2>
 8005554:	6823      	ldr	r3, [r4, #0]
 8005556:	68e5      	ldr	r5, [r4, #12]
 8005558:	f8d9 2000 	ldr.w	r2, [r9]
 800555c:	f003 0306 	and.w	r3, r3, #6
 8005560:	2b04      	cmp	r3, #4
 8005562:	bf08      	it	eq
 8005564:	1aad      	subeq	r5, r5, r2
 8005566:	68a3      	ldr	r3, [r4, #8]
 8005568:	6922      	ldr	r2, [r4, #16]
 800556a:	bf0c      	ite	eq
 800556c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005570:	2500      	movne	r5, #0
 8005572:	4293      	cmp	r3, r2
 8005574:	bfc4      	itt	gt
 8005576:	1a9b      	subgt	r3, r3, r2
 8005578:	18ed      	addgt	r5, r5, r3
 800557a:	f04f 0900 	mov.w	r9, #0
 800557e:	341a      	adds	r4, #26
 8005580:	454d      	cmp	r5, r9
 8005582:	d11a      	bne.n	80055ba <_printf_common+0xd6>
 8005584:	2000      	movs	r0, #0
 8005586:	e008      	b.n	800559a <_printf_common+0xb6>
 8005588:	2301      	movs	r3, #1
 800558a:	4652      	mov	r2, sl
 800558c:	4639      	mov	r1, r7
 800558e:	4630      	mov	r0, r6
 8005590:	47c0      	blx	r8
 8005592:	3001      	adds	r0, #1
 8005594:	d103      	bne.n	800559e <_printf_common+0xba>
 8005596:	f04f 30ff 	mov.w	r0, #4294967295
 800559a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800559e:	3501      	adds	r5, #1
 80055a0:	e7c3      	b.n	800552a <_printf_common+0x46>
 80055a2:	18e1      	adds	r1, r4, r3
 80055a4:	1c5a      	adds	r2, r3, #1
 80055a6:	2030      	movs	r0, #48	; 0x30
 80055a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055ac:	4422      	add	r2, r4
 80055ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055b6:	3302      	adds	r3, #2
 80055b8:	e7c5      	b.n	8005546 <_printf_common+0x62>
 80055ba:	2301      	movs	r3, #1
 80055bc:	4622      	mov	r2, r4
 80055be:	4639      	mov	r1, r7
 80055c0:	4630      	mov	r0, r6
 80055c2:	47c0      	blx	r8
 80055c4:	3001      	adds	r0, #1
 80055c6:	d0e6      	beq.n	8005596 <_printf_common+0xb2>
 80055c8:	f109 0901 	add.w	r9, r9, #1
 80055cc:	e7d8      	b.n	8005580 <_printf_common+0x9c>
	...

080055d0 <_printf_i>:
 80055d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80055d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80055d8:	460c      	mov	r4, r1
 80055da:	7e09      	ldrb	r1, [r1, #24]
 80055dc:	b085      	sub	sp, #20
 80055de:	296e      	cmp	r1, #110	; 0x6e
 80055e0:	4617      	mov	r7, r2
 80055e2:	4606      	mov	r6, r0
 80055e4:	4698      	mov	r8, r3
 80055e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80055e8:	f000 80b3 	beq.w	8005752 <_printf_i+0x182>
 80055ec:	d822      	bhi.n	8005634 <_printf_i+0x64>
 80055ee:	2963      	cmp	r1, #99	; 0x63
 80055f0:	d036      	beq.n	8005660 <_printf_i+0x90>
 80055f2:	d80a      	bhi.n	800560a <_printf_i+0x3a>
 80055f4:	2900      	cmp	r1, #0
 80055f6:	f000 80b9 	beq.w	800576c <_printf_i+0x19c>
 80055fa:	2958      	cmp	r1, #88	; 0x58
 80055fc:	f000 8083 	beq.w	8005706 <_printf_i+0x136>
 8005600:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005604:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005608:	e032      	b.n	8005670 <_printf_i+0xa0>
 800560a:	2964      	cmp	r1, #100	; 0x64
 800560c:	d001      	beq.n	8005612 <_printf_i+0x42>
 800560e:	2969      	cmp	r1, #105	; 0x69
 8005610:	d1f6      	bne.n	8005600 <_printf_i+0x30>
 8005612:	6820      	ldr	r0, [r4, #0]
 8005614:	6813      	ldr	r3, [r2, #0]
 8005616:	0605      	lsls	r5, r0, #24
 8005618:	f103 0104 	add.w	r1, r3, #4
 800561c:	d52a      	bpl.n	8005674 <_printf_i+0xa4>
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6011      	str	r1, [r2, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	da03      	bge.n	800562e <_printf_i+0x5e>
 8005626:	222d      	movs	r2, #45	; 0x2d
 8005628:	425b      	negs	r3, r3
 800562a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800562e:	486f      	ldr	r0, [pc, #444]	; (80057ec <_printf_i+0x21c>)
 8005630:	220a      	movs	r2, #10
 8005632:	e039      	b.n	80056a8 <_printf_i+0xd8>
 8005634:	2973      	cmp	r1, #115	; 0x73
 8005636:	f000 809d 	beq.w	8005774 <_printf_i+0x1a4>
 800563a:	d808      	bhi.n	800564e <_printf_i+0x7e>
 800563c:	296f      	cmp	r1, #111	; 0x6f
 800563e:	d020      	beq.n	8005682 <_printf_i+0xb2>
 8005640:	2970      	cmp	r1, #112	; 0x70
 8005642:	d1dd      	bne.n	8005600 <_printf_i+0x30>
 8005644:	6823      	ldr	r3, [r4, #0]
 8005646:	f043 0320 	orr.w	r3, r3, #32
 800564a:	6023      	str	r3, [r4, #0]
 800564c:	e003      	b.n	8005656 <_printf_i+0x86>
 800564e:	2975      	cmp	r1, #117	; 0x75
 8005650:	d017      	beq.n	8005682 <_printf_i+0xb2>
 8005652:	2978      	cmp	r1, #120	; 0x78
 8005654:	d1d4      	bne.n	8005600 <_printf_i+0x30>
 8005656:	2378      	movs	r3, #120	; 0x78
 8005658:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800565c:	4864      	ldr	r0, [pc, #400]	; (80057f0 <_printf_i+0x220>)
 800565e:	e055      	b.n	800570c <_printf_i+0x13c>
 8005660:	6813      	ldr	r3, [r2, #0]
 8005662:	1d19      	adds	r1, r3, #4
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	6011      	str	r1, [r2, #0]
 8005668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800566c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005670:	2301      	movs	r3, #1
 8005672:	e08c      	b.n	800578e <_printf_i+0x1be>
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	6011      	str	r1, [r2, #0]
 8005678:	f010 0f40 	tst.w	r0, #64	; 0x40
 800567c:	bf18      	it	ne
 800567e:	b21b      	sxthne	r3, r3
 8005680:	e7cf      	b.n	8005622 <_printf_i+0x52>
 8005682:	6813      	ldr	r3, [r2, #0]
 8005684:	6825      	ldr	r5, [r4, #0]
 8005686:	1d18      	adds	r0, r3, #4
 8005688:	6010      	str	r0, [r2, #0]
 800568a:	0628      	lsls	r0, r5, #24
 800568c:	d501      	bpl.n	8005692 <_printf_i+0xc2>
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	e002      	b.n	8005698 <_printf_i+0xc8>
 8005692:	0668      	lsls	r0, r5, #25
 8005694:	d5fb      	bpl.n	800568e <_printf_i+0xbe>
 8005696:	881b      	ldrh	r3, [r3, #0]
 8005698:	4854      	ldr	r0, [pc, #336]	; (80057ec <_printf_i+0x21c>)
 800569a:	296f      	cmp	r1, #111	; 0x6f
 800569c:	bf14      	ite	ne
 800569e:	220a      	movne	r2, #10
 80056a0:	2208      	moveq	r2, #8
 80056a2:	2100      	movs	r1, #0
 80056a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80056a8:	6865      	ldr	r5, [r4, #4]
 80056aa:	60a5      	str	r5, [r4, #8]
 80056ac:	2d00      	cmp	r5, #0
 80056ae:	f2c0 8095 	blt.w	80057dc <_printf_i+0x20c>
 80056b2:	6821      	ldr	r1, [r4, #0]
 80056b4:	f021 0104 	bic.w	r1, r1, #4
 80056b8:	6021      	str	r1, [r4, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d13d      	bne.n	800573a <_printf_i+0x16a>
 80056be:	2d00      	cmp	r5, #0
 80056c0:	f040 808e 	bne.w	80057e0 <_printf_i+0x210>
 80056c4:	4665      	mov	r5, ip
 80056c6:	2a08      	cmp	r2, #8
 80056c8:	d10b      	bne.n	80056e2 <_printf_i+0x112>
 80056ca:	6823      	ldr	r3, [r4, #0]
 80056cc:	07db      	lsls	r3, r3, #31
 80056ce:	d508      	bpl.n	80056e2 <_printf_i+0x112>
 80056d0:	6923      	ldr	r3, [r4, #16]
 80056d2:	6862      	ldr	r2, [r4, #4]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	bfde      	ittt	le
 80056d8:	2330      	movle	r3, #48	; 0x30
 80056da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80056de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80056e2:	ebac 0305 	sub.w	r3, ip, r5
 80056e6:	6123      	str	r3, [r4, #16]
 80056e8:	f8cd 8000 	str.w	r8, [sp]
 80056ec:	463b      	mov	r3, r7
 80056ee:	aa03      	add	r2, sp, #12
 80056f0:	4621      	mov	r1, r4
 80056f2:	4630      	mov	r0, r6
 80056f4:	f7ff fef6 	bl	80054e4 <_printf_common>
 80056f8:	3001      	adds	r0, #1
 80056fa:	d14d      	bne.n	8005798 <_printf_i+0x1c8>
 80056fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005700:	b005      	add	sp, #20
 8005702:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005706:	4839      	ldr	r0, [pc, #228]	; (80057ec <_printf_i+0x21c>)
 8005708:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800570c:	6813      	ldr	r3, [r2, #0]
 800570e:	6821      	ldr	r1, [r4, #0]
 8005710:	1d1d      	adds	r5, r3, #4
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	6015      	str	r5, [r2, #0]
 8005716:	060a      	lsls	r2, r1, #24
 8005718:	d50b      	bpl.n	8005732 <_printf_i+0x162>
 800571a:	07ca      	lsls	r2, r1, #31
 800571c:	bf44      	itt	mi
 800571e:	f041 0120 	orrmi.w	r1, r1, #32
 8005722:	6021      	strmi	r1, [r4, #0]
 8005724:	b91b      	cbnz	r3, 800572e <_printf_i+0x15e>
 8005726:	6822      	ldr	r2, [r4, #0]
 8005728:	f022 0220 	bic.w	r2, r2, #32
 800572c:	6022      	str	r2, [r4, #0]
 800572e:	2210      	movs	r2, #16
 8005730:	e7b7      	b.n	80056a2 <_printf_i+0xd2>
 8005732:	064d      	lsls	r5, r1, #25
 8005734:	bf48      	it	mi
 8005736:	b29b      	uxthmi	r3, r3
 8005738:	e7ef      	b.n	800571a <_printf_i+0x14a>
 800573a:	4665      	mov	r5, ip
 800573c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005740:	fb02 3311 	mls	r3, r2, r1, r3
 8005744:	5cc3      	ldrb	r3, [r0, r3]
 8005746:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800574a:	460b      	mov	r3, r1
 800574c:	2900      	cmp	r1, #0
 800574e:	d1f5      	bne.n	800573c <_printf_i+0x16c>
 8005750:	e7b9      	b.n	80056c6 <_printf_i+0xf6>
 8005752:	6813      	ldr	r3, [r2, #0]
 8005754:	6825      	ldr	r5, [r4, #0]
 8005756:	6961      	ldr	r1, [r4, #20]
 8005758:	1d18      	adds	r0, r3, #4
 800575a:	6010      	str	r0, [r2, #0]
 800575c:	0628      	lsls	r0, r5, #24
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	d501      	bpl.n	8005766 <_printf_i+0x196>
 8005762:	6019      	str	r1, [r3, #0]
 8005764:	e002      	b.n	800576c <_printf_i+0x19c>
 8005766:	066a      	lsls	r2, r5, #25
 8005768:	d5fb      	bpl.n	8005762 <_printf_i+0x192>
 800576a:	8019      	strh	r1, [r3, #0]
 800576c:	2300      	movs	r3, #0
 800576e:	6123      	str	r3, [r4, #16]
 8005770:	4665      	mov	r5, ip
 8005772:	e7b9      	b.n	80056e8 <_printf_i+0x118>
 8005774:	6813      	ldr	r3, [r2, #0]
 8005776:	1d19      	adds	r1, r3, #4
 8005778:	6011      	str	r1, [r2, #0]
 800577a:	681d      	ldr	r5, [r3, #0]
 800577c:	6862      	ldr	r2, [r4, #4]
 800577e:	2100      	movs	r1, #0
 8005780:	4628      	mov	r0, r5
 8005782:	f7fa fd45 	bl	8000210 <memchr>
 8005786:	b108      	cbz	r0, 800578c <_printf_i+0x1bc>
 8005788:	1b40      	subs	r0, r0, r5
 800578a:	6060      	str	r0, [r4, #4]
 800578c:	6863      	ldr	r3, [r4, #4]
 800578e:	6123      	str	r3, [r4, #16]
 8005790:	2300      	movs	r3, #0
 8005792:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005796:	e7a7      	b.n	80056e8 <_printf_i+0x118>
 8005798:	6923      	ldr	r3, [r4, #16]
 800579a:	462a      	mov	r2, r5
 800579c:	4639      	mov	r1, r7
 800579e:	4630      	mov	r0, r6
 80057a0:	47c0      	blx	r8
 80057a2:	3001      	adds	r0, #1
 80057a4:	d0aa      	beq.n	80056fc <_printf_i+0x12c>
 80057a6:	6823      	ldr	r3, [r4, #0]
 80057a8:	079b      	lsls	r3, r3, #30
 80057aa:	d413      	bmi.n	80057d4 <_printf_i+0x204>
 80057ac:	68e0      	ldr	r0, [r4, #12]
 80057ae:	9b03      	ldr	r3, [sp, #12]
 80057b0:	4298      	cmp	r0, r3
 80057b2:	bfb8      	it	lt
 80057b4:	4618      	movlt	r0, r3
 80057b6:	e7a3      	b.n	8005700 <_printf_i+0x130>
 80057b8:	2301      	movs	r3, #1
 80057ba:	464a      	mov	r2, r9
 80057bc:	4639      	mov	r1, r7
 80057be:	4630      	mov	r0, r6
 80057c0:	47c0      	blx	r8
 80057c2:	3001      	adds	r0, #1
 80057c4:	d09a      	beq.n	80056fc <_printf_i+0x12c>
 80057c6:	3501      	adds	r5, #1
 80057c8:	68e3      	ldr	r3, [r4, #12]
 80057ca:	9a03      	ldr	r2, [sp, #12]
 80057cc:	1a9b      	subs	r3, r3, r2
 80057ce:	42ab      	cmp	r3, r5
 80057d0:	dcf2      	bgt.n	80057b8 <_printf_i+0x1e8>
 80057d2:	e7eb      	b.n	80057ac <_printf_i+0x1dc>
 80057d4:	2500      	movs	r5, #0
 80057d6:	f104 0919 	add.w	r9, r4, #25
 80057da:	e7f5      	b.n	80057c8 <_printf_i+0x1f8>
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1ac      	bne.n	800573a <_printf_i+0x16a>
 80057e0:	7803      	ldrb	r3, [r0, #0]
 80057e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057ea:	e76c      	b.n	80056c6 <_printf_i+0xf6>
 80057ec:	08005a75 	.word	0x08005a75
 80057f0:	08005a86 	.word	0x08005a86

080057f4 <memcpy>:
 80057f4:	b510      	push	{r4, lr}
 80057f6:	1e43      	subs	r3, r0, #1
 80057f8:	440a      	add	r2, r1
 80057fa:	4291      	cmp	r1, r2
 80057fc:	d100      	bne.n	8005800 <memcpy+0xc>
 80057fe:	bd10      	pop	{r4, pc}
 8005800:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005804:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005808:	e7f7      	b.n	80057fa <memcpy+0x6>

0800580a <memmove>:
 800580a:	4288      	cmp	r0, r1
 800580c:	b510      	push	{r4, lr}
 800580e:	eb01 0302 	add.w	r3, r1, r2
 8005812:	d807      	bhi.n	8005824 <memmove+0x1a>
 8005814:	1e42      	subs	r2, r0, #1
 8005816:	4299      	cmp	r1, r3
 8005818:	d00a      	beq.n	8005830 <memmove+0x26>
 800581a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800581e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005822:	e7f8      	b.n	8005816 <memmove+0xc>
 8005824:	4283      	cmp	r3, r0
 8005826:	d9f5      	bls.n	8005814 <memmove+0xa>
 8005828:	1881      	adds	r1, r0, r2
 800582a:	1ad2      	subs	r2, r2, r3
 800582c:	42d3      	cmn	r3, r2
 800582e:	d100      	bne.n	8005832 <memmove+0x28>
 8005830:	bd10      	pop	{r4, pc}
 8005832:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005836:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800583a:	e7f7      	b.n	800582c <memmove+0x22>

0800583c <_free_r>:
 800583c:	b538      	push	{r3, r4, r5, lr}
 800583e:	4605      	mov	r5, r0
 8005840:	2900      	cmp	r1, #0
 8005842:	d045      	beq.n	80058d0 <_free_r+0x94>
 8005844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005848:	1f0c      	subs	r4, r1, #4
 800584a:	2b00      	cmp	r3, #0
 800584c:	bfb8      	it	lt
 800584e:	18e4      	addlt	r4, r4, r3
 8005850:	f000 f8d2 	bl	80059f8 <__malloc_lock>
 8005854:	4a1f      	ldr	r2, [pc, #124]	; (80058d4 <_free_r+0x98>)
 8005856:	6813      	ldr	r3, [r2, #0]
 8005858:	4610      	mov	r0, r2
 800585a:	b933      	cbnz	r3, 800586a <_free_r+0x2e>
 800585c:	6063      	str	r3, [r4, #4]
 800585e:	6014      	str	r4, [r2, #0]
 8005860:	4628      	mov	r0, r5
 8005862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005866:	f000 b8c8 	b.w	80059fa <__malloc_unlock>
 800586a:	42a3      	cmp	r3, r4
 800586c:	d90c      	bls.n	8005888 <_free_r+0x4c>
 800586e:	6821      	ldr	r1, [r4, #0]
 8005870:	1862      	adds	r2, r4, r1
 8005872:	4293      	cmp	r3, r2
 8005874:	bf04      	itt	eq
 8005876:	681a      	ldreq	r2, [r3, #0]
 8005878:	685b      	ldreq	r3, [r3, #4]
 800587a:	6063      	str	r3, [r4, #4]
 800587c:	bf04      	itt	eq
 800587e:	1852      	addeq	r2, r2, r1
 8005880:	6022      	streq	r2, [r4, #0]
 8005882:	6004      	str	r4, [r0, #0]
 8005884:	e7ec      	b.n	8005860 <_free_r+0x24>
 8005886:	4613      	mov	r3, r2
 8005888:	685a      	ldr	r2, [r3, #4]
 800588a:	b10a      	cbz	r2, 8005890 <_free_r+0x54>
 800588c:	42a2      	cmp	r2, r4
 800588e:	d9fa      	bls.n	8005886 <_free_r+0x4a>
 8005890:	6819      	ldr	r1, [r3, #0]
 8005892:	1858      	adds	r0, r3, r1
 8005894:	42a0      	cmp	r0, r4
 8005896:	d10b      	bne.n	80058b0 <_free_r+0x74>
 8005898:	6820      	ldr	r0, [r4, #0]
 800589a:	4401      	add	r1, r0
 800589c:	1858      	adds	r0, r3, r1
 800589e:	4282      	cmp	r2, r0
 80058a0:	6019      	str	r1, [r3, #0]
 80058a2:	d1dd      	bne.n	8005860 <_free_r+0x24>
 80058a4:	6810      	ldr	r0, [r2, #0]
 80058a6:	6852      	ldr	r2, [r2, #4]
 80058a8:	605a      	str	r2, [r3, #4]
 80058aa:	4401      	add	r1, r0
 80058ac:	6019      	str	r1, [r3, #0]
 80058ae:	e7d7      	b.n	8005860 <_free_r+0x24>
 80058b0:	d902      	bls.n	80058b8 <_free_r+0x7c>
 80058b2:	230c      	movs	r3, #12
 80058b4:	602b      	str	r3, [r5, #0]
 80058b6:	e7d3      	b.n	8005860 <_free_r+0x24>
 80058b8:	6820      	ldr	r0, [r4, #0]
 80058ba:	1821      	adds	r1, r4, r0
 80058bc:	428a      	cmp	r2, r1
 80058be:	bf04      	itt	eq
 80058c0:	6811      	ldreq	r1, [r2, #0]
 80058c2:	6852      	ldreq	r2, [r2, #4]
 80058c4:	6062      	str	r2, [r4, #4]
 80058c6:	bf04      	itt	eq
 80058c8:	1809      	addeq	r1, r1, r0
 80058ca:	6021      	streq	r1, [r4, #0]
 80058cc:	605c      	str	r4, [r3, #4]
 80058ce:	e7c7      	b.n	8005860 <_free_r+0x24>
 80058d0:	bd38      	pop	{r3, r4, r5, pc}
 80058d2:	bf00      	nop
 80058d4:	200000a0 	.word	0x200000a0

080058d8 <_malloc_r>:
 80058d8:	b570      	push	{r4, r5, r6, lr}
 80058da:	1ccd      	adds	r5, r1, #3
 80058dc:	f025 0503 	bic.w	r5, r5, #3
 80058e0:	3508      	adds	r5, #8
 80058e2:	2d0c      	cmp	r5, #12
 80058e4:	bf38      	it	cc
 80058e6:	250c      	movcc	r5, #12
 80058e8:	2d00      	cmp	r5, #0
 80058ea:	4606      	mov	r6, r0
 80058ec:	db01      	blt.n	80058f2 <_malloc_r+0x1a>
 80058ee:	42a9      	cmp	r1, r5
 80058f0:	d903      	bls.n	80058fa <_malloc_r+0x22>
 80058f2:	230c      	movs	r3, #12
 80058f4:	6033      	str	r3, [r6, #0]
 80058f6:	2000      	movs	r0, #0
 80058f8:	bd70      	pop	{r4, r5, r6, pc}
 80058fa:	f000 f87d 	bl	80059f8 <__malloc_lock>
 80058fe:	4a21      	ldr	r2, [pc, #132]	; (8005984 <_malloc_r+0xac>)
 8005900:	6814      	ldr	r4, [r2, #0]
 8005902:	4621      	mov	r1, r4
 8005904:	b991      	cbnz	r1, 800592c <_malloc_r+0x54>
 8005906:	4c20      	ldr	r4, [pc, #128]	; (8005988 <_malloc_r+0xb0>)
 8005908:	6823      	ldr	r3, [r4, #0]
 800590a:	b91b      	cbnz	r3, 8005914 <_malloc_r+0x3c>
 800590c:	4630      	mov	r0, r6
 800590e:	f000 f863 	bl	80059d8 <_sbrk_r>
 8005912:	6020      	str	r0, [r4, #0]
 8005914:	4629      	mov	r1, r5
 8005916:	4630      	mov	r0, r6
 8005918:	f000 f85e 	bl	80059d8 <_sbrk_r>
 800591c:	1c43      	adds	r3, r0, #1
 800591e:	d124      	bne.n	800596a <_malloc_r+0x92>
 8005920:	230c      	movs	r3, #12
 8005922:	6033      	str	r3, [r6, #0]
 8005924:	4630      	mov	r0, r6
 8005926:	f000 f868 	bl	80059fa <__malloc_unlock>
 800592a:	e7e4      	b.n	80058f6 <_malloc_r+0x1e>
 800592c:	680b      	ldr	r3, [r1, #0]
 800592e:	1b5b      	subs	r3, r3, r5
 8005930:	d418      	bmi.n	8005964 <_malloc_r+0x8c>
 8005932:	2b0b      	cmp	r3, #11
 8005934:	d90f      	bls.n	8005956 <_malloc_r+0x7e>
 8005936:	600b      	str	r3, [r1, #0]
 8005938:	50cd      	str	r5, [r1, r3]
 800593a:	18cc      	adds	r4, r1, r3
 800593c:	4630      	mov	r0, r6
 800593e:	f000 f85c 	bl	80059fa <__malloc_unlock>
 8005942:	f104 000b 	add.w	r0, r4, #11
 8005946:	1d23      	adds	r3, r4, #4
 8005948:	f020 0007 	bic.w	r0, r0, #7
 800594c:	1ac3      	subs	r3, r0, r3
 800594e:	d0d3      	beq.n	80058f8 <_malloc_r+0x20>
 8005950:	425a      	negs	r2, r3
 8005952:	50e2      	str	r2, [r4, r3]
 8005954:	e7d0      	b.n	80058f8 <_malloc_r+0x20>
 8005956:	428c      	cmp	r4, r1
 8005958:	684b      	ldr	r3, [r1, #4]
 800595a:	bf16      	itet	ne
 800595c:	6063      	strne	r3, [r4, #4]
 800595e:	6013      	streq	r3, [r2, #0]
 8005960:	460c      	movne	r4, r1
 8005962:	e7eb      	b.n	800593c <_malloc_r+0x64>
 8005964:	460c      	mov	r4, r1
 8005966:	6849      	ldr	r1, [r1, #4]
 8005968:	e7cc      	b.n	8005904 <_malloc_r+0x2c>
 800596a:	1cc4      	adds	r4, r0, #3
 800596c:	f024 0403 	bic.w	r4, r4, #3
 8005970:	42a0      	cmp	r0, r4
 8005972:	d005      	beq.n	8005980 <_malloc_r+0xa8>
 8005974:	1a21      	subs	r1, r4, r0
 8005976:	4630      	mov	r0, r6
 8005978:	f000 f82e 	bl	80059d8 <_sbrk_r>
 800597c:	3001      	adds	r0, #1
 800597e:	d0cf      	beq.n	8005920 <_malloc_r+0x48>
 8005980:	6025      	str	r5, [r4, #0]
 8005982:	e7db      	b.n	800593c <_malloc_r+0x64>
 8005984:	200000a0 	.word	0x200000a0
 8005988:	200000a4 	.word	0x200000a4

0800598c <_realloc_r>:
 800598c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598e:	4607      	mov	r7, r0
 8005990:	4614      	mov	r4, r2
 8005992:	460e      	mov	r6, r1
 8005994:	b921      	cbnz	r1, 80059a0 <_realloc_r+0x14>
 8005996:	4611      	mov	r1, r2
 8005998:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800599c:	f7ff bf9c 	b.w	80058d8 <_malloc_r>
 80059a0:	b922      	cbnz	r2, 80059ac <_realloc_r+0x20>
 80059a2:	f7ff ff4b 	bl	800583c <_free_r>
 80059a6:	4625      	mov	r5, r4
 80059a8:	4628      	mov	r0, r5
 80059aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059ac:	f000 f826 	bl	80059fc <_malloc_usable_size_r>
 80059b0:	42a0      	cmp	r0, r4
 80059b2:	d20f      	bcs.n	80059d4 <_realloc_r+0x48>
 80059b4:	4621      	mov	r1, r4
 80059b6:	4638      	mov	r0, r7
 80059b8:	f7ff ff8e 	bl	80058d8 <_malloc_r>
 80059bc:	4605      	mov	r5, r0
 80059be:	2800      	cmp	r0, #0
 80059c0:	d0f2      	beq.n	80059a8 <_realloc_r+0x1c>
 80059c2:	4631      	mov	r1, r6
 80059c4:	4622      	mov	r2, r4
 80059c6:	f7ff ff15 	bl	80057f4 <memcpy>
 80059ca:	4631      	mov	r1, r6
 80059cc:	4638      	mov	r0, r7
 80059ce:	f7ff ff35 	bl	800583c <_free_r>
 80059d2:	e7e9      	b.n	80059a8 <_realloc_r+0x1c>
 80059d4:	4635      	mov	r5, r6
 80059d6:	e7e7      	b.n	80059a8 <_realloc_r+0x1c>

080059d8 <_sbrk_r>:
 80059d8:	b538      	push	{r3, r4, r5, lr}
 80059da:	4c06      	ldr	r4, [pc, #24]	; (80059f4 <_sbrk_r+0x1c>)
 80059dc:	2300      	movs	r3, #0
 80059de:	4605      	mov	r5, r0
 80059e0:	4608      	mov	r0, r1
 80059e2:	6023      	str	r3, [r4, #0]
 80059e4:	f7fb fb5a 	bl	800109c <_sbrk>
 80059e8:	1c43      	adds	r3, r0, #1
 80059ea:	d102      	bne.n	80059f2 <_sbrk_r+0x1a>
 80059ec:	6823      	ldr	r3, [r4, #0]
 80059ee:	b103      	cbz	r3, 80059f2 <_sbrk_r+0x1a>
 80059f0:	602b      	str	r3, [r5, #0]
 80059f2:	bd38      	pop	{r3, r4, r5, pc}
 80059f4:	20006040 	.word	0x20006040

080059f8 <__malloc_lock>:
 80059f8:	4770      	bx	lr

080059fa <__malloc_unlock>:
 80059fa:	4770      	bx	lr

080059fc <_malloc_usable_size_r>:
 80059fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a00:	1f18      	subs	r0, r3, #4
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	bfbc      	itt	lt
 8005a06:	580b      	ldrlt	r3, [r1, r0]
 8005a08:	18c0      	addlt	r0, r0, r3
 8005a0a:	4770      	bx	lr

08005a0c <_init>:
 8005a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a0e:	bf00      	nop
 8005a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a12:	bc08      	pop	{r3}
 8005a14:	469e      	mov	lr, r3
 8005a16:	4770      	bx	lr

08005a18 <_fini>:
 8005a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a1a:	bf00      	nop
 8005a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a1e:	bc08      	pop	{r3}
 8005a20:	469e      	mov	lr, r3
 8005a22:	4770      	bx	lr
