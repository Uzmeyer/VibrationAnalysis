
VibrationAnalysis446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058a8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08005a78  08005a78  00015a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005aec  08005aec  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005aec  08005aec  00015aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005af4  08005af4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005af4  08005af4  00015af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005af8  08005af8  00015af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005afc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005fd0  20000074  08005b70  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006044  08005b70  00026044  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001096f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002651  00000000  00000000  00030a13  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fe0  00000000  00000000  00033068  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ea8  00000000  00000000  00034048  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022de4  00000000  00000000  00034ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000da42  00000000  00000000  00057cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d282b  00000000  00000000  00065716  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00137f41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000451c  00000000  00000000  00137fbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005a60 	.word	0x08005a60

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08005a60 	.word	0x08005a60

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
void MX_DMA_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	4b2f      	ldr	r3, [pc, #188]	; (8000678 <MX_DMA_Init+0xc8>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a2e      	ldr	r2, [pc, #184]	; (8000678 <MX_DMA_Init+0xc8>)
 80005c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b2c      	ldr	r3, [pc, #176]	; (8000678 <MX_DMA_Init+0xc8>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	603b      	str	r3, [r7, #0]
 80005d6:	4b28      	ldr	r3, [pc, #160]	; (8000678 <MX_DMA_Init+0xc8>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a27      	ldr	r2, [pc, #156]	; (8000678 <MX_DMA_Init+0xc8>)
 80005dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b25      	ldr	r3, [pc, #148]	; (8000678 <MX_DMA_Init+0xc8>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 80005ee:	4b23      	ldr	r3, [pc, #140]	; (800067c <MX_DMA_Init+0xcc>)
 80005f0:	4a23      	ldr	r2, [pc, #140]	; (8000680 <MX_DMA_Init+0xd0>)
 80005f2:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 80005f4:	4b21      	ldr	r3, [pc, #132]	; (800067c <MX_DMA_Init+0xcc>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80005fa:	4b20      	ldr	r3, [pc, #128]	; (800067c <MX_DMA_Init+0xcc>)
 80005fc:	2280      	movs	r2, #128	; 0x80
 80005fe:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000600:	4b1e      	ldr	r3, [pc, #120]	; (800067c <MX_DMA_Init+0xcc>)
 8000602:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000606:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000608:	4b1c      	ldr	r3, [pc, #112]	; (800067c <MX_DMA_Init+0xcc>)
 800060a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800060e:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000610:	4b1a      	ldr	r3, [pc, #104]	; (800067c <MX_DMA_Init+0xcc>)
 8000612:	2200      	movs	r2, #0
 8000614:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000616:	4b19      	ldr	r3, [pc, #100]	; (800067c <MX_DMA_Init+0xcc>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 800061c:	4b17      	ldr	r3, [pc, #92]	; (800067c <MX_DMA_Init+0xcc>)
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 8000622:	4b16      	ldr	r3, [pc, #88]	; (800067c <MX_DMA_Init+0xcc>)
 8000624:	2200      	movs	r2, #0
 8000626:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000628:	4b14      	ldr	r3, [pc, #80]	; (800067c <MX_DMA_Init+0xcc>)
 800062a:	2204      	movs	r2, #4
 800062c:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800062e:	4b13      	ldr	r3, [pc, #76]	; (800067c <MX_DMA_Init+0xcc>)
 8000630:	2203      	movs	r2, #3
 8000632:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_DMA_Init+0xcc>)
 8000636:	2200      	movs	r2, #0
 8000638:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <MX_DMA_Init+0xcc>)
 800063c:	2200      	movs	r2, #0
 800063e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000640:	480e      	ldr	r0, [pc, #56]	; (800067c <MX_DMA_Init+0xcc>)
 8000642:	f001 f889 	bl	8001758 <HAL_DMA_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_DMA_Init+0xa0>
  {
    Error_Handler();
 800064c:	f000 fcd4 	bl	8000ff8 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000650:	2200      	movs	r2, #0
 8000652:	2100      	movs	r1, #0
 8000654:	2011      	movs	r0, #17
 8000656:	f001 f848 	bl	80016ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800065a:	2011      	movs	r0, #17
 800065c:	f001 f861 	bl	8001722 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000660:	2200      	movs	r2, #0
 8000662:	2100      	movs	r1, #0
 8000664:	2038      	movs	r0, #56	; 0x38
 8000666:	f001 f840 	bl	80016ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800066a:	2038      	movs	r0, #56	; 0x38
 800066c:	f001 f859 	bl	8001722 <HAL_NVIC_EnableIRQ>

}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40023800 	.word	0x40023800
 800067c:	200000a8 	.word	0x200000a8
 8000680:	40026410 	.word	0x40026410

08000684 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	4b2f      	ldr	r3, [pc, #188]	; (800075c <MX_GPIO_Init+0xd8>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a2e      	ldr	r2, [pc, #184]	; (800075c <MX_GPIO_Init+0xd8>)
 80006a4:	f043 0304 	orr.w	r3, r3, #4
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b2c      	ldr	r3, [pc, #176]	; (800075c <MX_GPIO_Init+0xd8>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0304 	and.w	r3, r3, #4
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	4b28      	ldr	r3, [pc, #160]	; (800075c <MX_GPIO_Init+0xd8>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a27      	ldr	r2, [pc, #156]	; (800075c <MX_GPIO_Init+0xd8>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b25      	ldr	r3, [pc, #148]	; (800075c <MX_GPIO_Init+0xd8>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	4b21      	ldr	r3, [pc, #132]	; (800075c <MX_GPIO_Init+0xd8>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a20      	ldr	r2, [pc, #128]	; (800075c <MX_GPIO_Init+0xd8>)
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b1e      	ldr	r3, [pc, #120]	; (800075c <MX_GPIO_Init+0xd8>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0302 	and.w	r3, r3, #2
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2120      	movs	r1, #32
 80006f2:	481b      	ldr	r0, [pc, #108]	; (8000760 <MX_GPIO_Init+0xdc>)
 80006f4:	f001 fda6 	bl	8002244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2140      	movs	r1, #64	; 0x40
 80006fc:	4819      	ldr	r0, [pc, #100]	; (8000764 <MX_GPIO_Init+0xe0>)
 80006fe:	f001 fda1 	bl	8002244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000702:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000706:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	4619      	mov	r1, r3
 8000716:	4814      	ldr	r0, [pc, #80]	; (8000768 <MX_GPIO_Init+0xe4>)
 8000718:	f001 fc02 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800071c:	2320      	movs	r3, #32
 800071e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000720:	2301      	movs	r3, #1
 8000722:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000728:	2300      	movs	r3, #0
 800072a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	4619      	mov	r1, r3
 8000732:	480b      	ldr	r0, [pc, #44]	; (8000760 <MX_GPIO_Init+0xdc>)
 8000734:	f001 fbf4 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000738:	2340      	movs	r3, #64	; 0x40
 800073a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073c:	2301      	movs	r3, #1
 800073e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000744:	2303      	movs	r3, #3
 8000746:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	4619      	mov	r1, r3
 800074e:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_GPIO_Init+0xe0>)
 8000750:	f001 fbe6 	bl	8001f20 <HAL_GPIO_Init>

}
 8000754:	bf00      	nop
 8000756:	3720      	adds	r7, #32
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40023800 	.word	0x40023800
 8000760:	40020000 	.word	0x40020000
 8000764:	40020400 	.word	0x40020400
 8000768:	40020800 	.word	0x40020800

0800076c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_I2C1_Init+0x50>)
 8000772:	4a13      	ldr	r2, [pc, #76]	; (80007c0 <MX_I2C1_Init+0x54>)
 8000774:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_I2C1_Init+0x50>)
 8000778:	4a12      	ldr	r2, [pc, #72]	; (80007c4 <MX_I2C1_Init+0x58>)
 800077a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_I2C1_Init+0x50>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_I2C1_Init+0x50>)
 8000784:	2200      	movs	r2, #0
 8000786:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_I2C1_Init+0x50>)
 800078a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800078e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <MX_I2C1_Init+0x50>)
 8000792:	2200      	movs	r2, #0
 8000794:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_I2C1_Init+0x50>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800079c:	4b07      	ldr	r3, [pc, #28]	; (80007bc <MX_I2C1_Init+0x50>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_I2C1_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007a8:	4804      	ldr	r0, [pc, #16]	; (80007bc <MX_I2C1_Init+0x50>)
 80007aa:	f001 fd65 	bl	8002278 <HAL_I2C_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007b4:	f000 fc20 	bl	8000ff8 <Error_Handler>
  }

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000108 	.word	0x20000108
 80007c0:	40005400 	.word	0x40005400
 80007c4:	00061a80 	.word	0x00061a80

080007c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	; 0x28
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a19      	ldr	r2, [pc, #100]	; (800084c <HAL_I2C_MspInit+0x84>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d12c      	bne.n	8000844 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
 80007ee:	4b18      	ldr	r3, [pc, #96]	; (8000850 <HAL_I2C_MspInit+0x88>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a17      	ldr	r2, [pc, #92]	; (8000850 <HAL_I2C_MspInit+0x88>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b15      	ldr	r3, [pc, #84]	; (8000850 <HAL_I2C_MspInit+0x88>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000806:	f44f 7340 	mov.w	r3, #768	; 0x300
 800080a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800080c:	2312      	movs	r3, #18
 800080e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000810:	2301      	movs	r3, #1
 8000812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000814:	2303      	movs	r3, #3
 8000816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000818:	2304      	movs	r3, #4
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4619      	mov	r1, r3
 8000822:	480c      	ldr	r0, [pc, #48]	; (8000854 <HAL_I2C_MspInit+0x8c>)
 8000824:	f001 fb7c 	bl	8001f20 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	4b08      	ldr	r3, [pc, #32]	; (8000850 <HAL_I2C_MspInit+0x88>)
 800082e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000830:	4a07      	ldr	r2, [pc, #28]	; (8000850 <HAL_I2C_MspInit+0x88>)
 8000832:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000836:	6413      	str	r3, [r2, #64]	; 0x40
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <HAL_I2C_MspInit+0x88>)
 800083a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000844:	bf00      	nop
 8000846:	3728      	adds	r7, #40	; 0x28
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40005400 	.word	0x40005400
 8000850:	40023800 	.word	0x40023800
 8000854:	40020400 	.word	0x40020400

08000858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000858:	b5b0      	push	{r4, r5, r7, lr}
 800085a:	f5ad 4dbb 	sub.w	sp, sp, #23936	; 0x5d80
 800085e:	b098      	sub	sp, #96	; 0x60
 8000860:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

	uint16_t lsmaddr = LSM6DS3_ADDRESS << 1;
 8000862:	23d4      	movs	r3, #212	; 0xd4
 8000864:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
 8000868:	f102 024a 	add.w	r2, r2, #74	; 0x4a
 800086c:	8013      	strh	r3, [r2, #0]
	uint16_t mpu6050addr = MPU6050_ADDRESS_AD0_LOW << 1;
 800086e:	23d0      	movs	r3, #208	; 0xd0
 8000870:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
 8000874:	f102 0248 	add.w	r2, r2, #72	; 0x48
 8000878:	8013      	strh	r3, [r2, #0]
	int16_t x_val = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
 8000880:	f102 0246 	add.w	r2, r2, #70	; 0x46
 8000884:	8013      	strh	r3, [r2, #0]
	int16_t y_val = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
 800088c:	f102 0244 	add.w	r2, r2, #68	; 0x44
 8000890:	8013      	strh	r3, [r2, #0]
	int16_t z_val = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
 8000898:	f102 0242 	add.w	r2, r2, #66	; 0x42
 800089c:	8013      	strh	r3, [r2, #0]
	uint16_t datasize = sizeof(data);
 800089e:	f645 53c0 	movw	r3, #24000	; 0x5dc0
 80008a2:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
 80008a6:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80008aa:	8013      	strh	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ac:	f000 fdae 	bl	800140c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b0:	f000 fafa 	bl	8000ea8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b4:	f7ff fee6 	bl	8000684 <MX_GPIO_Init>
  MX_DMA_Init();
 80008b8:	f7ff fe7a 	bl	80005b0 <MX_DMA_Init>
  MX_I2C1_Init();
 80008bc:	f7ff ff56 	bl	800076c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80008c0:	f000 fcce 	bl	8001260 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80008c4:	f000 fc60 	bl	8001188 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80008c8:	2201      	movs	r2, #1
 80008ca:	2120      	movs	r1, #32
 80008cc:	48ae      	ldr	r0, [pc, #696]	; (8000b88 <main+0x330>)
 80008ce:	f001 fcb9 	bl	8002244 <HAL_GPIO_WritePin>
  HAL_I2C_Mem_Read(&hi2c1, mpu6050addr, MPU6050_RA_PWR_MGMT_1, 1, &statusbuff, 1, 1000);
 80008d2:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 80008d6:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80008da:	8819      	ldrh	r1, [r3, #0]
 80008dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e0:	9302      	str	r3, [sp, #8]
 80008e2:	2301      	movs	r3, #1
 80008e4:	9301      	str	r3, [sp, #4]
 80008e6:	4ba9      	ldr	r3, [pc, #676]	; (8000b8c <main+0x334>)
 80008e8:	9300      	str	r3, [sp, #0]
 80008ea:	2301      	movs	r3, #1
 80008ec:	226b      	movs	r2, #107	; 0x6b
 80008ee:	48a8      	ldr	r0, [pc, #672]	; (8000b90 <main+0x338>)
 80008f0:	f001 fef4 	bl	80026dc <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Write(&hi2c1, mpu6050addr, MPU6050_RA_PWR_MGMT_1, 1, 0b00000000, 1, 1000); //wake from sleep
 80008f4:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 80008f8:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80008fc:	8819      	ldrh	r1, [r3, #0]
 80008fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000902:	9302      	str	r3, [sp, #8]
 8000904:	2301      	movs	r3, #1
 8000906:	9301      	str	r3, [sp, #4]
 8000908:	2300      	movs	r3, #0
 800090a:	9300      	str	r3, [sp, #0]
 800090c:	2301      	movs	r3, #1
 800090e:	226b      	movs	r2, #107	; 0x6b
 8000910:	489f      	ldr	r0, [pc, #636]	; (8000b90 <main+0x338>)
 8000912:	f001 fde9 	bl	80024e8 <HAL_I2C_Mem_Write>
  HAL_I2C_Mem_Read(&hi2c1, mpu6050addr, MPU6050_RA_PWR_MGMT_1, 1, &statusbuff, 1, 1000);
 8000916:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 800091a:	f103 0348 	add.w	r3, r3, #72	; 0x48
 800091e:	8819      	ldrh	r1, [r3, #0]
 8000920:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000924:	9302      	str	r3, [sp, #8]
 8000926:	2301      	movs	r3, #1
 8000928:	9301      	str	r3, [sp, #4]
 800092a:	4b98      	ldr	r3, [pc, #608]	; (8000b8c <main+0x334>)
 800092c:	9300      	str	r3, [sp, #0]
 800092e:	2301      	movs	r3, #1
 8000930:	226b      	movs	r2, #107	; 0x6b
 8000932:	4897      	ldr	r0, [pc, #604]	; (8000b90 <main+0x338>)
 8000934:	f001 fed2 	bl	80026dc <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Read(&hi2c1, mpu6050addr, MPU6050_RA_WHO_AM_I, 1, &statusbuff, 1, 1000);
 8000938:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 800093c:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000940:	8819      	ldrh	r1, [r3, #0]
 8000942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000946:	9302      	str	r3, [sp, #8]
 8000948:	2301      	movs	r3, #1
 800094a:	9301      	str	r3, [sp, #4]
 800094c:	4b8f      	ldr	r3, [pc, #572]	; (8000b8c <main+0x334>)
 800094e:	9300      	str	r3, [sp, #0]
 8000950:	2301      	movs	r3, #1
 8000952:	2275      	movs	r2, #117	; 0x75
 8000954:	488e      	ldr	r0, [pc, #568]	; (8000b90 <main+0x338>)
 8000956:	f001 fec1 	bl	80026dc <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Write(&hi2c1, mpu6050addr, MPU6050_RA_PWR_MGMT_1, 1, 0b10000000, 1, 1000); //reset device
 800095a:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 800095e:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000962:	8819      	ldrh	r1, [r3, #0]
 8000964:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000968:	9302      	str	r3, [sp, #8]
 800096a:	2301      	movs	r3, #1
 800096c:	9301      	str	r3, [sp, #4]
 800096e:	2380      	movs	r3, #128	; 0x80
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	2301      	movs	r3, #1
 8000974:	226b      	movs	r2, #107	; 0x6b
 8000976:	4886      	ldr	r0, [pc, #536]	; (8000b90 <main+0x338>)
 8000978:	f001 fdb6 	bl	80024e8 <HAL_I2C_Mem_Write>
  HAL_Delay(200);
 800097c:	20c8      	movs	r0, #200	; 0xc8
 800097e:	f000 fdb7 	bl	80014f0 <HAL_Delay>
  HAL_I2C_Mem_Read(&hi2c1, mpu6050addr, MPU6050_RA_PWR_MGMT_1, 1, &statusbuff, 1, 1000);
 8000982:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000986:	f103 0348 	add.w	r3, r3, #72	; 0x48
 800098a:	8819      	ldrh	r1, [r3, #0]
 800098c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000990:	9302      	str	r3, [sp, #8]
 8000992:	2301      	movs	r3, #1
 8000994:	9301      	str	r3, [sp, #4]
 8000996:	4b7d      	ldr	r3, [pc, #500]	; (8000b8c <main+0x334>)
 8000998:	9300      	str	r3, [sp, #0]
 800099a:	2301      	movs	r3, #1
 800099c:	226b      	movs	r2, #107	; 0x6b
 800099e:	487c      	ldr	r0, [pc, #496]	; (8000b90 <main+0x338>)
 80009a0:	f001 fe9c 	bl	80026dc <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Write(&hi2c1, mpu6050addr, MPU6050_RA_SIGNAL_PATH_RESET, 1, 0b00000111, 1, 1000); //reset signal path
 80009a4:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 80009a8:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80009ac:	8819      	ldrh	r1, [r3, #0]
 80009ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b2:	9302      	str	r3, [sp, #8]
 80009b4:	2301      	movs	r3, #1
 80009b6:	9301      	str	r3, [sp, #4]
 80009b8:	2307      	movs	r3, #7
 80009ba:	9300      	str	r3, [sp, #0]
 80009bc:	2301      	movs	r3, #1
 80009be:	2268      	movs	r2, #104	; 0x68
 80009c0:	4873      	ldr	r0, [pc, #460]	; (8000b90 <main+0x338>)
 80009c2:	f001 fd91 	bl	80024e8 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 80009c6:	2064      	movs	r0, #100	; 0x64
 80009c8:	f000 fd92 	bl	80014f0 <HAL_Delay>
  HAL_I2C_Mem_Write(&hi2c1, mpu6050addr, MPU6050_RA_PWR_MGMT_1, 1, 0b00000001, 1, 1000); //disable sleep, set clock to gyrx
 80009cc:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 80009d0:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80009d4:	8819      	ldrh	r1, [r3, #0]
 80009d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009da:	9302      	str	r3, [sp, #8]
 80009dc:	2301      	movs	r3, #1
 80009de:	9301      	str	r3, [sp, #4]
 80009e0:	2301      	movs	r3, #1
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	2301      	movs	r3, #1
 80009e6:	226b      	movs	r2, #107	; 0x6b
 80009e8:	4869      	ldr	r0, [pc, #420]	; (8000b90 <main+0x338>)
 80009ea:	f001 fd7d 	bl	80024e8 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 80009ee:	2064      	movs	r0, #100	; 0x64
 80009f0:	f000 fd7e 	bl	80014f0 <HAL_Delay>
  HAL_I2C_Mem_Read(&hi2c1, mpu6050addr, MPU6050_RA_PWR_MGMT_1, 1, &statusbuff, 1, 1000);
 80009f4:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 80009f8:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80009fc:	8819      	ldrh	r1, [r3, #0]
 80009fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a02:	9302      	str	r3, [sp, #8]
 8000a04:	2301      	movs	r3, #1
 8000a06:	9301      	str	r3, [sp, #4]
 8000a08:	4b60      	ldr	r3, [pc, #384]	; (8000b8c <main+0x334>)
 8000a0a:	9300      	str	r3, [sp, #0]
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	226b      	movs	r2, #107	; 0x6b
 8000a10:	485f      	ldr	r0, [pc, #380]	; (8000b90 <main+0x338>)
 8000a12:	f001 fe63 	bl	80026dc <HAL_I2C_Mem_Read>
  HAL_Delay(100);
 8000a16:	2064      	movs	r0, #100	; 0x64
 8000a18:	f000 fd6a 	bl	80014f0 <HAL_Delay>
  HAL_I2C_Mem_Write(&hi2c1, mpu6050addr, MPU6050_RA_GYRO_CONFIG, 1, 0b00000000, 1, 1000); //gyro FS 250°/s
 8000a1c:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000a20:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000a24:	8819      	ldrh	r1, [r3, #0]
 8000a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2a:	9302      	str	r3, [sp, #8]
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	9301      	str	r3, [sp, #4]
 8000a30:	2300      	movs	r3, #0
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	2301      	movs	r3, #1
 8000a36:	221b      	movs	r2, #27
 8000a38:	4855      	ldr	r0, [pc, #340]	; (8000b90 <main+0x338>)
 8000a3a:	f001 fd55 	bl	80024e8 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8000a3e:	2064      	movs	r0, #100	; 0x64
 8000a40:	f000 fd56 	bl	80014f0 <HAL_Delay>
  HAL_I2C_Mem_Write(&hi2c1, mpu6050addr, MPU6050_RA_ACCEL_CONFIG, 1, 0b00011000, 1, 1000); //accel FS 2g
 8000a44:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000a48:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000a4c:	8819      	ldrh	r1, [r3, #0]
 8000a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a52:	9302      	str	r3, [sp, #8]
 8000a54:	2301      	movs	r3, #1
 8000a56:	9301      	str	r3, [sp, #4]
 8000a58:	2318      	movs	r3, #24
 8000a5a:	9300      	str	r3, [sp, #0]
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	221c      	movs	r2, #28
 8000a60:	484b      	ldr	r0, [pc, #300]	; (8000b90 <main+0x338>)
 8000a62:	f001 fd41 	bl	80024e8 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8000a66:	2064      	movs	r0, #100	; 0x64
 8000a68:	f000 fd42 	bl	80014f0 <HAL_Delay>
  HAL_I2C_Mem_Write(&hi2c1, mpu6050addr, MPU6050_RA_CONFIG, 1, 0b00000001, 1, 1000); //enable DLPF
 8000a6c:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000a70:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000a74:	8819      	ldrh	r1, [r3, #0]
 8000a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7a:	9302      	str	r3, [sp, #8]
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	9301      	str	r3, [sp, #4]
 8000a80:	2301      	movs	r3, #1
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	2301      	movs	r3, #1
 8000a86:	221a      	movs	r2, #26
 8000a88:	4841      	ldr	r0, [pc, #260]	; (8000b90 <main+0x338>)
 8000a8a:	f001 fd2d 	bl	80024e8 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8000a8e:	2064      	movs	r0, #100	; 0x64
 8000a90:	f000 fd2e 	bl	80014f0 <HAL_Delay>
  HAL_I2C_Mem_Write(&hi2c1, mpu6050addr, MPU6050_RA_SMPLRT_DIV, 1, 0b00000111, 1, 1000); //gyro samplerate 1khz
 8000a94:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000a98:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000a9c:	8819      	ldrh	r1, [r3, #0]
 8000a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa2:	9302      	str	r3, [sp, #8]
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	9301      	str	r3, [sp, #4]
 8000aa8:	2307      	movs	r3, #7
 8000aaa:	9300      	str	r3, [sp, #0]
 8000aac:	2301      	movs	r3, #1
 8000aae:	2219      	movs	r2, #25
 8000ab0:	4837      	ldr	r0, [pc, #220]	; (8000b90 <main+0x338>)
 8000ab2:	f001 fd19 	bl	80024e8 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8000ab6:	2064      	movs	r0, #100	; 0x64
 8000ab8:	f000 fd1a 	bl	80014f0 <HAL_Delay>
  HAL_I2C_Mem_Write(&hi2c1, mpu6050addr, MPU6050_RA_INT_PIN_CFG, 1, 0b00010000, 1, 1000); //int act H, PP, latch, CLR any
 8000abc:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000ac0:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000ac4:	8819      	ldrh	r1, [r3, #0]
 8000ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aca:	9302      	str	r3, [sp, #8]
 8000acc:	2301      	movs	r3, #1
 8000ace:	9301      	str	r3, [sp, #4]
 8000ad0:	2310      	movs	r3, #16
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	2237      	movs	r2, #55	; 0x37
 8000ad8:	482d      	ldr	r0, [pc, #180]	; (8000b90 <main+0x338>)
 8000ada:	f001 fd05 	bl	80024e8 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8000ade:	2064      	movs	r0, #100	; 0x64
 8000ae0:	f000 fd06 	bl	80014f0 <HAL_Delay>
  HAL_I2C_Mem_Write(&hi2c1, mpu6050addr, MPU6050_RA_INT_ENABLE, 1, 0b00000001, 1, 1000); //enable data rdy int
 8000ae4:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000ae8:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000aec:	8819      	ldrh	r1, [r3, #0]
 8000aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af2:	9302      	str	r3, [sp, #8]
 8000af4:	2301      	movs	r3, #1
 8000af6:	9301      	str	r3, [sp, #4]
 8000af8:	2301      	movs	r3, #1
 8000afa:	9300      	str	r3, [sp, #0]
 8000afc:	2301      	movs	r3, #1
 8000afe:	2238      	movs	r2, #56	; 0x38
 8000b00:	4823      	ldr	r0, [pc, #140]	; (8000b90 <main+0x338>)
 8000b02:	f001 fcf1 	bl	80024e8 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8000b06:	2064      	movs	r0, #100	; 0x64
 8000b08:	f000 fcf2 	bl	80014f0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2120      	movs	r1, #32
 8000b10:	481d      	ldr	r0, [pc, #116]	; (8000b88 <main+0x330>)
 8000b12:	f001 fb97 	bl	8002244 <HAL_GPIO_WritePin>

  //HAL_NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt
  HAL_TIM_Base_Start(&htim2);
 8000b16:	481f      	ldr	r0, [pc, #124]	; (8000b94 <main+0x33c>)
 8000b18:	f003 f89f 	bl	8003c5a <HAL_TIM_Base_Start>
  HAL_DMA_RegisterCallback(&hdma_memtomem_dma2_stream0,HAL_DMA_XFER_CPLT_CB_ID , &DMATransferCompleteCallback);
 8000b1c:	4a1e      	ldr	r2, [pc, #120]	; (8000b98 <main+0x340>)
 8000b1e:	2100      	movs	r1, #0
 8000b20:	481e      	ldr	r0, [pc, #120]	; (8000b9c <main+0x344>)
 8000b22:	f001 f8cb 	bl	8001cbc <HAL_DMA_RegisterCallback>
  HAL_UART_Receive_IT(&huart2, &uartByte, 1);
 8000b26:	2201      	movs	r2, #1
 8000b28:	491d      	ldr	r1, [pc, #116]	; (8000ba0 <main+0x348>)
 8000b2a:	481e      	ldr	r0, [pc, #120]	; (8000ba4 <main+0x34c>)
 8000b2c:	f003 fc0c 	bl	8004348 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(capturestate)
 8000b30:	4b1d      	ldr	r3, [pc, #116]	; (8000ba8 <main+0x350>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	2b03      	cmp	r3, #3
 8000b38:	f200 8190 	bhi.w	8000e5c <main+0x604>
 8000b3c:	a201      	add	r2, pc, #4	; (adr r2, 8000b44 <main+0x2ec>)
 8000b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b42:	bf00      	nop
 8000b44:	08000b55 	.word	0x08000b55
 8000b48:	08000bb1 	.word	0x08000bb1
 8000b4c:	08000d15 	.word	0x08000d15
 8000b50:	08000d1d 	.word	0x08000d1d
	  {
	  case CAPTURESTATE_IDLE:
		  if(uartByteReceived)
 8000b54:	4b15      	ldr	r3, [pc, #84]	; (8000bac <main+0x354>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	f000 8180 	beq.w	8000e60 <main+0x608>
		  {
			  if(uartByte == 's')
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <main+0x348>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b73      	cmp	r3, #115	; 0x73
 8000b66:	d10b      	bne.n	8000b80 <main+0x328>
			  {
				  capturestate = CAPTURESTATE_CAPTURING;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <main+0x350>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000b6e:	2201      	movs	r2, #1
 8000b70:	2120      	movs	r1, #32
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <main+0x330>)
 8000b74:	f001 fb66 	bl	8002244 <HAL_GPIO_WritePin>
				  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <main+0x33c>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	625a      	str	r2, [r3, #36]	; 0x24
			  }
			  uartByteReceived = 0;
 8000b80:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <main+0x354>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8000b86:	e16b      	b.n	8000e60 <main+0x608>
 8000b88:	40020000 	.word	0x40020000
 8000b8c:	20000001 	.word	0x20000001
 8000b90:	20000108 	.word	0x20000108
 8000b94:	20005f5c 	.word	0x20005f5c
 8000b98:	08000fd9 	.word	0x08000fd9
 8000b9c:	200000a8 	.word	0x200000a8
 8000ba0:	2000015e 	.word	0x2000015e
 8000ba4:	20005ffc 	.word	0x20005ffc
 8000ba8:	20000091 	.word	0x20000091
 8000bac:	20000092 	.word	0x20000092
	  case CAPTURESTATE_CAPTURING:
		  HAL_I2C_Mem_Read(&hi2c1, mpu6050addr, MPU6050_RA_INT_STATUS, 1, &statusbuff, 1, HAL_MAX_DELAY);
 8000bb0:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000bb4:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000bb8:	8819      	ldrh	r1, [r3, #0]
 8000bba:	f04f 33ff 	mov.w	r3, #4294967295
 8000bbe:	9302      	str	r3, [sp, #8]
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	9301      	str	r3, [sp, #4]
 8000bc4:	4ba8      	ldr	r3, [pc, #672]	; (8000e68 <main+0x610>)
 8000bc6:	9300      	str	r3, [sp, #0]
 8000bc8:	2301      	movs	r3, #1
 8000bca:	223a      	movs	r2, #58	; 0x3a
 8000bcc:	48a7      	ldr	r0, [pc, #668]	; (8000e6c <main+0x614>)
 8000bce:	f001 fd85 	bl	80026dc <HAL_I2C_Mem_Read>
	  	  if(statusbuff & 0b00000001)
 8000bd2:	4ba5      	ldr	r3, [pc, #660]	; (8000e68 <main+0x610>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	f000 8142 	beq.w	8000e64 <main+0x60c>
	  	  {
	  		  currtimerval = __HAL_TIM_GET_COUNTER(&htim2);
 8000be0:	4ba3      	ldr	r3, [pc, #652]	; (8000e70 <main+0x618>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be6:	4aa3      	ldr	r2, [pc, #652]	; (8000e74 <main+0x61c>)
 8000be8:	6013      	str	r3, [r2, #0]
	  		  HAL_I2C_Mem_Read(&hi2c1, mpu6050addr, MPU6050_RA_INT_STATUS, 1, &statusbuff, 1, HAL_MAX_DELAY);
 8000bea:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000bee:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000bf2:	8819      	ldrh	r1, [r3, #0]
 8000bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf8:	9302      	str	r3, [sp, #8]
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	9301      	str	r3, [sp, #4]
 8000bfe:	4b9a      	ldr	r3, [pc, #616]	; (8000e68 <main+0x610>)
 8000c00:	9300      	str	r3, [sp, #0]
 8000c02:	2301      	movs	r3, #1
 8000c04:	223a      	movs	r2, #58	; 0x3a
 8000c06:	4899      	ldr	r0, [pc, #612]	; (8000e6c <main+0x614>)
 8000c08:	f001 fd68 	bl	80026dc <HAL_I2C_Mem_Read>
	  		  HAL_I2C_Mem_Read(&hi2c1, mpu6050addr, MPU6050_RA_ACCEL_XOUT_H, 1, recdata, 6, HAL_MAX_DELAY);
 8000c0c:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000c10:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000c14:	8819      	ldrh	r1, [r3, #0]
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1a:	9302      	str	r3, [sp, #8]
 8000c1c:	2306      	movs	r3, #6
 8000c1e:	9301      	str	r3, [sp, #4]
 8000c20:	4b95      	ldr	r3, [pc, #596]	; (8000e78 <main+0x620>)
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	2301      	movs	r3, #1
 8000c26:	223b      	movs	r2, #59	; 0x3b
 8000c28:	4890      	ldr	r0, [pc, #576]	; (8000e6c <main+0x614>)
 8000c2a:	f001 fd57 	bl	80026dc <HAL_I2C_Mem_Read>
	  		  data[writeptr].x.LowerByte = recdata[1];
 8000c2e:	4b93      	ldr	r3, [pc, #588]	; (8000e7c <main+0x624>)
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	4619      	mov	r1, r3
 8000c34:	4b90      	ldr	r3, [pc, #576]	; (8000e78 <main+0x620>)
 8000c36:	7858      	ldrb	r0, [r3, #1]
 8000c38:	4a91      	ldr	r2, [pc, #580]	; (8000e80 <main+0x628>)
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	440b      	add	r3, r1
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	4413      	add	r3, r2
 8000c44:	4602      	mov	r2, r0
 8000c46:	701a      	strb	r2, [r3, #0]
	  		  data[writeptr].x.UpperByte = recdata[0];
 8000c48:	4b8c      	ldr	r3, [pc, #560]	; (8000e7c <main+0x624>)
 8000c4a:	881b      	ldrh	r3, [r3, #0]
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4b8a      	ldr	r3, [pc, #552]	; (8000e78 <main+0x620>)
 8000c50:	7818      	ldrb	r0, [r3, #0]
 8000c52:	4a8b      	ldr	r2, [pc, #556]	; (8000e80 <main+0x628>)
 8000c54:	460b      	mov	r3, r1
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	440b      	add	r3, r1
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	4413      	add	r3, r2
 8000c5e:	3301      	adds	r3, #1
 8000c60:	4602      	mov	r2, r0
 8000c62:	701a      	strb	r2, [r3, #0]
	  		  data[writeptr].y.LowerByte = recdata[3];
 8000c64:	4b85      	ldr	r3, [pc, #532]	; (8000e7c <main+0x624>)
 8000c66:	881b      	ldrh	r3, [r3, #0]
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4b83      	ldr	r3, [pc, #524]	; (8000e78 <main+0x620>)
 8000c6c:	78d8      	ldrb	r0, [r3, #3]
 8000c6e:	4a84      	ldr	r2, [pc, #528]	; (8000e80 <main+0x628>)
 8000c70:	460b      	mov	r3, r1
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	440b      	add	r3, r1
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	4413      	add	r3, r2
 8000c7a:	3302      	adds	r3, #2
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	701a      	strb	r2, [r3, #0]
	  		  data[writeptr].y.UpperByte = recdata[2];
 8000c80:	4b7e      	ldr	r3, [pc, #504]	; (8000e7c <main+0x624>)
 8000c82:	881b      	ldrh	r3, [r3, #0]
 8000c84:	4619      	mov	r1, r3
 8000c86:	4b7c      	ldr	r3, [pc, #496]	; (8000e78 <main+0x620>)
 8000c88:	7898      	ldrb	r0, [r3, #2]
 8000c8a:	4a7d      	ldr	r2, [pc, #500]	; (8000e80 <main+0x628>)
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	440b      	add	r3, r1
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	4413      	add	r3, r2
 8000c96:	3303      	adds	r3, #3
 8000c98:	4602      	mov	r2, r0
 8000c9a:	701a      	strb	r2, [r3, #0]
	  		  data[writeptr].z.LowerByte = recdata[5];
 8000c9c:	4b77      	ldr	r3, [pc, #476]	; (8000e7c <main+0x624>)
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4b75      	ldr	r3, [pc, #468]	; (8000e78 <main+0x620>)
 8000ca4:	7958      	ldrb	r0, [r3, #5]
 8000ca6:	4a76      	ldr	r2, [pc, #472]	; (8000e80 <main+0x628>)
 8000ca8:	460b      	mov	r3, r1
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	440b      	add	r3, r1
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	4413      	add	r3, r2
 8000cb2:	3304      	adds	r3, #4
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	701a      	strb	r2, [r3, #0]
	  		  data[writeptr].z.UpperByte = recdata[4];
 8000cb8:	4b70      	ldr	r3, [pc, #448]	; (8000e7c <main+0x624>)
 8000cba:	881b      	ldrh	r3, [r3, #0]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4b6e      	ldr	r3, [pc, #440]	; (8000e78 <main+0x620>)
 8000cc0:	7918      	ldrb	r0, [r3, #4]
 8000cc2:	4a6f      	ldr	r2, [pc, #444]	; (8000e80 <main+0x628>)
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	440b      	add	r3, r1
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	4413      	add	r3, r2
 8000cce:	3305      	adds	r3, #5
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	701a      	strb	r2, [r3, #0]
	  		  data[writeptr].micros = currtimerval;
 8000cd4:	4b69      	ldr	r3, [pc, #420]	; (8000e7c <main+0x624>)
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	4b66      	ldr	r3, [pc, #408]	; (8000e74 <main+0x61c>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	4968      	ldr	r1, [pc, #416]	; (8000e80 <main+0x628>)
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	4403      	add	r3, r0
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	440b      	add	r3, r1
 8000cea:	3308      	adds	r3, #8
 8000cec:	601a      	str	r2, [r3, #0]
	  		  writeptr++;
 8000cee:	4b63      	ldr	r3, [pc, #396]	; (8000e7c <main+0x624>)
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	b29a      	uxth	r2, r3
 8000cf6:	4b61      	ldr	r3, [pc, #388]	; (8000e7c <main+0x624>)
 8000cf8:	801a      	strh	r2, [r3, #0]
	  		  if(writeptr >= SAMPLECOUNT)
 8000cfa:	4b60      	ldr	r3, [pc, #384]	; (8000e7c <main+0x624>)
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000d02:	f0c0 80af 	bcc.w	8000e64 <main+0x60c>
	  		  {
	  			  writeptr = 0;
 8000d06:	4b5d      	ldr	r3, [pc, #372]	; (8000e7c <main+0x624>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	801a      	strh	r2, [r3, #0]
	  			  capturestate = CAPTURESTATE_TRIGGERED;
 8000d0c:	4b5d      	ldr	r3, [pc, #372]	; (8000e84 <main+0x62c>)
 8000d0e:	2202      	movs	r2, #2
 8000d10:	701a      	strb	r2, [r3, #0]
	  		  }
	  	  }
		  break;
 8000d12:	e0a7      	b.n	8000e64 <main+0x60c>
	  case CAPTURESTATE_TRIGGERED:
		  capturestate = CAPTURESTATE_TRANSMITTING;
 8000d14:	4b5b      	ldr	r3, [pc, #364]	; (8000e84 <main+0x62c>)
 8000d16:	2203      	movs	r2, #3
 8000d18:	701a      	strb	r2, [r3, #0]
		  break;
 8000d1a:	e0a4      	b.n	8000e66 <main+0x60e>
	  case CAPTURESTATE_TRANSMITTING:
		  n = sprintf(buffer, "Start\n");
 8000d1c:	4b5a      	ldr	r3, [pc, #360]	; (8000e88 <main+0x630>)
 8000d1e:	4a5b      	ldr	r2, [pc, #364]	; (8000e8c <main+0x634>)
 8000d20:	6810      	ldr	r0, [r2, #0]
 8000d22:	6018      	str	r0, [r3, #0]
 8000d24:	8891      	ldrh	r1, [r2, #4]
 8000d26:	7992      	ldrb	r2, [r2, #6]
 8000d28:	8099      	strh	r1, [r3, #4]
 8000d2a:	719a      	strb	r2, [r3, #6]
 8000d2c:	2306      	movs	r3, #6
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	4b57      	ldr	r3, [pc, #348]	; (8000e90 <main+0x638>)
 8000d32:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, buffer, n, HAL_MAX_DELAY);
 8000d34:	4b56      	ldr	r3, [pc, #344]	; (8000e90 <main+0x638>)
 8000d36:	881a      	ldrh	r2, [r3, #0]
 8000d38:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3c:	4952      	ldr	r1, [pc, #328]	; (8000e88 <main+0x630>)
 8000d3e:	4855      	ldr	r0, [pc, #340]	; (8000e94 <main+0x63c>)
 8000d40:	f003 fa69 	bl	8004216 <HAL_UART_Transmit>
		  for(int i = 0; i<SAMPLECOUNT ; i++)
 8000d44:	2300      	movs	r3, #0
 8000d46:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
 8000d4a:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 8000d4e:	6013      	str	r3, [r2, #0]
 8000d50:	e05e      	b.n	8000e10 <main+0x5b8>
	  		  {
	  			  while(!uartTxComplete)
 8000d52:	bf00      	nop
 8000d54:	4b50      	ldr	r3, [pc, #320]	; (8000e98 <main+0x640>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d0fa      	beq.n	8000d54 <main+0x4fc>
	  			  {
	  			  }
	  			  n = sprintf(buffer, "%u,%d,%d,%d\n",data[i].micros, data[i].x.Word, data[i].y.Word, data[i].z.Word);
 8000d5e:	4948      	ldr	r1, [pc, #288]	; (8000e80 <main+0x628>)
 8000d60:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000d64:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	4413      	add	r3, r2
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	440b      	add	r3, r1
 8000d74:	3308      	adds	r3, #8
 8000d76:	6818      	ldr	r0, [r3, #0]
 8000d78:	4941      	ldr	r1, [pc, #260]	; (8000e80 <main+0x628>)
 8000d7a:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000d7e:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4613      	mov	r3, r2
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	4413      	add	r3, r2
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	440b      	add	r3, r1
 8000d8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d92:	461d      	mov	r5, r3
 8000d94:	493a      	ldr	r1, [pc, #232]	; (8000e80 <main+0x628>)
 8000d96:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000d9a:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4613      	mov	r3, r2
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	4413      	add	r3, r2
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	440b      	add	r3, r1
 8000daa:	3302      	adds	r3, #2
 8000dac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000db0:	461c      	mov	r4, r3
 8000db2:	4933      	ldr	r1, [pc, #204]	; (8000e80 <main+0x628>)
 8000db4:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000db8:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	4413      	add	r3, r2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	440b      	add	r3, r1
 8000dc8:	3304      	adds	r3, #4
 8000dca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dce:	9301      	str	r3, [sp, #4]
 8000dd0:	9400      	str	r4, [sp, #0]
 8000dd2:	462b      	mov	r3, r5
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	4931      	ldr	r1, [pc, #196]	; (8000e9c <main+0x644>)
 8000dd8:	482b      	ldr	r0, [pc, #172]	; (8000e88 <main+0x630>)
 8000dda:	f004 fa3b 	bl	8005254 <siprintf>
 8000dde:	4603      	mov	r3, r0
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	4b2b      	ldr	r3, [pc, #172]	; (8000e90 <main+0x638>)
 8000de4:	801a      	strh	r2, [r3, #0]
	  			  HAL_UART_Transmit_DMA(&huart2, buffer, n);
 8000de6:	4b2a      	ldr	r3, [pc, #168]	; (8000e90 <main+0x638>)
 8000de8:	881b      	ldrh	r3, [r3, #0]
 8000dea:	461a      	mov	r2, r3
 8000dec:	4926      	ldr	r1, [pc, #152]	; (8000e88 <main+0x630>)
 8000dee:	4829      	ldr	r0, [pc, #164]	; (8000e94 <main+0x63c>)
 8000df0:	f003 fb00 	bl	80043f4 <HAL_UART_Transmit_DMA>
	  			  uartTxComplete = 0;
 8000df4:	4b28      	ldr	r3, [pc, #160]	; (8000e98 <main+0x640>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	701a      	strb	r2, [r3, #0]
		  for(int i = 0; i<SAMPLECOUNT ; i++)
 8000dfa:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000dfe:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	3301      	adds	r3, #1
 8000e06:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
 8000e0a:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 8000e0e:	6013      	str	r3, [r2, #0]
 8000e10:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000e14:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000e1e:	db98      	blt.n	8000d52 <main+0x4fa>
	  		  }
		  HAL_Delay(100);
 8000e20:	2064      	movs	r0, #100	; 0x64
 8000e22:	f000 fb65 	bl	80014f0 <HAL_Delay>
		  n = sprintf(buffer, "Stop\n");
 8000e26:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <main+0x630>)
 8000e28:	4a1d      	ldr	r2, [pc, #116]	; (8000ea0 <main+0x648>)
 8000e2a:	6810      	ldr	r0, [r2, #0]
 8000e2c:	6018      	str	r0, [r3, #0]
 8000e2e:	8892      	ldrh	r2, [r2, #4]
 8000e30:	809a      	strh	r2, [r3, #4]
 8000e32:	2305      	movs	r3, #5
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <main+0x638>)
 8000e38:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, buffer, n, HAL_MAX_DELAY);
 8000e3a:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <main+0x638>)
 8000e3c:	881a      	ldrh	r2, [r3, #0]
 8000e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e42:	4911      	ldr	r1, [pc, #68]	; (8000e88 <main+0x630>)
 8000e44:	4813      	ldr	r0, [pc, #76]	; (8000e94 <main+0x63c>)
 8000e46:	f003 f9e6 	bl	8004216 <HAL_UART_Transmit>
		  capturestate = CAPTURESTATE_IDLE;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <main+0x62c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2120      	movs	r1, #32
 8000e54:	4813      	ldr	r0, [pc, #76]	; (8000ea4 <main+0x64c>)
 8000e56:	f001 f9f5 	bl	8002244 <HAL_GPIO_WritePin>
		  break;
 8000e5a:	e004      	b.n	8000e66 <main+0x60e>
	  default:
		  break;
 8000e5c:	bf00      	nop
 8000e5e:	e667      	b.n	8000b30 <main+0x2d8>
		  break;
 8000e60:	bf00      	nop
 8000e62:	e665      	b.n	8000b30 <main+0x2d8>
		  break;
 8000e64:	bf00      	nop
	  switch(capturestate)
 8000e66:	e663      	b.n	8000b30 <main+0x2d8>
 8000e68:	20000001 	.word	0x20000001
 8000e6c:	20000108 	.word	0x20000108
 8000e70:	20005f5c 	.word	0x20005f5c
 8000e74:	20000094 	.word	0x20000094
 8000e78:	20000160 	.word	0x20000160
 8000e7c:	20000098 	.word	0x20000098
 8000e80:	2000019c 	.word	0x2000019c
 8000e84:	20000091 	.word	0x20000091
 8000e88:	20000168 	.word	0x20000168
 8000e8c:	08005a78 	.word	0x08005a78
 8000e90:	2000015c 	.word	0x2000015c
 8000e94:	20005ffc 	.word	0x20005ffc
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	08005a80 	.word	0x08005a80
 8000ea0:	08005a90 	.word	0x08005a90
 8000ea4:	40020000 	.word	0x40020000

08000ea8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b094      	sub	sp, #80	; 0x50
 8000eac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eae:	f107 031c 	add.w	r3, r7, #28
 8000eb2:	2234      	movs	r2, #52	; 0x34
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f004 f9c4 	bl	8005244 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ebc:	f107 0308 	add.w	r3, r7, #8
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ecc:	2300      	movs	r3, #0
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	4b2c      	ldr	r3, [pc, #176]	; (8000f84 <SystemClock_Config+0xdc>)
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed4:	4a2b      	ldr	r2, [pc, #172]	; (8000f84 <SystemClock_Config+0xdc>)
 8000ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eda:	6413      	str	r3, [r2, #64]	; 0x40
 8000edc:	4b29      	ldr	r3, [pc, #164]	; (8000f84 <SystemClock_Config+0xdc>)
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ee8:	2300      	movs	r3, #0
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <SystemClock_Config+0xe0>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a25      	ldr	r2, [pc, #148]	; (8000f88 <SystemClock_Config+0xe0>)
 8000ef2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ef6:	6013      	str	r3, [r2, #0]
 8000ef8:	4b23      	ldr	r3, [pc, #140]	; (8000f88 <SystemClock_Config+0xe0>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f00:	603b      	str	r3, [r7, #0]
 8000f02:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f04:	2302      	movs	r3, #2
 8000f06:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f0c:	2310      	movs	r3, #16
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f10:	2302      	movs	r3, #2
 8000f12:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f14:	2300      	movs	r3, #0
 8000f16:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f18:	2308      	movs	r3, #8
 8000f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000f1c:	23b4      	movs	r3, #180	; 0xb4
 8000f1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f20:	2302      	movs	r3, #2
 8000f22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f24:	2302      	movs	r3, #2
 8000f26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2c:	f107 031c 	add.w	r3, r7, #28
 8000f30:	4618      	mov	r0, r3
 8000f32:	f002 fc0d 	bl	8003750 <HAL_RCC_OscConfig>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f3c:	f000 f85c 	bl	8000ff8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f40:	f002 f94a 	bl	80031d8 <HAL_PWREx_EnableOverDrive>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f4a:	f000 f855 	bl	8000ff8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f4e:	230f      	movs	r3, #15
 8000f50:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f52:	2302      	movs	r3, #2
 8000f54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f5a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f64:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f66:	f107 0308 	add.w	r3, r7, #8
 8000f6a:	2105      	movs	r1, #5
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f002 f983 	bl	8003278 <HAL_RCC_ClockConfig>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000f78:	f000 f83e 	bl	8000ff8 <Error_Handler>
  }
}
 8000f7c:	bf00      	nop
 8000f7e:	3750      	adds	r7, #80	; 0x50
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40007000 	.word	0x40007000

08000f8c <HAL_UART_TxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
	i2cRecComplete = 1;
}
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	uartTxComplete = 1;
 8000f94:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <HAL_UART_TxCpltCallback+0x1c>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	701a      	strb	r2, [r3, #0]
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000000 	.word	0x20000000

08000fac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	uartByteReceived = 1;
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <HAL_UART_RxCpltCallback+0x20>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, &uartByte, 1);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	4904      	ldr	r1, [pc, #16]	; (8000fd0 <HAL_UART_RxCpltCallback+0x24>)
 8000fbe:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <HAL_UART_RxCpltCallback+0x28>)
 8000fc0:	f003 f9c2 	bl	8004348 <HAL_UART_Receive_IT>
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000092 	.word	0x20000092
 8000fd0:	2000015e 	.word	0x2000015e
 8000fd4:	20005ffc 	.word	0x20005ffc

08000fd8 <DMATransferCompleteCallback>:
void DMATransferCompleteCallback(DMA_HandleTypeDef *hdma)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	dmaTransferComplete = 1;
 8000fe0:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <DMATransferCompleteCallback+0x1c>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	701a      	strb	r2, [r3, #0]
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20000090 	.word	0x20000090

08000ff8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <HAL_MspInit+0x4c>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	4a0f      	ldr	r2, [pc, #60]	; (8001054 <HAL_MspInit+0x4c>)
 8001018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800101c:	6453      	str	r3, [r2, #68]	; 0x44
 800101e:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <HAL_MspInit+0x4c>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	603b      	str	r3, [r7, #0]
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <HAL_MspInit+0x4c>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	4a08      	ldr	r2, [pc, #32]	; (8001054 <HAL_MspInit+0x4c>)
 8001034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001038:	6413      	str	r3, [r2, #64]	; 0x40
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_MspInit+0x4c>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40023800 	.word	0x40023800

08001058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <HardFault_Handler+0x4>

0800106c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <MemManage_Handler+0x4>

08001072 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <BusFault_Handler+0x4>

08001078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800107c:	e7fe      	b.n	800107c <UsageFault_Handler+0x4>

0800107e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ac:	f000 fa00 	bl	80014b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <DMA1_Stream6_IRQHandler+0x10>)
 80010ba:	f000 fc75 	bl	80019a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20005f9c 	.word	0x20005f9c

080010c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010cc:	4802      	ldr	r0, [pc, #8]	; (80010d8 <USART2_IRQHandler+0x10>)
 80010ce:	f003 f9fd 	bl	80044cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20005ffc 	.word	0x20005ffc

080010dc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <DMA2_Stream0_IRQHandler+0x10>)
 80010e2:	f000 fc61 	bl	80019a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200000a8 	.word	0x200000a8

080010f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f8:	4a14      	ldr	r2, [pc, #80]	; (800114c <_sbrk+0x5c>)
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <_sbrk+0x60>)
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001104:	4b13      	ldr	r3, [pc, #76]	; (8001154 <_sbrk+0x64>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d102      	bne.n	8001112 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <_sbrk+0x64>)
 800110e:	4a12      	ldr	r2, [pc, #72]	; (8001158 <_sbrk+0x68>)
 8001110:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <_sbrk+0x64>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	429a      	cmp	r2, r3
 800111e:	d207      	bcs.n	8001130 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001120:	f004 f866 	bl	80051f0 <__errno>
 8001124:	4602      	mov	r2, r0
 8001126:	230c      	movs	r3, #12
 8001128:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
 800112e:	e009      	b.n	8001144 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <_sbrk+0x64>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001136:	4b07      	ldr	r3, [pc, #28]	; (8001154 <_sbrk+0x64>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	4a05      	ldr	r2, [pc, #20]	; (8001154 <_sbrk+0x64>)
 8001140:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001142:	68fb      	ldr	r3, [r7, #12]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20020000 	.word	0x20020000
 8001150:	00000400 	.word	0x00000400
 8001154:	2000009c 	.word	0x2000009c
 8001158:	20006048 	.word	0x20006048

0800115c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <SystemInit+0x28>)
 8001162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001166:	4a07      	ldr	r2, [pc, #28]	; (8001184 <SystemInit+0x28>)
 8001168:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800116c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <SystemInit+0x28>)
 8001172:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001176:	609a      	str	r2, [r3, #8]
#endif
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800118e:	f107 0308 	add.w	r3, r7, #8
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800119c:	463b      	mov	r3, r7
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80011a4:	4b1d      	ldr	r3, [pc, #116]	; (800121c <MX_TIM2_Init+0x94>)
 80011a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 89;
 80011ac:	4b1b      	ldr	r3, [pc, #108]	; (800121c <MX_TIM2_Init+0x94>)
 80011ae:	2259      	movs	r2, #89	; 0x59
 80011b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b2:	4b1a      	ldr	r3, [pc, #104]	; (800121c <MX_TIM2_Init+0x94>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80011b8:	4b18      	ldr	r3, [pc, #96]	; (800121c <MX_TIM2_Init+0x94>)
 80011ba:	f04f 32ff 	mov.w	r2, #4294967295
 80011be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c0:	4b16      	ldr	r3, [pc, #88]	; (800121c <MX_TIM2_Init+0x94>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c6:	4b15      	ldr	r3, [pc, #84]	; (800121c <MX_TIM2_Init+0x94>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011cc:	4813      	ldr	r0, [pc, #76]	; (800121c <MX_TIM2_Init+0x94>)
 80011ce:	f002 fd19 	bl	8003c04 <HAL_TIM_Base_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011d8:	f7ff ff0e 	bl	8000ff8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011e2:	f107 0308 	add.w	r3, r7, #8
 80011e6:	4619      	mov	r1, r3
 80011e8:	480c      	ldr	r0, [pc, #48]	; (800121c <MX_TIM2_Init+0x94>)
 80011ea:	f002 fd5a 	bl	8003ca2 <HAL_TIM_ConfigClockSource>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011f4:	f7ff ff00 	bl	8000ff8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f8:	2300      	movs	r3, #0
 80011fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011fc:	2300      	movs	r3, #0
 80011fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001200:	463b      	mov	r3, r7
 8001202:	4619      	mov	r1, r3
 8001204:	4805      	ldr	r0, [pc, #20]	; (800121c <MX_TIM2_Init+0x94>)
 8001206:	f002 ff3d 	bl	8004084 <HAL_TIMEx_MasterConfigSynchronization>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001210:	f7ff fef2 	bl	8000ff8 <Error_Handler>
  }

}
 8001214:	bf00      	nop
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20005f5c 	.word	0x20005f5c

08001220 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001230:	d10d      	bne.n	800124e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <HAL_TIM_Base_MspInit+0x3c>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	4a08      	ldr	r2, [pc, #32]	; (800125c <HAL_TIM_Base_MspInit+0x3c>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6413      	str	r3, [r2, #64]	; 0x40
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_TIM_Base_MspInit+0x3c>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800124e:	bf00      	nop
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40023800 	.word	0x40023800

08001260 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MX_USART2_UART_Init+0x4c>)
 8001266:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <MX_USART2_UART_Init+0x50>)
 8001268:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <MX_USART2_UART_Init+0x4c>)
 800126c:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001270:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <MX_USART2_UART_Init+0x4c>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <MX_USART2_UART_Init+0x4c>)
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800127e:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <MX_USART2_UART_Init+0x4c>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001284:	4b09      	ldr	r3, [pc, #36]	; (80012ac <MX_USART2_UART_Init+0x4c>)
 8001286:	220c      	movs	r2, #12
 8001288:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128a:	4b08      	ldr	r3, [pc, #32]	; (80012ac <MX_USART2_UART_Init+0x4c>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <MX_USART2_UART_Init+0x4c>)
 8001292:	2200      	movs	r2, #0
 8001294:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001296:	4805      	ldr	r0, [pc, #20]	; (80012ac <MX_USART2_UART_Init+0x4c>)
 8001298:	f002 ff70 	bl	800417c <HAL_UART_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012a2:	f7ff fea9 	bl	8000ff8 <Error_Handler>
  }

}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20005ffc 	.word	0x20005ffc
 80012b0:	40004400 	.word	0x40004400

080012b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a34      	ldr	r2, [pc, #208]	; (80013a4 <HAL_UART_MspInit+0xf0>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d161      	bne.n	800139a <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	4b33      	ldr	r3, [pc, #204]	; (80013a8 <HAL_UART_MspInit+0xf4>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	4a32      	ldr	r2, [pc, #200]	; (80013a8 <HAL_UART_MspInit+0xf4>)
 80012e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e4:	6413      	str	r3, [r2, #64]	; 0x40
 80012e6:	4b30      	ldr	r3, [pc, #192]	; (80013a8 <HAL_UART_MspInit+0xf4>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b2c      	ldr	r3, [pc, #176]	; (80013a8 <HAL_UART_MspInit+0xf4>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a2b      	ldr	r2, [pc, #172]	; (80013a8 <HAL_UART_MspInit+0xf4>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b29      	ldr	r3, [pc, #164]	; (80013a8 <HAL_UART_MspInit+0xf4>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800130e:	230c      	movs	r3, #12
 8001310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131a:	2303      	movs	r3, #3
 800131c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800131e:	2307      	movs	r3, #7
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4619      	mov	r1, r3
 8001328:	4820      	ldr	r0, [pc, #128]	; (80013ac <HAL_UART_MspInit+0xf8>)
 800132a:	f000 fdf9 	bl	8001f20 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800132e:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <HAL_UART_MspInit+0xfc>)
 8001330:	4a20      	ldr	r2, [pc, #128]	; (80013b4 <HAL_UART_MspInit+0x100>)
 8001332:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001334:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <HAL_UART_MspInit+0xfc>)
 8001336:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800133a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800133c:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <HAL_UART_MspInit+0xfc>)
 800133e:	2240      	movs	r2, #64	; 0x40
 8001340:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001342:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <HAL_UART_MspInit+0xfc>)
 8001344:	2200      	movs	r2, #0
 8001346:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001348:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <HAL_UART_MspInit+0xfc>)
 800134a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800134e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001350:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <HAL_UART_MspInit+0xfc>)
 8001352:	2200      	movs	r2, #0
 8001354:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001356:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <HAL_UART_MspInit+0xfc>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800135c:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <HAL_UART_MspInit+0xfc>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001362:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <HAL_UART_MspInit+0xfc>)
 8001364:	2200      	movs	r2, #0
 8001366:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <HAL_UART_MspInit+0xfc>)
 800136a:	2200      	movs	r2, #0
 800136c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800136e:	4810      	ldr	r0, [pc, #64]	; (80013b0 <HAL_UART_MspInit+0xfc>)
 8001370:	f000 f9f2 	bl	8001758 <HAL_DMA_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800137a:	f7ff fe3d 	bl	8000ff8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a0b      	ldr	r2, [pc, #44]	; (80013b0 <HAL_UART_MspInit+0xfc>)
 8001382:	631a      	str	r2, [r3, #48]	; 0x30
 8001384:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <HAL_UART_MspInit+0xfc>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	2100      	movs	r1, #0
 800138e:	2026      	movs	r0, #38	; 0x26
 8001390:	f000 f9ab 	bl	80016ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001394:	2026      	movs	r0, #38	; 0x26
 8001396:	f000 f9c4 	bl	8001722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800139a:	bf00      	nop
 800139c:	3728      	adds	r7, #40	; 0x28
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40004400 	.word	0x40004400
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40020000 	.word	0x40020000
 80013b0:	20005f9c 	.word	0x20005f9c
 80013b4:	400260a0 	.word	0x400260a0

080013b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80013bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80013be:	e003      	b.n	80013c8 <LoopCopyDataInit>

080013c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80013c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80013c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80013c6:	3104      	adds	r1, #4

080013c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80013c8:	480b      	ldr	r0, [pc, #44]	; (80013f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80013ca:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80013cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80013ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80013d0:	d3f6      	bcc.n	80013c0 <CopyDataInit>
  ldr  r2, =_sbss
 80013d2:	4a0b      	ldr	r2, [pc, #44]	; (8001400 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80013d4:	e002      	b.n	80013dc <LoopFillZerobss>

080013d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80013d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80013d8:	f842 3b04 	str.w	r3, [r2], #4

080013dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80013de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80013e0:	d3f9      	bcc.n	80013d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013e2:	f7ff febb 	bl	800115c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013e6:	f003 ff09 	bl	80051fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ea:	f7ff fa35 	bl	8000858 <main>
  bx  lr    
 80013ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013f0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80013f4:	08005afc 	.word	0x08005afc
  ldr  r0, =_sdata
 80013f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80013fc:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001400:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001404:	20006044 	.word	0x20006044

08001408 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001408:	e7fe      	b.n	8001408 <ADC_IRQHandler>
	...

0800140c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001410:	4b0e      	ldr	r3, [pc, #56]	; (800144c <HAL_Init+0x40>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a0d      	ldr	r2, [pc, #52]	; (800144c <HAL_Init+0x40>)
 8001416:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800141a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800141c:	4b0b      	ldr	r3, [pc, #44]	; (800144c <HAL_Init+0x40>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a0a      	ldr	r2, [pc, #40]	; (800144c <HAL_Init+0x40>)
 8001422:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001426:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001428:	4b08      	ldr	r3, [pc, #32]	; (800144c <HAL_Init+0x40>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a07      	ldr	r2, [pc, #28]	; (800144c <HAL_Init+0x40>)
 800142e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001432:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001434:	2003      	movs	r0, #3
 8001436:	f000 f94d 	bl	80016d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800143a:	2000      	movs	r0, #0
 800143c:	f000 f808 	bl	8001450 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001440:	f7ff fde2 	bl	8001008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40023c00 	.word	0x40023c00

08001450 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_InitTick+0x54>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_InitTick+0x58>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	4619      	mov	r1, r3
 8001462:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001466:	fbb3 f3f1 	udiv	r3, r3, r1
 800146a:	fbb2 f3f3 	udiv	r3, r2, r3
 800146e:	4618      	mov	r0, r3
 8001470:	f000 f965 	bl	800173e <HAL_SYSTICK_Config>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e00e      	b.n	800149c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b0f      	cmp	r3, #15
 8001482:	d80a      	bhi.n	800149a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001484:	2200      	movs	r2, #0
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	f04f 30ff 	mov.w	r0, #4294967295
 800148c:	f000 f92d 	bl	80016ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001490:	4a06      	ldr	r2, [pc, #24]	; (80014ac <HAL_InitTick+0x5c>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001496:	2300      	movs	r3, #0
 8001498:	e000      	b.n	800149c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
}
 800149c:	4618      	mov	r0, r3
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000004 	.word	0x20000004
 80014a8:	2000000c 	.word	0x2000000c
 80014ac:	20000008 	.word	0x20000008

080014b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_IncTick+0x20>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_IncTick+0x24>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4413      	add	r3, r2
 80014c0:	4a04      	ldr	r2, [pc, #16]	; (80014d4 <HAL_IncTick+0x24>)
 80014c2:	6013      	str	r3, [r2, #0]
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	2000000c 	.word	0x2000000c
 80014d4:	2000603c 	.word	0x2000603c

080014d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return uwTick;
 80014dc:	4b03      	ldr	r3, [pc, #12]	; (80014ec <HAL_GetTick+0x14>)
 80014de:	681b      	ldr	r3, [r3, #0]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	2000603c 	.word	0x2000603c

080014f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f8:	f7ff ffee 	bl	80014d8 <HAL_GetTick>
 80014fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001508:	d005      	beq.n	8001516 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <HAL_Delay+0x40>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	461a      	mov	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4413      	add	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001516:	bf00      	nop
 8001518:	f7ff ffde 	bl	80014d8 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	429a      	cmp	r2, r3
 8001526:	d8f7      	bhi.n	8001518 <HAL_Delay+0x28>
  {
  }
}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	2000000c 	.word	0x2000000c

08001534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001550:	4013      	ands	r3, r2
 8001552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800155c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001566:	4a04      	ldr	r2, [pc, #16]	; (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	60d3      	str	r3, [r2, #12]
}
 800156c:	bf00      	nop
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001580:	4b04      	ldr	r3, [pc, #16]	; (8001594 <__NVIC_GetPriorityGrouping+0x18>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	0a1b      	lsrs	r3, r3, #8
 8001586:	f003 0307 	and.w	r3, r3, #7
}
 800158a:	4618      	mov	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	db0b      	blt.n	80015c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	f003 021f 	and.w	r2, r3, #31
 80015b0:	4907      	ldr	r1, [pc, #28]	; (80015d0 <__NVIC_EnableIRQ+0x38>)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	095b      	lsrs	r3, r3, #5
 80015b8:	2001      	movs	r0, #1
 80015ba:	fa00 f202 	lsl.w	r2, r0, r2
 80015be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000e100 	.word	0xe000e100

080015d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	6039      	str	r1, [r7, #0]
 80015de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	db0a      	blt.n	80015fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	490c      	ldr	r1, [pc, #48]	; (8001620 <__NVIC_SetPriority+0x4c>)
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	0112      	lsls	r2, r2, #4
 80015f4:	b2d2      	uxtb	r2, r2
 80015f6:	440b      	add	r3, r1
 80015f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015fc:	e00a      	b.n	8001614 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4908      	ldr	r1, [pc, #32]	; (8001624 <__NVIC_SetPriority+0x50>)
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	3b04      	subs	r3, #4
 800160c:	0112      	lsls	r2, r2, #4
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	440b      	add	r3, r1
 8001612:	761a      	strb	r2, [r3, #24]
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000e100 	.word	0xe000e100
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001628:	b480      	push	{r7}
 800162a:	b089      	sub	sp, #36	; 0x24
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f1c3 0307 	rsb	r3, r3, #7
 8001642:	2b04      	cmp	r3, #4
 8001644:	bf28      	it	cs
 8001646:	2304      	movcs	r3, #4
 8001648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3304      	adds	r3, #4
 800164e:	2b06      	cmp	r3, #6
 8001650:	d902      	bls.n	8001658 <NVIC_EncodePriority+0x30>
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3b03      	subs	r3, #3
 8001656:	e000      	b.n	800165a <NVIC_EncodePriority+0x32>
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800165c:	f04f 32ff 	mov.w	r2, #4294967295
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43da      	mvns	r2, r3
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	401a      	ands	r2, r3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001670:	f04f 31ff 	mov.w	r1, #4294967295
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	fa01 f303 	lsl.w	r3, r1, r3
 800167a:	43d9      	mvns	r1, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	4313      	orrs	r3, r2
         );
}
 8001682:	4618      	mov	r0, r3
 8001684:	3724      	adds	r7, #36	; 0x24
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016a0:	d301      	bcc.n	80016a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a2:	2301      	movs	r3, #1
 80016a4:	e00f      	b.n	80016c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016a6:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <SysTick_Config+0x40>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ae:	210f      	movs	r1, #15
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295
 80016b4:	f7ff ff8e 	bl	80015d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <SysTick_Config+0x40>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016be:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <SysTick_Config+0x40>)
 80016c0:	2207      	movs	r2, #7
 80016c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	e000e010 	.word	0xe000e010

080016d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ff29 	bl	8001534 <__NVIC_SetPriorityGrouping>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b086      	sub	sp, #24
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
 80016f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016fc:	f7ff ff3e 	bl	800157c <__NVIC_GetPriorityGrouping>
 8001700:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	68b9      	ldr	r1, [r7, #8]
 8001706:	6978      	ldr	r0, [r7, #20]
 8001708:	f7ff ff8e 	bl	8001628 <NVIC_EncodePriority>
 800170c:	4602      	mov	r2, r0
 800170e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001712:	4611      	mov	r1, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff5d 	bl	80015d4 <__NVIC_SetPriority>
}
 800171a:	bf00      	nop
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff31 	bl	8001598 <__NVIC_EnableIRQ>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ffa2 	bl	8001690 <SysTick_Config>
 800174c:	4603      	mov	r3, r0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001764:	f7ff feb8 	bl	80014d8 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e099      	b.n	80018a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2202      	movs	r2, #2
 8001780:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 0201 	bic.w	r2, r2, #1
 8001792:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001794:	e00f      	b.n	80017b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001796:	f7ff fe9f 	bl	80014d8 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b05      	cmp	r3, #5
 80017a2:	d908      	bls.n	80017b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2220      	movs	r2, #32
 80017a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2203      	movs	r2, #3
 80017ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e078      	b.n	80018a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1e8      	bne.n	8001796 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	4b38      	ldr	r3, [pc, #224]	; (80018b0 <HAL_DMA_Init+0x158>)
 80017d0:	4013      	ands	r3, r2
 80017d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	4313      	orrs	r3, r2
 8001806:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180c:	2b04      	cmp	r3, #4
 800180e:	d107      	bne.n	8001820 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001818:	4313      	orrs	r3, r2
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	4313      	orrs	r3, r2
 800181e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f023 0307 	bic.w	r3, r3, #7
 8001836:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	4313      	orrs	r3, r2
 8001840:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	2b04      	cmp	r3, #4
 8001848:	d117      	bne.n	800187a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	4313      	orrs	r3, r2
 8001852:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001858:	2b00      	cmp	r3, #0
 800185a:	d00e      	beq.n	800187a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f000 fae5 	bl	8001e2c <DMA_CheckFifoParam>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d008      	beq.n	800187a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2240      	movs	r2, #64	; 0x40
 800186c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001876:	2301      	movs	r3, #1
 8001878:	e016      	b.n	80018a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 fa9c 	bl	8001dc0 <DMA_CalcBaseAndBitshift>
 8001888:	4603      	mov	r3, r0
 800188a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001890:	223f      	movs	r2, #63	; 0x3f
 8001892:	409a      	lsls	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2201      	movs	r2, #1
 80018a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	f010803f 	.word	0xf010803f

080018b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
 80018c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d101      	bne.n	80018da <HAL_DMA_Start_IT+0x26>
 80018d6:	2302      	movs	r3, #2
 80018d8:	e040      	b.n	800195c <HAL_DMA_Start_IT+0xa8>
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d12f      	bne.n	800194e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2202      	movs	r2, #2
 80018f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2200      	movs	r2, #0
 80018fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	68b9      	ldr	r1, [r7, #8]
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f000 fa2e 	bl	8001d64 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190c:	223f      	movs	r2, #63	; 0x3f
 800190e:	409a      	lsls	r2, r3
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 0216 	orr.w	r2, r2, #22
 8001922:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	2b00      	cmp	r3, #0
 800192a:	d007      	beq.n	800193c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f042 0208 	orr.w	r2, r2, #8
 800193a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f042 0201 	orr.w	r2, r2, #1
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	e005      	b.n	800195a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001956:	2302      	movs	r3, #2
 8001958:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800195a:	7dfb      	ldrb	r3, [r7, #23]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d004      	beq.n	8001982 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2280      	movs	r2, #128	; 0x80
 800197c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e00c      	b.n	800199c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2205      	movs	r2, #5
 8001986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 0201 	bic.w	r2, r2, #1
 8001998:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80019b4:	4b92      	ldr	r3, [pc, #584]	; (8001c00 <HAL_DMA_IRQHandler+0x258>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a92      	ldr	r2, [pc, #584]	; (8001c04 <HAL_DMA_IRQHandler+0x25c>)
 80019ba:	fba2 2303 	umull	r2, r3, r2, r3
 80019be:	0a9b      	lsrs	r3, r3, #10
 80019c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d2:	2208      	movs	r2, #8
 80019d4:	409a      	lsls	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	4013      	ands	r3, r2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d01a      	beq.n	8001a14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d013      	beq.n	8001a14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 0204 	bic.w	r2, r2, #4
 80019fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a00:	2208      	movs	r2, #8
 8001a02:	409a      	lsls	r2, r3
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a0c:	f043 0201 	orr.w	r2, r3, #1
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a18:	2201      	movs	r2, #1
 8001a1a:	409a      	lsls	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d012      	beq.n	8001a4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00b      	beq.n	8001a4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a36:	2201      	movs	r2, #1
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a42:	f043 0202 	orr.w	r2, r3, #2
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4e:	2204      	movs	r2, #4
 8001a50:	409a      	lsls	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4013      	ands	r3, r2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d012      	beq.n	8001a80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00b      	beq.n	8001a80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6c:	2204      	movs	r2, #4
 8001a6e:	409a      	lsls	r2, r3
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a78:	f043 0204 	orr.w	r2, r3, #4
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a84:	2210      	movs	r2, #16
 8001a86:	409a      	lsls	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d043      	beq.n	8001b18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d03c      	beq.n	8001b18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa2:	2210      	movs	r2, #16
 8001aa4:	409a      	lsls	r2, r3
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d018      	beq.n	8001aea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d108      	bne.n	8001ad8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d024      	beq.n	8001b18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	4798      	blx	r3
 8001ad6:	e01f      	b.n	8001b18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d01b      	beq.n	8001b18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	4798      	blx	r3
 8001ae8:	e016      	b.n	8001b18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d107      	bne.n	8001b08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0208 	bic.w	r2, r2, #8
 8001b06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b1c:	2220      	movs	r2, #32
 8001b1e:	409a      	lsls	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4013      	ands	r3, r2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 808e 	beq.w	8001c46 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0310 	and.w	r3, r3, #16
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 8086 	beq.w	8001c46 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b3e:	2220      	movs	r2, #32
 8001b40:	409a      	lsls	r2, r3
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b05      	cmp	r3, #5
 8001b50:	d136      	bne.n	8001bc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 0216 	bic.w	r2, r2, #22
 8001b60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	695a      	ldr	r2, [r3, #20]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d103      	bne.n	8001b82 <HAL_DMA_IRQHandler+0x1da>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d007      	beq.n	8001b92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 0208 	bic.w	r2, r2, #8
 8001b90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b96:	223f      	movs	r2, #63	; 0x3f
 8001b98:	409a      	lsls	r2, r3
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d07d      	beq.n	8001cb2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	4798      	blx	r3
        }
        return;
 8001bbe:	e078      	b.n	8001cb2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d01c      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d108      	bne.n	8001bee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d030      	beq.n	8001c46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	4798      	blx	r3
 8001bec:	e02b      	b.n	8001c46 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d027      	beq.n	8001c46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	4798      	blx	r3
 8001bfe:	e022      	b.n	8001c46 <HAL_DMA_IRQHandler+0x29e>
 8001c00:	20000004 	.word	0x20000004
 8001c04:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10f      	bne.n	8001c36 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 0210 	bic.w	r2, r2, #16
 8001c24:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d032      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d022      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2205      	movs	r2, #5
 8001c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 0201 	bic.w	r2, r2, #1
 8001c70:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	3301      	adds	r3, #1
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d307      	bcc.n	8001c8e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1f2      	bne.n	8001c72 <HAL_DMA_IRQHandler+0x2ca>
 8001c8c:	e000      	b.n	8001c90 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001c8e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	4798      	blx	r3
 8001cb0:	e000      	b.n	8001cb4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001cb2:	bf00      	nop
    }
  }
}
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop

08001cbc <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b087      	sub	sp, #28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	607a      	str	r2, [r7, #4]
 8001cc8:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d101      	bne.n	8001cdc <HAL_DMA_RegisterCallback+0x20>
 8001cd8:	2302      	movs	r3, #2
 8001cda:	e03c      	b.n	8001d56 <HAL_DMA_RegisterCallback+0x9a>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d129      	bne.n	8001d44 <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 8001cf0:	7afb      	ldrb	r3, [r7, #11]
 8001cf2:	2b05      	cmp	r3, #5
 8001cf4:	d829      	bhi.n	8001d4a <HAL_DMA_RegisterCallback+0x8e>
 8001cf6:	a201      	add	r2, pc, #4	; (adr r2, 8001cfc <HAL_DMA_RegisterCallback+0x40>)
 8001cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cfc:	08001d15 	.word	0x08001d15
 8001d00:	08001d1d 	.word	0x08001d1d
 8001d04:	08001d25 	.word	0x08001d25
 8001d08:	08001d2d 	.word	0x08001d2d
 8001d0c:	08001d35 	.word	0x08001d35
 8001d10:	08001d3d 	.word	0x08001d3d
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8001d1a:	e017      	b.n	8001d4c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8001d22:	e013      	b.n	8001d4c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8001d2a:	e00f      	b.n	8001d4c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8001d32:	e00b      	b.n	8001d4c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8001d3a:	e007      	b.n	8001d4c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8001d42:	e003      	b.n	8001d4c <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	75fb      	strb	r3, [r7, #23]
 8001d48:	e000      	b.n	8001d4c <HAL_DMA_RegisterCallback+0x90>
      break;
 8001d4a:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8001d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	371c      	adds	r7, #28
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop

08001d64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
 8001d70:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d80:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	2b40      	cmp	r3, #64	; 0x40
 8001d90:	d108      	bne.n	8001da4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001da2:	e007      	b.n	8001db4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68ba      	ldr	r2, [r7, #8]
 8001daa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	60da      	str	r2, [r3, #12]
}
 8001db4:	bf00      	nop
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	3b10      	subs	r3, #16
 8001dd0:	4a14      	ldr	r2, [pc, #80]	; (8001e24 <DMA_CalcBaseAndBitshift+0x64>)
 8001dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd6:	091b      	lsrs	r3, r3, #4
 8001dd8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001dda:	4a13      	ldr	r2, [pc, #76]	; (8001e28 <DMA_CalcBaseAndBitshift+0x68>)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4413      	add	r3, r2
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	461a      	mov	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2b03      	cmp	r3, #3
 8001dec:	d909      	bls.n	8001e02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001df6:	f023 0303 	bic.w	r3, r3, #3
 8001dfa:	1d1a      	adds	r2, r3, #4
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	659a      	str	r2, [r3, #88]	; 0x58
 8001e00:	e007      	b.n	8001e12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e0a:	f023 0303 	bic.w	r3, r3, #3
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	aaaaaaab 	.word	0xaaaaaaab
 8001e28:	08005ab0 	.word	0x08005ab0

08001e2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e34:	2300      	movs	r3, #0
 8001e36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d11f      	bne.n	8001e86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	2b03      	cmp	r3, #3
 8001e4a:	d855      	bhi.n	8001ef8 <DMA_CheckFifoParam+0xcc>
 8001e4c:	a201      	add	r2, pc, #4	; (adr r2, 8001e54 <DMA_CheckFifoParam+0x28>)
 8001e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e52:	bf00      	nop
 8001e54:	08001e65 	.word	0x08001e65
 8001e58:	08001e77 	.word	0x08001e77
 8001e5c:	08001e65 	.word	0x08001e65
 8001e60:	08001ef9 	.word	0x08001ef9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d045      	beq.n	8001efc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e74:	e042      	b.n	8001efc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e7e:	d13f      	bne.n	8001f00 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e84:	e03c      	b.n	8001f00 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e8e:	d121      	bne.n	8001ed4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	2b03      	cmp	r3, #3
 8001e94:	d836      	bhi.n	8001f04 <DMA_CheckFifoParam+0xd8>
 8001e96:	a201      	add	r2, pc, #4	; (adr r2, 8001e9c <DMA_CheckFifoParam+0x70>)
 8001e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9c:	08001ead 	.word	0x08001ead
 8001ea0:	08001eb3 	.word	0x08001eb3
 8001ea4:	08001ead 	.word	0x08001ead
 8001ea8:	08001ec5 	.word	0x08001ec5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	73fb      	strb	r3, [r7, #15]
      break;
 8001eb0:	e02f      	b.n	8001f12 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d024      	beq.n	8001f08 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ec2:	e021      	b.n	8001f08 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ecc:	d11e      	bne.n	8001f0c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ed2:	e01b      	b.n	8001f0c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d902      	bls.n	8001ee0 <DMA_CheckFifoParam+0xb4>
 8001eda:	2b03      	cmp	r3, #3
 8001edc:	d003      	beq.n	8001ee6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ede:	e018      	b.n	8001f12 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ee4:	e015      	b.n	8001f12 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00e      	beq.n	8001f10 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	73fb      	strb	r3, [r7, #15]
      break;
 8001ef6:	e00b      	b.n	8001f10 <DMA_CheckFifoParam+0xe4>
      break;
 8001ef8:	bf00      	nop
 8001efa:	e00a      	b.n	8001f12 <DMA_CheckFifoParam+0xe6>
      break;
 8001efc:	bf00      	nop
 8001efe:	e008      	b.n	8001f12 <DMA_CheckFifoParam+0xe6>
      break;
 8001f00:	bf00      	nop
 8001f02:	e006      	b.n	8001f12 <DMA_CheckFifoParam+0xe6>
      break;
 8001f04:	bf00      	nop
 8001f06:	e004      	b.n	8001f12 <DMA_CheckFifoParam+0xe6>
      break;
 8001f08:	bf00      	nop
 8001f0a:	e002      	b.n	8001f12 <DMA_CheckFifoParam+0xe6>
      break;   
 8001f0c:	bf00      	nop
 8001f0e:	e000      	b.n	8001f12 <DMA_CheckFifoParam+0xe6>
      break;
 8001f10:	bf00      	nop
    }
  } 
  
  return status; 
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b089      	sub	sp, #36	; 0x24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f36:	2300      	movs	r3, #0
 8001f38:	61fb      	str	r3, [r7, #28]
 8001f3a:	e165      	b.n	8002208 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	f040 8154 	bne.w	8002202 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d00b      	beq.n	8001f7a <HAL_GPIO_Init+0x5a>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d007      	beq.n	8001f7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f6e:	2b11      	cmp	r3, #17
 8001f70:	d003      	beq.n	8001f7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b12      	cmp	r3, #18
 8001f78:	d130      	bne.n	8001fdc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	2203      	movs	r2, #3
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	091b      	lsrs	r3, r3, #4
 8001fc6:	f003 0201 	and.w	r2, r3, #1
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b02      	cmp	r3, #2
 8002012:	d003      	beq.n	800201c <HAL_GPIO_Init+0xfc>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b12      	cmp	r3, #18
 800201a:	d123      	bne.n	8002064 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	08da      	lsrs	r2, r3, #3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3208      	adds	r2, #8
 8002024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002028:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	220f      	movs	r2, #15
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4013      	ands	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	08da      	lsrs	r2, r3, #3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3208      	adds	r2, #8
 800205e:	69b9      	ldr	r1, [r7, #24]
 8002060:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	2203      	movs	r2, #3
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 0203 	and.w	r2, r3, #3
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 80ae 	beq.w	8002202 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	4b5c      	ldr	r3, [pc, #368]	; (800221c <HAL_GPIO_Init+0x2fc>)
 80020ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ae:	4a5b      	ldr	r2, [pc, #364]	; (800221c <HAL_GPIO_Init+0x2fc>)
 80020b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020b4:	6453      	str	r3, [r2, #68]	; 0x44
 80020b6:	4b59      	ldr	r3, [pc, #356]	; (800221c <HAL_GPIO_Init+0x2fc>)
 80020b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020c2:	4a57      	ldr	r2, [pc, #348]	; (8002220 <HAL_GPIO_Init+0x300>)
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	089b      	lsrs	r3, r3, #2
 80020c8:	3302      	adds	r3, #2
 80020ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	220f      	movs	r2, #15
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43db      	mvns	r3, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4013      	ands	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a4e      	ldr	r2, [pc, #312]	; (8002224 <HAL_GPIO_Init+0x304>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d025      	beq.n	800213a <HAL_GPIO_Init+0x21a>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a4d      	ldr	r2, [pc, #308]	; (8002228 <HAL_GPIO_Init+0x308>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d01f      	beq.n	8002136 <HAL_GPIO_Init+0x216>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a4c      	ldr	r2, [pc, #304]	; (800222c <HAL_GPIO_Init+0x30c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d019      	beq.n	8002132 <HAL_GPIO_Init+0x212>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a4b      	ldr	r2, [pc, #300]	; (8002230 <HAL_GPIO_Init+0x310>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d013      	beq.n	800212e <HAL_GPIO_Init+0x20e>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a4a      	ldr	r2, [pc, #296]	; (8002234 <HAL_GPIO_Init+0x314>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d00d      	beq.n	800212a <HAL_GPIO_Init+0x20a>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a49      	ldr	r2, [pc, #292]	; (8002238 <HAL_GPIO_Init+0x318>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d007      	beq.n	8002126 <HAL_GPIO_Init+0x206>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a48      	ldr	r2, [pc, #288]	; (800223c <HAL_GPIO_Init+0x31c>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d101      	bne.n	8002122 <HAL_GPIO_Init+0x202>
 800211e:	2306      	movs	r3, #6
 8002120:	e00c      	b.n	800213c <HAL_GPIO_Init+0x21c>
 8002122:	2307      	movs	r3, #7
 8002124:	e00a      	b.n	800213c <HAL_GPIO_Init+0x21c>
 8002126:	2305      	movs	r3, #5
 8002128:	e008      	b.n	800213c <HAL_GPIO_Init+0x21c>
 800212a:	2304      	movs	r3, #4
 800212c:	e006      	b.n	800213c <HAL_GPIO_Init+0x21c>
 800212e:	2303      	movs	r3, #3
 8002130:	e004      	b.n	800213c <HAL_GPIO_Init+0x21c>
 8002132:	2302      	movs	r3, #2
 8002134:	e002      	b.n	800213c <HAL_GPIO_Init+0x21c>
 8002136:	2301      	movs	r3, #1
 8002138:	e000      	b.n	800213c <HAL_GPIO_Init+0x21c>
 800213a:	2300      	movs	r3, #0
 800213c:	69fa      	ldr	r2, [r7, #28]
 800213e:	f002 0203 	and.w	r2, r2, #3
 8002142:	0092      	lsls	r2, r2, #2
 8002144:	4093      	lsls	r3, r2
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4313      	orrs	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800214c:	4934      	ldr	r1, [pc, #208]	; (8002220 <HAL_GPIO_Init+0x300>)
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	089b      	lsrs	r3, r3, #2
 8002152:	3302      	adds	r3, #2
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800215a:	4b39      	ldr	r3, [pc, #228]	; (8002240 <HAL_GPIO_Init+0x320>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	43db      	mvns	r3, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4013      	ands	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800217e:	4a30      	ldr	r2, [pc, #192]	; (8002240 <HAL_GPIO_Init+0x320>)
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002184:	4b2e      	ldr	r3, [pc, #184]	; (8002240 <HAL_GPIO_Init+0x320>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d003      	beq.n	80021a8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021a8:	4a25      	ldr	r2, [pc, #148]	; (8002240 <HAL_GPIO_Init+0x320>)
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ae:	4b24      	ldr	r3, [pc, #144]	; (8002240 <HAL_GPIO_Init+0x320>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	43db      	mvns	r3, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4013      	ands	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021d2:	4a1b      	ldr	r2, [pc, #108]	; (8002240 <HAL_GPIO_Init+0x320>)
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021d8:	4b19      	ldr	r3, [pc, #100]	; (8002240 <HAL_GPIO_Init+0x320>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021fc:	4a10      	ldr	r2, [pc, #64]	; (8002240 <HAL_GPIO_Init+0x320>)
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	3301      	adds	r3, #1
 8002206:	61fb      	str	r3, [r7, #28]
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	2b0f      	cmp	r3, #15
 800220c:	f67f ae96 	bls.w	8001f3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002210:	bf00      	nop
 8002212:	3724      	adds	r7, #36	; 0x24
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	40023800 	.word	0x40023800
 8002220:	40013800 	.word	0x40013800
 8002224:	40020000 	.word	0x40020000
 8002228:	40020400 	.word	0x40020400
 800222c:	40020800 	.word	0x40020800
 8002230:	40020c00 	.word	0x40020c00
 8002234:	40021000 	.word	0x40021000
 8002238:	40021400 	.word	0x40021400
 800223c:	40021800 	.word	0x40021800
 8002240:	40013c00 	.word	0x40013c00

08002244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	807b      	strh	r3, [r7, #2]
 8002250:	4613      	mov	r3, r2
 8002252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002254:	787b      	ldrb	r3, [r7, #1]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800225a:	887a      	ldrh	r2, [r7, #2]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002260:	e003      	b.n	800226a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002262:	887b      	ldrh	r3, [r7, #2]
 8002264:	041a      	lsls	r2, r3, #16
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	619a      	str	r2, [r3, #24]
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
	...

08002278 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e11f      	b.n	80024ca <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d106      	bne.n	80022a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7fe fa92 	bl	80007c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2224      	movs	r2, #36	; 0x24
 80022a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0201 	bic.w	r2, r2, #1
 80022ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022dc:	f001 f8be 	bl	800345c <HAL_RCC_GetPCLK1Freq>
 80022e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	4a7b      	ldr	r2, [pc, #492]	; (80024d4 <HAL_I2C_Init+0x25c>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d807      	bhi.n	80022fc <HAL_I2C_Init+0x84>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	4a7a      	ldr	r2, [pc, #488]	; (80024d8 <HAL_I2C_Init+0x260>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	bf94      	ite	ls
 80022f4:	2301      	movls	r3, #1
 80022f6:	2300      	movhi	r3, #0
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	e006      	b.n	800230a <HAL_I2C_Init+0x92>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4a77      	ldr	r2, [pc, #476]	; (80024dc <HAL_I2C_Init+0x264>)
 8002300:	4293      	cmp	r3, r2
 8002302:	bf94      	ite	ls
 8002304:	2301      	movls	r3, #1
 8002306:	2300      	movhi	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e0db      	b.n	80024ca <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	4a72      	ldr	r2, [pc, #456]	; (80024e0 <HAL_I2C_Init+0x268>)
 8002316:	fba2 2303 	umull	r2, r3, r2, r3
 800231a:	0c9b      	lsrs	r3, r3, #18
 800231c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	430a      	orrs	r2, r1
 8002330:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	4a64      	ldr	r2, [pc, #400]	; (80024d4 <HAL_I2C_Init+0x25c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d802      	bhi.n	800234c <HAL_I2C_Init+0xd4>
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	3301      	adds	r3, #1
 800234a:	e009      	b.n	8002360 <HAL_I2C_Init+0xe8>
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002352:	fb02 f303 	mul.w	r3, r2, r3
 8002356:	4a63      	ldr	r2, [pc, #396]	; (80024e4 <HAL_I2C_Init+0x26c>)
 8002358:	fba2 2303 	umull	r2, r3, r2, r3
 800235c:	099b      	lsrs	r3, r3, #6
 800235e:	3301      	adds	r3, #1
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6812      	ldr	r2, [r2, #0]
 8002364:	430b      	orrs	r3, r1
 8002366:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002372:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	4956      	ldr	r1, [pc, #344]	; (80024d4 <HAL_I2C_Init+0x25c>)
 800237c:	428b      	cmp	r3, r1
 800237e:	d80d      	bhi.n	800239c <HAL_I2C_Init+0x124>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	1e59      	subs	r1, r3, #1
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	fbb1 f3f3 	udiv	r3, r1, r3
 800238e:	3301      	adds	r3, #1
 8002390:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002394:	2b04      	cmp	r3, #4
 8002396:	bf38      	it	cc
 8002398:	2304      	movcc	r3, #4
 800239a:	e04f      	b.n	800243c <HAL_I2C_Init+0x1c4>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d111      	bne.n	80023c8 <HAL_I2C_Init+0x150>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	1e58      	subs	r0, r3, #1
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6859      	ldr	r1, [r3, #4]
 80023ac:	460b      	mov	r3, r1
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	440b      	add	r3, r1
 80023b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b6:	3301      	adds	r3, #1
 80023b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023bc:	2b00      	cmp	r3, #0
 80023be:	bf0c      	ite	eq
 80023c0:	2301      	moveq	r3, #1
 80023c2:	2300      	movne	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	e012      	b.n	80023ee <HAL_I2C_Init+0x176>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	1e58      	subs	r0, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6859      	ldr	r1, [r3, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	0099      	lsls	r1, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	fbb0 f3f3 	udiv	r3, r0, r3
 80023de:	3301      	adds	r3, #1
 80023e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	bf0c      	ite	eq
 80023e8:	2301      	moveq	r3, #1
 80023ea:	2300      	movne	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_I2C_Init+0x17e>
 80023f2:	2301      	movs	r3, #1
 80023f4:	e022      	b.n	800243c <HAL_I2C_Init+0x1c4>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10e      	bne.n	800241c <HAL_I2C_Init+0x1a4>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	1e58      	subs	r0, r3, #1
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6859      	ldr	r1, [r3, #4]
 8002406:	460b      	mov	r3, r1
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	440b      	add	r3, r1
 800240c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002410:	3301      	adds	r3, #1
 8002412:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800241a:	e00f      	b.n	800243c <HAL_I2C_Init+0x1c4>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	1e58      	subs	r0, r3, #1
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6859      	ldr	r1, [r3, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	0099      	lsls	r1, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002432:	3301      	adds	r3, #1
 8002434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002438:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	6809      	ldr	r1, [r1, #0]
 8002440:	4313      	orrs	r3, r2
 8002442:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69da      	ldr	r2, [r3, #28]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800246a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6911      	ldr	r1, [r2, #16]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	68d2      	ldr	r2, [r2, #12]
 8002476:	4311      	orrs	r1, r2
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	6812      	ldr	r2, [r2, #0]
 800247c:	430b      	orrs	r3, r1
 800247e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695a      	ldr	r2, [r3, #20]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0201 	orr.w	r2, r2, #1
 80024aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2220      	movs	r2, #32
 80024b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	000186a0 	.word	0x000186a0
 80024d8:	001e847f 	.word	0x001e847f
 80024dc:	003d08ff 	.word	0x003d08ff
 80024e0:	431bde83 	.word	0x431bde83
 80024e4:	10624dd3 	.word	0x10624dd3

080024e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b088      	sub	sp, #32
 80024ec:	af02      	add	r7, sp, #8
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	4608      	mov	r0, r1
 80024f2:	4611      	mov	r1, r2
 80024f4:	461a      	mov	r2, r3
 80024f6:	4603      	mov	r3, r0
 80024f8:	817b      	strh	r3, [r7, #10]
 80024fa:	460b      	mov	r3, r1
 80024fc:	813b      	strh	r3, [r7, #8]
 80024fe:	4613      	mov	r3, r2
 8002500:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002502:	f7fe ffe9 	bl	80014d8 <HAL_GetTick>
 8002506:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b20      	cmp	r3, #32
 8002512:	f040 80d9 	bne.w	80026c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	2319      	movs	r3, #25
 800251c:	2201      	movs	r2, #1
 800251e:	496d      	ldr	r1, [pc, #436]	; (80026d4 <HAL_I2C_Mem_Write+0x1ec>)
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 fc7b 	bl	8002e1c <I2C_WaitOnFlagUntilTimeout>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800252c:	2302      	movs	r3, #2
 800252e:	e0cc      	b.n	80026ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <HAL_I2C_Mem_Write+0x56>
 800253a:	2302      	movs	r3, #2
 800253c:	e0c5      	b.n	80026ca <HAL_I2C_Mem_Write+0x1e2>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b01      	cmp	r3, #1
 8002552:	d007      	beq.n	8002564 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 0201 	orr.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002572:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2221      	movs	r2, #33	; 0x21
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2240      	movs	r2, #64	; 0x40
 8002580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6a3a      	ldr	r2, [r7, #32]
 800258e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002594:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259a:	b29a      	uxth	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4a4d      	ldr	r2, [pc, #308]	; (80026d8 <HAL_I2C_Mem_Write+0x1f0>)
 80025a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025a6:	88f8      	ldrh	r0, [r7, #6]
 80025a8:	893a      	ldrh	r2, [r7, #8]
 80025aa:	8979      	ldrh	r1, [r7, #10]
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	9301      	str	r3, [sp, #4]
 80025b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	4603      	mov	r3, r0
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 fab6 	bl	8002b28 <I2C_RequestMemoryWrite>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d052      	beq.n	8002668 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e081      	b.n	80026ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 fcfc 	bl	8002fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00d      	beq.n	80025f2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	2b04      	cmp	r3, #4
 80025dc:	d107      	bne.n	80025ee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e06b      	b.n	80026ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f6:	781a      	ldrb	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002618:	b29b      	uxth	r3, r3
 800261a:	3b01      	subs	r3, #1
 800261c:	b29a      	uxth	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	695b      	ldr	r3, [r3, #20]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b04      	cmp	r3, #4
 800262e:	d11b      	bne.n	8002668 <HAL_I2C_Mem_Write+0x180>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002634:	2b00      	cmp	r3, #0
 8002636:	d017      	beq.n	8002668 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	781a      	ldrb	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002652:	3b01      	subs	r3, #1
 8002654:	b29a      	uxth	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265e:	b29b      	uxth	r3, r3
 8002660:	3b01      	subs	r3, #1
 8002662:	b29a      	uxth	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1aa      	bne.n	80025c6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 fce8 	bl	800304a <I2C_WaitOnBTFFlagUntilTimeout>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00d      	beq.n	800269c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	2b04      	cmp	r3, #4
 8002686:	d107      	bne.n	8002698 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002696:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e016      	b.n	80026ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2220      	movs	r2, #32
 80026b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026c4:	2300      	movs	r3, #0
 80026c6:	e000      	b.n	80026ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80026c8:	2302      	movs	r3, #2
  }
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	00100002 	.word	0x00100002
 80026d8:	ffff0000 	.word	0xffff0000

080026dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08c      	sub	sp, #48	; 0x30
 80026e0:	af02      	add	r7, sp, #8
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	4608      	mov	r0, r1
 80026e6:	4611      	mov	r1, r2
 80026e8:	461a      	mov	r2, r3
 80026ea:	4603      	mov	r3, r0
 80026ec:	817b      	strh	r3, [r7, #10]
 80026ee:	460b      	mov	r3, r1
 80026f0:	813b      	strh	r3, [r7, #8]
 80026f2:	4613      	mov	r3, r2
 80026f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026f6:	f7fe feef 	bl	80014d8 <HAL_GetTick>
 80026fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b20      	cmp	r3, #32
 8002706:	f040 8208 	bne.w	8002b1a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	2319      	movs	r3, #25
 8002710:	2201      	movs	r2, #1
 8002712:	497b      	ldr	r1, [pc, #492]	; (8002900 <HAL_I2C_Mem_Read+0x224>)
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f000 fb81 	bl	8002e1c <I2C_WaitOnFlagUntilTimeout>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002720:	2302      	movs	r3, #2
 8002722:	e1fb      	b.n	8002b1c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800272a:	2b01      	cmp	r3, #1
 800272c:	d101      	bne.n	8002732 <HAL_I2C_Mem_Read+0x56>
 800272e:	2302      	movs	r3, #2
 8002730:	e1f4      	b.n	8002b1c <HAL_I2C_Mem_Read+0x440>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b01      	cmp	r3, #1
 8002746:	d007      	beq.n	8002758 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 0201 	orr.w	r2, r2, #1
 8002756:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002766:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2222      	movs	r2, #34	; 0x22
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2240      	movs	r2, #64	; 0x40
 8002774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002782:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002788:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800278e:	b29a      	uxth	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4a5b      	ldr	r2, [pc, #364]	; (8002904 <HAL_I2C_Mem_Read+0x228>)
 8002798:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800279a:	88f8      	ldrh	r0, [r7, #6]
 800279c:	893a      	ldrh	r2, [r7, #8]
 800279e:	8979      	ldrh	r1, [r7, #10]
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	9301      	str	r3, [sp, #4]
 80027a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	4603      	mov	r3, r0
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 fa50 	bl	8002c50 <I2C_RequestMemoryRead>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e1b0      	b.n	8002b1c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d113      	bne.n	80027ea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027c2:	2300      	movs	r3, #0
 80027c4:	623b      	str	r3, [r7, #32]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	623b      	str	r3, [r7, #32]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	623b      	str	r3, [r7, #32]
 80027d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	e184      	b.n	8002af4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d11b      	bne.n	800282a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002800:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	61fb      	str	r3, [r7, #28]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	61fb      	str	r3, [r7, #28]
 8002816:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	e164      	b.n	8002af4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282e:	2b02      	cmp	r3, #2
 8002830:	d11b      	bne.n	800286a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002840:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002850:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002852:	2300      	movs	r3, #0
 8002854:	61bb      	str	r3, [r7, #24]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	61bb      	str	r3, [r7, #24]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	61bb      	str	r3, [r7, #24]
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	e144      	b.n	8002af4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800286a:	2300      	movs	r3, #0
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	617b      	str	r3, [r7, #20]
 800287e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002880:	e138      	b.n	8002af4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002886:	2b03      	cmp	r3, #3
 8002888:	f200 80f1 	bhi.w	8002a6e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002890:	2b01      	cmp	r3, #1
 8002892:	d123      	bne.n	80028dc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002896:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f000 fc17 	bl	80030cc <I2C_WaitOnRXNEFlagUntilTimeout>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e139      	b.n	8002b1c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	691a      	ldr	r2, [r3, #16]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	1c5a      	adds	r2, r3, #1
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c4:	3b01      	subs	r3, #1
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	3b01      	subs	r3, #1
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028da:	e10b      	b.n	8002af4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d14e      	bne.n	8002982 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ea:	2200      	movs	r2, #0
 80028ec:	4906      	ldr	r1, [pc, #24]	; (8002908 <HAL_I2C_Mem_Read+0x22c>)
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 fa94 	bl	8002e1c <I2C_WaitOnFlagUntilTimeout>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d008      	beq.n	800290c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e10e      	b.n	8002b1c <HAL_I2C_Mem_Read+0x440>
 80028fe:	bf00      	nop
 8002900:	00100002 	.word	0x00100002
 8002904:	ffff0000 	.word	0xffff0000
 8002908:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800291a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	691a      	ldr	r2, [r3, #16]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292e:	1c5a      	adds	r2, r3, #1
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002938:	3b01      	subs	r3, #1
 800293a:	b29a      	uxth	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002944:	b29b      	uxth	r3, r3
 8002946:	3b01      	subs	r3, #1
 8002948:	b29a      	uxth	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	691a      	ldr	r2, [r3, #16]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	1c5a      	adds	r2, r3, #1
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296a:	3b01      	subs	r3, #1
 800296c:	b29a      	uxth	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002976:	b29b      	uxth	r3, r3
 8002978:	3b01      	subs	r3, #1
 800297a:	b29a      	uxth	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002980:	e0b8      	b.n	8002af4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002988:	2200      	movs	r2, #0
 800298a:	4966      	ldr	r1, [pc, #408]	; (8002b24 <HAL_I2C_Mem_Read+0x448>)
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f000 fa45 	bl	8002e1c <I2C_WaitOnFlagUntilTimeout>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e0bf      	b.n	8002b1c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	691a      	ldr	r2, [r3, #16]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	1c5a      	adds	r2, r3, #1
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	3b01      	subs	r3, #1
 80029d8:	b29a      	uxth	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e4:	2200      	movs	r2, #0
 80029e6:	494f      	ldr	r1, [pc, #316]	; (8002b24 <HAL_I2C_Mem_Read+0x448>)
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 fa17 	bl	8002e1c <I2C_WaitOnFlagUntilTimeout>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e091      	b.n	8002b1c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	691a      	ldr	r2, [r3, #16]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	1c5a      	adds	r2, r3, #1
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a24:	3b01      	subs	r3, #1
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	3b01      	subs	r3, #1
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a56:	3b01      	subs	r3, #1
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a6c:	e042      	b.n	8002af4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f000 fb2a 	bl	80030cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e04c      	b.n	8002b1c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	691a      	ldr	r2, [r3, #16]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	1c5a      	adds	r2, r3, #1
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d118      	bne.n	8002af4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	691a      	ldr	r2, [r3, #16]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f47f aec2 	bne.w	8002882 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2220      	movs	r2, #32
 8002b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	e000      	b.n	8002b1c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002b1a:	2302      	movs	r3, #2
  }
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3728      	adds	r7, #40	; 0x28
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	00010004 	.word	0x00010004

08002b28 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b088      	sub	sp, #32
 8002b2c:	af02      	add	r7, sp, #8
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	4608      	mov	r0, r1
 8002b32:	4611      	mov	r1, r2
 8002b34:	461a      	mov	r2, r3
 8002b36:	4603      	mov	r3, r0
 8002b38:	817b      	strh	r3, [r7, #10]
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	813b      	strh	r3, [r7, #8]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	9300      	str	r3, [sp, #0]
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 f95c 	bl	8002e1c <I2C_WaitOnFlagUntilTimeout>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00c      	beq.n	8002b84 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e05f      	b.n	8002c44 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b84:	897b      	ldrh	r3, [r7, #10]
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	461a      	mov	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b92:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	6a3a      	ldr	r2, [r7, #32]
 8002b98:	492c      	ldr	r1, [pc, #176]	; (8002c4c <I2C_RequestMemoryWrite+0x124>)
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 f995 	bl	8002eca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e04c      	b.n	8002c44 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	617b      	str	r3, [r7, #20]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc2:	6a39      	ldr	r1, [r7, #32]
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 f9ff 	bl	8002fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00d      	beq.n	8002bec <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d107      	bne.n	8002be8 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002be6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e02b      	b.n	8002c44 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bec:	88fb      	ldrh	r3, [r7, #6]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d105      	bne.n	8002bfe <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bf2:	893b      	ldrh	r3, [r7, #8]
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	611a      	str	r2, [r3, #16]
 8002bfc:	e021      	b.n	8002c42 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002bfe:	893b      	ldrh	r3, [r7, #8]
 8002c00:	0a1b      	lsrs	r3, r3, #8
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c0e:	6a39      	ldr	r1, [r7, #32]
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f000 f9d9 	bl	8002fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00d      	beq.n	8002c38 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d107      	bne.n	8002c34 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c32:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e005      	b.n	8002c44 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c38:	893b      	ldrh	r3, [r7, #8]
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	00010002 	.word	0x00010002

08002c50 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b088      	sub	sp, #32
 8002c54:	af02      	add	r7, sp, #8
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	4608      	mov	r0, r1
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4603      	mov	r3, r0
 8002c60:	817b      	strh	r3, [r7, #10]
 8002c62:	460b      	mov	r3, r1
 8002c64:	813b      	strh	r3, [r7, #8]
 8002c66:	4613      	mov	r3, r2
 8002c68:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c78:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 f8c0 	bl	8002e1c <I2C_WaitOnFlagUntilTimeout>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00c      	beq.n	8002cbc <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d003      	beq.n	8002cb8 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e0a9      	b.n	8002e10 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cbc:	897b      	ldrh	r3, [r7, #10]
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002cca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	6a3a      	ldr	r2, [r7, #32]
 8002cd0:	4951      	ldr	r1, [pc, #324]	; (8002e18 <I2C_RequestMemoryRead+0x1c8>)
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f8f9 	bl	8002eca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e096      	b.n	8002e10 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cfa:	6a39      	ldr	r1, [r7, #32]
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 f963 	bl	8002fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00d      	beq.n	8002d24 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	2b04      	cmp	r3, #4
 8002d0e:	d107      	bne.n	8002d20 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d1e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e075      	b.n	8002e10 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d24:	88fb      	ldrh	r3, [r7, #6]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d105      	bne.n	8002d36 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d2a:	893b      	ldrh	r3, [r7, #8]
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	611a      	str	r2, [r3, #16]
 8002d34:	e021      	b.n	8002d7a <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d36:	893b      	ldrh	r3, [r7, #8]
 8002d38:	0a1b      	lsrs	r3, r3, #8
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d46:	6a39      	ldr	r1, [r7, #32]
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 f93d 	bl	8002fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00d      	beq.n	8002d70 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	d107      	bne.n	8002d6c <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d6a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e04f      	b.n	8002e10 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d70:	893b      	ldrh	r3, [r7, #8]
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7c:	6a39      	ldr	r1, [r7, #32]
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 f922 	bl	8002fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00d      	beq.n	8002da6 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d107      	bne.n	8002da2 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e034      	b.n	8002e10 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002db4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 f82a 	bl	8002e1c <I2C_WaitOnFlagUntilTimeout>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00c      	beq.n	8002de8 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002de2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e013      	b.n	8002e10 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002de8:	897b      	ldrh	r3, [r7, #10]
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	6a3a      	ldr	r2, [r7, #32]
 8002dfc:	4906      	ldr	r1, [pc, #24]	; (8002e18 <I2C_RequestMemoryRead+0x1c8>)
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 f863 	bl	8002eca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	00010002 	.word	0x00010002

08002e1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	603b      	str	r3, [r7, #0]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e2c:	e025      	b.n	8002e7a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e34:	d021      	beq.n	8002e7a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e36:	f7fe fb4f 	bl	80014d8 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d302      	bcc.n	8002e4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d116      	bne.n	8002e7a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2220      	movs	r2, #32
 8002e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f043 0220 	orr.w	r2, r3, #32
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e023      	b.n	8002ec2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	0c1b      	lsrs	r3, r3, #16
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d10d      	bne.n	8002ea0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	43da      	mvns	r2, r3
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	bf0c      	ite	eq
 8002e96:	2301      	moveq	r3, #1
 8002e98:	2300      	movne	r3, #0
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	e00c      	b.n	8002eba <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	43da      	mvns	r2, r3
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	bf0c      	ite	eq
 8002eb2:	2301      	moveq	r3, #1
 8002eb4:	2300      	movne	r3, #0
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	461a      	mov	r2, r3
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d0b6      	beq.n	8002e2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b084      	sub	sp, #16
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	60f8      	str	r0, [r7, #12]
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
 8002ed6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ed8:	e051      	b.n	8002f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ee8:	d123      	bne.n	8002f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ef8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f02:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f043 0204 	orr.w	r2, r3, #4
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e046      	b.n	8002fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f38:	d021      	beq.n	8002f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f3a:	f7fe facd 	bl	80014d8 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d302      	bcc.n	8002f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d116      	bne.n	8002f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	f043 0220 	orr.w	r2, r3, #32
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e020      	b.n	8002fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	0c1b      	lsrs	r3, r3, #16
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d10c      	bne.n	8002fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	43da      	mvns	r2, r3
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	4013      	ands	r3, r2
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	bf14      	ite	ne
 8002f9a:	2301      	movne	r3, #1
 8002f9c:	2300      	moveq	r3, #0
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	e00b      	b.n	8002fba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	43da      	mvns	r2, r3
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	4013      	ands	r3, r2
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	bf14      	ite	ne
 8002fb4:	2301      	movne	r3, #1
 8002fb6:	2300      	moveq	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d18d      	bne.n	8002eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fd4:	e02d      	b.n	8003032 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 f8ce 	bl	8003178 <I2C_IsAcknowledgeFailed>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e02d      	b.n	8003042 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fec:	d021      	beq.n	8003032 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fee:	f7fe fa73 	bl	80014d8 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d302      	bcc.n	8003004 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d116      	bne.n	8003032 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2220      	movs	r2, #32
 800300e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	f043 0220 	orr.w	r2, r3, #32
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e007      	b.n	8003042 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800303c:	2b80      	cmp	r3, #128	; 0x80
 800303e:	d1ca      	bne.n	8002fd6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b084      	sub	sp, #16
 800304e:	af00      	add	r7, sp, #0
 8003050:	60f8      	str	r0, [r7, #12]
 8003052:	60b9      	str	r1, [r7, #8]
 8003054:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003056:	e02d      	b.n	80030b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 f88d 	bl	8003178 <I2C_IsAcknowledgeFailed>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e02d      	b.n	80030c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306e:	d021      	beq.n	80030b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003070:	f7fe fa32 	bl	80014d8 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	429a      	cmp	r2, r3
 800307e:	d302      	bcc.n	8003086 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d116      	bne.n	80030b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2220      	movs	r2, #32
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	f043 0220 	orr.w	r2, r3, #32
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e007      	b.n	80030c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	f003 0304 	and.w	r3, r3, #4
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d1ca      	bne.n	8003058 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030d8:	e042      	b.n	8003160 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	f003 0310 	and.w	r3, r3, #16
 80030e4:	2b10      	cmp	r3, #16
 80030e6:	d119      	bne.n	800311c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f06f 0210 	mvn.w	r2, #16
 80030f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2220      	movs	r2, #32
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e029      	b.n	8003170 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800311c:	f7fe f9dc 	bl	80014d8 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	429a      	cmp	r2, r3
 800312a:	d302      	bcc.n	8003132 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d116      	bne.n	8003160 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2220      	movs	r2, #32
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	f043 0220 	orr.w	r2, r3, #32
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e007      	b.n	8003170 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316a:	2b40      	cmp	r3, #64	; 0x40
 800316c:	d1b5      	bne.n	80030da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800318a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800318e:	d11b      	bne.n	80031c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003198:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	f043 0204 	orr.w	r2, r3, #4
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e000      	b.n	80031ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
	...

080031d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80031de:	2300      	movs	r3, #0
 80031e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80031e2:	2300      	movs	r3, #0
 80031e4:	603b      	str	r3, [r7, #0]
 80031e6:	4b20      	ldr	r3, [pc, #128]	; (8003268 <HAL_PWREx_EnableOverDrive+0x90>)
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	4a1f      	ldr	r2, [pc, #124]	; (8003268 <HAL_PWREx_EnableOverDrive+0x90>)
 80031ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f0:	6413      	str	r3, [r2, #64]	; 0x40
 80031f2:	4b1d      	ldr	r3, [pc, #116]	; (8003268 <HAL_PWREx_EnableOverDrive+0x90>)
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fa:	603b      	str	r3, [r7, #0]
 80031fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80031fe:	4b1b      	ldr	r3, [pc, #108]	; (800326c <HAL_PWREx_EnableOverDrive+0x94>)
 8003200:	2201      	movs	r2, #1
 8003202:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003204:	f7fe f968 	bl	80014d8 <HAL_GetTick>
 8003208:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800320a:	e009      	b.n	8003220 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800320c:	f7fe f964 	bl	80014d8 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800321a:	d901      	bls.n	8003220 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e01f      	b.n	8003260 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003220:	4b13      	ldr	r3, [pc, #76]	; (8003270 <HAL_PWREx_EnableOverDrive+0x98>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800322c:	d1ee      	bne.n	800320c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800322e:	4b11      	ldr	r3, [pc, #68]	; (8003274 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003230:	2201      	movs	r2, #1
 8003232:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003234:	f7fe f950 	bl	80014d8 <HAL_GetTick>
 8003238:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800323a:	e009      	b.n	8003250 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800323c:	f7fe f94c 	bl	80014d8 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800324a:	d901      	bls.n	8003250 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e007      	b.n	8003260 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003250:	4b07      	ldr	r3, [pc, #28]	; (8003270 <HAL_PWREx_EnableOverDrive+0x98>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003258:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800325c:	d1ee      	bne.n	800323c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40023800 	.word	0x40023800
 800326c:	420e0040 	.word	0x420e0040
 8003270:	40007000 	.word	0x40007000
 8003274:	420e0044 	.word	0x420e0044

08003278 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0cc      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800328c:	4b68      	ldr	r3, [pc, #416]	; (8003430 <HAL_RCC_ClockConfig+0x1b8>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 030f 	and.w	r3, r3, #15
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	429a      	cmp	r2, r3
 8003298:	d90c      	bls.n	80032b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329a:	4b65      	ldr	r3, [pc, #404]	; (8003430 <HAL_RCC_ClockConfig+0x1b8>)
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a2:	4b63      	ldr	r3, [pc, #396]	; (8003430 <HAL_RCC_ClockConfig+0x1b8>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d001      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e0b8      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d020      	beq.n	8003302 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d005      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032cc:	4b59      	ldr	r3, [pc, #356]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	4a58      	ldr	r2, [pc, #352]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d005      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032e4:	4b53      	ldr	r3, [pc, #332]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	4a52      	ldr	r2, [pc, #328]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032f0:	4b50      	ldr	r3, [pc, #320]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	494d      	ldr	r1, [pc, #308]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d044      	beq.n	8003398 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d107      	bne.n	8003326 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003316:	4b47      	ldr	r3, [pc, #284]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d119      	bne.n	8003356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e07f      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d003      	beq.n	8003336 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003332:	2b03      	cmp	r3, #3
 8003334:	d107      	bne.n	8003346 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003336:	4b3f      	ldr	r3, [pc, #252]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d109      	bne.n	8003356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e06f      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003346:	4b3b      	ldr	r3, [pc, #236]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e067      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003356:	4b37      	ldr	r3, [pc, #220]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f023 0203 	bic.w	r2, r3, #3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	4934      	ldr	r1, [pc, #208]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 8003364:	4313      	orrs	r3, r2
 8003366:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003368:	f7fe f8b6 	bl	80014d8 <HAL_GetTick>
 800336c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336e:	e00a      	b.n	8003386 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003370:	f7fe f8b2 	bl	80014d8 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	f241 3288 	movw	r2, #5000	; 0x1388
 800337e:	4293      	cmp	r3, r2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e04f      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003386:	4b2b      	ldr	r3, [pc, #172]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 020c 	and.w	r2, r3, #12
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	429a      	cmp	r2, r3
 8003396:	d1eb      	bne.n	8003370 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003398:	4b25      	ldr	r3, [pc, #148]	; (8003430 <HAL_RCC_ClockConfig+0x1b8>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 030f 	and.w	r3, r3, #15
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d20c      	bcs.n	80033c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a6:	4b22      	ldr	r3, [pc, #136]	; (8003430 <HAL_RCC_ClockConfig+0x1b8>)
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ae:	4b20      	ldr	r3, [pc, #128]	; (8003430 <HAL_RCC_ClockConfig+0x1b8>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d001      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e032      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d008      	beq.n	80033de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033cc:	4b19      	ldr	r3, [pc, #100]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	4916      	ldr	r1, [pc, #88]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d009      	beq.n	80033fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ea:	4b12      	ldr	r3, [pc, #72]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	490e      	ldr	r1, [pc, #56]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033fe:	f000 f855 	bl	80034ac <HAL_RCC_GetSysClockFreq>
 8003402:	4601      	mov	r1, r0
 8003404:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	091b      	lsrs	r3, r3, #4
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	4a0a      	ldr	r2, [pc, #40]	; (8003438 <HAL_RCC_ClockConfig+0x1c0>)
 8003410:	5cd3      	ldrb	r3, [r2, r3]
 8003412:	fa21 f303 	lsr.w	r3, r1, r3
 8003416:	4a09      	ldr	r2, [pc, #36]	; (800343c <HAL_RCC_ClockConfig+0x1c4>)
 8003418:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800341a:	4b09      	ldr	r3, [pc, #36]	; (8003440 <HAL_RCC_ClockConfig+0x1c8>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f7fe f816 	bl	8001450 <HAL_InitTick>

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40023c00 	.word	0x40023c00
 8003434:	40023800 	.word	0x40023800
 8003438:	08005a98 	.word	0x08005a98
 800343c:	20000004 	.word	0x20000004
 8003440:	20000008 	.word	0x20000008

08003444 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003448:	4b03      	ldr	r3, [pc, #12]	; (8003458 <HAL_RCC_GetHCLKFreq+0x14>)
 800344a:	681b      	ldr	r3, [r3, #0]
}
 800344c:	4618      	mov	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	20000004 	.word	0x20000004

0800345c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003460:	f7ff fff0 	bl	8003444 <HAL_RCC_GetHCLKFreq>
 8003464:	4601      	mov	r1, r0
 8003466:	4b05      	ldr	r3, [pc, #20]	; (800347c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	0a9b      	lsrs	r3, r3, #10
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	4a03      	ldr	r2, [pc, #12]	; (8003480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003472:	5cd3      	ldrb	r3, [r2, r3]
 8003474:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003478:	4618      	mov	r0, r3
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40023800 	.word	0x40023800
 8003480:	08005aa8 	.word	0x08005aa8

08003484 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003488:	f7ff ffdc 	bl	8003444 <HAL_RCC_GetHCLKFreq>
 800348c:	4601      	mov	r1, r0
 800348e:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	0b5b      	lsrs	r3, r3, #13
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	4a03      	ldr	r2, [pc, #12]	; (80034a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800349a:	5cd3      	ldrb	r3, [r2, r3]
 800349c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40023800 	.word	0x40023800
 80034a8:	08005aa8 	.word	0x08005aa8

080034ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ae:	b087      	sub	sp, #28
 80034b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80034be:	2300      	movs	r3, #0
 80034c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034c6:	4b9f      	ldr	r3, [pc, #636]	; (8003744 <HAL_RCC_GetSysClockFreq+0x298>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 030c 	and.w	r3, r3, #12
 80034ce:	2b0c      	cmp	r3, #12
 80034d0:	f200 8130 	bhi.w	8003734 <HAL_RCC_GetSysClockFreq+0x288>
 80034d4:	a201      	add	r2, pc, #4	; (adr r2, 80034dc <HAL_RCC_GetSysClockFreq+0x30>)
 80034d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034da:	bf00      	nop
 80034dc:	08003511 	.word	0x08003511
 80034e0:	08003735 	.word	0x08003735
 80034e4:	08003735 	.word	0x08003735
 80034e8:	08003735 	.word	0x08003735
 80034ec:	08003517 	.word	0x08003517
 80034f0:	08003735 	.word	0x08003735
 80034f4:	08003735 	.word	0x08003735
 80034f8:	08003735 	.word	0x08003735
 80034fc:	0800351d 	.word	0x0800351d
 8003500:	08003735 	.word	0x08003735
 8003504:	08003735 	.word	0x08003735
 8003508:	08003735 	.word	0x08003735
 800350c:	0800362b 	.word	0x0800362b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003510:	4b8d      	ldr	r3, [pc, #564]	; (8003748 <HAL_RCC_GetSysClockFreq+0x29c>)
 8003512:	613b      	str	r3, [r7, #16]
       break;
 8003514:	e111      	b.n	800373a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003516:	4b8d      	ldr	r3, [pc, #564]	; (800374c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003518:	613b      	str	r3, [r7, #16]
      break;
 800351a:	e10e      	b.n	800373a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800351c:	4b89      	ldr	r3, [pc, #548]	; (8003744 <HAL_RCC_GetSysClockFreq+0x298>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003524:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003526:	4b87      	ldr	r3, [pc, #540]	; (8003744 <HAL_RCC_GetSysClockFreq+0x298>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d023      	beq.n	800357a <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003532:	4b84      	ldr	r3, [pc, #528]	; (8003744 <HAL_RCC_GetSysClockFreq+0x298>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	099b      	lsrs	r3, r3, #6
 8003538:	f04f 0400 	mov.w	r4, #0
 800353c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003540:	f04f 0200 	mov.w	r2, #0
 8003544:	ea03 0501 	and.w	r5, r3, r1
 8003548:	ea04 0602 	and.w	r6, r4, r2
 800354c:	4a7f      	ldr	r2, [pc, #508]	; (800374c <HAL_RCC_GetSysClockFreq+0x2a0>)
 800354e:	fb02 f106 	mul.w	r1, r2, r6
 8003552:	2200      	movs	r2, #0
 8003554:	fb02 f205 	mul.w	r2, r2, r5
 8003558:	440a      	add	r2, r1
 800355a:	497c      	ldr	r1, [pc, #496]	; (800374c <HAL_RCC_GetSysClockFreq+0x2a0>)
 800355c:	fba5 0101 	umull	r0, r1, r5, r1
 8003560:	1853      	adds	r3, r2, r1
 8003562:	4619      	mov	r1, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f04f 0400 	mov.w	r4, #0
 800356a:	461a      	mov	r2, r3
 800356c:	4623      	mov	r3, r4
 800356e:	f7fc fe9f 	bl	80002b0 <__aeabi_uldivmod>
 8003572:	4603      	mov	r3, r0
 8003574:	460c      	mov	r4, r1
 8003576:	617b      	str	r3, [r7, #20]
 8003578:	e049      	b.n	800360e <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800357a:	4b72      	ldr	r3, [pc, #456]	; (8003744 <HAL_RCC_GetSysClockFreq+0x298>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	099b      	lsrs	r3, r3, #6
 8003580:	f04f 0400 	mov.w	r4, #0
 8003584:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	ea03 0501 	and.w	r5, r3, r1
 8003590:	ea04 0602 	and.w	r6, r4, r2
 8003594:	4629      	mov	r1, r5
 8003596:	4632      	mov	r2, r6
 8003598:	f04f 0300 	mov.w	r3, #0
 800359c:	f04f 0400 	mov.w	r4, #0
 80035a0:	0154      	lsls	r4, r2, #5
 80035a2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80035a6:	014b      	lsls	r3, r1, #5
 80035a8:	4619      	mov	r1, r3
 80035aa:	4622      	mov	r2, r4
 80035ac:	1b49      	subs	r1, r1, r5
 80035ae:	eb62 0206 	sbc.w	r2, r2, r6
 80035b2:	f04f 0300 	mov.w	r3, #0
 80035b6:	f04f 0400 	mov.w	r4, #0
 80035ba:	0194      	lsls	r4, r2, #6
 80035bc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80035c0:	018b      	lsls	r3, r1, #6
 80035c2:	1a5b      	subs	r3, r3, r1
 80035c4:	eb64 0402 	sbc.w	r4, r4, r2
 80035c8:	f04f 0100 	mov.w	r1, #0
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	00e2      	lsls	r2, r4, #3
 80035d2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80035d6:	00d9      	lsls	r1, r3, #3
 80035d8:	460b      	mov	r3, r1
 80035da:	4614      	mov	r4, r2
 80035dc:	195b      	adds	r3, r3, r5
 80035de:	eb44 0406 	adc.w	r4, r4, r6
 80035e2:	f04f 0100 	mov.w	r1, #0
 80035e6:	f04f 0200 	mov.w	r2, #0
 80035ea:	02a2      	lsls	r2, r4, #10
 80035ec:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80035f0:	0299      	lsls	r1, r3, #10
 80035f2:	460b      	mov	r3, r1
 80035f4:	4614      	mov	r4, r2
 80035f6:	4618      	mov	r0, r3
 80035f8:	4621      	mov	r1, r4
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f04f 0400 	mov.w	r4, #0
 8003600:	461a      	mov	r2, r3
 8003602:	4623      	mov	r3, r4
 8003604:	f7fc fe54 	bl	80002b0 <__aeabi_uldivmod>
 8003608:	4603      	mov	r3, r0
 800360a:	460c      	mov	r4, r1
 800360c:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800360e:	4b4d      	ldr	r3, [pc, #308]	; (8003744 <HAL_RCC_GetSysClockFreq+0x298>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	0c1b      	lsrs	r3, r3, #16
 8003614:	f003 0303 	and.w	r3, r3, #3
 8003618:	3301      	adds	r3, #1
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	fbb2 f3f3 	udiv	r3, r2, r3
 8003626:	613b      	str	r3, [r7, #16]
      break;
 8003628:	e087      	b.n	800373a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800362a:	4b46      	ldr	r3, [pc, #280]	; (8003744 <HAL_RCC_GetSysClockFreq+0x298>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003632:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003634:	4b43      	ldr	r3, [pc, #268]	; (8003744 <HAL_RCC_GetSysClockFreq+0x298>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d023      	beq.n	8003688 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003640:	4b40      	ldr	r3, [pc, #256]	; (8003744 <HAL_RCC_GetSysClockFreq+0x298>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	099b      	lsrs	r3, r3, #6
 8003646:	f04f 0400 	mov.w	r4, #0
 800364a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800364e:	f04f 0200 	mov.w	r2, #0
 8003652:	ea03 0501 	and.w	r5, r3, r1
 8003656:	ea04 0602 	and.w	r6, r4, r2
 800365a:	4a3c      	ldr	r2, [pc, #240]	; (800374c <HAL_RCC_GetSysClockFreq+0x2a0>)
 800365c:	fb02 f106 	mul.w	r1, r2, r6
 8003660:	2200      	movs	r2, #0
 8003662:	fb02 f205 	mul.w	r2, r2, r5
 8003666:	440a      	add	r2, r1
 8003668:	4938      	ldr	r1, [pc, #224]	; (800374c <HAL_RCC_GetSysClockFreq+0x2a0>)
 800366a:	fba5 0101 	umull	r0, r1, r5, r1
 800366e:	1853      	adds	r3, r2, r1
 8003670:	4619      	mov	r1, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f04f 0400 	mov.w	r4, #0
 8003678:	461a      	mov	r2, r3
 800367a:	4623      	mov	r3, r4
 800367c:	f7fc fe18 	bl	80002b0 <__aeabi_uldivmod>
 8003680:	4603      	mov	r3, r0
 8003682:	460c      	mov	r4, r1
 8003684:	617b      	str	r3, [r7, #20]
 8003686:	e049      	b.n	800371c <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003688:	4b2e      	ldr	r3, [pc, #184]	; (8003744 <HAL_RCC_GetSysClockFreq+0x298>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	099b      	lsrs	r3, r3, #6
 800368e:	f04f 0400 	mov.w	r4, #0
 8003692:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003696:	f04f 0200 	mov.w	r2, #0
 800369a:	ea03 0501 	and.w	r5, r3, r1
 800369e:	ea04 0602 	and.w	r6, r4, r2
 80036a2:	4629      	mov	r1, r5
 80036a4:	4632      	mov	r2, r6
 80036a6:	f04f 0300 	mov.w	r3, #0
 80036aa:	f04f 0400 	mov.w	r4, #0
 80036ae:	0154      	lsls	r4, r2, #5
 80036b0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80036b4:	014b      	lsls	r3, r1, #5
 80036b6:	4619      	mov	r1, r3
 80036b8:	4622      	mov	r2, r4
 80036ba:	1b49      	subs	r1, r1, r5
 80036bc:	eb62 0206 	sbc.w	r2, r2, r6
 80036c0:	f04f 0300 	mov.w	r3, #0
 80036c4:	f04f 0400 	mov.w	r4, #0
 80036c8:	0194      	lsls	r4, r2, #6
 80036ca:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80036ce:	018b      	lsls	r3, r1, #6
 80036d0:	1a5b      	subs	r3, r3, r1
 80036d2:	eb64 0402 	sbc.w	r4, r4, r2
 80036d6:	f04f 0100 	mov.w	r1, #0
 80036da:	f04f 0200 	mov.w	r2, #0
 80036de:	00e2      	lsls	r2, r4, #3
 80036e0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80036e4:	00d9      	lsls	r1, r3, #3
 80036e6:	460b      	mov	r3, r1
 80036e8:	4614      	mov	r4, r2
 80036ea:	195b      	adds	r3, r3, r5
 80036ec:	eb44 0406 	adc.w	r4, r4, r6
 80036f0:	f04f 0100 	mov.w	r1, #0
 80036f4:	f04f 0200 	mov.w	r2, #0
 80036f8:	02a2      	lsls	r2, r4, #10
 80036fa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80036fe:	0299      	lsls	r1, r3, #10
 8003700:	460b      	mov	r3, r1
 8003702:	4614      	mov	r4, r2
 8003704:	4618      	mov	r0, r3
 8003706:	4621      	mov	r1, r4
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f04f 0400 	mov.w	r4, #0
 800370e:	461a      	mov	r2, r3
 8003710:	4623      	mov	r3, r4
 8003712:	f7fc fdcd 	bl	80002b0 <__aeabi_uldivmod>
 8003716:	4603      	mov	r3, r0
 8003718:	460c      	mov	r4, r1
 800371a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800371c:	4b09      	ldr	r3, [pc, #36]	; (8003744 <HAL_RCC_GetSysClockFreq+0x298>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	0f1b      	lsrs	r3, r3, #28
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003730:	613b      	str	r3, [r7, #16]
      break;
 8003732:	e002      	b.n	800373a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003734:	4b04      	ldr	r3, [pc, #16]	; (8003748 <HAL_RCC_GetSysClockFreq+0x29c>)
 8003736:	613b      	str	r3, [r7, #16]
      break;
 8003738:	bf00      	nop
    }
  }
  return sysclockfreq;
 800373a:	693b      	ldr	r3, [r7, #16]
}
 800373c:	4618      	mov	r0, r3
 800373e:	371c      	adds	r7, #28
 8003740:	46bd      	mov	sp, r7
 8003742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003744:	40023800 	.word	0x40023800
 8003748:	00f42400 	.word	0x00f42400
 800374c:	017d7840 	.word	0x017d7840

08003750 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 8083 	beq.w	8003870 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800376a:	4b95      	ldr	r3, [pc, #596]	; (80039c0 <HAL_RCC_OscConfig+0x270>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 030c 	and.w	r3, r3, #12
 8003772:	2b04      	cmp	r3, #4
 8003774:	d019      	beq.n	80037aa <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003776:	4b92      	ldr	r3, [pc, #584]	; (80039c0 <HAL_RCC_OscConfig+0x270>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800377e:	2b08      	cmp	r3, #8
 8003780:	d106      	bne.n	8003790 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003782:	4b8f      	ldr	r3, [pc, #572]	; (80039c0 <HAL_RCC_OscConfig+0x270>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800378a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800378e:	d00c      	beq.n	80037aa <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003790:	4b8b      	ldr	r3, [pc, #556]	; (80039c0 <HAL_RCC_OscConfig+0x270>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003798:	2b0c      	cmp	r3, #12
 800379a:	d112      	bne.n	80037c2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800379c:	4b88      	ldr	r3, [pc, #544]	; (80039c0 <HAL_RCC_OscConfig+0x270>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037a8:	d10b      	bne.n	80037c2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037aa:	4b85      	ldr	r3, [pc, #532]	; (80039c0 <HAL_RCC_OscConfig+0x270>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d05b      	beq.n	800386e <HAL_RCC_OscConfig+0x11e>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d157      	bne.n	800386e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e216      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ca:	d106      	bne.n	80037da <HAL_RCC_OscConfig+0x8a>
 80037cc:	4b7c      	ldr	r3, [pc, #496]	; (80039c0 <HAL_RCC_OscConfig+0x270>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a7b      	ldr	r2, [pc, #492]	; (80039c0 <HAL_RCC_OscConfig+0x270>)
 80037d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d6:	6013      	str	r3, [r2, #0]
 80037d8:	e01d      	b.n	8003816 <HAL_RCC_OscConfig+0xc6>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037e2:	d10c      	bne.n	80037fe <HAL_RCC_OscConfig+0xae>
 80037e4:	4b76      	ldr	r3, [pc, #472]	; (80039c0 <HAL_RCC_OscConfig+0x270>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a75      	ldr	r2, [pc, #468]	; (80039c0 <HAL_RCC_OscConfig+0x270>)
 80037ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037ee:	6013      	str	r3, [r2, #0]
 80037f0:	4b73      	ldr	r3, [pc, #460]	; (80039c0 <HAL_RCC_OscConfig+0x270>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a72      	ldr	r2, [pc, #456]	; (80039c0 <HAL_RCC_OscConfig+0x270>)
 80037f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037fa:	6013      	str	r3, [r2, #0]
 80037fc:	e00b      	b.n	8003816 <HAL_RCC_OscConfig+0xc6>
 80037fe:	4b70      	ldr	r3, [pc, #448]	; (80039c0 <HAL_RCC_OscConfig+0x270>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a6f      	ldr	r2, [pc, #444]	; (80039c0 <HAL_RCC_OscConfig+0x270>)
 8003804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003808:	6013      	str	r3, [r2, #0]
 800380a:	4b6d      	ldr	r3, [pc, #436]	; (80039c0 <HAL_RCC_OscConfig+0x270>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a6c      	ldr	r2, [pc, #432]	; (80039c0 <HAL_RCC_OscConfig+0x270>)
 8003810:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003814:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d013      	beq.n	8003846 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381e:	f7fd fe5b 	bl	80014d8 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003826:	f7fd fe57 	bl	80014d8 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b64      	cmp	r3, #100	; 0x64
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e1db      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003838:	4b61      	ldr	r3, [pc, #388]	; (80039c0 <HAL_RCC_OscConfig+0x270>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0f0      	beq.n	8003826 <HAL_RCC_OscConfig+0xd6>
 8003844:	e014      	b.n	8003870 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003846:	f7fd fe47 	bl	80014d8 <HAL_GetTick>
 800384a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800384c:	e008      	b.n	8003860 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800384e:	f7fd fe43 	bl	80014d8 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b64      	cmp	r3, #100	; 0x64
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e1c7      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003860:	4b57      	ldr	r3, [pc, #348]	; (80039c0 <HAL_RCC_OscConfig+0x270>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1f0      	bne.n	800384e <HAL_RCC_OscConfig+0xfe>
 800386c:	e000      	b.n	8003870 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800386e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d06f      	beq.n	800395c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800387c:	4b50      	ldr	r3, [pc, #320]	; (80039c0 <HAL_RCC_OscConfig+0x270>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f003 030c 	and.w	r3, r3, #12
 8003884:	2b00      	cmp	r3, #0
 8003886:	d017      	beq.n	80038b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003888:	4b4d      	ldr	r3, [pc, #308]	; (80039c0 <HAL_RCC_OscConfig+0x270>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003890:	2b08      	cmp	r3, #8
 8003892:	d105      	bne.n	80038a0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003894:	4b4a      	ldr	r3, [pc, #296]	; (80039c0 <HAL_RCC_OscConfig+0x270>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00b      	beq.n	80038b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038a0:	4b47      	ldr	r3, [pc, #284]	; (80039c0 <HAL_RCC_OscConfig+0x270>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80038a8:	2b0c      	cmp	r3, #12
 80038aa:	d11c      	bne.n	80038e6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ac:	4b44      	ldr	r3, [pc, #272]	; (80039c0 <HAL_RCC_OscConfig+0x270>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d116      	bne.n	80038e6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038b8:	4b41      	ldr	r3, [pc, #260]	; (80039c0 <HAL_RCC_OscConfig+0x270>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_RCC_OscConfig+0x180>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d001      	beq.n	80038d0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e18f      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d0:	4b3b      	ldr	r3, [pc, #236]	; (80039c0 <HAL_RCC_OscConfig+0x270>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	4938      	ldr	r1, [pc, #224]	; (80039c0 <HAL_RCC_OscConfig+0x270>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038e4:	e03a      	b.n	800395c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d020      	beq.n	8003930 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038ee:	4b35      	ldr	r3, [pc, #212]	; (80039c4 <HAL_RCC_OscConfig+0x274>)
 80038f0:	2201      	movs	r2, #1
 80038f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f4:	f7fd fdf0 	bl	80014d8 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038fc:	f7fd fdec 	bl	80014d8 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e170      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800390e:	4b2c      	ldr	r3, [pc, #176]	; (80039c0 <HAL_RCC_OscConfig+0x270>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0f0      	beq.n	80038fc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800391a:	4b29      	ldr	r3, [pc, #164]	; (80039c0 <HAL_RCC_OscConfig+0x270>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	4925      	ldr	r1, [pc, #148]	; (80039c0 <HAL_RCC_OscConfig+0x270>)
 800392a:	4313      	orrs	r3, r2
 800392c:	600b      	str	r3, [r1, #0]
 800392e:	e015      	b.n	800395c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003930:	4b24      	ldr	r3, [pc, #144]	; (80039c4 <HAL_RCC_OscConfig+0x274>)
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003936:	f7fd fdcf 	bl	80014d8 <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800393c:	e008      	b.n	8003950 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800393e:	f7fd fdcb 	bl	80014d8 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e14f      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003950:	4b1b      	ldr	r3, [pc, #108]	; (80039c0 <HAL_RCC_OscConfig+0x270>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1f0      	bne.n	800393e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0308 	and.w	r3, r3, #8
 8003964:	2b00      	cmp	r3, #0
 8003966:	d037      	beq.n	80039d8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d016      	beq.n	800399e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003970:	4b15      	ldr	r3, [pc, #84]	; (80039c8 <HAL_RCC_OscConfig+0x278>)
 8003972:	2201      	movs	r2, #1
 8003974:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003976:	f7fd fdaf 	bl	80014d8 <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800397c:	e008      	b.n	8003990 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800397e:	f7fd fdab 	bl	80014d8 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d901      	bls.n	8003990 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e12f      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003990:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <HAL_RCC_OscConfig+0x270>)
 8003992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0f0      	beq.n	800397e <HAL_RCC_OscConfig+0x22e>
 800399c:	e01c      	b.n	80039d8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800399e:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <HAL_RCC_OscConfig+0x278>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a4:	f7fd fd98 	bl	80014d8 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039aa:	e00f      	b.n	80039cc <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039ac:	f7fd fd94 	bl	80014d8 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d908      	bls.n	80039cc <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e118      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4a0>
 80039be:	bf00      	nop
 80039c0:	40023800 	.word	0x40023800
 80039c4:	42470000 	.word	0x42470000
 80039c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039cc:	4b8a      	ldr	r3, [pc, #552]	; (8003bf8 <HAL_RCC_OscConfig+0x4a8>)
 80039ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1e9      	bne.n	80039ac <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 8097 	beq.w	8003b14 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039e6:	2300      	movs	r3, #0
 80039e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ea:	4b83      	ldr	r3, [pc, #524]	; (8003bf8 <HAL_RCC_OscConfig+0x4a8>)
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10f      	bne.n	8003a16 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f6:	2300      	movs	r3, #0
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	4b7f      	ldr	r3, [pc, #508]	; (8003bf8 <HAL_RCC_OscConfig+0x4a8>)
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	4a7e      	ldr	r2, [pc, #504]	; (8003bf8 <HAL_RCC_OscConfig+0x4a8>)
 8003a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a04:	6413      	str	r3, [r2, #64]	; 0x40
 8003a06:	4b7c      	ldr	r3, [pc, #496]	; (8003bf8 <HAL_RCC_OscConfig+0x4a8>)
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a12:	2301      	movs	r3, #1
 8003a14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a16:	4b79      	ldr	r3, [pc, #484]	; (8003bfc <HAL_RCC_OscConfig+0x4ac>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d118      	bne.n	8003a54 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a22:	4b76      	ldr	r3, [pc, #472]	; (8003bfc <HAL_RCC_OscConfig+0x4ac>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a75      	ldr	r2, [pc, #468]	; (8003bfc <HAL_RCC_OscConfig+0x4ac>)
 8003a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a2e:	f7fd fd53 	bl	80014d8 <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a34:	e008      	b.n	8003a48 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a36:	f7fd fd4f 	bl	80014d8 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e0d3      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a48:	4b6c      	ldr	r3, [pc, #432]	; (8003bfc <HAL_RCC_OscConfig+0x4ac>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0f0      	beq.n	8003a36 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d106      	bne.n	8003a6a <HAL_RCC_OscConfig+0x31a>
 8003a5c:	4b66      	ldr	r3, [pc, #408]	; (8003bf8 <HAL_RCC_OscConfig+0x4a8>)
 8003a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a60:	4a65      	ldr	r2, [pc, #404]	; (8003bf8 <HAL_RCC_OscConfig+0x4a8>)
 8003a62:	f043 0301 	orr.w	r3, r3, #1
 8003a66:	6713      	str	r3, [r2, #112]	; 0x70
 8003a68:	e01c      	b.n	8003aa4 <HAL_RCC_OscConfig+0x354>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	2b05      	cmp	r3, #5
 8003a70:	d10c      	bne.n	8003a8c <HAL_RCC_OscConfig+0x33c>
 8003a72:	4b61      	ldr	r3, [pc, #388]	; (8003bf8 <HAL_RCC_OscConfig+0x4a8>)
 8003a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a76:	4a60      	ldr	r2, [pc, #384]	; (8003bf8 <HAL_RCC_OscConfig+0x4a8>)
 8003a78:	f043 0304 	orr.w	r3, r3, #4
 8003a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a7e:	4b5e      	ldr	r3, [pc, #376]	; (8003bf8 <HAL_RCC_OscConfig+0x4a8>)
 8003a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a82:	4a5d      	ldr	r2, [pc, #372]	; (8003bf8 <HAL_RCC_OscConfig+0x4a8>)
 8003a84:	f043 0301 	orr.w	r3, r3, #1
 8003a88:	6713      	str	r3, [r2, #112]	; 0x70
 8003a8a:	e00b      	b.n	8003aa4 <HAL_RCC_OscConfig+0x354>
 8003a8c:	4b5a      	ldr	r3, [pc, #360]	; (8003bf8 <HAL_RCC_OscConfig+0x4a8>)
 8003a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a90:	4a59      	ldr	r2, [pc, #356]	; (8003bf8 <HAL_RCC_OscConfig+0x4a8>)
 8003a92:	f023 0301 	bic.w	r3, r3, #1
 8003a96:	6713      	str	r3, [r2, #112]	; 0x70
 8003a98:	4b57      	ldr	r3, [pc, #348]	; (8003bf8 <HAL_RCC_OscConfig+0x4a8>)
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9c:	4a56      	ldr	r2, [pc, #344]	; (8003bf8 <HAL_RCC_OscConfig+0x4a8>)
 8003a9e:	f023 0304 	bic.w	r3, r3, #4
 8003aa2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d015      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aac:	f7fd fd14 	bl	80014d8 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab2:	e00a      	b.n	8003aca <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ab4:	f7fd fd10 	bl	80014d8 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e092      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aca:	4b4b      	ldr	r3, [pc, #300]	; (8003bf8 <HAL_RCC_OscConfig+0x4a8>)
 8003acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0ee      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x364>
 8003ad6:	e014      	b.n	8003b02 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad8:	f7fd fcfe 	bl	80014d8 <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ade:	e00a      	b.n	8003af6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ae0:	f7fd fcfa 	bl	80014d8 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e07c      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003af6:	4b40      	ldr	r3, [pc, #256]	; (8003bf8 <HAL_RCC_OscConfig+0x4a8>)
 8003af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1ee      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b02:	7dfb      	ldrb	r3, [r7, #23]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d105      	bne.n	8003b14 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b08:	4b3b      	ldr	r3, [pc, #236]	; (8003bf8 <HAL_RCC_OscConfig+0x4a8>)
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	4a3a      	ldr	r2, [pc, #232]	; (8003bf8 <HAL_RCC_OscConfig+0x4a8>)
 8003b0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d068      	beq.n	8003bee <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b1c:	4b36      	ldr	r3, [pc, #216]	; (8003bf8 <HAL_RCC_OscConfig+0x4a8>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 030c 	and.w	r3, r3, #12
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d060      	beq.n	8003bea <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d145      	bne.n	8003bbc <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b30:	4b33      	ldr	r3, [pc, #204]	; (8003c00 <HAL_RCC_OscConfig+0x4b0>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b36:	f7fd fccf 	bl	80014d8 <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b3e:	f7fd fccb 	bl	80014d8 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e04f      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b50:	4b29      	ldr	r3, [pc, #164]	; (8003bf8 <HAL_RCC_OscConfig+0x4a8>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1f0      	bne.n	8003b3e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	69da      	ldr	r2, [r3, #28]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	431a      	orrs	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	019b      	lsls	r3, r3, #6
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b72:	085b      	lsrs	r3, r3, #1
 8003b74:	3b01      	subs	r3, #1
 8003b76:	041b      	lsls	r3, r3, #16
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7e:	061b      	lsls	r3, r3, #24
 8003b80:	431a      	orrs	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b86:	071b      	lsls	r3, r3, #28
 8003b88:	491b      	ldr	r1, [pc, #108]	; (8003bf8 <HAL_RCC_OscConfig+0x4a8>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b8e:	4b1c      	ldr	r3, [pc, #112]	; (8003c00 <HAL_RCC_OscConfig+0x4b0>)
 8003b90:	2201      	movs	r2, #1
 8003b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b94:	f7fd fca0 	bl	80014d8 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b9c:	f7fd fc9c 	bl	80014d8 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e020      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bae:	4b12      	ldr	r3, [pc, #72]	; (8003bf8 <HAL_RCC_OscConfig+0x4a8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0f0      	beq.n	8003b9c <HAL_RCC_OscConfig+0x44c>
 8003bba:	e018      	b.n	8003bee <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bbc:	4b10      	ldr	r3, [pc, #64]	; (8003c00 <HAL_RCC_OscConfig+0x4b0>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc2:	f7fd fc89 	bl	80014d8 <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bc8:	e008      	b.n	8003bdc <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bca:	f7fd fc85 	bl	80014d8 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e009      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bdc:	4b06      	ldr	r3, [pc, #24]	; (8003bf8 <HAL_RCC_OscConfig+0x4a8>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1f0      	bne.n	8003bca <HAL_RCC_OscConfig+0x47a>
 8003be8:	e001      	b.n	8003bee <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e000      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	40007000 	.word	0x40007000
 8003c00:	42470060 	.word	0x42470060

08003c04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e01d      	b.n	8003c52 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d106      	bne.n	8003c30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7fd faf8 	bl	8001220 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3304      	adds	r3, #4
 8003c40:	4619      	mov	r1, r3
 8003c42:	4610      	mov	r0, r2
 8003c44:	f000 f8e4 	bl	8003e10 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b085      	sub	sp, #20
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2202      	movs	r2, #2
 8003c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2b06      	cmp	r3, #6
 8003c7a:	d007      	beq.n	8003c8c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 0201 	orr.w	r2, r2, #1
 8003c8a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b084      	sub	sp, #16
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
 8003caa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d101      	bne.n	8003cba <HAL_TIM_ConfigClockSource+0x18>
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	e0a6      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x166>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2202      	movs	r2, #2
 8003cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cd8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ce0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2b40      	cmp	r3, #64	; 0x40
 8003cf0:	d067      	beq.n	8003dc2 <HAL_TIM_ConfigClockSource+0x120>
 8003cf2:	2b40      	cmp	r3, #64	; 0x40
 8003cf4:	d80b      	bhi.n	8003d0e <HAL_TIM_ConfigClockSource+0x6c>
 8003cf6:	2b10      	cmp	r3, #16
 8003cf8:	d073      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0x140>
 8003cfa:	2b10      	cmp	r3, #16
 8003cfc:	d802      	bhi.n	8003d04 <HAL_TIM_ConfigClockSource+0x62>
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d06f      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003d02:	e078      	b.n	8003df6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d04:	2b20      	cmp	r3, #32
 8003d06:	d06c      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0x140>
 8003d08:	2b30      	cmp	r3, #48	; 0x30
 8003d0a:	d06a      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003d0c:	e073      	b.n	8003df6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d0e:	2b70      	cmp	r3, #112	; 0x70
 8003d10:	d00d      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0x8c>
 8003d12:	2b70      	cmp	r3, #112	; 0x70
 8003d14:	d804      	bhi.n	8003d20 <HAL_TIM_ConfigClockSource+0x7e>
 8003d16:	2b50      	cmp	r3, #80	; 0x50
 8003d18:	d033      	beq.n	8003d82 <HAL_TIM_ConfigClockSource+0xe0>
 8003d1a:	2b60      	cmp	r3, #96	; 0x60
 8003d1c:	d041      	beq.n	8003da2 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003d1e:	e06a      	b.n	8003df6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d24:	d066      	beq.n	8003df4 <HAL_TIM_ConfigClockSource+0x152>
 8003d26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d2a:	d017      	beq.n	8003d5c <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003d2c:	e063      	b.n	8003df6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6818      	ldr	r0, [r3, #0]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	6899      	ldr	r1, [r3, #8]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	f000 f981 	bl	8004044 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d50:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	609a      	str	r2, [r3, #8]
      break;
 8003d5a:	e04c      	b.n	8003df6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6818      	ldr	r0, [r3, #0]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	6899      	ldr	r1, [r3, #8]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f000 f96a 	bl	8004044 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d7e:	609a      	str	r2, [r3, #8]
      break;
 8003d80:	e039      	b.n	8003df6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6818      	ldr	r0, [r3, #0]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	6859      	ldr	r1, [r3, #4]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	f000 f8de 	bl	8003f50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2150      	movs	r1, #80	; 0x50
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 f937 	bl	800400e <TIM_ITRx_SetConfig>
      break;
 8003da0:	e029      	b.n	8003df6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	6859      	ldr	r1, [r3, #4]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	461a      	mov	r2, r3
 8003db0:	f000 f8fd 	bl	8003fae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2160      	movs	r1, #96	; 0x60
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 f927 	bl	800400e <TIM_ITRx_SetConfig>
      break;
 8003dc0:	e019      	b.n	8003df6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6818      	ldr	r0, [r3, #0]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	6859      	ldr	r1, [r3, #4]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	f000 f8be 	bl	8003f50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2140      	movs	r1, #64	; 0x40
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 f917 	bl	800400e <TIM_ITRx_SetConfig>
      break;
 8003de0:	e009      	b.n	8003df6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4619      	mov	r1, r3
 8003dec:	4610      	mov	r0, r2
 8003dee:	f000 f90e 	bl	800400e <TIM_ITRx_SetConfig>
      break;
 8003df2:	e000      	b.n	8003df6 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003df4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a40      	ldr	r2, [pc, #256]	; (8003f24 <TIM_Base_SetConfig+0x114>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d013      	beq.n	8003e50 <TIM_Base_SetConfig+0x40>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e2e:	d00f      	beq.n	8003e50 <TIM_Base_SetConfig+0x40>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a3d      	ldr	r2, [pc, #244]	; (8003f28 <TIM_Base_SetConfig+0x118>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d00b      	beq.n	8003e50 <TIM_Base_SetConfig+0x40>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a3c      	ldr	r2, [pc, #240]	; (8003f2c <TIM_Base_SetConfig+0x11c>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d007      	beq.n	8003e50 <TIM_Base_SetConfig+0x40>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a3b      	ldr	r2, [pc, #236]	; (8003f30 <TIM_Base_SetConfig+0x120>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d003      	beq.n	8003e50 <TIM_Base_SetConfig+0x40>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a3a      	ldr	r2, [pc, #232]	; (8003f34 <TIM_Base_SetConfig+0x124>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d108      	bne.n	8003e62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a2f      	ldr	r2, [pc, #188]	; (8003f24 <TIM_Base_SetConfig+0x114>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d02b      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e70:	d027      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a2c      	ldr	r2, [pc, #176]	; (8003f28 <TIM_Base_SetConfig+0x118>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d023      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a2b      	ldr	r2, [pc, #172]	; (8003f2c <TIM_Base_SetConfig+0x11c>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d01f      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a2a      	ldr	r2, [pc, #168]	; (8003f30 <TIM_Base_SetConfig+0x120>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d01b      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a29      	ldr	r2, [pc, #164]	; (8003f34 <TIM_Base_SetConfig+0x124>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d017      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a28      	ldr	r2, [pc, #160]	; (8003f38 <TIM_Base_SetConfig+0x128>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d013      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a27      	ldr	r2, [pc, #156]	; (8003f3c <TIM_Base_SetConfig+0x12c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d00f      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a26      	ldr	r2, [pc, #152]	; (8003f40 <TIM_Base_SetConfig+0x130>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00b      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a25      	ldr	r2, [pc, #148]	; (8003f44 <TIM_Base_SetConfig+0x134>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d007      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a24      	ldr	r2, [pc, #144]	; (8003f48 <TIM_Base_SetConfig+0x138>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d003      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a23      	ldr	r2, [pc, #140]	; (8003f4c <TIM_Base_SetConfig+0x13c>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d108      	bne.n	8003ed4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a0a      	ldr	r2, [pc, #40]	; (8003f24 <TIM_Base_SetConfig+0x114>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d003      	beq.n	8003f08 <TIM_Base_SetConfig+0xf8>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a0c      	ldr	r2, [pc, #48]	; (8003f34 <TIM_Base_SetConfig+0x124>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d103      	bne.n	8003f10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	691a      	ldr	r2, [r3, #16]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	615a      	str	r2, [r3, #20]
}
 8003f16:	bf00      	nop
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	40010000 	.word	0x40010000
 8003f28:	40000400 	.word	0x40000400
 8003f2c:	40000800 	.word	0x40000800
 8003f30:	40000c00 	.word	0x40000c00
 8003f34:	40010400 	.word	0x40010400
 8003f38:	40014000 	.word	0x40014000
 8003f3c:	40014400 	.word	0x40014400
 8003f40:	40014800 	.word	0x40014800
 8003f44:	40001800 	.word	0x40001800
 8003f48:	40001c00 	.word	0x40001c00
 8003f4c:	40002000 	.word	0x40002000

08003f50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	f023 0201 	bic.w	r2, r3, #1
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	011b      	lsls	r3, r3, #4
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f023 030a 	bic.w	r3, r3, #10
 8003f8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	621a      	str	r2, [r3, #32]
}
 8003fa2:	bf00      	nop
 8003fa4:	371c      	adds	r7, #28
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b087      	sub	sp, #28
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	60f8      	str	r0, [r7, #12]
 8003fb6:	60b9      	str	r1, [r7, #8]
 8003fb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	f023 0210 	bic.w	r2, r3, #16
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	031b      	lsls	r3, r3, #12
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	621a      	str	r2, [r3, #32]
}
 8004002:	bf00      	nop
 8004004:	371c      	adds	r7, #28
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800400e:	b480      	push	{r7}
 8004010:	b085      	sub	sp, #20
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
 8004016:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004024:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4313      	orrs	r3, r2
 800402c:	f043 0307 	orr.w	r3, r3, #7
 8004030:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	609a      	str	r2, [r3, #8]
}
 8004038:	bf00      	nop
 800403a:	3714      	adds	r7, #20
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004044:	b480      	push	{r7}
 8004046:	b087      	sub	sp, #28
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
 8004050:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800405e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	021a      	lsls	r2, r3, #8
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	431a      	orrs	r2, r3
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	4313      	orrs	r3, r2
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	4313      	orrs	r3, r2
 8004070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	609a      	str	r2, [r3, #8]
}
 8004078:	bf00      	nop
 800407a:	371c      	adds	r7, #28
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004094:	2b01      	cmp	r3, #1
 8004096:	d101      	bne.n	800409c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004098:	2302      	movs	r3, #2
 800409a:	e05a      	b.n	8004152 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a21      	ldr	r2, [pc, #132]	; (8004160 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d022      	beq.n	8004126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e8:	d01d      	beq.n	8004126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a1d      	ldr	r2, [pc, #116]	; (8004164 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d018      	beq.n	8004126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a1b      	ldr	r2, [pc, #108]	; (8004168 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d013      	beq.n	8004126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a1a      	ldr	r2, [pc, #104]	; (800416c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d00e      	beq.n	8004126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a18      	ldr	r2, [pc, #96]	; (8004170 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d009      	beq.n	8004126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a17      	ldr	r2, [pc, #92]	; (8004174 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d004      	beq.n	8004126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a15      	ldr	r2, [pc, #84]	; (8004178 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d10c      	bne.n	8004140 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800412c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	4313      	orrs	r3, r2
 8004136:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	40010000 	.word	0x40010000
 8004164:	40000400 	.word	0x40000400
 8004168:	40000800 	.word	0x40000800
 800416c:	40000c00 	.word	0x40000c00
 8004170:	40010400 	.word	0x40010400
 8004174:	40014000 	.word	0x40014000
 8004178:	40001800 	.word	0x40001800

0800417c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e03f      	b.n	800420e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d106      	bne.n	80041a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7fd f886 	bl	80012b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2224      	movs	r2, #36	; 0x24
 80041ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 fc99 	bl	8004af8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	691a      	ldr	r2, [r3, #16]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	695a      	ldr	r2, [r3, #20]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2220      	movs	r2, #32
 8004200:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2220      	movs	r2, #32
 8004208:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3708      	adds	r7, #8
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b088      	sub	sp, #32
 800421a:	af02      	add	r7, sp, #8
 800421c:	60f8      	str	r0, [r7, #12]
 800421e:	60b9      	str	r1, [r7, #8]
 8004220:	603b      	str	r3, [r7, #0]
 8004222:	4613      	mov	r3, r2
 8004224:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004226:	2300      	movs	r3, #0
 8004228:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b20      	cmp	r3, #32
 8004234:	f040 8083 	bne.w	800433e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d002      	beq.n	8004244 <HAL_UART_Transmit+0x2e>
 800423e:	88fb      	ldrh	r3, [r7, #6]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e07b      	b.n	8004340 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800424e:	2b01      	cmp	r3, #1
 8004250:	d101      	bne.n	8004256 <HAL_UART_Transmit+0x40>
 8004252:	2302      	movs	r3, #2
 8004254:	e074      	b.n	8004340 <HAL_UART_Transmit+0x12a>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2221      	movs	r2, #33	; 0x21
 8004268:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800426c:	f7fd f934 	bl	80014d8 <HAL_GetTick>
 8004270:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	88fa      	ldrh	r2, [r7, #6]
 8004276:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	88fa      	ldrh	r2, [r7, #6]
 800427c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004286:	e042      	b.n	800430e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800428c:	b29b      	uxth	r3, r3
 800428e:	3b01      	subs	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800429e:	d122      	bne.n	80042e6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	2200      	movs	r2, #0
 80042a8:	2180      	movs	r1, #128	; 0x80
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f000 faa3 	bl	80047f6 <UART_WaitOnFlagUntilTimeout>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e042      	b.n	8004340 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	461a      	mov	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042cc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d103      	bne.n	80042de <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	3302      	adds	r3, #2
 80042da:	60bb      	str	r3, [r7, #8]
 80042dc:	e017      	b.n	800430e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	3301      	adds	r3, #1
 80042e2:	60bb      	str	r3, [r7, #8]
 80042e4:	e013      	b.n	800430e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2200      	movs	r2, #0
 80042ee:	2180      	movs	r1, #128	; 0x80
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 fa80 	bl	80047f6 <UART_WaitOnFlagUntilTimeout>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e01f      	b.n	8004340 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	1c5a      	adds	r2, r3, #1
 8004304:	60ba      	str	r2, [r7, #8]
 8004306:	781a      	ldrb	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004312:	b29b      	uxth	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1b7      	bne.n	8004288 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	2200      	movs	r2, #0
 8004320:	2140      	movs	r1, #64	; 0x40
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f000 fa67 	bl	80047f6 <UART_WaitOnFlagUntilTimeout>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e006      	b.n	8004340 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2220      	movs	r2, #32
 8004336:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800433a:	2300      	movs	r3, #0
 800433c:	e000      	b.n	8004340 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800433e:	2302      	movs	r3, #2
  }
}
 8004340:	4618      	mov	r0, r3
 8004342:	3718      	adds	r7, #24
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	4613      	mov	r3, r2
 8004354:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b20      	cmp	r3, #32
 8004360:	d140      	bne.n	80043e4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <HAL_UART_Receive_IT+0x26>
 8004368:	88fb      	ldrh	r3, [r7, #6]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e039      	b.n	80043e6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004378:	2b01      	cmp	r3, #1
 800437a:	d101      	bne.n	8004380 <HAL_UART_Receive_IT+0x38>
 800437c:	2302      	movs	r3, #2
 800437e:	e032      	b.n	80043e6 <HAL_UART_Receive_IT+0x9e>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	88fa      	ldrh	r2, [r7, #6]
 8004392:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	88fa      	ldrh	r2, [r7, #6]
 8004398:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2222      	movs	r2, #34	; 0x22
 80043a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043be:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	695a      	ldr	r2, [r3, #20]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f042 0201 	orr.w	r2, r2, #1
 80043ce:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0220 	orr.w	r2, r2, #32
 80043de:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80043e0:	2300      	movs	r3, #0
 80043e2:	e000      	b.n	80043e6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80043e4:	2302      	movs	r3, #2
  }
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
	...

080043f4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	4613      	mov	r3, r2
 8004400:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b20      	cmp	r3, #32
 800440c:	d153      	bne.n	80044b6 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d002      	beq.n	800441a <HAL_UART_Transmit_DMA+0x26>
 8004414:	88fb      	ldrh	r3, [r7, #6]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e04c      	b.n	80044b8 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004424:	2b01      	cmp	r3, #1
 8004426:	d101      	bne.n	800442c <HAL_UART_Transmit_DMA+0x38>
 8004428:	2302      	movs	r3, #2
 800442a:	e045      	b.n	80044b8 <HAL_UART_Transmit_DMA+0xc4>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	88fa      	ldrh	r2, [r7, #6]
 800443e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	88fa      	ldrh	r2, [r7, #6]
 8004444:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2221      	movs	r2, #33	; 0x21
 8004450:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004458:	4a19      	ldr	r2, [pc, #100]	; (80044c0 <HAL_UART_Transmit_DMA+0xcc>)
 800445a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004460:	4a18      	ldr	r2, [pc, #96]	; (80044c4 <HAL_UART_Transmit_DMA+0xd0>)
 8004462:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004468:	4a17      	ldr	r2, [pc, #92]	; (80044c8 <HAL_UART_Transmit_DMA+0xd4>)
 800446a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004470:	2200      	movs	r2, #0
 8004472:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8004474:	f107 0308 	add.w	r3, r7, #8
 8004478:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	6819      	ldr	r1, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	3304      	adds	r3, #4
 8004488:	461a      	mov	r2, r3
 800448a:	88fb      	ldrh	r3, [r7, #6]
 800448c:	f7fd fa12 	bl	80018b4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004498:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	695a      	ldr	r2, [r3, #20]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044b0:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	e000      	b.n	80044b8 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80044b6:	2302      	movs	r3, #2
  }
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3718      	adds	r7, #24
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	080046f5 	.word	0x080046f5
 80044c4:	08004747 	.word	0x08004747
 80044c8:	08004763 	.word	0x08004763

080044cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b088      	sub	sp, #32
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	f003 030f 	and.w	r3, r3, #15
 80044fa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10d      	bne.n	800451e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	f003 0320 	and.w	r3, r3, #32
 8004508:	2b00      	cmp	r3, #0
 800450a:	d008      	beq.n	800451e <HAL_UART_IRQHandler+0x52>
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	f003 0320 	and.w	r3, r3, #32
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 fa6d 	bl	80049f6 <UART_Receive_IT>
      return;
 800451c:	e0d1      	b.n	80046c2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 80b0 	beq.w	8004686 <HAL_UART_IRQHandler+0x1ba>
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b00      	cmp	r3, #0
 800452e:	d105      	bne.n	800453c <HAL_UART_IRQHandler+0x70>
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 80a5 	beq.w	8004686 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00a      	beq.n	800455c <HAL_UART_IRQHandler+0x90>
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800454c:	2b00      	cmp	r3, #0
 800454e:	d005      	beq.n	800455c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004554:	f043 0201 	orr.w	r2, r3, #1
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	f003 0304 	and.w	r3, r3, #4
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00a      	beq.n	800457c <HAL_UART_IRQHandler+0xb0>
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004574:	f043 0202 	orr.w	r2, r3, #2
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00a      	beq.n	800459c <HAL_UART_IRQHandler+0xd0>
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	d005      	beq.n	800459c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004594:	f043 0204 	orr.w	r2, r3, #4
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00f      	beq.n	80045c6 <HAL_UART_IRQHandler+0xfa>
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	f003 0320 	and.w	r3, r3, #32
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d104      	bne.n	80045ba <HAL_UART_IRQHandler+0xee>
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d005      	beq.n	80045c6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045be:	f043 0208 	orr.w	r2, r3, #8
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d078      	beq.n	80046c0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	f003 0320 	and.w	r3, r3, #32
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d007      	beq.n	80045e8 <HAL_UART_IRQHandler+0x11c>
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	f003 0320 	and.w	r3, r3, #32
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d002      	beq.n	80045e8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 fa07 	bl	80049f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f2:	2b40      	cmp	r3, #64	; 0x40
 80045f4:	bf0c      	ite	eq
 80045f6:	2301      	moveq	r3, #1
 80045f8:	2300      	movne	r3, #0
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004602:	f003 0308 	and.w	r3, r3, #8
 8004606:	2b00      	cmp	r3, #0
 8004608:	d102      	bne.n	8004610 <HAL_UART_IRQHandler+0x144>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d031      	beq.n	8004674 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 f950 	bl	80048b6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004620:	2b40      	cmp	r3, #64	; 0x40
 8004622:	d123      	bne.n	800466c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	695a      	ldr	r2, [r3, #20]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004632:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004638:	2b00      	cmp	r3, #0
 800463a:	d013      	beq.n	8004664 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004640:	4a21      	ldr	r2, [pc, #132]	; (80046c8 <HAL_UART_IRQHandler+0x1fc>)
 8004642:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004648:	4618      	mov	r0, r3
 800464a:	f7fd f98b 	bl	8001964 <HAL_DMA_Abort_IT>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d016      	beq.n	8004682 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800465e:	4610      	mov	r0, r2
 8004660:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004662:	e00e      	b.n	8004682 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 f83b 	bl	80046e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800466a:	e00a      	b.n	8004682 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f837 	bl	80046e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004672:	e006      	b.n	8004682 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f833 	bl	80046e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004680:	e01e      	b.n	80046c0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004682:	bf00      	nop
    return;
 8004684:	e01c      	b.n	80046c0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800468c:	2b00      	cmp	r3, #0
 800468e:	d008      	beq.n	80046a2 <HAL_UART_IRQHandler+0x1d6>
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f93d 	bl	800491a <UART_Transmit_IT>
    return;
 80046a0:	e00f      	b.n	80046c2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00a      	beq.n	80046c2 <HAL_UART_IRQHandler+0x1f6>
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d005      	beq.n	80046c2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f985 	bl	80049c6 <UART_EndTransmit_IT>
    return;
 80046bc:	bf00      	nop
 80046be:	e000      	b.n	80046c2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80046c0:	bf00      	nop
  }
}
 80046c2:	3720      	adds	r7, #32
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	080048f3 	.word	0x080048f3

080046cc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004700:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470c:	2b00      	cmp	r3, #0
 800470e:	d113      	bne.n	8004738 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	695a      	ldr	r2, [r3, #20]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004724:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68da      	ldr	r2, [r3, #12]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004734:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004736:	e002      	b.n	800473e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f7fc fc27 	bl	8000f8c <HAL_UART_TxCpltCallback>
}
 800473e:	bf00      	nop
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b084      	sub	sp, #16
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004752:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f7ff ffb9 	bl	80046cc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800475a:	bf00      	nop
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b084      	sub	sp, #16
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800476a:	2300      	movs	r3, #0
 800476c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004772:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800477e:	2b80      	cmp	r3, #128	; 0x80
 8004780:	bf0c      	ite	eq
 8004782:	2301      	moveq	r3, #1
 8004784:	2300      	movne	r3, #0
 8004786:	b2db      	uxtb	r3, r3
 8004788:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b21      	cmp	r3, #33	; 0x21
 8004794:	d108      	bne.n	80047a8 <UART_DMAError+0x46>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d005      	beq.n	80047a8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	2200      	movs	r2, #0
 80047a0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80047a2:	68b8      	ldr	r0, [r7, #8]
 80047a4:	f000 f871 	bl	800488a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b2:	2b40      	cmp	r3, #64	; 0x40
 80047b4:	bf0c      	ite	eq
 80047b6:	2301      	moveq	r3, #1
 80047b8:	2300      	movne	r3, #0
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b22      	cmp	r3, #34	; 0x22
 80047c8:	d108      	bne.n	80047dc <UART_DMAError+0x7a>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d005      	beq.n	80047dc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	2200      	movs	r2, #0
 80047d4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80047d6:	68b8      	ldr	r0, [r7, #8]
 80047d8:	f000 f86d 	bl	80048b6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e0:	f043 0210 	orr.w	r2, r3, #16
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047e8:	68b8      	ldr	r0, [r7, #8]
 80047ea:	f7ff ff79 	bl	80046e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047ee:	bf00      	nop
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b084      	sub	sp, #16
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	60f8      	str	r0, [r7, #12]
 80047fe:	60b9      	str	r1, [r7, #8]
 8004800:	603b      	str	r3, [r7, #0]
 8004802:	4613      	mov	r3, r2
 8004804:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004806:	e02c      	b.n	8004862 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480e:	d028      	beq.n	8004862 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d007      	beq.n	8004826 <UART_WaitOnFlagUntilTimeout+0x30>
 8004816:	f7fc fe5f 	bl	80014d8 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	429a      	cmp	r2, r3
 8004824:	d21d      	bcs.n	8004862 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68da      	ldr	r2, [r3, #12]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004834:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	695a      	ldr	r2, [r3, #20]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 0201 	bic.w	r2, r2, #1
 8004844:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2220      	movs	r2, #32
 800484a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2220      	movs	r2, #32
 8004852:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e00f      	b.n	8004882 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	4013      	ands	r3, r2
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	429a      	cmp	r2, r3
 8004870:	bf0c      	ite	eq
 8004872:	2301      	moveq	r3, #1
 8004874:	2300      	movne	r3, #0
 8004876:	b2db      	uxtb	r3, r3
 8004878:	461a      	mov	r2, r3
 800487a:	79fb      	ldrb	r3, [r7, #7]
 800487c:	429a      	cmp	r2, r3
 800487e:	d0c3      	beq.n	8004808 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68da      	ldr	r2, [r3, #12]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80048a0:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80048aa:	bf00      	nop
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68da      	ldr	r2, [r3, #12]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80048cc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	695a      	ldr	r2, [r3, #20]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 0201 	bic.w	r2, r2, #1
 80048dc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2220      	movs	r2, #32
 80048e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b084      	sub	sp, #16
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f7ff fee7 	bl	80046e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004912:	bf00      	nop
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800491a:	b480      	push	{r7}
 800491c:	b085      	sub	sp, #20
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b21      	cmp	r3, #33	; 0x21
 800492c:	d144      	bne.n	80049b8 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004936:	d11a      	bne.n	800496e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	461a      	mov	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800494c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d105      	bne.n	8004962 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	1c9a      	adds	r2, r3, #2
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	621a      	str	r2, [r3, #32]
 8004960:	e00e      	b.n	8004980 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	1c5a      	adds	r2, r3, #1
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	621a      	str	r2, [r3, #32]
 800496c:	e008      	b.n	8004980 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	1c59      	adds	r1, r3, #1
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	6211      	str	r1, [r2, #32]
 8004978:	781a      	ldrb	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004984:	b29b      	uxth	r3, r3
 8004986:	3b01      	subs	r3, #1
 8004988:	b29b      	uxth	r3, r3
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	4619      	mov	r1, r3
 800498e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10f      	bne.n	80049b4 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68da      	ldr	r2, [r3, #12]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68da      	ldr	r2, [r3, #12]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049b4:	2300      	movs	r3, #0
 80049b6:	e000      	b.n	80049ba <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80049b8:	2302      	movs	r3, #2
  }
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b082      	sub	sp, #8
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2220      	movs	r2, #32
 80049e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7fc fad0 	bl	8000f8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b084      	sub	sp, #16
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b22      	cmp	r3, #34	; 0x22
 8004a08:	d171      	bne.n	8004aee <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a12:	d123      	bne.n	8004a5c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a18:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10e      	bne.n	8004a40 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a38:	1c9a      	adds	r2, r3, #2
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	629a      	str	r2, [r3, #40]	; 0x28
 8004a3e:	e029      	b.n	8004a94 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a54:	1c5a      	adds	r2, r3, #1
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	629a      	str	r2, [r3, #40]	; 0x28
 8004a5a:	e01b      	b.n	8004a94 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10a      	bne.n	8004a7a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6858      	ldr	r0, [r3, #4]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6e:	1c59      	adds	r1, r3, #1
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6291      	str	r1, [r2, #40]	; 0x28
 8004a74:	b2c2      	uxtb	r2, r0
 8004a76:	701a      	strb	r2, [r3, #0]
 8004a78:	e00c      	b.n	8004a94 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	b2da      	uxtb	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a86:	1c58      	adds	r0, r3, #1
 8004a88:	6879      	ldr	r1, [r7, #4]
 8004a8a:	6288      	str	r0, [r1, #40]	; 0x28
 8004a8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a90:	b2d2      	uxtb	r2, r2
 8004a92:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d120      	bne.n	8004aea <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 0220 	bic.w	r2, r2, #32
 8004ab6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68da      	ldr	r2, [r3, #12]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ac6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	695a      	ldr	r2, [r3, #20]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0201 	bic.w	r2, r2, #1
 8004ad6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f7fc fa63 	bl	8000fac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	e002      	b.n	8004af0 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004aea:	2300      	movs	r3, #0
 8004aec:	e000      	b.n	8004af0 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004aee:	2302      	movs	r3, #2
  }
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004afc:	b085      	sub	sp, #20
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68da      	ldr	r2, [r3, #12]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	430a      	orrs	r2, r1
 8004b16:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	431a      	orrs	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	431a      	orrs	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	69db      	ldr	r3, [r3, #28]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004b3a:	f023 030c 	bic.w	r3, r3, #12
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	6812      	ldr	r2, [r2, #0]
 8004b42:	68f9      	ldr	r1, [r7, #12]
 8004b44:	430b      	orrs	r3, r1
 8004b46:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	699a      	ldr	r2, [r3, #24]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b66:	f040 818b 	bne.w	8004e80 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4ac1      	ldr	r2, [pc, #772]	; (8004e74 <UART_SetConfig+0x37c>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d005      	beq.n	8004b80 <UART_SetConfig+0x88>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4abf      	ldr	r2, [pc, #764]	; (8004e78 <UART_SetConfig+0x380>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	f040 80bd 	bne.w	8004cfa <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b80:	f7fe fc80 	bl	8003484 <HAL_RCC_GetPCLK2Freq>
 8004b84:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	461d      	mov	r5, r3
 8004b8a:	f04f 0600 	mov.w	r6, #0
 8004b8e:	46a8      	mov	r8, r5
 8004b90:	46b1      	mov	r9, r6
 8004b92:	eb18 0308 	adds.w	r3, r8, r8
 8004b96:	eb49 0409 	adc.w	r4, r9, r9
 8004b9a:	4698      	mov	r8, r3
 8004b9c:	46a1      	mov	r9, r4
 8004b9e:	eb18 0805 	adds.w	r8, r8, r5
 8004ba2:	eb49 0906 	adc.w	r9, r9, r6
 8004ba6:	f04f 0100 	mov.w	r1, #0
 8004baa:	f04f 0200 	mov.w	r2, #0
 8004bae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004bb2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004bb6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004bba:	4688      	mov	r8, r1
 8004bbc:	4691      	mov	r9, r2
 8004bbe:	eb18 0005 	adds.w	r0, r8, r5
 8004bc2:	eb49 0106 	adc.w	r1, r9, r6
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	461d      	mov	r5, r3
 8004bcc:	f04f 0600 	mov.w	r6, #0
 8004bd0:	196b      	adds	r3, r5, r5
 8004bd2:	eb46 0406 	adc.w	r4, r6, r6
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	4623      	mov	r3, r4
 8004bda:	f7fb fb69 	bl	80002b0 <__aeabi_uldivmod>
 8004bde:	4603      	mov	r3, r0
 8004be0:	460c      	mov	r4, r1
 8004be2:	461a      	mov	r2, r3
 8004be4:	4ba5      	ldr	r3, [pc, #660]	; (8004e7c <UART_SetConfig+0x384>)
 8004be6:	fba3 2302 	umull	r2, r3, r3, r2
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	461d      	mov	r5, r3
 8004bf4:	f04f 0600 	mov.w	r6, #0
 8004bf8:	46a9      	mov	r9, r5
 8004bfa:	46b2      	mov	sl, r6
 8004bfc:	eb19 0309 	adds.w	r3, r9, r9
 8004c00:	eb4a 040a 	adc.w	r4, sl, sl
 8004c04:	4699      	mov	r9, r3
 8004c06:	46a2      	mov	sl, r4
 8004c08:	eb19 0905 	adds.w	r9, r9, r5
 8004c0c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004c10:	f04f 0100 	mov.w	r1, #0
 8004c14:	f04f 0200 	mov.w	r2, #0
 8004c18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c1c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c20:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c24:	4689      	mov	r9, r1
 8004c26:	4692      	mov	sl, r2
 8004c28:	eb19 0005 	adds.w	r0, r9, r5
 8004c2c:	eb4a 0106 	adc.w	r1, sl, r6
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	461d      	mov	r5, r3
 8004c36:	f04f 0600 	mov.w	r6, #0
 8004c3a:	196b      	adds	r3, r5, r5
 8004c3c:	eb46 0406 	adc.w	r4, r6, r6
 8004c40:	461a      	mov	r2, r3
 8004c42:	4623      	mov	r3, r4
 8004c44:	f7fb fb34 	bl	80002b0 <__aeabi_uldivmod>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	460c      	mov	r4, r1
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	4b8b      	ldr	r3, [pc, #556]	; (8004e7c <UART_SetConfig+0x384>)
 8004c50:	fba3 1302 	umull	r1, r3, r3, r2
 8004c54:	095b      	lsrs	r3, r3, #5
 8004c56:	2164      	movs	r1, #100	; 0x64
 8004c58:	fb01 f303 	mul.w	r3, r1, r3
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	3332      	adds	r3, #50	; 0x32
 8004c62:	4a86      	ldr	r2, [pc, #536]	; (8004e7c <UART_SetConfig+0x384>)
 8004c64:	fba2 2303 	umull	r2, r3, r2, r3
 8004c68:	095b      	lsrs	r3, r3, #5
 8004c6a:	005b      	lsls	r3, r3, #1
 8004c6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c70:	4498      	add	r8, r3
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	461d      	mov	r5, r3
 8004c76:	f04f 0600 	mov.w	r6, #0
 8004c7a:	46a9      	mov	r9, r5
 8004c7c:	46b2      	mov	sl, r6
 8004c7e:	eb19 0309 	adds.w	r3, r9, r9
 8004c82:	eb4a 040a 	adc.w	r4, sl, sl
 8004c86:	4699      	mov	r9, r3
 8004c88:	46a2      	mov	sl, r4
 8004c8a:	eb19 0905 	adds.w	r9, r9, r5
 8004c8e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004c92:	f04f 0100 	mov.w	r1, #0
 8004c96:	f04f 0200 	mov.w	r2, #0
 8004c9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c9e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ca2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ca6:	4689      	mov	r9, r1
 8004ca8:	4692      	mov	sl, r2
 8004caa:	eb19 0005 	adds.w	r0, r9, r5
 8004cae:	eb4a 0106 	adc.w	r1, sl, r6
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	461d      	mov	r5, r3
 8004cb8:	f04f 0600 	mov.w	r6, #0
 8004cbc:	196b      	adds	r3, r5, r5
 8004cbe:	eb46 0406 	adc.w	r4, r6, r6
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	4623      	mov	r3, r4
 8004cc6:	f7fb faf3 	bl	80002b0 <__aeabi_uldivmod>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	460c      	mov	r4, r1
 8004cce:	461a      	mov	r2, r3
 8004cd0:	4b6a      	ldr	r3, [pc, #424]	; (8004e7c <UART_SetConfig+0x384>)
 8004cd2:	fba3 1302 	umull	r1, r3, r3, r2
 8004cd6:	095b      	lsrs	r3, r3, #5
 8004cd8:	2164      	movs	r1, #100	; 0x64
 8004cda:	fb01 f303 	mul.w	r3, r1, r3
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	00db      	lsls	r3, r3, #3
 8004ce2:	3332      	adds	r3, #50	; 0x32
 8004ce4:	4a65      	ldr	r2, [pc, #404]	; (8004e7c <UART_SetConfig+0x384>)
 8004ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cea:	095b      	lsrs	r3, r3, #5
 8004cec:	f003 0207 	and.w	r2, r3, #7
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4442      	add	r2, r8
 8004cf6:	609a      	str	r2, [r3, #8]
 8004cf8:	e26f      	b.n	80051da <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004cfa:	f7fe fbaf 	bl	800345c <HAL_RCC_GetPCLK1Freq>
 8004cfe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	461d      	mov	r5, r3
 8004d04:	f04f 0600 	mov.w	r6, #0
 8004d08:	46a8      	mov	r8, r5
 8004d0a:	46b1      	mov	r9, r6
 8004d0c:	eb18 0308 	adds.w	r3, r8, r8
 8004d10:	eb49 0409 	adc.w	r4, r9, r9
 8004d14:	4698      	mov	r8, r3
 8004d16:	46a1      	mov	r9, r4
 8004d18:	eb18 0805 	adds.w	r8, r8, r5
 8004d1c:	eb49 0906 	adc.w	r9, r9, r6
 8004d20:	f04f 0100 	mov.w	r1, #0
 8004d24:	f04f 0200 	mov.w	r2, #0
 8004d28:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004d2c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004d30:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004d34:	4688      	mov	r8, r1
 8004d36:	4691      	mov	r9, r2
 8004d38:	eb18 0005 	adds.w	r0, r8, r5
 8004d3c:	eb49 0106 	adc.w	r1, r9, r6
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	461d      	mov	r5, r3
 8004d46:	f04f 0600 	mov.w	r6, #0
 8004d4a:	196b      	adds	r3, r5, r5
 8004d4c:	eb46 0406 	adc.w	r4, r6, r6
 8004d50:	461a      	mov	r2, r3
 8004d52:	4623      	mov	r3, r4
 8004d54:	f7fb faac 	bl	80002b0 <__aeabi_uldivmod>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	460c      	mov	r4, r1
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	4b47      	ldr	r3, [pc, #284]	; (8004e7c <UART_SetConfig+0x384>)
 8004d60:	fba3 2302 	umull	r2, r3, r3, r2
 8004d64:	095b      	lsrs	r3, r3, #5
 8004d66:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	461d      	mov	r5, r3
 8004d6e:	f04f 0600 	mov.w	r6, #0
 8004d72:	46a9      	mov	r9, r5
 8004d74:	46b2      	mov	sl, r6
 8004d76:	eb19 0309 	adds.w	r3, r9, r9
 8004d7a:	eb4a 040a 	adc.w	r4, sl, sl
 8004d7e:	4699      	mov	r9, r3
 8004d80:	46a2      	mov	sl, r4
 8004d82:	eb19 0905 	adds.w	r9, r9, r5
 8004d86:	eb4a 0a06 	adc.w	sl, sl, r6
 8004d8a:	f04f 0100 	mov.w	r1, #0
 8004d8e:	f04f 0200 	mov.w	r2, #0
 8004d92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d96:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d9a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d9e:	4689      	mov	r9, r1
 8004da0:	4692      	mov	sl, r2
 8004da2:	eb19 0005 	adds.w	r0, r9, r5
 8004da6:	eb4a 0106 	adc.w	r1, sl, r6
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	461d      	mov	r5, r3
 8004db0:	f04f 0600 	mov.w	r6, #0
 8004db4:	196b      	adds	r3, r5, r5
 8004db6:	eb46 0406 	adc.w	r4, r6, r6
 8004dba:	461a      	mov	r2, r3
 8004dbc:	4623      	mov	r3, r4
 8004dbe:	f7fb fa77 	bl	80002b0 <__aeabi_uldivmod>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	460c      	mov	r4, r1
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	4b2c      	ldr	r3, [pc, #176]	; (8004e7c <UART_SetConfig+0x384>)
 8004dca:	fba3 1302 	umull	r1, r3, r3, r2
 8004dce:	095b      	lsrs	r3, r3, #5
 8004dd0:	2164      	movs	r1, #100	; 0x64
 8004dd2:	fb01 f303 	mul.w	r3, r1, r3
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	00db      	lsls	r3, r3, #3
 8004dda:	3332      	adds	r3, #50	; 0x32
 8004ddc:	4a27      	ldr	r2, [pc, #156]	; (8004e7c <UART_SetConfig+0x384>)
 8004dde:	fba2 2303 	umull	r2, r3, r2, r3
 8004de2:	095b      	lsrs	r3, r3, #5
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004dea:	4498      	add	r8, r3
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	461d      	mov	r5, r3
 8004df0:	f04f 0600 	mov.w	r6, #0
 8004df4:	46a9      	mov	r9, r5
 8004df6:	46b2      	mov	sl, r6
 8004df8:	eb19 0309 	adds.w	r3, r9, r9
 8004dfc:	eb4a 040a 	adc.w	r4, sl, sl
 8004e00:	4699      	mov	r9, r3
 8004e02:	46a2      	mov	sl, r4
 8004e04:	eb19 0905 	adds.w	r9, r9, r5
 8004e08:	eb4a 0a06 	adc.w	sl, sl, r6
 8004e0c:	f04f 0100 	mov.w	r1, #0
 8004e10:	f04f 0200 	mov.w	r2, #0
 8004e14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e20:	4689      	mov	r9, r1
 8004e22:	4692      	mov	sl, r2
 8004e24:	eb19 0005 	adds.w	r0, r9, r5
 8004e28:	eb4a 0106 	adc.w	r1, sl, r6
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	461d      	mov	r5, r3
 8004e32:	f04f 0600 	mov.w	r6, #0
 8004e36:	196b      	adds	r3, r5, r5
 8004e38:	eb46 0406 	adc.w	r4, r6, r6
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	4623      	mov	r3, r4
 8004e40:	f7fb fa36 	bl	80002b0 <__aeabi_uldivmod>
 8004e44:	4603      	mov	r3, r0
 8004e46:	460c      	mov	r4, r1
 8004e48:	461a      	mov	r2, r3
 8004e4a:	4b0c      	ldr	r3, [pc, #48]	; (8004e7c <UART_SetConfig+0x384>)
 8004e4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e50:	095b      	lsrs	r3, r3, #5
 8004e52:	2164      	movs	r1, #100	; 0x64
 8004e54:	fb01 f303 	mul.w	r3, r1, r3
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	00db      	lsls	r3, r3, #3
 8004e5c:	3332      	adds	r3, #50	; 0x32
 8004e5e:	4a07      	ldr	r2, [pc, #28]	; (8004e7c <UART_SetConfig+0x384>)
 8004e60:	fba2 2303 	umull	r2, r3, r2, r3
 8004e64:	095b      	lsrs	r3, r3, #5
 8004e66:	f003 0207 	and.w	r2, r3, #7
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4442      	add	r2, r8
 8004e70:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004e72:	e1b2      	b.n	80051da <UART_SetConfig+0x6e2>
 8004e74:	40011000 	.word	0x40011000
 8004e78:	40011400 	.word	0x40011400
 8004e7c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4ad7      	ldr	r2, [pc, #860]	; (80051e4 <UART_SetConfig+0x6ec>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d005      	beq.n	8004e96 <UART_SetConfig+0x39e>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4ad6      	ldr	r2, [pc, #856]	; (80051e8 <UART_SetConfig+0x6f0>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	f040 80d1 	bne.w	8005038 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e96:	f7fe faf5 	bl	8003484 <HAL_RCC_GetPCLK2Freq>
 8004e9a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	469a      	mov	sl, r3
 8004ea0:	f04f 0b00 	mov.w	fp, #0
 8004ea4:	46d0      	mov	r8, sl
 8004ea6:	46d9      	mov	r9, fp
 8004ea8:	eb18 0308 	adds.w	r3, r8, r8
 8004eac:	eb49 0409 	adc.w	r4, r9, r9
 8004eb0:	4698      	mov	r8, r3
 8004eb2:	46a1      	mov	r9, r4
 8004eb4:	eb18 080a 	adds.w	r8, r8, sl
 8004eb8:	eb49 090b 	adc.w	r9, r9, fp
 8004ebc:	f04f 0100 	mov.w	r1, #0
 8004ec0:	f04f 0200 	mov.w	r2, #0
 8004ec4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004ec8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004ecc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004ed0:	4688      	mov	r8, r1
 8004ed2:	4691      	mov	r9, r2
 8004ed4:	eb1a 0508 	adds.w	r5, sl, r8
 8004ed8:	eb4b 0609 	adc.w	r6, fp, r9
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	f04f 0200 	mov.w	r2, #0
 8004ee6:	f04f 0300 	mov.w	r3, #0
 8004eea:	f04f 0400 	mov.w	r4, #0
 8004eee:	0094      	lsls	r4, r2, #2
 8004ef0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ef4:	008b      	lsls	r3, r1, #2
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	4623      	mov	r3, r4
 8004efa:	4628      	mov	r0, r5
 8004efc:	4631      	mov	r1, r6
 8004efe:	f7fb f9d7 	bl	80002b0 <__aeabi_uldivmod>
 8004f02:	4603      	mov	r3, r0
 8004f04:	460c      	mov	r4, r1
 8004f06:	461a      	mov	r2, r3
 8004f08:	4bb8      	ldr	r3, [pc, #736]	; (80051ec <UART_SetConfig+0x6f4>)
 8004f0a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f0e:	095b      	lsrs	r3, r3, #5
 8004f10:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	469b      	mov	fp, r3
 8004f18:	f04f 0c00 	mov.w	ip, #0
 8004f1c:	46d9      	mov	r9, fp
 8004f1e:	46e2      	mov	sl, ip
 8004f20:	eb19 0309 	adds.w	r3, r9, r9
 8004f24:	eb4a 040a 	adc.w	r4, sl, sl
 8004f28:	4699      	mov	r9, r3
 8004f2a:	46a2      	mov	sl, r4
 8004f2c:	eb19 090b 	adds.w	r9, r9, fp
 8004f30:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004f34:	f04f 0100 	mov.w	r1, #0
 8004f38:	f04f 0200 	mov.w	r2, #0
 8004f3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f48:	4689      	mov	r9, r1
 8004f4a:	4692      	mov	sl, r2
 8004f4c:	eb1b 0509 	adds.w	r5, fp, r9
 8004f50:	eb4c 060a 	adc.w	r6, ip, sl
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	4619      	mov	r1, r3
 8004f5a:	f04f 0200 	mov.w	r2, #0
 8004f5e:	f04f 0300 	mov.w	r3, #0
 8004f62:	f04f 0400 	mov.w	r4, #0
 8004f66:	0094      	lsls	r4, r2, #2
 8004f68:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f6c:	008b      	lsls	r3, r1, #2
 8004f6e:	461a      	mov	r2, r3
 8004f70:	4623      	mov	r3, r4
 8004f72:	4628      	mov	r0, r5
 8004f74:	4631      	mov	r1, r6
 8004f76:	f7fb f99b 	bl	80002b0 <__aeabi_uldivmod>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	460c      	mov	r4, r1
 8004f7e:	461a      	mov	r2, r3
 8004f80:	4b9a      	ldr	r3, [pc, #616]	; (80051ec <UART_SetConfig+0x6f4>)
 8004f82:	fba3 1302 	umull	r1, r3, r3, r2
 8004f86:	095b      	lsrs	r3, r3, #5
 8004f88:	2164      	movs	r1, #100	; 0x64
 8004f8a:	fb01 f303 	mul.w	r3, r1, r3
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	011b      	lsls	r3, r3, #4
 8004f92:	3332      	adds	r3, #50	; 0x32
 8004f94:	4a95      	ldr	r2, [pc, #596]	; (80051ec <UART_SetConfig+0x6f4>)
 8004f96:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9a:	095b      	lsrs	r3, r3, #5
 8004f9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fa0:	4498      	add	r8, r3
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	469b      	mov	fp, r3
 8004fa6:	f04f 0c00 	mov.w	ip, #0
 8004faa:	46d9      	mov	r9, fp
 8004fac:	46e2      	mov	sl, ip
 8004fae:	eb19 0309 	adds.w	r3, r9, r9
 8004fb2:	eb4a 040a 	adc.w	r4, sl, sl
 8004fb6:	4699      	mov	r9, r3
 8004fb8:	46a2      	mov	sl, r4
 8004fba:	eb19 090b 	adds.w	r9, r9, fp
 8004fbe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004fc2:	f04f 0100 	mov.w	r1, #0
 8004fc6:	f04f 0200 	mov.w	r2, #0
 8004fca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004fd2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004fd6:	4689      	mov	r9, r1
 8004fd8:	4692      	mov	sl, r2
 8004fda:	eb1b 0509 	adds.w	r5, fp, r9
 8004fde:	eb4c 060a 	adc.w	r6, ip, sl
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	f04f 0200 	mov.w	r2, #0
 8004fec:	f04f 0300 	mov.w	r3, #0
 8004ff0:	f04f 0400 	mov.w	r4, #0
 8004ff4:	0094      	lsls	r4, r2, #2
 8004ff6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ffa:	008b      	lsls	r3, r1, #2
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	4623      	mov	r3, r4
 8005000:	4628      	mov	r0, r5
 8005002:	4631      	mov	r1, r6
 8005004:	f7fb f954 	bl	80002b0 <__aeabi_uldivmod>
 8005008:	4603      	mov	r3, r0
 800500a:	460c      	mov	r4, r1
 800500c:	461a      	mov	r2, r3
 800500e:	4b77      	ldr	r3, [pc, #476]	; (80051ec <UART_SetConfig+0x6f4>)
 8005010:	fba3 1302 	umull	r1, r3, r3, r2
 8005014:	095b      	lsrs	r3, r3, #5
 8005016:	2164      	movs	r1, #100	; 0x64
 8005018:	fb01 f303 	mul.w	r3, r1, r3
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	011b      	lsls	r3, r3, #4
 8005020:	3332      	adds	r3, #50	; 0x32
 8005022:	4a72      	ldr	r2, [pc, #456]	; (80051ec <UART_SetConfig+0x6f4>)
 8005024:	fba2 2303 	umull	r2, r3, r2, r3
 8005028:	095b      	lsrs	r3, r3, #5
 800502a:	f003 020f 	and.w	r2, r3, #15
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4442      	add	r2, r8
 8005034:	609a      	str	r2, [r3, #8]
 8005036:	e0d0      	b.n	80051da <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005038:	f7fe fa10 	bl	800345c <HAL_RCC_GetPCLK1Freq>
 800503c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	469a      	mov	sl, r3
 8005042:	f04f 0b00 	mov.w	fp, #0
 8005046:	46d0      	mov	r8, sl
 8005048:	46d9      	mov	r9, fp
 800504a:	eb18 0308 	adds.w	r3, r8, r8
 800504e:	eb49 0409 	adc.w	r4, r9, r9
 8005052:	4698      	mov	r8, r3
 8005054:	46a1      	mov	r9, r4
 8005056:	eb18 080a 	adds.w	r8, r8, sl
 800505a:	eb49 090b 	adc.w	r9, r9, fp
 800505e:	f04f 0100 	mov.w	r1, #0
 8005062:	f04f 0200 	mov.w	r2, #0
 8005066:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800506a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800506e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005072:	4688      	mov	r8, r1
 8005074:	4691      	mov	r9, r2
 8005076:	eb1a 0508 	adds.w	r5, sl, r8
 800507a:	eb4b 0609 	adc.w	r6, fp, r9
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	4619      	mov	r1, r3
 8005084:	f04f 0200 	mov.w	r2, #0
 8005088:	f04f 0300 	mov.w	r3, #0
 800508c:	f04f 0400 	mov.w	r4, #0
 8005090:	0094      	lsls	r4, r2, #2
 8005092:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005096:	008b      	lsls	r3, r1, #2
 8005098:	461a      	mov	r2, r3
 800509a:	4623      	mov	r3, r4
 800509c:	4628      	mov	r0, r5
 800509e:	4631      	mov	r1, r6
 80050a0:	f7fb f906 	bl	80002b0 <__aeabi_uldivmod>
 80050a4:	4603      	mov	r3, r0
 80050a6:	460c      	mov	r4, r1
 80050a8:	461a      	mov	r2, r3
 80050aa:	4b50      	ldr	r3, [pc, #320]	; (80051ec <UART_SetConfig+0x6f4>)
 80050ac:	fba3 2302 	umull	r2, r3, r3, r2
 80050b0:	095b      	lsrs	r3, r3, #5
 80050b2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	469b      	mov	fp, r3
 80050ba:	f04f 0c00 	mov.w	ip, #0
 80050be:	46d9      	mov	r9, fp
 80050c0:	46e2      	mov	sl, ip
 80050c2:	eb19 0309 	adds.w	r3, r9, r9
 80050c6:	eb4a 040a 	adc.w	r4, sl, sl
 80050ca:	4699      	mov	r9, r3
 80050cc:	46a2      	mov	sl, r4
 80050ce:	eb19 090b 	adds.w	r9, r9, fp
 80050d2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80050d6:	f04f 0100 	mov.w	r1, #0
 80050da:	f04f 0200 	mov.w	r2, #0
 80050de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80050e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80050ea:	4689      	mov	r9, r1
 80050ec:	4692      	mov	sl, r2
 80050ee:	eb1b 0509 	adds.w	r5, fp, r9
 80050f2:	eb4c 060a 	adc.w	r6, ip, sl
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	4619      	mov	r1, r3
 80050fc:	f04f 0200 	mov.w	r2, #0
 8005100:	f04f 0300 	mov.w	r3, #0
 8005104:	f04f 0400 	mov.w	r4, #0
 8005108:	0094      	lsls	r4, r2, #2
 800510a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800510e:	008b      	lsls	r3, r1, #2
 8005110:	461a      	mov	r2, r3
 8005112:	4623      	mov	r3, r4
 8005114:	4628      	mov	r0, r5
 8005116:	4631      	mov	r1, r6
 8005118:	f7fb f8ca 	bl	80002b0 <__aeabi_uldivmod>
 800511c:	4603      	mov	r3, r0
 800511e:	460c      	mov	r4, r1
 8005120:	461a      	mov	r2, r3
 8005122:	4b32      	ldr	r3, [pc, #200]	; (80051ec <UART_SetConfig+0x6f4>)
 8005124:	fba3 1302 	umull	r1, r3, r3, r2
 8005128:	095b      	lsrs	r3, r3, #5
 800512a:	2164      	movs	r1, #100	; 0x64
 800512c:	fb01 f303 	mul.w	r3, r1, r3
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	011b      	lsls	r3, r3, #4
 8005134:	3332      	adds	r3, #50	; 0x32
 8005136:	4a2d      	ldr	r2, [pc, #180]	; (80051ec <UART_SetConfig+0x6f4>)
 8005138:	fba2 2303 	umull	r2, r3, r2, r3
 800513c:	095b      	lsrs	r3, r3, #5
 800513e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005142:	4498      	add	r8, r3
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	469b      	mov	fp, r3
 8005148:	f04f 0c00 	mov.w	ip, #0
 800514c:	46d9      	mov	r9, fp
 800514e:	46e2      	mov	sl, ip
 8005150:	eb19 0309 	adds.w	r3, r9, r9
 8005154:	eb4a 040a 	adc.w	r4, sl, sl
 8005158:	4699      	mov	r9, r3
 800515a:	46a2      	mov	sl, r4
 800515c:	eb19 090b 	adds.w	r9, r9, fp
 8005160:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005164:	f04f 0100 	mov.w	r1, #0
 8005168:	f04f 0200 	mov.w	r2, #0
 800516c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005170:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005174:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005178:	4689      	mov	r9, r1
 800517a:	4692      	mov	sl, r2
 800517c:	eb1b 0509 	adds.w	r5, fp, r9
 8005180:	eb4c 060a 	adc.w	r6, ip, sl
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	4619      	mov	r1, r3
 800518a:	f04f 0200 	mov.w	r2, #0
 800518e:	f04f 0300 	mov.w	r3, #0
 8005192:	f04f 0400 	mov.w	r4, #0
 8005196:	0094      	lsls	r4, r2, #2
 8005198:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800519c:	008b      	lsls	r3, r1, #2
 800519e:	461a      	mov	r2, r3
 80051a0:	4623      	mov	r3, r4
 80051a2:	4628      	mov	r0, r5
 80051a4:	4631      	mov	r1, r6
 80051a6:	f7fb f883 	bl	80002b0 <__aeabi_uldivmod>
 80051aa:	4603      	mov	r3, r0
 80051ac:	460c      	mov	r4, r1
 80051ae:	461a      	mov	r2, r3
 80051b0:	4b0e      	ldr	r3, [pc, #56]	; (80051ec <UART_SetConfig+0x6f4>)
 80051b2:	fba3 1302 	umull	r1, r3, r3, r2
 80051b6:	095b      	lsrs	r3, r3, #5
 80051b8:	2164      	movs	r1, #100	; 0x64
 80051ba:	fb01 f303 	mul.w	r3, r1, r3
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	011b      	lsls	r3, r3, #4
 80051c2:	3332      	adds	r3, #50	; 0x32
 80051c4:	4a09      	ldr	r2, [pc, #36]	; (80051ec <UART_SetConfig+0x6f4>)
 80051c6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ca:	095b      	lsrs	r3, r3, #5
 80051cc:	f003 020f 	and.w	r2, r3, #15
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4442      	add	r2, r8
 80051d6:	609a      	str	r2, [r3, #8]
}
 80051d8:	e7ff      	b.n	80051da <UART_SetConfig+0x6e2>
 80051da:	bf00      	nop
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051e4:	40011000 	.word	0x40011000
 80051e8:	40011400 	.word	0x40011400
 80051ec:	51eb851f 	.word	0x51eb851f

080051f0 <__errno>:
 80051f0:	4b01      	ldr	r3, [pc, #4]	; (80051f8 <__errno+0x8>)
 80051f2:	6818      	ldr	r0, [r3, #0]
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	20000010 	.word	0x20000010

080051fc <__libc_init_array>:
 80051fc:	b570      	push	{r4, r5, r6, lr}
 80051fe:	4e0d      	ldr	r6, [pc, #52]	; (8005234 <__libc_init_array+0x38>)
 8005200:	4c0d      	ldr	r4, [pc, #52]	; (8005238 <__libc_init_array+0x3c>)
 8005202:	1ba4      	subs	r4, r4, r6
 8005204:	10a4      	asrs	r4, r4, #2
 8005206:	2500      	movs	r5, #0
 8005208:	42a5      	cmp	r5, r4
 800520a:	d109      	bne.n	8005220 <__libc_init_array+0x24>
 800520c:	4e0b      	ldr	r6, [pc, #44]	; (800523c <__libc_init_array+0x40>)
 800520e:	4c0c      	ldr	r4, [pc, #48]	; (8005240 <__libc_init_array+0x44>)
 8005210:	f000 fc26 	bl	8005a60 <_init>
 8005214:	1ba4      	subs	r4, r4, r6
 8005216:	10a4      	asrs	r4, r4, #2
 8005218:	2500      	movs	r5, #0
 800521a:	42a5      	cmp	r5, r4
 800521c:	d105      	bne.n	800522a <__libc_init_array+0x2e>
 800521e:	bd70      	pop	{r4, r5, r6, pc}
 8005220:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005224:	4798      	blx	r3
 8005226:	3501      	adds	r5, #1
 8005228:	e7ee      	b.n	8005208 <__libc_init_array+0xc>
 800522a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800522e:	4798      	blx	r3
 8005230:	3501      	adds	r5, #1
 8005232:	e7f2      	b.n	800521a <__libc_init_array+0x1e>
 8005234:	08005af4 	.word	0x08005af4
 8005238:	08005af4 	.word	0x08005af4
 800523c:	08005af4 	.word	0x08005af4
 8005240:	08005af8 	.word	0x08005af8

08005244 <memset>:
 8005244:	4402      	add	r2, r0
 8005246:	4603      	mov	r3, r0
 8005248:	4293      	cmp	r3, r2
 800524a:	d100      	bne.n	800524e <memset+0xa>
 800524c:	4770      	bx	lr
 800524e:	f803 1b01 	strb.w	r1, [r3], #1
 8005252:	e7f9      	b.n	8005248 <memset+0x4>

08005254 <siprintf>:
 8005254:	b40e      	push	{r1, r2, r3}
 8005256:	b500      	push	{lr}
 8005258:	b09c      	sub	sp, #112	; 0x70
 800525a:	ab1d      	add	r3, sp, #116	; 0x74
 800525c:	9002      	str	r0, [sp, #8]
 800525e:	9006      	str	r0, [sp, #24]
 8005260:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005264:	4809      	ldr	r0, [pc, #36]	; (800528c <siprintf+0x38>)
 8005266:	9107      	str	r1, [sp, #28]
 8005268:	9104      	str	r1, [sp, #16]
 800526a:	4909      	ldr	r1, [pc, #36]	; (8005290 <siprintf+0x3c>)
 800526c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005270:	9105      	str	r1, [sp, #20]
 8005272:	6800      	ldr	r0, [r0, #0]
 8005274:	9301      	str	r3, [sp, #4]
 8005276:	a902      	add	r1, sp, #8
 8005278:	f000 f866 	bl	8005348 <_svfiprintf_r>
 800527c:	9b02      	ldr	r3, [sp, #8]
 800527e:	2200      	movs	r2, #0
 8005280:	701a      	strb	r2, [r3, #0]
 8005282:	b01c      	add	sp, #112	; 0x70
 8005284:	f85d eb04 	ldr.w	lr, [sp], #4
 8005288:	b003      	add	sp, #12
 800528a:	4770      	bx	lr
 800528c:	20000010 	.word	0x20000010
 8005290:	ffff0208 	.word	0xffff0208

08005294 <__ssputs_r>:
 8005294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005298:	688e      	ldr	r6, [r1, #8]
 800529a:	429e      	cmp	r6, r3
 800529c:	4682      	mov	sl, r0
 800529e:	460c      	mov	r4, r1
 80052a0:	4690      	mov	r8, r2
 80052a2:	4699      	mov	r9, r3
 80052a4:	d837      	bhi.n	8005316 <__ssputs_r+0x82>
 80052a6:	898a      	ldrh	r2, [r1, #12]
 80052a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80052ac:	d031      	beq.n	8005312 <__ssputs_r+0x7e>
 80052ae:	6825      	ldr	r5, [r4, #0]
 80052b0:	6909      	ldr	r1, [r1, #16]
 80052b2:	1a6f      	subs	r7, r5, r1
 80052b4:	6965      	ldr	r5, [r4, #20]
 80052b6:	2302      	movs	r3, #2
 80052b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052bc:	fb95 f5f3 	sdiv	r5, r5, r3
 80052c0:	f109 0301 	add.w	r3, r9, #1
 80052c4:	443b      	add	r3, r7
 80052c6:	429d      	cmp	r5, r3
 80052c8:	bf38      	it	cc
 80052ca:	461d      	movcc	r5, r3
 80052cc:	0553      	lsls	r3, r2, #21
 80052ce:	d530      	bpl.n	8005332 <__ssputs_r+0x9e>
 80052d0:	4629      	mov	r1, r5
 80052d2:	f000 fb2b 	bl	800592c <_malloc_r>
 80052d6:	4606      	mov	r6, r0
 80052d8:	b950      	cbnz	r0, 80052f0 <__ssputs_r+0x5c>
 80052da:	230c      	movs	r3, #12
 80052dc:	f8ca 3000 	str.w	r3, [sl]
 80052e0:	89a3      	ldrh	r3, [r4, #12]
 80052e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052e6:	81a3      	strh	r3, [r4, #12]
 80052e8:	f04f 30ff 	mov.w	r0, #4294967295
 80052ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052f0:	463a      	mov	r2, r7
 80052f2:	6921      	ldr	r1, [r4, #16]
 80052f4:	f000 faa8 	bl	8005848 <memcpy>
 80052f8:	89a3      	ldrh	r3, [r4, #12]
 80052fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80052fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005302:	81a3      	strh	r3, [r4, #12]
 8005304:	6126      	str	r6, [r4, #16]
 8005306:	6165      	str	r5, [r4, #20]
 8005308:	443e      	add	r6, r7
 800530a:	1bed      	subs	r5, r5, r7
 800530c:	6026      	str	r6, [r4, #0]
 800530e:	60a5      	str	r5, [r4, #8]
 8005310:	464e      	mov	r6, r9
 8005312:	454e      	cmp	r6, r9
 8005314:	d900      	bls.n	8005318 <__ssputs_r+0x84>
 8005316:	464e      	mov	r6, r9
 8005318:	4632      	mov	r2, r6
 800531a:	4641      	mov	r1, r8
 800531c:	6820      	ldr	r0, [r4, #0]
 800531e:	f000 fa9e 	bl	800585e <memmove>
 8005322:	68a3      	ldr	r3, [r4, #8]
 8005324:	1b9b      	subs	r3, r3, r6
 8005326:	60a3      	str	r3, [r4, #8]
 8005328:	6823      	ldr	r3, [r4, #0]
 800532a:	441e      	add	r6, r3
 800532c:	6026      	str	r6, [r4, #0]
 800532e:	2000      	movs	r0, #0
 8005330:	e7dc      	b.n	80052ec <__ssputs_r+0x58>
 8005332:	462a      	mov	r2, r5
 8005334:	f000 fb54 	bl	80059e0 <_realloc_r>
 8005338:	4606      	mov	r6, r0
 800533a:	2800      	cmp	r0, #0
 800533c:	d1e2      	bne.n	8005304 <__ssputs_r+0x70>
 800533e:	6921      	ldr	r1, [r4, #16]
 8005340:	4650      	mov	r0, sl
 8005342:	f000 faa5 	bl	8005890 <_free_r>
 8005346:	e7c8      	b.n	80052da <__ssputs_r+0x46>

08005348 <_svfiprintf_r>:
 8005348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800534c:	461d      	mov	r5, r3
 800534e:	898b      	ldrh	r3, [r1, #12]
 8005350:	061f      	lsls	r7, r3, #24
 8005352:	b09d      	sub	sp, #116	; 0x74
 8005354:	4680      	mov	r8, r0
 8005356:	460c      	mov	r4, r1
 8005358:	4616      	mov	r6, r2
 800535a:	d50f      	bpl.n	800537c <_svfiprintf_r+0x34>
 800535c:	690b      	ldr	r3, [r1, #16]
 800535e:	b96b      	cbnz	r3, 800537c <_svfiprintf_r+0x34>
 8005360:	2140      	movs	r1, #64	; 0x40
 8005362:	f000 fae3 	bl	800592c <_malloc_r>
 8005366:	6020      	str	r0, [r4, #0]
 8005368:	6120      	str	r0, [r4, #16]
 800536a:	b928      	cbnz	r0, 8005378 <_svfiprintf_r+0x30>
 800536c:	230c      	movs	r3, #12
 800536e:	f8c8 3000 	str.w	r3, [r8]
 8005372:	f04f 30ff 	mov.w	r0, #4294967295
 8005376:	e0c8      	b.n	800550a <_svfiprintf_r+0x1c2>
 8005378:	2340      	movs	r3, #64	; 0x40
 800537a:	6163      	str	r3, [r4, #20]
 800537c:	2300      	movs	r3, #0
 800537e:	9309      	str	r3, [sp, #36]	; 0x24
 8005380:	2320      	movs	r3, #32
 8005382:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005386:	2330      	movs	r3, #48	; 0x30
 8005388:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800538c:	9503      	str	r5, [sp, #12]
 800538e:	f04f 0b01 	mov.w	fp, #1
 8005392:	4637      	mov	r7, r6
 8005394:	463d      	mov	r5, r7
 8005396:	f815 3b01 	ldrb.w	r3, [r5], #1
 800539a:	b10b      	cbz	r3, 80053a0 <_svfiprintf_r+0x58>
 800539c:	2b25      	cmp	r3, #37	; 0x25
 800539e:	d13e      	bne.n	800541e <_svfiprintf_r+0xd6>
 80053a0:	ebb7 0a06 	subs.w	sl, r7, r6
 80053a4:	d00b      	beq.n	80053be <_svfiprintf_r+0x76>
 80053a6:	4653      	mov	r3, sl
 80053a8:	4632      	mov	r2, r6
 80053aa:	4621      	mov	r1, r4
 80053ac:	4640      	mov	r0, r8
 80053ae:	f7ff ff71 	bl	8005294 <__ssputs_r>
 80053b2:	3001      	adds	r0, #1
 80053b4:	f000 80a4 	beq.w	8005500 <_svfiprintf_r+0x1b8>
 80053b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053ba:	4453      	add	r3, sl
 80053bc:	9309      	str	r3, [sp, #36]	; 0x24
 80053be:	783b      	ldrb	r3, [r7, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f000 809d 	beq.w	8005500 <_svfiprintf_r+0x1b8>
 80053c6:	2300      	movs	r3, #0
 80053c8:	f04f 32ff 	mov.w	r2, #4294967295
 80053cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053d0:	9304      	str	r3, [sp, #16]
 80053d2:	9307      	str	r3, [sp, #28]
 80053d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053d8:	931a      	str	r3, [sp, #104]	; 0x68
 80053da:	462f      	mov	r7, r5
 80053dc:	2205      	movs	r2, #5
 80053de:	f817 1b01 	ldrb.w	r1, [r7], #1
 80053e2:	4850      	ldr	r0, [pc, #320]	; (8005524 <_svfiprintf_r+0x1dc>)
 80053e4:	f7fa ff14 	bl	8000210 <memchr>
 80053e8:	9b04      	ldr	r3, [sp, #16]
 80053ea:	b9d0      	cbnz	r0, 8005422 <_svfiprintf_r+0xda>
 80053ec:	06d9      	lsls	r1, r3, #27
 80053ee:	bf44      	itt	mi
 80053f0:	2220      	movmi	r2, #32
 80053f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80053f6:	071a      	lsls	r2, r3, #28
 80053f8:	bf44      	itt	mi
 80053fa:	222b      	movmi	r2, #43	; 0x2b
 80053fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005400:	782a      	ldrb	r2, [r5, #0]
 8005402:	2a2a      	cmp	r2, #42	; 0x2a
 8005404:	d015      	beq.n	8005432 <_svfiprintf_r+0xea>
 8005406:	9a07      	ldr	r2, [sp, #28]
 8005408:	462f      	mov	r7, r5
 800540a:	2000      	movs	r0, #0
 800540c:	250a      	movs	r5, #10
 800540e:	4639      	mov	r1, r7
 8005410:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005414:	3b30      	subs	r3, #48	; 0x30
 8005416:	2b09      	cmp	r3, #9
 8005418:	d94d      	bls.n	80054b6 <_svfiprintf_r+0x16e>
 800541a:	b1b8      	cbz	r0, 800544c <_svfiprintf_r+0x104>
 800541c:	e00f      	b.n	800543e <_svfiprintf_r+0xf6>
 800541e:	462f      	mov	r7, r5
 8005420:	e7b8      	b.n	8005394 <_svfiprintf_r+0x4c>
 8005422:	4a40      	ldr	r2, [pc, #256]	; (8005524 <_svfiprintf_r+0x1dc>)
 8005424:	1a80      	subs	r0, r0, r2
 8005426:	fa0b f000 	lsl.w	r0, fp, r0
 800542a:	4318      	orrs	r0, r3
 800542c:	9004      	str	r0, [sp, #16]
 800542e:	463d      	mov	r5, r7
 8005430:	e7d3      	b.n	80053da <_svfiprintf_r+0x92>
 8005432:	9a03      	ldr	r2, [sp, #12]
 8005434:	1d11      	adds	r1, r2, #4
 8005436:	6812      	ldr	r2, [r2, #0]
 8005438:	9103      	str	r1, [sp, #12]
 800543a:	2a00      	cmp	r2, #0
 800543c:	db01      	blt.n	8005442 <_svfiprintf_r+0xfa>
 800543e:	9207      	str	r2, [sp, #28]
 8005440:	e004      	b.n	800544c <_svfiprintf_r+0x104>
 8005442:	4252      	negs	r2, r2
 8005444:	f043 0302 	orr.w	r3, r3, #2
 8005448:	9207      	str	r2, [sp, #28]
 800544a:	9304      	str	r3, [sp, #16]
 800544c:	783b      	ldrb	r3, [r7, #0]
 800544e:	2b2e      	cmp	r3, #46	; 0x2e
 8005450:	d10c      	bne.n	800546c <_svfiprintf_r+0x124>
 8005452:	787b      	ldrb	r3, [r7, #1]
 8005454:	2b2a      	cmp	r3, #42	; 0x2a
 8005456:	d133      	bne.n	80054c0 <_svfiprintf_r+0x178>
 8005458:	9b03      	ldr	r3, [sp, #12]
 800545a:	1d1a      	adds	r2, r3, #4
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	9203      	str	r2, [sp, #12]
 8005460:	2b00      	cmp	r3, #0
 8005462:	bfb8      	it	lt
 8005464:	f04f 33ff 	movlt.w	r3, #4294967295
 8005468:	3702      	adds	r7, #2
 800546a:	9305      	str	r3, [sp, #20]
 800546c:	4d2e      	ldr	r5, [pc, #184]	; (8005528 <_svfiprintf_r+0x1e0>)
 800546e:	7839      	ldrb	r1, [r7, #0]
 8005470:	2203      	movs	r2, #3
 8005472:	4628      	mov	r0, r5
 8005474:	f7fa fecc 	bl	8000210 <memchr>
 8005478:	b138      	cbz	r0, 800548a <_svfiprintf_r+0x142>
 800547a:	2340      	movs	r3, #64	; 0x40
 800547c:	1b40      	subs	r0, r0, r5
 800547e:	fa03 f000 	lsl.w	r0, r3, r0
 8005482:	9b04      	ldr	r3, [sp, #16]
 8005484:	4303      	orrs	r3, r0
 8005486:	3701      	adds	r7, #1
 8005488:	9304      	str	r3, [sp, #16]
 800548a:	7839      	ldrb	r1, [r7, #0]
 800548c:	4827      	ldr	r0, [pc, #156]	; (800552c <_svfiprintf_r+0x1e4>)
 800548e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005492:	2206      	movs	r2, #6
 8005494:	1c7e      	adds	r6, r7, #1
 8005496:	f7fa febb 	bl	8000210 <memchr>
 800549a:	2800      	cmp	r0, #0
 800549c:	d038      	beq.n	8005510 <_svfiprintf_r+0x1c8>
 800549e:	4b24      	ldr	r3, [pc, #144]	; (8005530 <_svfiprintf_r+0x1e8>)
 80054a0:	bb13      	cbnz	r3, 80054e8 <_svfiprintf_r+0x1a0>
 80054a2:	9b03      	ldr	r3, [sp, #12]
 80054a4:	3307      	adds	r3, #7
 80054a6:	f023 0307 	bic.w	r3, r3, #7
 80054aa:	3308      	adds	r3, #8
 80054ac:	9303      	str	r3, [sp, #12]
 80054ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054b0:	444b      	add	r3, r9
 80054b2:	9309      	str	r3, [sp, #36]	; 0x24
 80054b4:	e76d      	b.n	8005392 <_svfiprintf_r+0x4a>
 80054b6:	fb05 3202 	mla	r2, r5, r2, r3
 80054ba:	2001      	movs	r0, #1
 80054bc:	460f      	mov	r7, r1
 80054be:	e7a6      	b.n	800540e <_svfiprintf_r+0xc6>
 80054c0:	2300      	movs	r3, #0
 80054c2:	3701      	adds	r7, #1
 80054c4:	9305      	str	r3, [sp, #20]
 80054c6:	4619      	mov	r1, r3
 80054c8:	250a      	movs	r5, #10
 80054ca:	4638      	mov	r0, r7
 80054cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054d0:	3a30      	subs	r2, #48	; 0x30
 80054d2:	2a09      	cmp	r2, #9
 80054d4:	d903      	bls.n	80054de <_svfiprintf_r+0x196>
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d0c8      	beq.n	800546c <_svfiprintf_r+0x124>
 80054da:	9105      	str	r1, [sp, #20]
 80054dc:	e7c6      	b.n	800546c <_svfiprintf_r+0x124>
 80054de:	fb05 2101 	mla	r1, r5, r1, r2
 80054e2:	2301      	movs	r3, #1
 80054e4:	4607      	mov	r7, r0
 80054e6:	e7f0      	b.n	80054ca <_svfiprintf_r+0x182>
 80054e8:	ab03      	add	r3, sp, #12
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	4622      	mov	r2, r4
 80054ee:	4b11      	ldr	r3, [pc, #68]	; (8005534 <_svfiprintf_r+0x1ec>)
 80054f0:	a904      	add	r1, sp, #16
 80054f2:	4640      	mov	r0, r8
 80054f4:	f3af 8000 	nop.w
 80054f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80054fc:	4681      	mov	r9, r0
 80054fe:	d1d6      	bne.n	80054ae <_svfiprintf_r+0x166>
 8005500:	89a3      	ldrh	r3, [r4, #12]
 8005502:	065b      	lsls	r3, r3, #25
 8005504:	f53f af35 	bmi.w	8005372 <_svfiprintf_r+0x2a>
 8005508:	9809      	ldr	r0, [sp, #36]	; 0x24
 800550a:	b01d      	add	sp, #116	; 0x74
 800550c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005510:	ab03      	add	r3, sp, #12
 8005512:	9300      	str	r3, [sp, #0]
 8005514:	4622      	mov	r2, r4
 8005516:	4b07      	ldr	r3, [pc, #28]	; (8005534 <_svfiprintf_r+0x1ec>)
 8005518:	a904      	add	r1, sp, #16
 800551a:	4640      	mov	r0, r8
 800551c:	f000 f882 	bl	8005624 <_printf_i>
 8005520:	e7ea      	b.n	80054f8 <_svfiprintf_r+0x1b0>
 8005522:	bf00      	nop
 8005524:	08005ab8 	.word	0x08005ab8
 8005528:	08005abe 	.word	0x08005abe
 800552c:	08005ac2 	.word	0x08005ac2
 8005530:	00000000 	.word	0x00000000
 8005534:	08005295 	.word	0x08005295

08005538 <_printf_common>:
 8005538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800553c:	4691      	mov	r9, r2
 800553e:	461f      	mov	r7, r3
 8005540:	688a      	ldr	r2, [r1, #8]
 8005542:	690b      	ldr	r3, [r1, #16]
 8005544:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005548:	4293      	cmp	r3, r2
 800554a:	bfb8      	it	lt
 800554c:	4613      	movlt	r3, r2
 800554e:	f8c9 3000 	str.w	r3, [r9]
 8005552:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005556:	4606      	mov	r6, r0
 8005558:	460c      	mov	r4, r1
 800555a:	b112      	cbz	r2, 8005562 <_printf_common+0x2a>
 800555c:	3301      	adds	r3, #1
 800555e:	f8c9 3000 	str.w	r3, [r9]
 8005562:	6823      	ldr	r3, [r4, #0]
 8005564:	0699      	lsls	r1, r3, #26
 8005566:	bf42      	ittt	mi
 8005568:	f8d9 3000 	ldrmi.w	r3, [r9]
 800556c:	3302      	addmi	r3, #2
 800556e:	f8c9 3000 	strmi.w	r3, [r9]
 8005572:	6825      	ldr	r5, [r4, #0]
 8005574:	f015 0506 	ands.w	r5, r5, #6
 8005578:	d107      	bne.n	800558a <_printf_common+0x52>
 800557a:	f104 0a19 	add.w	sl, r4, #25
 800557e:	68e3      	ldr	r3, [r4, #12]
 8005580:	f8d9 2000 	ldr.w	r2, [r9]
 8005584:	1a9b      	subs	r3, r3, r2
 8005586:	42ab      	cmp	r3, r5
 8005588:	dc28      	bgt.n	80055dc <_printf_common+0xa4>
 800558a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800558e:	6822      	ldr	r2, [r4, #0]
 8005590:	3300      	adds	r3, #0
 8005592:	bf18      	it	ne
 8005594:	2301      	movne	r3, #1
 8005596:	0692      	lsls	r2, r2, #26
 8005598:	d42d      	bmi.n	80055f6 <_printf_common+0xbe>
 800559a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800559e:	4639      	mov	r1, r7
 80055a0:	4630      	mov	r0, r6
 80055a2:	47c0      	blx	r8
 80055a4:	3001      	adds	r0, #1
 80055a6:	d020      	beq.n	80055ea <_printf_common+0xb2>
 80055a8:	6823      	ldr	r3, [r4, #0]
 80055aa:	68e5      	ldr	r5, [r4, #12]
 80055ac:	f8d9 2000 	ldr.w	r2, [r9]
 80055b0:	f003 0306 	and.w	r3, r3, #6
 80055b4:	2b04      	cmp	r3, #4
 80055b6:	bf08      	it	eq
 80055b8:	1aad      	subeq	r5, r5, r2
 80055ba:	68a3      	ldr	r3, [r4, #8]
 80055bc:	6922      	ldr	r2, [r4, #16]
 80055be:	bf0c      	ite	eq
 80055c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055c4:	2500      	movne	r5, #0
 80055c6:	4293      	cmp	r3, r2
 80055c8:	bfc4      	itt	gt
 80055ca:	1a9b      	subgt	r3, r3, r2
 80055cc:	18ed      	addgt	r5, r5, r3
 80055ce:	f04f 0900 	mov.w	r9, #0
 80055d2:	341a      	adds	r4, #26
 80055d4:	454d      	cmp	r5, r9
 80055d6:	d11a      	bne.n	800560e <_printf_common+0xd6>
 80055d8:	2000      	movs	r0, #0
 80055da:	e008      	b.n	80055ee <_printf_common+0xb6>
 80055dc:	2301      	movs	r3, #1
 80055de:	4652      	mov	r2, sl
 80055e0:	4639      	mov	r1, r7
 80055e2:	4630      	mov	r0, r6
 80055e4:	47c0      	blx	r8
 80055e6:	3001      	adds	r0, #1
 80055e8:	d103      	bne.n	80055f2 <_printf_common+0xba>
 80055ea:	f04f 30ff 	mov.w	r0, #4294967295
 80055ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055f2:	3501      	adds	r5, #1
 80055f4:	e7c3      	b.n	800557e <_printf_common+0x46>
 80055f6:	18e1      	adds	r1, r4, r3
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	2030      	movs	r0, #48	; 0x30
 80055fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005600:	4422      	add	r2, r4
 8005602:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005606:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800560a:	3302      	adds	r3, #2
 800560c:	e7c5      	b.n	800559a <_printf_common+0x62>
 800560e:	2301      	movs	r3, #1
 8005610:	4622      	mov	r2, r4
 8005612:	4639      	mov	r1, r7
 8005614:	4630      	mov	r0, r6
 8005616:	47c0      	blx	r8
 8005618:	3001      	adds	r0, #1
 800561a:	d0e6      	beq.n	80055ea <_printf_common+0xb2>
 800561c:	f109 0901 	add.w	r9, r9, #1
 8005620:	e7d8      	b.n	80055d4 <_printf_common+0x9c>
	...

08005624 <_printf_i>:
 8005624:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005628:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800562c:	460c      	mov	r4, r1
 800562e:	7e09      	ldrb	r1, [r1, #24]
 8005630:	b085      	sub	sp, #20
 8005632:	296e      	cmp	r1, #110	; 0x6e
 8005634:	4617      	mov	r7, r2
 8005636:	4606      	mov	r6, r0
 8005638:	4698      	mov	r8, r3
 800563a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800563c:	f000 80b3 	beq.w	80057a6 <_printf_i+0x182>
 8005640:	d822      	bhi.n	8005688 <_printf_i+0x64>
 8005642:	2963      	cmp	r1, #99	; 0x63
 8005644:	d036      	beq.n	80056b4 <_printf_i+0x90>
 8005646:	d80a      	bhi.n	800565e <_printf_i+0x3a>
 8005648:	2900      	cmp	r1, #0
 800564a:	f000 80b9 	beq.w	80057c0 <_printf_i+0x19c>
 800564e:	2958      	cmp	r1, #88	; 0x58
 8005650:	f000 8083 	beq.w	800575a <_printf_i+0x136>
 8005654:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005658:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800565c:	e032      	b.n	80056c4 <_printf_i+0xa0>
 800565e:	2964      	cmp	r1, #100	; 0x64
 8005660:	d001      	beq.n	8005666 <_printf_i+0x42>
 8005662:	2969      	cmp	r1, #105	; 0x69
 8005664:	d1f6      	bne.n	8005654 <_printf_i+0x30>
 8005666:	6820      	ldr	r0, [r4, #0]
 8005668:	6813      	ldr	r3, [r2, #0]
 800566a:	0605      	lsls	r5, r0, #24
 800566c:	f103 0104 	add.w	r1, r3, #4
 8005670:	d52a      	bpl.n	80056c8 <_printf_i+0xa4>
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6011      	str	r1, [r2, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	da03      	bge.n	8005682 <_printf_i+0x5e>
 800567a:	222d      	movs	r2, #45	; 0x2d
 800567c:	425b      	negs	r3, r3
 800567e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005682:	486f      	ldr	r0, [pc, #444]	; (8005840 <_printf_i+0x21c>)
 8005684:	220a      	movs	r2, #10
 8005686:	e039      	b.n	80056fc <_printf_i+0xd8>
 8005688:	2973      	cmp	r1, #115	; 0x73
 800568a:	f000 809d 	beq.w	80057c8 <_printf_i+0x1a4>
 800568e:	d808      	bhi.n	80056a2 <_printf_i+0x7e>
 8005690:	296f      	cmp	r1, #111	; 0x6f
 8005692:	d020      	beq.n	80056d6 <_printf_i+0xb2>
 8005694:	2970      	cmp	r1, #112	; 0x70
 8005696:	d1dd      	bne.n	8005654 <_printf_i+0x30>
 8005698:	6823      	ldr	r3, [r4, #0]
 800569a:	f043 0320 	orr.w	r3, r3, #32
 800569e:	6023      	str	r3, [r4, #0]
 80056a0:	e003      	b.n	80056aa <_printf_i+0x86>
 80056a2:	2975      	cmp	r1, #117	; 0x75
 80056a4:	d017      	beq.n	80056d6 <_printf_i+0xb2>
 80056a6:	2978      	cmp	r1, #120	; 0x78
 80056a8:	d1d4      	bne.n	8005654 <_printf_i+0x30>
 80056aa:	2378      	movs	r3, #120	; 0x78
 80056ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056b0:	4864      	ldr	r0, [pc, #400]	; (8005844 <_printf_i+0x220>)
 80056b2:	e055      	b.n	8005760 <_printf_i+0x13c>
 80056b4:	6813      	ldr	r3, [r2, #0]
 80056b6:	1d19      	adds	r1, r3, #4
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6011      	str	r1, [r2, #0]
 80056bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056c4:	2301      	movs	r3, #1
 80056c6:	e08c      	b.n	80057e2 <_printf_i+0x1be>
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6011      	str	r1, [r2, #0]
 80056cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80056d0:	bf18      	it	ne
 80056d2:	b21b      	sxthne	r3, r3
 80056d4:	e7cf      	b.n	8005676 <_printf_i+0x52>
 80056d6:	6813      	ldr	r3, [r2, #0]
 80056d8:	6825      	ldr	r5, [r4, #0]
 80056da:	1d18      	adds	r0, r3, #4
 80056dc:	6010      	str	r0, [r2, #0]
 80056de:	0628      	lsls	r0, r5, #24
 80056e0:	d501      	bpl.n	80056e6 <_printf_i+0xc2>
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	e002      	b.n	80056ec <_printf_i+0xc8>
 80056e6:	0668      	lsls	r0, r5, #25
 80056e8:	d5fb      	bpl.n	80056e2 <_printf_i+0xbe>
 80056ea:	881b      	ldrh	r3, [r3, #0]
 80056ec:	4854      	ldr	r0, [pc, #336]	; (8005840 <_printf_i+0x21c>)
 80056ee:	296f      	cmp	r1, #111	; 0x6f
 80056f0:	bf14      	ite	ne
 80056f2:	220a      	movne	r2, #10
 80056f4:	2208      	moveq	r2, #8
 80056f6:	2100      	movs	r1, #0
 80056f8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80056fc:	6865      	ldr	r5, [r4, #4]
 80056fe:	60a5      	str	r5, [r4, #8]
 8005700:	2d00      	cmp	r5, #0
 8005702:	f2c0 8095 	blt.w	8005830 <_printf_i+0x20c>
 8005706:	6821      	ldr	r1, [r4, #0]
 8005708:	f021 0104 	bic.w	r1, r1, #4
 800570c:	6021      	str	r1, [r4, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d13d      	bne.n	800578e <_printf_i+0x16a>
 8005712:	2d00      	cmp	r5, #0
 8005714:	f040 808e 	bne.w	8005834 <_printf_i+0x210>
 8005718:	4665      	mov	r5, ip
 800571a:	2a08      	cmp	r2, #8
 800571c:	d10b      	bne.n	8005736 <_printf_i+0x112>
 800571e:	6823      	ldr	r3, [r4, #0]
 8005720:	07db      	lsls	r3, r3, #31
 8005722:	d508      	bpl.n	8005736 <_printf_i+0x112>
 8005724:	6923      	ldr	r3, [r4, #16]
 8005726:	6862      	ldr	r2, [r4, #4]
 8005728:	429a      	cmp	r2, r3
 800572a:	bfde      	ittt	le
 800572c:	2330      	movle	r3, #48	; 0x30
 800572e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005732:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005736:	ebac 0305 	sub.w	r3, ip, r5
 800573a:	6123      	str	r3, [r4, #16]
 800573c:	f8cd 8000 	str.w	r8, [sp]
 8005740:	463b      	mov	r3, r7
 8005742:	aa03      	add	r2, sp, #12
 8005744:	4621      	mov	r1, r4
 8005746:	4630      	mov	r0, r6
 8005748:	f7ff fef6 	bl	8005538 <_printf_common>
 800574c:	3001      	adds	r0, #1
 800574e:	d14d      	bne.n	80057ec <_printf_i+0x1c8>
 8005750:	f04f 30ff 	mov.w	r0, #4294967295
 8005754:	b005      	add	sp, #20
 8005756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800575a:	4839      	ldr	r0, [pc, #228]	; (8005840 <_printf_i+0x21c>)
 800575c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005760:	6813      	ldr	r3, [r2, #0]
 8005762:	6821      	ldr	r1, [r4, #0]
 8005764:	1d1d      	adds	r5, r3, #4
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6015      	str	r5, [r2, #0]
 800576a:	060a      	lsls	r2, r1, #24
 800576c:	d50b      	bpl.n	8005786 <_printf_i+0x162>
 800576e:	07ca      	lsls	r2, r1, #31
 8005770:	bf44      	itt	mi
 8005772:	f041 0120 	orrmi.w	r1, r1, #32
 8005776:	6021      	strmi	r1, [r4, #0]
 8005778:	b91b      	cbnz	r3, 8005782 <_printf_i+0x15e>
 800577a:	6822      	ldr	r2, [r4, #0]
 800577c:	f022 0220 	bic.w	r2, r2, #32
 8005780:	6022      	str	r2, [r4, #0]
 8005782:	2210      	movs	r2, #16
 8005784:	e7b7      	b.n	80056f6 <_printf_i+0xd2>
 8005786:	064d      	lsls	r5, r1, #25
 8005788:	bf48      	it	mi
 800578a:	b29b      	uxthmi	r3, r3
 800578c:	e7ef      	b.n	800576e <_printf_i+0x14a>
 800578e:	4665      	mov	r5, ip
 8005790:	fbb3 f1f2 	udiv	r1, r3, r2
 8005794:	fb02 3311 	mls	r3, r2, r1, r3
 8005798:	5cc3      	ldrb	r3, [r0, r3]
 800579a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800579e:	460b      	mov	r3, r1
 80057a0:	2900      	cmp	r1, #0
 80057a2:	d1f5      	bne.n	8005790 <_printf_i+0x16c>
 80057a4:	e7b9      	b.n	800571a <_printf_i+0xf6>
 80057a6:	6813      	ldr	r3, [r2, #0]
 80057a8:	6825      	ldr	r5, [r4, #0]
 80057aa:	6961      	ldr	r1, [r4, #20]
 80057ac:	1d18      	adds	r0, r3, #4
 80057ae:	6010      	str	r0, [r2, #0]
 80057b0:	0628      	lsls	r0, r5, #24
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	d501      	bpl.n	80057ba <_printf_i+0x196>
 80057b6:	6019      	str	r1, [r3, #0]
 80057b8:	e002      	b.n	80057c0 <_printf_i+0x19c>
 80057ba:	066a      	lsls	r2, r5, #25
 80057bc:	d5fb      	bpl.n	80057b6 <_printf_i+0x192>
 80057be:	8019      	strh	r1, [r3, #0]
 80057c0:	2300      	movs	r3, #0
 80057c2:	6123      	str	r3, [r4, #16]
 80057c4:	4665      	mov	r5, ip
 80057c6:	e7b9      	b.n	800573c <_printf_i+0x118>
 80057c8:	6813      	ldr	r3, [r2, #0]
 80057ca:	1d19      	adds	r1, r3, #4
 80057cc:	6011      	str	r1, [r2, #0]
 80057ce:	681d      	ldr	r5, [r3, #0]
 80057d0:	6862      	ldr	r2, [r4, #4]
 80057d2:	2100      	movs	r1, #0
 80057d4:	4628      	mov	r0, r5
 80057d6:	f7fa fd1b 	bl	8000210 <memchr>
 80057da:	b108      	cbz	r0, 80057e0 <_printf_i+0x1bc>
 80057dc:	1b40      	subs	r0, r0, r5
 80057de:	6060      	str	r0, [r4, #4]
 80057e0:	6863      	ldr	r3, [r4, #4]
 80057e2:	6123      	str	r3, [r4, #16]
 80057e4:	2300      	movs	r3, #0
 80057e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057ea:	e7a7      	b.n	800573c <_printf_i+0x118>
 80057ec:	6923      	ldr	r3, [r4, #16]
 80057ee:	462a      	mov	r2, r5
 80057f0:	4639      	mov	r1, r7
 80057f2:	4630      	mov	r0, r6
 80057f4:	47c0      	blx	r8
 80057f6:	3001      	adds	r0, #1
 80057f8:	d0aa      	beq.n	8005750 <_printf_i+0x12c>
 80057fa:	6823      	ldr	r3, [r4, #0]
 80057fc:	079b      	lsls	r3, r3, #30
 80057fe:	d413      	bmi.n	8005828 <_printf_i+0x204>
 8005800:	68e0      	ldr	r0, [r4, #12]
 8005802:	9b03      	ldr	r3, [sp, #12]
 8005804:	4298      	cmp	r0, r3
 8005806:	bfb8      	it	lt
 8005808:	4618      	movlt	r0, r3
 800580a:	e7a3      	b.n	8005754 <_printf_i+0x130>
 800580c:	2301      	movs	r3, #1
 800580e:	464a      	mov	r2, r9
 8005810:	4639      	mov	r1, r7
 8005812:	4630      	mov	r0, r6
 8005814:	47c0      	blx	r8
 8005816:	3001      	adds	r0, #1
 8005818:	d09a      	beq.n	8005750 <_printf_i+0x12c>
 800581a:	3501      	adds	r5, #1
 800581c:	68e3      	ldr	r3, [r4, #12]
 800581e:	9a03      	ldr	r2, [sp, #12]
 8005820:	1a9b      	subs	r3, r3, r2
 8005822:	42ab      	cmp	r3, r5
 8005824:	dcf2      	bgt.n	800580c <_printf_i+0x1e8>
 8005826:	e7eb      	b.n	8005800 <_printf_i+0x1dc>
 8005828:	2500      	movs	r5, #0
 800582a:	f104 0919 	add.w	r9, r4, #25
 800582e:	e7f5      	b.n	800581c <_printf_i+0x1f8>
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1ac      	bne.n	800578e <_printf_i+0x16a>
 8005834:	7803      	ldrb	r3, [r0, #0]
 8005836:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800583a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800583e:	e76c      	b.n	800571a <_printf_i+0xf6>
 8005840:	08005ac9 	.word	0x08005ac9
 8005844:	08005ada 	.word	0x08005ada

08005848 <memcpy>:
 8005848:	b510      	push	{r4, lr}
 800584a:	1e43      	subs	r3, r0, #1
 800584c:	440a      	add	r2, r1
 800584e:	4291      	cmp	r1, r2
 8005850:	d100      	bne.n	8005854 <memcpy+0xc>
 8005852:	bd10      	pop	{r4, pc}
 8005854:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005858:	f803 4f01 	strb.w	r4, [r3, #1]!
 800585c:	e7f7      	b.n	800584e <memcpy+0x6>

0800585e <memmove>:
 800585e:	4288      	cmp	r0, r1
 8005860:	b510      	push	{r4, lr}
 8005862:	eb01 0302 	add.w	r3, r1, r2
 8005866:	d807      	bhi.n	8005878 <memmove+0x1a>
 8005868:	1e42      	subs	r2, r0, #1
 800586a:	4299      	cmp	r1, r3
 800586c:	d00a      	beq.n	8005884 <memmove+0x26>
 800586e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005872:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005876:	e7f8      	b.n	800586a <memmove+0xc>
 8005878:	4283      	cmp	r3, r0
 800587a:	d9f5      	bls.n	8005868 <memmove+0xa>
 800587c:	1881      	adds	r1, r0, r2
 800587e:	1ad2      	subs	r2, r2, r3
 8005880:	42d3      	cmn	r3, r2
 8005882:	d100      	bne.n	8005886 <memmove+0x28>
 8005884:	bd10      	pop	{r4, pc}
 8005886:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800588a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800588e:	e7f7      	b.n	8005880 <memmove+0x22>

08005890 <_free_r>:
 8005890:	b538      	push	{r3, r4, r5, lr}
 8005892:	4605      	mov	r5, r0
 8005894:	2900      	cmp	r1, #0
 8005896:	d045      	beq.n	8005924 <_free_r+0x94>
 8005898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800589c:	1f0c      	subs	r4, r1, #4
 800589e:	2b00      	cmp	r3, #0
 80058a0:	bfb8      	it	lt
 80058a2:	18e4      	addlt	r4, r4, r3
 80058a4:	f000 f8d2 	bl	8005a4c <__malloc_lock>
 80058a8:	4a1f      	ldr	r2, [pc, #124]	; (8005928 <_free_r+0x98>)
 80058aa:	6813      	ldr	r3, [r2, #0]
 80058ac:	4610      	mov	r0, r2
 80058ae:	b933      	cbnz	r3, 80058be <_free_r+0x2e>
 80058b0:	6063      	str	r3, [r4, #4]
 80058b2:	6014      	str	r4, [r2, #0]
 80058b4:	4628      	mov	r0, r5
 80058b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058ba:	f000 b8c8 	b.w	8005a4e <__malloc_unlock>
 80058be:	42a3      	cmp	r3, r4
 80058c0:	d90c      	bls.n	80058dc <_free_r+0x4c>
 80058c2:	6821      	ldr	r1, [r4, #0]
 80058c4:	1862      	adds	r2, r4, r1
 80058c6:	4293      	cmp	r3, r2
 80058c8:	bf04      	itt	eq
 80058ca:	681a      	ldreq	r2, [r3, #0]
 80058cc:	685b      	ldreq	r3, [r3, #4]
 80058ce:	6063      	str	r3, [r4, #4]
 80058d0:	bf04      	itt	eq
 80058d2:	1852      	addeq	r2, r2, r1
 80058d4:	6022      	streq	r2, [r4, #0]
 80058d6:	6004      	str	r4, [r0, #0]
 80058d8:	e7ec      	b.n	80058b4 <_free_r+0x24>
 80058da:	4613      	mov	r3, r2
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	b10a      	cbz	r2, 80058e4 <_free_r+0x54>
 80058e0:	42a2      	cmp	r2, r4
 80058e2:	d9fa      	bls.n	80058da <_free_r+0x4a>
 80058e4:	6819      	ldr	r1, [r3, #0]
 80058e6:	1858      	adds	r0, r3, r1
 80058e8:	42a0      	cmp	r0, r4
 80058ea:	d10b      	bne.n	8005904 <_free_r+0x74>
 80058ec:	6820      	ldr	r0, [r4, #0]
 80058ee:	4401      	add	r1, r0
 80058f0:	1858      	adds	r0, r3, r1
 80058f2:	4282      	cmp	r2, r0
 80058f4:	6019      	str	r1, [r3, #0]
 80058f6:	d1dd      	bne.n	80058b4 <_free_r+0x24>
 80058f8:	6810      	ldr	r0, [r2, #0]
 80058fa:	6852      	ldr	r2, [r2, #4]
 80058fc:	605a      	str	r2, [r3, #4]
 80058fe:	4401      	add	r1, r0
 8005900:	6019      	str	r1, [r3, #0]
 8005902:	e7d7      	b.n	80058b4 <_free_r+0x24>
 8005904:	d902      	bls.n	800590c <_free_r+0x7c>
 8005906:	230c      	movs	r3, #12
 8005908:	602b      	str	r3, [r5, #0]
 800590a:	e7d3      	b.n	80058b4 <_free_r+0x24>
 800590c:	6820      	ldr	r0, [r4, #0]
 800590e:	1821      	adds	r1, r4, r0
 8005910:	428a      	cmp	r2, r1
 8005912:	bf04      	itt	eq
 8005914:	6811      	ldreq	r1, [r2, #0]
 8005916:	6852      	ldreq	r2, [r2, #4]
 8005918:	6062      	str	r2, [r4, #4]
 800591a:	bf04      	itt	eq
 800591c:	1809      	addeq	r1, r1, r0
 800591e:	6021      	streq	r1, [r4, #0]
 8005920:	605c      	str	r4, [r3, #4]
 8005922:	e7c7      	b.n	80058b4 <_free_r+0x24>
 8005924:	bd38      	pop	{r3, r4, r5, pc}
 8005926:	bf00      	nop
 8005928:	200000a0 	.word	0x200000a0

0800592c <_malloc_r>:
 800592c:	b570      	push	{r4, r5, r6, lr}
 800592e:	1ccd      	adds	r5, r1, #3
 8005930:	f025 0503 	bic.w	r5, r5, #3
 8005934:	3508      	adds	r5, #8
 8005936:	2d0c      	cmp	r5, #12
 8005938:	bf38      	it	cc
 800593a:	250c      	movcc	r5, #12
 800593c:	2d00      	cmp	r5, #0
 800593e:	4606      	mov	r6, r0
 8005940:	db01      	blt.n	8005946 <_malloc_r+0x1a>
 8005942:	42a9      	cmp	r1, r5
 8005944:	d903      	bls.n	800594e <_malloc_r+0x22>
 8005946:	230c      	movs	r3, #12
 8005948:	6033      	str	r3, [r6, #0]
 800594a:	2000      	movs	r0, #0
 800594c:	bd70      	pop	{r4, r5, r6, pc}
 800594e:	f000 f87d 	bl	8005a4c <__malloc_lock>
 8005952:	4a21      	ldr	r2, [pc, #132]	; (80059d8 <_malloc_r+0xac>)
 8005954:	6814      	ldr	r4, [r2, #0]
 8005956:	4621      	mov	r1, r4
 8005958:	b991      	cbnz	r1, 8005980 <_malloc_r+0x54>
 800595a:	4c20      	ldr	r4, [pc, #128]	; (80059dc <_malloc_r+0xb0>)
 800595c:	6823      	ldr	r3, [r4, #0]
 800595e:	b91b      	cbnz	r3, 8005968 <_malloc_r+0x3c>
 8005960:	4630      	mov	r0, r6
 8005962:	f000 f863 	bl	8005a2c <_sbrk_r>
 8005966:	6020      	str	r0, [r4, #0]
 8005968:	4629      	mov	r1, r5
 800596a:	4630      	mov	r0, r6
 800596c:	f000 f85e 	bl	8005a2c <_sbrk_r>
 8005970:	1c43      	adds	r3, r0, #1
 8005972:	d124      	bne.n	80059be <_malloc_r+0x92>
 8005974:	230c      	movs	r3, #12
 8005976:	6033      	str	r3, [r6, #0]
 8005978:	4630      	mov	r0, r6
 800597a:	f000 f868 	bl	8005a4e <__malloc_unlock>
 800597e:	e7e4      	b.n	800594a <_malloc_r+0x1e>
 8005980:	680b      	ldr	r3, [r1, #0]
 8005982:	1b5b      	subs	r3, r3, r5
 8005984:	d418      	bmi.n	80059b8 <_malloc_r+0x8c>
 8005986:	2b0b      	cmp	r3, #11
 8005988:	d90f      	bls.n	80059aa <_malloc_r+0x7e>
 800598a:	600b      	str	r3, [r1, #0]
 800598c:	50cd      	str	r5, [r1, r3]
 800598e:	18cc      	adds	r4, r1, r3
 8005990:	4630      	mov	r0, r6
 8005992:	f000 f85c 	bl	8005a4e <__malloc_unlock>
 8005996:	f104 000b 	add.w	r0, r4, #11
 800599a:	1d23      	adds	r3, r4, #4
 800599c:	f020 0007 	bic.w	r0, r0, #7
 80059a0:	1ac3      	subs	r3, r0, r3
 80059a2:	d0d3      	beq.n	800594c <_malloc_r+0x20>
 80059a4:	425a      	negs	r2, r3
 80059a6:	50e2      	str	r2, [r4, r3]
 80059a8:	e7d0      	b.n	800594c <_malloc_r+0x20>
 80059aa:	428c      	cmp	r4, r1
 80059ac:	684b      	ldr	r3, [r1, #4]
 80059ae:	bf16      	itet	ne
 80059b0:	6063      	strne	r3, [r4, #4]
 80059b2:	6013      	streq	r3, [r2, #0]
 80059b4:	460c      	movne	r4, r1
 80059b6:	e7eb      	b.n	8005990 <_malloc_r+0x64>
 80059b8:	460c      	mov	r4, r1
 80059ba:	6849      	ldr	r1, [r1, #4]
 80059bc:	e7cc      	b.n	8005958 <_malloc_r+0x2c>
 80059be:	1cc4      	adds	r4, r0, #3
 80059c0:	f024 0403 	bic.w	r4, r4, #3
 80059c4:	42a0      	cmp	r0, r4
 80059c6:	d005      	beq.n	80059d4 <_malloc_r+0xa8>
 80059c8:	1a21      	subs	r1, r4, r0
 80059ca:	4630      	mov	r0, r6
 80059cc:	f000 f82e 	bl	8005a2c <_sbrk_r>
 80059d0:	3001      	adds	r0, #1
 80059d2:	d0cf      	beq.n	8005974 <_malloc_r+0x48>
 80059d4:	6025      	str	r5, [r4, #0]
 80059d6:	e7db      	b.n	8005990 <_malloc_r+0x64>
 80059d8:	200000a0 	.word	0x200000a0
 80059dc:	200000a4 	.word	0x200000a4

080059e0 <_realloc_r>:
 80059e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059e2:	4607      	mov	r7, r0
 80059e4:	4614      	mov	r4, r2
 80059e6:	460e      	mov	r6, r1
 80059e8:	b921      	cbnz	r1, 80059f4 <_realloc_r+0x14>
 80059ea:	4611      	mov	r1, r2
 80059ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80059f0:	f7ff bf9c 	b.w	800592c <_malloc_r>
 80059f4:	b922      	cbnz	r2, 8005a00 <_realloc_r+0x20>
 80059f6:	f7ff ff4b 	bl	8005890 <_free_r>
 80059fa:	4625      	mov	r5, r4
 80059fc:	4628      	mov	r0, r5
 80059fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a00:	f000 f826 	bl	8005a50 <_malloc_usable_size_r>
 8005a04:	42a0      	cmp	r0, r4
 8005a06:	d20f      	bcs.n	8005a28 <_realloc_r+0x48>
 8005a08:	4621      	mov	r1, r4
 8005a0a:	4638      	mov	r0, r7
 8005a0c:	f7ff ff8e 	bl	800592c <_malloc_r>
 8005a10:	4605      	mov	r5, r0
 8005a12:	2800      	cmp	r0, #0
 8005a14:	d0f2      	beq.n	80059fc <_realloc_r+0x1c>
 8005a16:	4631      	mov	r1, r6
 8005a18:	4622      	mov	r2, r4
 8005a1a:	f7ff ff15 	bl	8005848 <memcpy>
 8005a1e:	4631      	mov	r1, r6
 8005a20:	4638      	mov	r0, r7
 8005a22:	f7ff ff35 	bl	8005890 <_free_r>
 8005a26:	e7e9      	b.n	80059fc <_realloc_r+0x1c>
 8005a28:	4635      	mov	r5, r6
 8005a2a:	e7e7      	b.n	80059fc <_realloc_r+0x1c>

08005a2c <_sbrk_r>:
 8005a2c:	b538      	push	{r3, r4, r5, lr}
 8005a2e:	4c06      	ldr	r4, [pc, #24]	; (8005a48 <_sbrk_r+0x1c>)
 8005a30:	2300      	movs	r3, #0
 8005a32:	4605      	mov	r5, r0
 8005a34:	4608      	mov	r0, r1
 8005a36:	6023      	str	r3, [r4, #0]
 8005a38:	f7fb fb5a 	bl	80010f0 <_sbrk>
 8005a3c:	1c43      	adds	r3, r0, #1
 8005a3e:	d102      	bne.n	8005a46 <_sbrk_r+0x1a>
 8005a40:	6823      	ldr	r3, [r4, #0]
 8005a42:	b103      	cbz	r3, 8005a46 <_sbrk_r+0x1a>
 8005a44:	602b      	str	r3, [r5, #0]
 8005a46:	bd38      	pop	{r3, r4, r5, pc}
 8005a48:	20006040 	.word	0x20006040

08005a4c <__malloc_lock>:
 8005a4c:	4770      	bx	lr

08005a4e <__malloc_unlock>:
 8005a4e:	4770      	bx	lr

08005a50 <_malloc_usable_size_r>:
 8005a50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a54:	1f18      	subs	r0, r3, #4
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	bfbc      	itt	lt
 8005a5a:	580b      	ldrlt	r3, [r1, r0]
 8005a5c:	18c0      	addlt	r0, r0, r3
 8005a5e:	4770      	bx	lr

08005a60 <_init>:
 8005a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a62:	bf00      	nop
 8005a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a66:	bc08      	pop	{r3}
 8005a68:	469e      	mov	lr, r3
 8005a6a:	4770      	bx	lr

08005a6c <_fini>:
 8005a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6e:	bf00      	nop
 8005a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a72:	bc08      	pop	{r3}
 8005a74:	469e      	mov	lr, r3
 8005a76:	4770      	bx	lr
