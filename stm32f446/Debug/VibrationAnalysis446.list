
VibrationAnalysis446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005630  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08005800  08005800  00015800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005864  08005864  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005864  08005864  00015864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800586c  0800586c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800586c  0800586c  0001586c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005870  08005870  00015870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005fd0  20000074  080058e8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006044  080058e8  00026044  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108b1  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000264f  00000000  00000000  00030955  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fe0  00000000  00000000  00032fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ea8  00000000  00000000  00033f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022de4  00000000  00000000  00034e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000da33  00000000  00000000  00057c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d282b  00000000  00000000  00065647  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00137e72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000451c  00000000  00000000  00137ef0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080057e8 	.word	0x080057e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	080057e8 	.word	0x080057e8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
void MX_DMA_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	4b2f      	ldr	r3, [pc, #188]	; (8000678 <MX_DMA_Init+0xc8>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a2e      	ldr	r2, [pc, #184]	; (8000678 <MX_DMA_Init+0xc8>)
 80005c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b2c      	ldr	r3, [pc, #176]	; (8000678 <MX_DMA_Init+0xc8>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	603b      	str	r3, [r7, #0]
 80005d6:	4b28      	ldr	r3, [pc, #160]	; (8000678 <MX_DMA_Init+0xc8>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a27      	ldr	r2, [pc, #156]	; (8000678 <MX_DMA_Init+0xc8>)
 80005dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b25      	ldr	r3, [pc, #148]	; (8000678 <MX_DMA_Init+0xc8>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 80005ee:	4b23      	ldr	r3, [pc, #140]	; (800067c <MX_DMA_Init+0xcc>)
 80005f0:	4a23      	ldr	r2, [pc, #140]	; (8000680 <MX_DMA_Init+0xd0>)
 80005f2:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 80005f4:	4b21      	ldr	r3, [pc, #132]	; (800067c <MX_DMA_Init+0xcc>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80005fa:	4b20      	ldr	r3, [pc, #128]	; (800067c <MX_DMA_Init+0xcc>)
 80005fc:	2280      	movs	r2, #128	; 0x80
 80005fe:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000600:	4b1e      	ldr	r3, [pc, #120]	; (800067c <MX_DMA_Init+0xcc>)
 8000602:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000606:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000608:	4b1c      	ldr	r3, [pc, #112]	; (800067c <MX_DMA_Init+0xcc>)
 800060a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800060e:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000610:	4b1a      	ldr	r3, [pc, #104]	; (800067c <MX_DMA_Init+0xcc>)
 8000612:	2200      	movs	r2, #0
 8000614:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000616:	4b19      	ldr	r3, [pc, #100]	; (800067c <MX_DMA_Init+0xcc>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 800061c:	4b17      	ldr	r3, [pc, #92]	; (800067c <MX_DMA_Init+0xcc>)
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 8000622:	4b16      	ldr	r3, [pc, #88]	; (800067c <MX_DMA_Init+0xcc>)
 8000624:	2200      	movs	r2, #0
 8000626:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000628:	4b14      	ldr	r3, [pc, #80]	; (800067c <MX_DMA_Init+0xcc>)
 800062a:	2204      	movs	r2, #4
 800062c:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800062e:	4b13      	ldr	r3, [pc, #76]	; (800067c <MX_DMA_Init+0xcc>)
 8000630:	2203      	movs	r2, #3
 8000632:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_DMA_Init+0xcc>)
 8000636:	2200      	movs	r2, #0
 8000638:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <MX_DMA_Init+0xcc>)
 800063c:	2200      	movs	r2, #0
 800063e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000640:	480e      	ldr	r0, [pc, #56]	; (800067c <MX_DMA_Init+0xcc>)
 8000642:	f001 f831 	bl	80016a8 <HAL_DMA_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_DMA_Init+0xa0>
  {
    Error_Handler();
 800064c:	f000 fc7c 	bl	8000f48 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000650:	2200      	movs	r2, #0
 8000652:	2100      	movs	r1, #0
 8000654:	2011      	movs	r0, #17
 8000656:	f000 fff0 	bl	800163a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800065a:	2011      	movs	r0, #17
 800065c:	f001 f809 	bl	8001672 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000660:	2200      	movs	r2, #0
 8000662:	2100      	movs	r1, #0
 8000664:	2038      	movs	r0, #56	; 0x38
 8000666:	f000 ffe8 	bl	800163a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800066a:	2038      	movs	r0, #56	; 0x38
 800066c:	f001 f801 	bl	8001672 <HAL_NVIC_EnableIRQ>

}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40023800 	.word	0x40023800
 800067c:	200000a8 	.word	0x200000a8
 8000680:	40026410 	.word	0x40026410

08000684 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	4b26      	ldr	r3, [pc, #152]	; (8000738 <MX_GPIO_Init+0xb4>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a25      	ldr	r2, [pc, #148]	; (8000738 <MX_GPIO_Init+0xb4>)
 80006a4:	f043 0304 	orr.w	r3, r3, #4
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b23      	ldr	r3, [pc, #140]	; (8000738 <MX_GPIO_Init+0xb4>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0304 	and.w	r3, r3, #4
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <MX_GPIO_Init+0xb4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a1e      	ldr	r2, [pc, #120]	; (8000738 <MX_GPIO_Init+0xb4>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <MX_GPIO_Init+0xb4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	4b18      	ldr	r3, [pc, #96]	; (8000738 <MX_GPIO_Init+0xb4>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a17      	ldr	r2, [pc, #92]	; (8000738 <MX_GPIO_Init+0xb4>)
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b15      	ldr	r3, [pc, #84]	; (8000738 <MX_GPIO_Init+0xb4>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0302 	and.w	r3, r3, #2
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2140      	movs	r1, #64	; 0x40
 80006f2:	4812      	ldr	r0, [pc, #72]	; (800073c <MX_GPIO_Init+0xb8>)
 80006f4:	f001 fd4e 	bl	8002194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	4619      	mov	r1, r3
 800070c:	480c      	ldr	r0, [pc, #48]	; (8000740 <MX_GPIO_Init+0xbc>)
 800070e:	f001 fbaf 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000712:	2340      	movs	r3, #64	; 0x40
 8000714:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000716:	2301      	movs	r3, #1
 8000718:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071e:	2303      	movs	r3, #3
 8000720:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000722:	f107 030c 	add.w	r3, r7, #12
 8000726:	4619      	mov	r1, r3
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_GPIO_Init+0xb8>)
 800072a:	f001 fba1 	bl	8001e70 <HAL_GPIO_Init>

}
 800072e:	bf00      	nop
 8000730:	3720      	adds	r7, #32
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800
 800073c:	40020400 	.word	0x40020400
 8000740:	40020800 	.word	0x40020800

08000744 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_I2C1_Init+0x50>)
 800074a:	4a13      	ldr	r2, [pc, #76]	; (8000798 <MX_I2C1_Init+0x54>)
 800074c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_I2C1_Init+0x50>)
 8000750:	4a12      	ldr	r2, [pc, #72]	; (800079c <MX_I2C1_Init+0x58>)
 8000752:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_I2C1_Init+0x50>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_I2C1_Init+0x50>)
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_I2C1_Init+0x50>)
 8000762:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000766:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000768:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <MX_I2C1_Init+0x50>)
 800076a:	2200      	movs	r2, #0
 800076c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_I2C1_Init+0x50>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <MX_I2C1_Init+0x50>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_I2C1_Init+0x50>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <MX_I2C1_Init+0x50>)
 8000782:	f001 fd21 	bl	80021c8 <HAL_I2C_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800078c:	f000 fbdc 	bl	8000f48 <Error_Handler>
  }

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000108 	.word	0x20000108
 8000798:	40005400 	.word	0x40005400
 800079c:	00061a80 	.word	0x00061a80

080007a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	; 0x28
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a19      	ldr	r2, [pc, #100]	; (8000824 <HAL_I2C_MspInit+0x84>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d12c      	bne.n	800081c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	4b18      	ldr	r3, [pc, #96]	; (8000828 <HAL_I2C_MspInit+0x88>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a17      	ldr	r2, [pc, #92]	; (8000828 <HAL_I2C_MspInit+0x88>)
 80007cc:	f043 0302 	orr.w	r3, r3, #2
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <HAL_I2C_MspInit+0x88>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0302 	and.w	r3, r3, #2
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007e4:	2312      	movs	r3, #18
 80007e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ec:	2303      	movs	r3, #3
 80007ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007f0:	2304      	movs	r3, #4
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	480c      	ldr	r0, [pc, #48]	; (800082c <HAL_I2C_MspInit+0x8c>)
 80007fc:	f001 fb38 	bl	8001e70 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <HAL_I2C_MspInit+0x88>)
 8000806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000808:	4a07      	ldr	r2, [pc, #28]	; (8000828 <HAL_I2C_MspInit+0x88>)
 800080a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800080e:	6413      	str	r3, [r2, #64]	; 0x40
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <HAL_I2C_MspInit+0x88>)
 8000812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800081c:	bf00      	nop
 800081e:	3728      	adds	r7, #40	; 0x28
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40005400 	.word	0x40005400
 8000828:	40023800 	.word	0x40023800
 800082c:	40020400 	.word	0x40020400

08000830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000830:	b5b0      	push	{r4, r5, r7, lr}
 8000832:	f5ad 4dbb 	sub.w	sp, sp, #23936	; 0x5d80
 8000836:	b098      	sub	sp, #96	; 0x60
 8000838:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

	uint16_t lsmaddr = LSM6DS3_ADDRESS << 1;
 800083a:	23d4      	movs	r3, #212	; 0xd4
 800083c:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
 8000840:	f102 024a 	add.w	r2, r2, #74	; 0x4a
 8000844:	8013      	strh	r3, [r2, #0]
	uint16_t mpu6050addr = MPU6050_ADDRESS_AD0_LOW << 1;
 8000846:	23d0      	movs	r3, #208	; 0xd0
 8000848:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
 800084c:	f102 0248 	add.w	r2, r2, #72	; 0x48
 8000850:	8013      	strh	r3, [r2, #0]
	int16_t x_val = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
 8000858:	f102 0246 	add.w	r2, r2, #70	; 0x46
 800085c:	8013      	strh	r3, [r2, #0]
	int16_t y_val = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
 8000864:	f102 0244 	add.w	r2, r2, #68	; 0x44
 8000868:	8013      	strh	r3, [r2, #0]
	int16_t z_val = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
 8000870:	f102 0242 	add.w	r2, r2, #66	; 0x42
 8000874:	8013      	strh	r3, [r2, #0]
	uint16_t datasize = sizeof(data);
 8000876:	f645 53c0 	movw	r3, #24000	; 0x5dc0
 800087a:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
 800087e:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8000882:	8013      	strh	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000884:	f000 fd6a 	bl	800135c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000888:	f000 fab6 	bl	8000df8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088c:	f7ff fefa 	bl	8000684 <MX_GPIO_Init>
  MX_DMA_Init();
 8000890:	f7ff fe8e 	bl	80005b0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000894:	f7ff ff56 	bl	8000744 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000898:	f000 fc8a 	bl	80011b0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800089c:	f000 fc1c 	bl	80010d8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //HAL_NVIC_DisableIRQ(EXTI9_5_IRQn); //disable interrupt
  HAL_I2C_Mem_Read(&hi2c1, mpu6050addr, MPU6050_RA_PWR_MGMT_1, 1, &statusbuff, 1, 1000);
 80008a0:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 80008a4:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80008a8:	8819      	ldrh	r1, [r3, #0]
 80008aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ae:	9302      	str	r3, [sp, #8]
 80008b0:	2301      	movs	r3, #1
 80008b2:	9301      	str	r3, [sp, #4]
 80008b4:	4ba3      	ldr	r3, [pc, #652]	; (8000b44 <main+0x314>)
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	2301      	movs	r3, #1
 80008ba:	226b      	movs	r2, #107	; 0x6b
 80008bc:	48a2      	ldr	r0, [pc, #648]	; (8000b48 <main+0x318>)
 80008be:	f001 feb5 	bl	800262c <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Write(&hi2c1, mpu6050addr, MPU6050_RA_PWR_MGMT_1, 1, 0b00000000, 1, 1000); //wake from sleep
 80008c2:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 80008c6:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80008ca:	8819      	ldrh	r1, [r3, #0]
 80008cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d0:	9302      	str	r3, [sp, #8]
 80008d2:	2301      	movs	r3, #1
 80008d4:	9301      	str	r3, [sp, #4]
 80008d6:	2300      	movs	r3, #0
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	2301      	movs	r3, #1
 80008dc:	226b      	movs	r2, #107	; 0x6b
 80008de:	489a      	ldr	r0, [pc, #616]	; (8000b48 <main+0x318>)
 80008e0:	f001 fdaa 	bl	8002438 <HAL_I2C_Mem_Write>
  HAL_I2C_Mem_Read(&hi2c1, mpu6050addr, MPU6050_RA_PWR_MGMT_1, 1, &statusbuff, 1, 1000);
 80008e4:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 80008e8:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80008ec:	8819      	ldrh	r1, [r3, #0]
 80008ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f2:	9302      	str	r3, [sp, #8]
 80008f4:	2301      	movs	r3, #1
 80008f6:	9301      	str	r3, [sp, #4]
 80008f8:	4b92      	ldr	r3, [pc, #584]	; (8000b44 <main+0x314>)
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	2301      	movs	r3, #1
 80008fe:	226b      	movs	r2, #107	; 0x6b
 8000900:	4891      	ldr	r0, [pc, #580]	; (8000b48 <main+0x318>)
 8000902:	f001 fe93 	bl	800262c <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Read(&hi2c1, mpu6050addr, MPU6050_RA_WHO_AM_I, 1, &statusbuff, 1, 1000);
 8000906:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 800090a:	f103 0348 	add.w	r3, r3, #72	; 0x48
 800090e:	8819      	ldrh	r1, [r3, #0]
 8000910:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000914:	9302      	str	r3, [sp, #8]
 8000916:	2301      	movs	r3, #1
 8000918:	9301      	str	r3, [sp, #4]
 800091a:	4b8a      	ldr	r3, [pc, #552]	; (8000b44 <main+0x314>)
 800091c:	9300      	str	r3, [sp, #0]
 800091e:	2301      	movs	r3, #1
 8000920:	2275      	movs	r2, #117	; 0x75
 8000922:	4889      	ldr	r0, [pc, #548]	; (8000b48 <main+0x318>)
 8000924:	f001 fe82 	bl	800262c <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Write(&hi2c1, mpu6050addr, MPU6050_RA_PWR_MGMT_1, 1, 0b10000000, 1, 1000); //reset device
 8000928:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 800092c:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000930:	8819      	ldrh	r1, [r3, #0]
 8000932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000936:	9302      	str	r3, [sp, #8]
 8000938:	2301      	movs	r3, #1
 800093a:	9301      	str	r3, [sp, #4]
 800093c:	2380      	movs	r3, #128	; 0x80
 800093e:	9300      	str	r3, [sp, #0]
 8000940:	2301      	movs	r3, #1
 8000942:	226b      	movs	r2, #107	; 0x6b
 8000944:	4880      	ldr	r0, [pc, #512]	; (8000b48 <main+0x318>)
 8000946:	f001 fd77 	bl	8002438 <HAL_I2C_Mem_Write>
  HAL_Delay(200);
 800094a:	20c8      	movs	r0, #200	; 0xc8
 800094c:	f000 fd78 	bl	8001440 <HAL_Delay>
  HAL_I2C_Mem_Read(&hi2c1, mpu6050addr, MPU6050_RA_PWR_MGMT_1, 1, &statusbuff, 1, 1000);
 8000950:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000954:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000958:	8819      	ldrh	r1, [r3, #0]
 800095a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800095e:	9302      	str	r3, [sp, #8]
 8000960:	2301      	movs	r3, #1
 8000962:	9301      	str	r3, [sp, #4]
 8000964:	4b77      	ldr	r3, [pc, #476]	; (8000b44 <main+0x314>)
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	2301      	movs	r3, #1
 800096a:	226b      	movs	r2, #107	; 0x6b
 800096c:	4876      	ldr	r0, [pc, #472]	; (8000b48 <main+0x318>)
 800096e:	f001 fe5d 	bl	800262c <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Write(&hi2c1, mpu6050addr, MPU6050_RA_SIGNAL_PATH_RESET, 1, 0b00000111, 1, 1000); //reset signal path
 8000972:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000976:	f103 0348 	add.w	r3, r3, #72	; 0x48
 800097a:	8819      	ldrh	r1, [r3, #0]
 800097c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000980:	9302      	str	r3, [sp, #8]
 8000982:	2301      	movs	r3, #1
 8000984:	9301      	str	r3, [sp, #4]
 8000986:	2307      	movs	r3, #7
 8000988:	9300      	str	r3, [sp, #0]
 800098a:	2301      	movs	r3, #1
 800098c:	2268      	movs	r2, #104	; 0x68
 800098e:	486e      	ldr	r0, [pc, #440]	; (8000b48 <main+0x318>)
 8000990:	f001 fd52 	bl	8002438 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8000994:	2064      	movs	r0, #100	; 0x64
 8000996:	f000 fd53 	bl	8001440 <HAL_Delay>
  HAL_I2C_Mem_Write(&hi2c1, mpu6050addr, MPU6050_RA_PWR_MGMT_1, 1, 0b00000001, 1, 1000); //disable sleep, set clock to gyrx
 800099a:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 800099e:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80009a2:	8819      	ldrh	r1, [r3, #0]
 80009a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a8:	9302      	str	r3, [sp, #8]
 80009aa:	2301      	movs	r3, #1
 80009ac:	9301      	str	r3, [sp, #4]
 80009ae:	2301      	movs	r3, #1
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	2301      	movs	r3, #1
 80009b4:	226b      	movs	r2, #107	; 0x6b
 80009b6:	4864      	ldr	r0, [pc, #400]	; (8000b48 <main+0x318>)
 80009b8:	f001 fd3e 	bl	8002438 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 80009bc:	2064      	movs	r0, #100	; 0x64
 80009be:	f000 fd3f 	bl	8001440 <HAL_Delay>
  HAL_I2C_Mem_Read(&hi2c1, mpu6050addr, MPU6050_RA_PWR_MGMT_1, 1, &statusbuff, 1, 1000);
 80009c2:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 80009c6:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80009ca:	8819      	ldrh	r1, [r3, #0]
 80009cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d0:	9302      	str	r3, [sp, #8]
 80009d2:	2301      	movs	r3, #1
 80009d4:	9301      	str	r3, [sp, #4]
 80009d6:	4b5b      	ldr	r3, [pc, #364]	; (8000b44 <main+0x314>)
 80009d8:	9300      	str	r3, [sp, #0]
 80009da:	2301      	movs	r3, #1
 80009dc:	226b      	movs	r2, #107	; 0x6b
 80009de:	485a      	ldr	r0, [pc, #360]	; (8000b48 <main+0x318>)
 80009e0:	f001 fe24 	bl	800262c <HAL_I2C_Mem_Read>
  HAL_Delay(100);
 80009e4:	2064      	movs	r0, #100	; 0x64
 80009e6:	f000 fd2b 	bl	8001440 <HAL_Delay>
  HAL_I2C_Mem_Write(&hi2c1, mpu6050addr, MPU6050_RA_GYRO_CONFIG, 1, 0b00000000, 1, 1000); //gyro FS 250°/s
 80009ea:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 80009ee:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80009f2:	8819      	ldrh	r1, [r3, #0]
 80009f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f8:	9302      	str	r3, [sp, #8]
 80009fa:	2301      	movs	r3, #1
 80009fc:	9301      	str	r3, [sp, #4]
 80009fe:	2300      	movs	r3, #0
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	2301      	movs	r3, #1
 8000a04:	221b      	movs	r2, #27
 8000a06:	4850      	ldr	r0, [pc, #320]	; (8000b48 <main+0x318>)
 8000a08:	f001 fd16 	bl	8002438 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8000a0c:	2064      	movs	r0, #100	; 0x64
 8000a0e:	f000 fd17 	bl	8001440 <HAL_Delay>
  HAL_I2C_Mem_Write(&hi2c1, mpu6050addr, MPU6050_RA_ACCEL_CONFIG, 1, 0b00010000, 1, 1000); //accel FS 2g
 8000a12:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000a16:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000a1a:	8819      	ldrh	r1, [r3, #0]
 8000a1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a20:	9302      	str	r3, [sp, #8]
 8000a22:	2301      	movs	r3, #1
 8000a24:	9301      	str	r3, [sp, #4]
 8000a26:	2310      	movs	r3, #16
 8000a28:	9300      	str	r3, [sp, #0]
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	221c      	movs	r2, #28
 8000a2e:	4846      	ldr	r0, [pc, #280]	; (8000b48 <main+0x318>)
 8000a30:	f001 fd02 	bl	8002438 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8000a34:	2064      	movs	r0, #100	; 0x64
 8000a36:	f000 fd03 	bl	8001440 <HAL_Delay>
  HAL_I2C_Mem_Write(&hi2c1, mpu6050addr, MPU6050_RA_CONFIG, 1, 0b00000001, 1, 1000); //enable DLPF
 8000a3a:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000a3e:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000a42:	8819      	ldrh	r1, [r3, #0]
 8000a44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a48:	9302      	str	r3, [sp, #8]
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	9301      	str	r3, [sp, #4]
 8000a4e:	2301      	movs	r3, #1
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2301      	movs	r3, #1
 8000a54:	221a      	movs	r2, #26
 8000a56:	483c      	ldr	r0, [pc, #240]	; (8000b48 <main+0x318>)
 8000a58:	f001 fcee 	bl	8002438 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8000a5c:	2064      	movs	r0, #100	; 0x64
 8000a5e:	f000 fcef 	bl	8001440 <HAL_Delay>
  HAL_I2C_Mem_Write(&hi2c1, mpu6050addr, MPU6050_RA_SMPLRT_DIV, 1, 0b00000111, 1, 1000); //gyro samplerate 1khz
 8000a62:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000a66:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000a6a:	8819      	ldrh	r1, [r3, #0]
 8000a6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a70:	9302      	str	r3, [sp, #8]
 8000a72:	2301      	movs	r3, #1
 8000a74:	9301      	str	r3, [sp, #4]
 8000a76:	2307      	movs	r3, #7
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	2219      	movs	r2, #25
 8000a7e:	4832      	ldr	r0, [pc, #200]	; (8000b48 <main+0x318>)
 8000a80:	f001 fcda 	bl	8002438 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8000a84:	2064      	movs	r0, #100	; 0x64
 8000a86:	f000 fcdb 	bl	8001440 <HAL_Delay>
  HAL_I2C_Mem_Write(&hi2c1, mpu6050addr, MPU6050_RA_INT_PIN_CFG, 1, 0b00010000, 1, 1000); //int act H, PP, latch, CLR any
 8000a8a:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000a8e:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000a92:	8819      	ldrh	r1, [r3, #0]
 8000a94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a98:	9302      	str	r3, [sp, #8]
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	9301      	str	r3, [sp, #4]
 8000a9e:	2310      	movs	r3, #16
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	2237      	movs	r2, #55	; 0x37
 8000aa6:	4828      	ldr	r0, [pc, #160]	; (8000b48 <main+0x318>)
 8000aa8:	f001 fcc6 	bl	8002438 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8000aac:	2064      	movs	r0, #100	; 0x64
 8000aae:	f000 fcc7 	bl	8001440 <HAL_Delay>
  HAL_I2C_Mem_Write(&hi2c1, mpu6050addr, MPU6050_RA_INT_ENABLE, 1, 0b00000001, 1, 1000); //enable data rdy int
 8000ab2:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000ab6:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000aba:	8819      	ldrh	r1, [r3, #0]
 8000abc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac0:	9302      	str	r3, [sp, #8]
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	9301      	str	r3, [sp, #4]
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	9300      	str	r3, [sp, #0]
 8000aca:	2301      	movs	r3, #1
 8000acc:	2238      	movs	r2, #56	; 0x38
 8000ace:	481e      	ldr	r0, [pc, #120]	; (8000b48 <main+0x318>)
 8000ad0:	f001 fcb2 	bl	8002438 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8000ad4:	2064      	movs	r0, #100	; 0x64
 8000ad6:	f000 fcb3 	bl	8001440 <HAL_Delay>


  //HAL_NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt
  HAL_TIM_Base_Start(&htim2);
 8000ada:	481c      	ldr	r0, [pc, #112]	; (8000b4c <main+0x31c>)
 8000adc:	f003 f865 	bl	8003baa <HAL_TIM_Base_Start>
  HAL_DMA_RegisterCallback(&hdma_memtomem_dma2_stream0,HAL_DMA_XFER_CPLT_CB_ID , &DMATransferCompleteCallback);
 8000ae0:	4a1b      	ldr	r2, [pc, #108]	; (8000b50 <main+0x320>)
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	481b      	ldr	r0, [pc, #108]	; (8000b54 <main+0x324>)
 8000ae6:	f001 f891 	bl	8001c0c <HAL_DMA_RegisterCallback>
  HAL_UART_Receive_IT(&huart2, &uartByte, 1);
 8000aea:	2201      	movs	r2, #1
 8000aec:	491a      	ldr	r1, [pc, #104]	; (8000b58 <main+0x328>)
 8000aee:	481b      	ldr	r0, [pc, #108]	; (8000b5c <main+0x32c>)
 8000af0:	f003 fb39 	bl	8004166 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(capturestate)
 8000af4:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <main+0x330>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	2b03      	cmp	r3, #3
 8000afc:	f200 815c 	bhi.w	8000db8 <main+0x588>
 8000b00:	a201      	add	r2, pc, #4	; (adr r2, 8000b08 <main+0x2d8>)
 8000b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b06:	bf00      	nop
 8000b08:	08000b19 	.word	0x08000b19
 8000b0c:	08000b69 	.word	0x08000b69
 8000b10:	08000ccd 	.word	0x08000ccd
 8000b14:	08000cd5 	.word	0x08000cd5
	  {
	  case CAPTURESTATE_IDLE:
		  if(uartByteReceived)
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <main+0x334>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f000 814c 	beq.w	8000dbc <main+0x58c>
		  {
			  if(uartByte == 's')
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <main+0x328>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b73      	cmp	r3, #115	; 0x73
 8000b2a:	d106      	bne.n	8000b3a <main+0x30a>
			  {
				  capturestate = CAPTURESTATE_CAPTURING;
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <main+0x330>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	701a      	strb	r2, [r3, #0]
				  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <main+0x31c>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2200      	movs	r2, #0
 8000b38:	625a      	str	r2, [r3, #36]	; 0x24
			  }
			  uartByteReceived = 0;
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <main+0x334>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8000b40:	e13c      	b.n	8000dbc <main+0x58c>
 8000b42:	bf00      	nop
 8000b44:	20000001 	.word	0x20000001
 8000b48:	20000108 	.word	0x20000108
 8000b4c:	20005f5c 	.word	0x20005f5c
 8000b50:	08000f29 	.word	0x08000f29
 8000b54:	200000a8 	.word	0x200000a8
 8000b58:	2000015e 	.word	0x2000015e
 8000b5c:	20005ffc 	.word	0x20005ffc
 8000b60:	20000091 	.word	0x20000091
 8000b64:	20000092 	.word	0x20000092
	  case CAPTURESTATE_CAPTURING:
		  HAL_I2C_Mem_Read(&hi2c1, mpu6050addr, MPU6050_RA_INT_STATUS, 1, &statusbuff, 1, HAL_MAX_DELAY);
 8000b68:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000b6c:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000b70:	8819      	ldrh	r1, [r3, #0]
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295
 8000b76:	9302      	str	r3, [sp, #8]
 8000b78:	2301      	movs	r3, #1
 8000b7a:	9301      	str	r3, [sp, #4]
 8000b7c:	4b91      	ldr	r3, [pc, #580]	; (8000dc4 <main+0x594>)
 8000b7e:	9300      	str	r3, [sp, #0]
 8000b80:	2301      	movs	r3, #1
 8000b82:	223a      	movs	r2, #58	; 0x3a
 8000b84:	4890      	ldr	r0, [pc, #576]	; (8000dc8 <main+0x598>)
 8000b86:	f001 fd51 	bl	800262c <HAL_I2C_Mem_Read>
	  	  if(statusbuff & 0b00000001)
 8000b8a:	4b8e      	ldr	r3, [pc, #568]	; (8000dc4 <main+0x594>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f000 8114 	beq.w	8000dc0 <main+0x590>
	  	  {
	  		  currtimerval = __HAL_TIM_GET_COUNTER(&htim2);
 8000b98:	4b8c      	ldr	r3, [pc, #560]	; (8000dcc <main+0x59c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b9e:	4a8c      	ldr	r2, [pc, #560]	; (8000dd0 <main+0x5a0>)
 8000ba0:	6013      	str	r3, [r2, #0]
	  		  HAL_I2C_Mem_Read(&hi2c1, mpu6050addr, MPU6050_RA_INT_STATUS, 1, &statusbuff, 1, HAL_MAX_DELAY);
 8000ba2:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000ba6:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000baa:	8819      	ldrh	r1, [r3, #0]
 8000bac:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb0:	9302      	str	r3, [sp, #8]
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	9301      	str	r3, [sp, #4]
 8000bb6:	4b83      	ldr	r3, [pc, #524]	; (8000dc4 <main+0x594>)
 8000bb8:	9300      	str	r3, [sp, #0]
 8000bba:	2301      	movs	r3, #1
 8000bbc:	223a      	movs	r2, #58	; 0x3a
 8000bbe:	4882      	ldr	r0, [pc, #520]	; (8000dc8 <main+0x598>)
 8000bc0:	f001 fd34 	bl	800262c <HAL_I2C_Mem_Read>
	  		  HAL_I2C_Mem_Read(&hi2c1, mpu6050addr, MPU6050_RA_ACCEL_XOUT_H, 1, recdata, 6, HAL_MAX_DELAY);
 8000bc4:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000bc8:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000bcc:	8819      	ldrh	r1, [r3, #0]
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	9302      	str	r3, [sp, #8]
 8000bd4:	2306      	movs	r3, #6
 8000bd6:	9301      	str	r3, [sp, #4]
 8000bd8:	4b7e      	ldr	r3, [pc, #504]	; (8000dd4 <main+0x5a4>)
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	2301      	movs	r3, #1
 8000bde:	223b      	movs	r2, #59	; 0x3b
 8000be0:	4879      	ldr	r0, [pc, #484]	; (8000dc8 <main+0x598>)
 8000be2:	f001 fd23 	bl	800262c <HAL_I2C_Mem_Read>
	  		  data[writeptr].x.LowerByte = recdata[1];
 8000be6:	4b7c      	ldr	r3, [pc, #496]	; (8000dd8 <main+0x5a8>)
 8000be8:	881b      	ldrh	r3, [r3, #0]
 8000bea:	4619      	mov	r1, r3
 8000bec:	4b79      	ldr	r3, [pc, #484]	; (8000dd4 <main+0x5a4>)
 8000bee:	7858      	ldrb	r0, [r3, #1]
 8000bf0:	4a7a      	ldr	r2, [pc, #488]	; (8000ddc <main+0x5ac>)
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	440b      	add	r3, r1
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	4413      	add	r3, r2
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	701a      	strb	r2, [r3, #0]
	  		  data[writeptr].x.UpperByte = recdata[0];
 8000c00:	4b75      	ldr	r3, [pc, #468]	; (8000dd8 <main+0x5a8>)
 8000c02:	881b      	ldrh	r3, [r3, #0]
 8000c04:	4619      	mov	r1, r3
 8000c06:	4b73      	ldr	r3, [pc, #460]	; (8000dd4 <main+0x5a4>)
 8000c08:	7818      	ldrb	r0, [r3, #0]
 8000c0a:	4a74      	ldr	r2, [pc, #464]	; (8000ddc <main+0x5ac>)
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	440b      	add	r3, r1
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	4413      	add	r3, r2
 8000c16:	3301      	adds	r3, #1
 8000c18:	4602      	mov	r2, r0
 8000c1a:	701a      	strb	r2, [r3, #0]
	  		  data[writeptr].y.LowerByte = recdata[3];
 8000c1c:	4b6e      	ldr	r3, [pc, #440]	; (8000dd8 <main+0x5a8>)
 8000c1e:	881b      	ldrh	r3, [r3, #0]
 8000c20:	4619      	mov	r1, r3
 8000c22:	4b6c      	ldr	r3, [pc, #432]	; (8000dd4 <main+0x5a4>)
 8000c24:	78d8      	ldrb	r0, [r3, #3]
 8000c26:	4a6d      	ldr	r2, [pc, #436]	; (8000ddc <main+0x5ac>)
 8000c28:	460b      	mov	r3, r1
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	440b      	add	r3, r1
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	4413      	add	r3, r2
 8000c32:	3302      	adds	r3, #2
 8000c34:	4602      	mov	r2, r0
 8000c36:	701a      	strb	r2, [r3, #0]
	  		  data[writeptr].y.UpperByte = recdata[2];
 8000c38:	4b67      	ldr	r3, [pc, #412]	; (8000dd8 <main+0x5a8>)
 8000c3a:	881b      	ldrh	r3, [r3, #0]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4b65      	ldr	r3, [pc, #404]	; (8000dd4 <main+0x5a4>)
 8000c40:	7898      	ldrb	r0, [r3, #2]
 8000c42:	4a66      	ldr	r2, [pc, #408]	; (8000ddc <main+0x5ac>)
 8000c44:	460b      	mov	r3, r1
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	440b      	add	r3, r1
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	4413      	add	r3, r2
 8000c4e:	3303      	adds	r3, #3
 8000c50:	4602      	mov	r2, r0
 8000c52:	701a      	strb	r2, [r3, #0]
	  		  data[writeptr].z.LowerByte = recdata[5];
 8000c54:	4b60      	ldr	r3, [pc, #384]	; (8000dd8 <main+0x5a8>)
 8000c56:	881b      	ldrh	r3, [r3, #0]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4b5e      	ldr	r3, [pc, #376]	; (8000dd4 <main+0x5a4>)
 8000c5c:	7958      	ldrb	r0, [r3, #5]
 8000c5e:	4a5f      	ldr	r2, [pc, #380]	; (8000ddc <main+0x5ac>)
 8000c60:	460b      	mov	r3, r1
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	440b      	add	r3, r1
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	4413      	add	r3, r2
 8000c6a:	3304      	adds	r3, #4
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	701a      	strb	r2, [r3, #0]
	  		  data[writeptr].z.UpperByte = recdata[4];
 8000c70:	4b59      	ldr	r3, [pc, #356]	; (8000dd8 <main+0x5a8>)
 8000c72:	881b      	ldrh	r3, [r3, #0]
 8000c74:	4619      	mov	r1, r3
 8000c76:	4b57      	ldr	r3, [pc, #348]	; (8000dd4 <main+0x5a4>)
 8000c78:	7918      	ldrb	r0, [r3, #4]
 8000c7a:	4a58      	ldr	r2, [pc, #352]	; (8000ddc <main+0x5ac>)
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	440b      	add	r3, r1
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	4413      	add	r3, r2
 8000c86:	3305      	adds	r3, #5
 8000c88:	4602      	mov	r2, r0
 8000c8a:	701a      	strb	r2, [r3, #0]
	  		  data[writeptr].micros = currtimerval;
 8000c8c:	4b52      	ldr	r3, [pc, #328]	; (8000dd8 <main+0x5a8>)
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	4618      	mov	r0, r3
 8000c92:	4b4f      	ldr	r3, [pc, #316]	; (8000dd0 <main+0x5a0>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	4951      	ldr	r1, [pc, #324]	; (8000ddc <main+0x5ac>)
 8000c98:	4603      	mov	r3, r0
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	4403      	add	r3, r0
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	440b      	add	r3, r1
 8000ca2:	3308      	adds	r3, #8
 8000ca4:	601a      	str	r2, [r3, #0]
	  		  writeptr++;
 8000ca6:	4b4c      	ldr	r3, [pc, #304]	; (8000dd8 <main+0x5a8>)
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	3301      	adds	r3, #1
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	4b4a      	ldr	r3, [pc, #296]	; (8000dd8 <main+0x5a8>)
 8000cb0:	801a      	strh	r2, [r3, #0]
	  		  if(writeptr >= SAMPLECOUNT)
 8000cb2:	4b49      	ldr	r3, [pc, #292]	; (8000dd8 <main+0x5a8>)
 8000cb4:	881b      	ldrh	r3, [r3, #0]
 8000cb6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000cba:	f0c0 8081 	bcc.w	8000dc0 <main+0x590>
	  		  {
	  			  writeptr = 0;
 8000cbe:	4b46      	ldr	r3, [pc, #280]	; (8000dd8 <main+0x5a8>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	801a      	strh	r2, [r3, #0]
	  			  capturestate = CAPTURESTATE_TRIGGERED;
 8000cc4:	4b46      	ldr	r3, [pc, #280]	; (8000de0 <main+0x5b0>)
 8000cc6:	2202      	movs	r2, #2
 8000cc8:	701a      	strb	r2, [r3, #0]
	  		  }
	  	  }
		  break;
 8000cca:	e079      	b.n	8000dc0 <main+0x590>
	  case CAPTURESTATE_TRIGGERED:
		  capturestate = CAPTURESTATE_TRANSMITTING;
 8000ccc:	4b44      	ldr	r3, [pc, #272]	; (8000de0 <main+0x5b0>)
 8000cce:	2203      	movs	r2, #3
 8000cd0:	701a      	strb	r2, [r3, #0]
		  break;
 8000cd2:	e076      	b.n	8000dc2 <main+0x592>
	  case CAPTURESTATE_TRANSMITTING:
		  for(int i = 0; i<SAMPLECOUNT ; i++)
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
 8000cda:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 8000cde:	6013      	str	r3, [r2, #0]
 8000ce0:	e05e      	b.n	8000da0 <main+0x570>
	  		  {
	  			  while(!uartTxComplete)
 8000ce2:	bf00      	nop
 8000ce4:	4b3f      	ldr	r3, [pc, #252]	; (8000de4 <main+0x5b4>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d0fa      	beq.n	8000ce4 <main+0x4b4>
	  			  {
	  			  }
	  			  n = sprintf(buffer, "%u, %d, %d, %d\n",data[i].micros, data[i].x.Word, data[i].y.Word, data[i].z.Word);
 8000cee:	493b      	ldr	r1, [pc, #236]	; (8000ddc <main+0x5ac>)
 8000cf0:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000cf4:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	4413      	add	r3, r2
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	440b      	add	r3, r1
 8000d04:	3308      	adds	r3, #8
 8000d06:	6818      	ldr	r0, [r3, #0]
 8000d08:	4934      	ldr	r1, [pc, #208]	; (8000ddc <main+0x5ac>)
 8000d0a:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000d0e:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	4613      	mov	r3, r2
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	4413      	add	r3, r2
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	440b      	add	r3, r1
 8000d1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d22:	461d      	mov	r5, r3
 8000d24:	492d      	ldr	r1, [pc, #180]	; (8000ddc <main+0x5ac>)
 8000d26:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000d2a:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	4613      	mov	r3, r2
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	4413      	add	r3, r2
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	440b      	add	r3, r1
 8000d3a:	3302      	adds	r3, #2
 8000d3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d40:	461c      	mov	r4, r3
 8000d42:	4926      	ldr	r1, [pc, #152]	; (8000ddc <main+0x5ac>)
 8000d44:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000d48:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	4613      	mov	r3, r2
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	4413      	add	r3, r2
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	440b      	add	r3, r1
 8000d58:	3304      	adds	r3, #4
 8000d5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d5e:	9301      	str	r3, [sp, #4]
 8000d60:	9400      	str	r4, [sp, #0]
 8000d62:	462b      	mov	r3, r5
 8000d64:	4602      	mov	r2, r0
 8000d66:	4920      	ldr	r1, [pc, #128]	; (8000de8 <main+0x5b8>)
 8000d68:	4820      	ldr	r0, [pc, #128]	; (8000dec <main+0x5bc>)
 8000d6a:	f004 f937 	bl	8004fdc <siprintf>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	4b1f      	ldr	r3, [pc, #124]	; (8000df0 <main+0x5c0>)
 8000d74:	801a      	strh	r2, [r3, #0]
	  			  HAL_UART_Transmit_DMA(&huart2, buffer, n);
 8000d76:	4b1e      	ldr	r3, [pc, #120]	; (8000df0 <main+0x5c0>)
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	491b      	ldr	r1, [pc, #108]	; (8000dec <main+0x5bc>)
 8000d7e:	481d      	ldr	r0, [pc, #116]	; (8000df4 <main+0x5c4>)
 8000d80:	f003 fa46 	bl	8004210 <HAL_UART_Transmit_DMA>
	  			  uartTxComplete = 0;
 8000d84:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <main+0x5b4>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	701a      	strb	r2, [r3, #0]
		  for(int i = 0; i<SAMPLECOUNT ; i++)
 8000d8a:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000d8e:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	3301      	adds	r3, #1
 8000d96:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
 8000d9a:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 8000d9e:	6013      	str	r3, [r2, #0]
 8000da0:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
 8000da4:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000dae:	db98      	blt.n	8000ce2 <main+0x4b2>
	  		  }
		  capturestate = CAPTURESTATE_IDLE;
 8000db0:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <main+0x5b0>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	701a      	strb	r2, [r3, #0]
		  break;
 8000db6:	e004      	b.n	8000dc2 <main+0x592>
	  default:
		  break;
 8000db8:	bf00      	nop
 8000dba:	e69b      	b.n	8000af4 <main+0x2c4>
		  break;
 8000dbc:	bf00      	nop
 8000dbe:	e699      	b.n	8000af4 <main+0x2c4>
		  break;
 8000dc0:	bf00      	nop
	  switch(capturestate)
 8000dc2:	e697      	b.n	8000af4 <main+0x2c4>
 8000dc4:	20000001 	.word	0x20000001
 8000dc8:	20000108 	.word	0x20000108
 8000dcc:	20005f5c 	.word	0x20005f5c
 8000dd0:	20000094 	.word	0x20000094
 8000dd4:	20000160 	.word	0x20000160
 8000dd8:	20000098 	.word	0x20000098
 8000ddc:	2000019c 	.word	0x2000019c
 8000de0:	20000091 	.word	0x20000091
 8000de4:	20000000 	.word	0x20000000
 8000de8:	08005800 	.word	0x08005800
 8000dec:	20000168 	.word	0x20000168
 8000df0:	2000015c 	.word	0x2000015c
 8000df4:	20005ffc 	.word	0x20005ffc

08000df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b094      	sub	sp, #80	; 0x50
 8000dfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfe:	f107 031c 	add.w	r3, r7, #28
 8000e02:	2234      	movs	r2, #52	; 0x34
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f004 f8e0 	bl	8004fcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e0c:	f107 0308 	add.w	r3, r7, #8
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	4b2c      	ldr	r3, [pc, #176]	; (8000ed4 <SystemClock_Config+0xdc>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	4a2b      	ldr	r2, [pc, #172]	; (8000ed4 <SystemClock_Config+0xdc>)
 8000e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2c:	4b29      	ldr	r3, [pc, #164]	; (8000ed4 <SystemClock_Config+0xdc>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e38:	2300      	movs	r3, #0
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	4b26      	ldr	r3, [pc, #152]	; (8000ed8 <SystemClock_Config+0xe0>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a25      	ldr	r2, [pc, #148]	; (8000ed8 <SystemClock_Config+0xe0>)
 8000e42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e46:	6013      	str	r3, [r2, #0]
 8000e48:	4b23      	ldr	r3, [pc, #140]	; (8000ed8 <SystemClock_Config+0xe0>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e50:	603b      	str	r3, [r7, #0]
 8000e52:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e54:	2302      	movs	r3, #2
 8000e56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e5c:	2310      	movs	r3, #16
 8000e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e60:	2302      	movs	r3, #2
 8000e62:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e64:	2300      	movs	r3, #0
 8000e66:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e68:	2308      	movs	r3, #8
 8000e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000e6c:	23b4      	movs	r3, #180	; 0xb4
 8000e6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e70:	2302      	movs	r3, #2
 8000e72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e74:	2302      	movs	r3, #2
 8000e76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e7c:	f107 031c 	add.w	r3, r7, #28
 8000e80:	4618      	mov	r0, r3
 8000e82:	f002 fc0d 	bl	80036a0 <HAL_RCC_OscConfig>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e8c:	f000 f85c 	bl	8000f48 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e90:	f002 f94a 	bl	8003128 <HAL_PWREx_EnableOverDrive>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e9a:	f000 f855 	bl	8000f48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9e:	230f      	movs	r3, #15
 8000ea0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000eaa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000eae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000eb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000eb6:	f107 0308 	add.w	r3, r7, #8
 8000eba:	2105      	movs	r1, #5
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f002 f983 	bl	80031c8 <HAL_RCC_ClockConfig>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000ec8:	f000 f83e 	bl	8000f48 <Error_Handler>
  }
}
 8000ecc:	bf00      	nop
 8000ece:	3750      	adds	r7, #80	; 0x50
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40007000 	.word	0x40007000

08000edc <HAL_UART_TxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
	i2cRecComplete = 1;
}
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	uartTxComplete = 1;
 8000ee4:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <HAL_UART_TxCpltCallback+0x1c>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	701a      	strb	r2, [r3, #0]
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000000 	.word	0x20000000

08000efc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	uartByteReceived = 1;
 8000f04:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <HAL_UART_RxCpltCallback+0x20>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, &uartByte, 1);
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	4904      	ldr	r1, [pc, #16]	; (8000f20 <HAL_UART_RxCpltCallback+0x24>)
 8000f0e:	4805      	ldr	r0, [pc, #20]	; (8000f24 <HAL_UART_RxCpltCallback+0x28>)
 8000f10:	f003 f929 	bl	8004166 <HAL_UART_Receive_IT>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000092 	.word	0x20000092
 8000f20:	2000015e 	.word	0x2000015e
 8000f24:	20005ffc 	.word	0x20005ffc

08000f28 <DMATransferCompleteCallback>:
void DMATransferCompleteCallback(DMA_HandleTypeDef *hdma)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	dmaTransferComplete = 1;
 8000f30:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <DMATransferCompleteCallback+0x1c>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000090 	.word	0x20000090

08000f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
	...

08000f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	4a0f      	ldr	r2, [pc, #60]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	603b      	str	r3, [r7, #0]
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	4a08      	ldr	r2, [pc, #32]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f88:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	40023800 	.word	0x40023800

08000fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <HardFault_Handler+0x4>

08000fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <MemManage_Handler+0x4>

08000fc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <BusFault_Handler+0x4>

08000fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <UsageFault_Handler+0x4>

08000fce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ffc:	f000 fa00 	bl	8001400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}

08001004 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <DMA1_Stream6_IRQHandler+0x10>)
 800100a:	f000 fc75 	bl	80018f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20005f9c 	.word	0x20005f9c

08001018 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <USART2_IRQHandler+0x10>)
 800101e:	f003 f963 	bl	80042e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20005ffc 	.word	0x20005ffc

0800102c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <DMA2_Stream0_IRQHandler+0x10>)
 8001032:	f000 fc61 	bl	80018f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200000a8 	.word	0x200000a8

08001040 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001048:	4a14      	ldr	r2, [pc, #80]	; (800109c <_sbrk+0x5c>)
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <_sbrk+0x60>)
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <_sbrk+0x64>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d102      	bne.n	8001062 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <_sbrk+0x64>)
 800105e:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <_sbrk+0x68>)
 8001060:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <_sbrk+0x64>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	429a      	cmp	r2, r3
 800106e:	d207      	bcs.n	8001080 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001070:	f003 ff82 	bl	8004f78 <__errno>
 8001074:	4602      	mov	r2, r0
 8001076:	230c      	movs	r3, #12
 8001078:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
 800107e:	e009      	b.n	8001094 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <_sbrk+0x64>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <_sbrk+0x64>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <_sbrk+0x64>)
 8001090:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001092:	68fb      	ldr	r3, [r7, #12]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20020000 	.word	0x20020000
 80010a0:	00000400 	.word	0x00000400
 80010a4:	2000009c 	.word	0x2000009c
 80010a8:	20006048 	.word	0x20006048

080010ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <SystemInit+0x28>)
 80010b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010b6:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <SystemInit+0x28>)
 80010b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010c0:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <SystemInit+0x28>)
 80010c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010c6:	609a      	str	r2, [r3, #8]
#endif
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010de:	f107 0308 	add.w	r3, r7, #8
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ec:	463b      	mov	r3, r7
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80010f4:	4b1d      	ldr	r3, [pc, #116]	; (800116c <MX_TIM2_Init+0x94>)
 80010f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 89;
 80010fc:	4b1b      	ldr	r3, [pc, #108]	; (800116c <MX_TIM2_Init+0x94>)
 80010fe:	2259      	movs	r2, #89	; 0x59
 8001100:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001102:	4b1a      	ldr	r3, [pc, #104]	; (800116c <MX_TIM2_Init+0x94>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001108:	4b18      	ldr	r3, [pc, #96]	; (800116c <MX_TIM2_Init+0x94>)
 800110a:	f04f 32ff 	mov.w	r2, #4294967295
 800110e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001110:	4b16      	ldr	r3, [pc, #88]	; (800116c <MX_TIM2_Init+0x94>)
 8001112:	2200      	movs	r2, #0
 8001114:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <MX_TIM2_Init+0x94>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800111c:	4813      	ldr	r0, [pc, #76]	; (800116c <MX_TIM2_Init+0x94>)
 800111e:	f002 fd19 	bl	8003b54 <HAL_TIM_Base_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001128:	f7ff ff0e 	bl	8000f48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800112c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001130:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	4619      	mov	r1, r3
 8001138:	480c      	ldr	r0, [pc, #48]	; (800116c <MX_TIM2_Init+0x94>)
 800113a:	f002 fd5a 	bl	8003bf2 <HAL_TIM_ConfigClockSource>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001144:	f7ff ff00 	bl	8000f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001148:	2300      	movs	r3, #0
 800114a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800114c:	2300      	movs	r3, #0
 800114e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001150:	463b      	mov	r3, r7
 8001152:	4619      	mov	r1, r3
 8001154:	4805      	ldr	r0, [pc, #20]	; (800116c <MX_TIM2_Init+0x94>)
 8001156:	f002 ff3d 	bl	8003fd4 <HAL_TIMEx_MasterConfigSynchronization>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001160:	f7ff fef2 	bl	8000f48 <Error_Handler>
  }

}
 8001164:	bf00      	nop
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20005f5c 	.word	0x20005f5c

08001170 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001180:	d10d      	bne.n	800119e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <HAL_TIM_Base_MspInit+0x3c>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	4a08      	ldr	r2, [pc, #32]	; (80011ac <HAL_TIM_Base_MspInit+0x3c>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6413      	str	r3, [r2, #64]	; 0x40
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_TIM_Base_MspInit+0x3c>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800119e:	bf00      	nop
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	40023800 	.word	0x40023800

080011b0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80011b4:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <MX_USART2_UART_Init+0x48>)
 80011b6:	4a11      	ldr	r2, [pc, #68]	; (80011fc <MX_USART2_UART_Init+0x4c>)
 80011b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2000000;
 80011ba:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <MX_USART2_UART_Init+0x48>)
 80011bc:	4a10      	ldr	r2, [pc, #64]	; (8001200 <MX_USART2_UART_Init+0x50>)
 80011be:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011c0:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <MX_USART2_UART_Init+0x48>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <MX_USART2_UART_Init+0x48>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011cc:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <MX_USART2_UART_Init+0x48>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_USART2_UART_Init+0x48>)
 80011d4:	220c      	movs	r2, #12
 80011d6:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d8:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <MX_USART2_UART_Init+0x48>)
 80011da:	2200      	movs	r2, #0
 80011dc:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <MX_USART2_UART_Init+0x48>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011e4:	4804      	ldr	r0, [pc, #16]	; (80011f8 <MX_USART2_UART_Init+0x48>)
 80011e6:	f002 ff71 	bl	80040cc <HAL_UART_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 80011f0:	f7ff feaa 	bl	8000f48 <Error_Handler>
  }

}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20005ffc 	.word	0x20005ffc
 80011fc:	40004400 	.word	0x40004400
 8001200:	001e8480 	.word	0x001e8480

08001204 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08a      	sub	sp, #40	; 0x28
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a34      	ldr	r2, [pc, #208]	; (80012f4 <HAL_UART_MspInit+0xf0>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d161      	bne.n	80012ea <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	4b33      	ldr	r3, [pc, #204]	; (80012f8 <HAL_UART_MspInit+0xf4>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	4a32      	ldr	r2, [pc, #200]	; (80012f8 <HAL_UART_MspInit+0xf4>)
 8001230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001234:	6413      	str	r3, [r2, #64]	; 0x40
 8001236:	4b30      	ldr	r3, [pc, #192]	; (80012f8 <HAL_UART_MspInit+0xf4>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	4b2c      	ldr	r3, [pc, #176]	; (80012f8 <HAL_UART_MspInit+0xf4>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a2b      	ldr	r2, [pc, #172]	; (80012f8 <HAL_UART_MspInit+0xf4>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <HAL_UART_MspInit+0xf4>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800125e:	230c      	movs	r3, #12
 8001260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001262:	2302      	movs	r3, #2
 8001264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126a:	2303      	movs	r3, #3
 800126c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800126e:	2307      	movs	r3, #7
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4619      	mov	r1, r3
 8001278:	4820      	ldr	r0, [pc, #128]	; (80012fc <HAL_UART_MspInit+0xf8>)
 800127a:	f000 fdf9 	bl	8001e70 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800127e:	4b20      	ldr	r3, [pc, #128]	; (8001300 <HAL_UART_MspInit+0xfc>)
 8001280:	4a20      	ldr	r2, [pc, #128]	; (8001304 <HAL_UART_MspInit+0x100>)
 8001282:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001284:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <HAL_UART_MspInit+0xfc>)
 8001286:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800128a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800128c:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <HAL_UART_MspInit+0xfc>)
 800128e:	2240      	movs	r2, #64	; 0x40
 8001290:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001292:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <HAL_UART_MspInit+0xfc>)
 8001294:	2200      	movs	r2, #0
 8001296:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001298:	4b19      	ldr	r3, [pc, #100]	; (8001300 <HAL_UART_MspInit+0xfc>)
 800129a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800129e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012a0:	4b17      	ldr	r3, [pc, #92]	; (8001300 <HAL_UART_MspInit+0xfc>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012a6:	4b16      	ldr	r3, [pc, #88]	; (8001300 <HAL_UART_MspInit+0xfc>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80012ac:	4b14      	ldr	r3, [pc, #80]	; (8001300 <HAL_UART_MspInit+0xfc>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012b2:	4b13      	ldr	r3, [pc, #76]	; (8001300 <HAL_UART_MspInit+0xfc>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <HAL_UART_MspInit+0xfc>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80012be:	4810      	ldr	r0, [pc, #64]	; (8001300 <HAL_UART_MspInit+0xfc>)
 80012c0:	f000 f9f2 	bl	80016a8 <HAL_DMA_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80012ca:	f7ff fe3d 	bl	8000f48 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a0b      	ldr	r2, [pc, #44]	; (8001300 <HAL_UART_MspInit+0xfc>)
 80012d2:	631a      	str	r2, [r3, #48]	; 0x30
 80012d4:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <HAL_UART_MspInit+0xfc>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	2026      	movs	r0, #38	; 0x26
 80012e0:	f000 f9ab 	bl	800163a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012e4:	2026      	movs	r0, #38	; 0x26
 80012e6:	f000 f9c4 	bl	8001672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012ea:	bf00      	nop
 80012ec:	3728      	adds	r7, #40	; 0x28
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40004400 	.word	0x40004400
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40020000 	.word	0x40020000
 8001300:	20005f9c 	.word	0x20005f9c
 8001304:	400260a0 	.word	0x400260a0

08001308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001340 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800130c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800130e:	e003      	b.n	8001318 <LoopCopyDataInit>

08001310 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001312:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001314:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001316:	3104      	adds	r1, #4

08001318 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001318:	480b      	ldr	r0, [pc, #44]	; (8001348 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800131c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800131e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001320:	d3f6      	bcc.n	8001310 <CopyDataInit>
  ldr  r2, =_sbss
 8001322:	4a0b      	ldr	r2, [pc, #44]	; (8001350 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001324:	e002      	b.n	800132c <LoopFillZerobss>

08001326 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001326:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001328:	f842 3b04 	str.w	r3, [r2], #4

0800132c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800132c:	4b09      	ldr	r3, [pc, #36]	; (8001354 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800132e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001330:	d3f9      	bcc.n	8001326 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001332:	f7ff febb 	bl	80010ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001336:	f003 fe25 	bl	8004f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800133a:	f7ff fa79 	bl	8000830 <main>
  bx  lr    
 800133e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001340:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001344:	08005874 	.word	0x08005874
  ldr  r0, =_sdata
 8001348:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800134c:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001350:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001354:	20006044 	.word	0x20006044

08001358 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001358:	e7fe      	b.n	8001358 <ADC_IRQHandler>
	...

0800135c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001360:	4b0e      	ldr	r3, [pc, #56]	; (800139c <HAL_Init+0x40>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0d      	ldr	r2, [pc, #52]	; (800139c <HAL_Init+0x40>)
 8001366:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800136a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800136c:	4b0b      	ldr	r3, [pc, #44]	; (800139c <HAL_Init+0x40>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a0a      	ldr	r2, [pc, #40]	; (800139c <HAL_Init+0x40>)
 8001372:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001376:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <HAL_Init+0x40>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a07      	ldr	r2, [pc, #28]	; (800139c <HAL_Init+0x40>)
 800137e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001382:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001384:	2003      	movs	r0, #3
 8001386:	f000 f94d 	bl	8001624 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800138a:	2000      	movs	r0, #0
 800138c:	f000 f808 	bl	80013a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001390:	f7ff fde2 	bl	8000f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40023c00 	.word	0x40023c00

080013a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <HAL_InitTick+0x54>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <HAL_InitTick+0x58>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4619      	mov	r1, r3
 80013b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 f965 	bl	800168e <HAL_SYSTICK_Config>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e00e      	b.n	80013ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2b0f      	cmp	r3, #15
 80013d2:	d80a      	bhi.n	80013ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013d4:	2200      	movs	r2, #0
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	f04f 30ff 	mov.w	r0, #4294967295
 80013dc:	f000 f92d 	bl	800163a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013e0:	4a06      	ldr	r2, [pc, #24]	; (80013fc <HAL_InitTick+0x5c>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
 80013e8:	e000      	b.n	80013ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000004 	.word	0x20000004
 80013f8:	2000000c 	.word	0x2000000c
 80013fc:	20000008 	.word	0x20000008

08001400 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_IncTick+0x20>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	461a      	mov	r2, r3
 800140a:	4b06      	ldr	r3, [pc, #24]	; (8001424 <HAL_IncTick+0x24>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4413      	add	r3, r2
 8001410:	4a04      	ldr	r2, [pc, #16]	; (8001424 <HAL_IncTick+0x24>)
 8001412:	6013      	str	r3, [r2, #0]
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	2000000c 	.word	0x2000000c
 8001424:	2000603c 	.word	0x2000603c

08001428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return uwTick;
 800142c:	4b03      	ldr	r3, [pc, #12]	; (800143c <HAL_GetTick+0x14>)
 800142e:	681b      	ldr	r3, [r3, #0]
}
 8001430:	4618      	mov	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	2000603c 	.word	0x2000603c

08001440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001448:	f7ff ffee 	bl	8001428 <HAL_GetTick>
 800144c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001458:	d005      	beq.n	8001466 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <HAL_Delay+0x40>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	461a      	mov	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4413      	add	r3, r2
 8001464:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001466:	bf00      	nop
 8001468:	f7ff ffde 	bl	8001428 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	429a      	cmp	r2, r3
 8001476:	d8f7      	bhi.n	8001468 <HAL_Delay+0x28>
  {
  }
}
 8001478:	bf00      	nop
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	2000000c 	.word	0x2000000c

08001484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a0:	4013      	ands	r3, r2
 80014a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014b6:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <__NVIC_SetPriorityGrouping+0x44>)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	60d3      	str	r3, [r2, #12]
}
 80014bc:	bf00      	nop
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d0:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <__NVIC_GetPriorityGrouping+0x18>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	0a1b      	lsrs	r3, r3, #8
 80014d6:	f003 0307 	and.w	r3, r3, #7
}
 80014da:	4618      	mov	r0, r3
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	db0b      	blt.n	8001512 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	f003 021f 	and.w	r2, r3, #31
 8001500:	4907      	ldr	r1, [pc, #28]	; (8001520 <__NVIC_EnableIRQ+0x38>)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	095b      	lsrs	r3, r3, #5
 8001508:	2001      	movs	r0, #1
 800150a:	fa00 f202 	lsl.w	r2, r0, r2
 800150e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000e100 	.word	0xe000e100

08001524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	6039      	str	r1, [r7, #0]
 800152e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001534:	2b00      	cmp	r3, #0
 8001536:	db0a      	blt.n	800154e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	b2da      	uxtb	r2, r3
 800153c:	490c      	ldr	r1, [pc, #48]	; (8001570 <__NVIC_SetPriority+0x4c>)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	0112      	lsls	r2, r2, #4
 8001544:	b2d2      	uxtb	r2, r2
 8001546:	440b      	add	r3, r1
 8001548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800154c:	e00a      	b.n	8001564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	b2da      	uxtb	r2, r3
 8001552:	4908      	ldr	r1, [pc, #32]	; (8001574 <__NVIC_SetPriority+0x50>)
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	3b04      	subs	r3, #4
 800155c:	0112      	lsls	r2, r2, #4
 800155e:	b2d2      	uxtb	r2, r2
 8001560:	440b      	add	r3, r1
 8001562:	761a      	strb	r2, [r3, #24]
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	e000e100 	.word	0xe000e100
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001578:	b480      	push	{r7}
 800157a:	b089      	sub	sp, #36	; 0x24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f1c3 0307 	rsb	r3, r3, #7
 8001592:	2b04      	cmp	r3, #4
 8001594:	bf28      	it	cs
 8001596:	2304      	movcs	r3, #4
 8001598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3304      	adds	r3, #4
 800159e:	2b06      	cmp	r3, #6
 80015a0:	d902      	bls.n	80015a8 <NVIC_EncodePriority+0x30>
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3b03      	subs	r3, #3
 80015a6:	e000      	b.n	80015aa <NVIC_EncodePriority+0x32>
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ac:	f04f 32ff 	mov.w	r2, #4294967295
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43da      	mvns	r2, r3
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	401a      	ands	r2, r3
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c0:	f04f 31ff 	mov.w	r1, #4294967295
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ca:	43d9      	mvns	r1, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	4313      	orrs	r3, r2
         );
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3724      	adds	r7, #36	; 0x24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
	...

080015e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015f0:	d301      	bcc.n	80015f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015f2:	2301      	movs	r3, #1
 80015f4:	e00f      	b.n	8001616 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f6:	4a0a      	ldr	r2, [pc, #40]	; (8001620 <SysTick_Config+0x40>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015fe:	210f      	movs	r1, #15
 8001600:	f04f 30ff 	mov.w	r0, #4294967295
 8001604:	f7ff ff8e 	bl	8001524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <SysTick_Config+0x40>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800160e:	4b04      	ldr	r3, [pc, #16]	; (8001620 <SysTick_Config+0x40>)
 8001610:	2207      	movs	r2, #7
 8001612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	e000e010 	.word	0xe000e010

08001624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff ff29 	bl	8001484 <__NVIC_SetPriorityGrouping>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800163a:	b580      	push	{r7, lr}
 800163c:	b086      	sub	sp, #24
 800163e:	af00      	add	r7, sp, #0
 8001640:	4603      	mov	r3, r0
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	607a      	str	r2, [r7, #4]
 8001646:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800164c:	f7ff ff3e 	bl	80014cc <__NVIC_GetPriorityGrouping>
 8001650:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	6978      	ldr	r0, [r7, #20]
 8001658:	f7ff ff8e 	bl	8001578 <NVIC_EncodePriority>
 800165c:	4602      	mov	r2, r0
 800165e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001662:	4611      	mov	r1, r2
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff5d 	bl	8001524 <__NVIC_SetPriority>
}
 800166a:	bf00      	nop
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	4603      	mov	r3, r0
 800167a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800167c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff31 	bl	80014e8 <__NVIC_EnableIRQ>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff ffa2 	bl	80015e0 <SysTick_Config>
 800169c:	4603      	mov	r3, r0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80016b4:	f7ff feb8 	bl	8001428 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e099      	b.n	80017f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2202      	movs	r2, #2
 80016d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 0201 	bic.w	r2, r2, #1
 80016e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016e4:	e00f      	b.n	8001706 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016e6:	f7ff fe9f 	bl	8001428 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b05      	cmp	r3, #5
 80016f2:	d908      	bls.n	8001706 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2220      	movs	r2, #32
 80016f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2203      	movs	r2, #3
 80016fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e078      	b.n	80017f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1e8      	bne.n	80016e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	4b38      	ldr	r3, [pc, #224]	; (8001800 <HAL_DMA_Init+0x158>)
 8001720:	4013      	ands	r3, r2
 8001722:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001732:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800173e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800174a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	4313      	orrs	r3, r2
 8001756:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	2b04      	cmp	r3, #4
 800175e:	d107      	bne.n	8001770 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001768:	4313      	orrs	r3, r2
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	4313      	orrs	r3, r2
 800176e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	f023 0307 	bic.w	r3, r3, #7
 8001786:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	4313      	orrs	r3, r2
 8001790:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001796:	2b04      	cmp	r3, #4
 8001798:	d117      	bne.n	80017ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d00e      	beq.n	80017ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 fae5 	bl	8001d7c <DMA_CheckFifoParam>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d008      	beq.n	80017ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2240      	movs	r2, #64	; 0x40
 80017bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80017c6:	2301      	movs	r3, #1
 80017c8:	e016      	b.n	80017f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 fa9c 	bl	8001d10 <DMA_CalcBaseAndBitshift>
 80017d8:	4603      	mov	r3, r0
 80017da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e0:	223f      	movs	r2, #63	; 0x3f
 80017e2:	409a      	lsls	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	f010803f 	.word	0xf010803f

08001804 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001812:	2300      	movs	r3, #0
 8001814:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001822:	2b01      	cmp	r3, #1
 8001824:	d101      	bne.n	800182a <HAL_DMA_Start_IT+0x26>
 8001826:	2302      	movs	r3, #2
 8001828:	e040      	b.n	80018ac <HAL_DMA_Start_IT+0xa8>
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b01      	cmp	r3, #1
 800183c:	d12f      	bne.n	800189e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2202      	movs	r2, #2
 8001842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2200      	movs	r2, #0
 800184a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	68b9      	ldr	r1, [r7, #8]
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f000 fa2e 	bl	8001cb4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800185c:	223f      	movs	r2, #63	; 0x3f
 800185e:	409a      	lsls	r2, r3
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f042 0216 	orr.w	r2, r2, #22
 8001872:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	2b00      	cmp	r3, #0
 800187a:	d007      	beq.n	800188c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f042 0208 	orr.w	r2, r2, #8
 800188a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f042 0201 	orr.w	r2, r2, #1
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	e005      	b.n	80018aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80018a6:	2302      	movs	r3, #2
 80018a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80018aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d004      	beq.n	80018d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2280      	movs	r2, #128	; 0x80
 80018cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e00c      	b.n	80018ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2205      	movs	r2, #5
 80018d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 0201 	bic.w	r2, r2, #1
 80018e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001904:	4b92      	ldr	r3, [pc, #584]	; (8001b50 <HAL_DMA_IRQHandler+0x258>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a92      	ldr	r2, [pc, #584]	; (8001b54 <HAL_DMA_IRQHandler+0x25c>)
 800190a:	fba2 2303 	umull	r2, r3, r2, r3
 800190e:	0a9b      	lsrs	r3, r3, #10
 8001910:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001916:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001922:	2208      	movs	r2, #8
 8001924:	409a      	lsls	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4013      	ands	r3, r2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d01a      	beq.n	8001964 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	d013      	beq.n	8001964 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 0204 	bic.w	r2, r2, #4
 800194a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001950:	2208      	movs	r2, #8
 8001952:	409a      	lsls	r2, r3
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800195c:	f043 0201 	orr.w	r2, r3, #1
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001968:	2201      	movs	r2, #1
 800196a:	409a      	lsls	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4013      	ands	r3, r2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d012      	beq.n	800199a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800197e:	2b00      	cmp	r3, #0
 8001980:	d00b      	beq.n	800199a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001986:	2201      	movs	r2, #1
 8001988:	409a      	lsls	r2, r3
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001992:	f043 0202 	orr.w	r2, r3, #2
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800199e:	2204      	movs	r2, #4
 80019a0:	409a      	lsls	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4013      	ands	r3, r2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d012      	beq.n	80019d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00b      	beq.n	80019d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019bc:	2204      	movs	r2, #4
 80019be:	409a      	lsls	r2, r3
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c8:	f043 0204 	orr.w	r2, r3, #4
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d4:	2210      	movs	r2, #16
 80019d6:	409a      	lsls	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4013      	ands	r3, r2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d043      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d03c      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f2:	2210      	movs	r2, #16
 80019f4:	409a      	lsls	r2, r3
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d018      	beq.n	8001a3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d108      	bne.n	8001a28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d024      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	4798      	blx	r3
 8001a26:	e01f      	b.n	8001a68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d01b      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	4798      	blx	r3
 8001a38:	e016      	b.n	8001a68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d107      	bne.n	8001a58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 0208 	bic.w	r2, r2, #8
 8001a56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6c:	2220      	movs	r2, #32
 8001a6e:	409a      	lsls	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4013      	ands	r3, r2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 808e 	beq.w	8001b96 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0310 	and.w	r3, r3, #16
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 8086 	beq.w	8001b96 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8e:	2220      	movs	r2, #32
 8001a90:	409a      	lsls	r2, r3
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b05      	cmp	r3, #5
 8001aa0:	d136      	bne.n	8001b10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 0216 	bic.w	r2, r2, #22
 8001ab0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	695a      	ldr	r2, [r3, #20]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ac0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d103      	bne.n	8001ad2 <HAL_DMA_IRQHandler+0x1da>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d007      	beq.n	8001ae2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 0208 	bic.w	r2, r2, #8
 8001ae0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae6:	223f      	movs	r2, #63	; 0x3f
 8001ae8:	409a      	lsls	r2, r3
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d07d      	beq.n	8001c02 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	4798      	blx	r3
        }
        return;
 8001b0e:	e078      	b.n	8001c02 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d01c      	beq.n	8001b58 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d108      	bne.n	8001b3e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d030      	beq.n	8001b96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	4798      	blx	r3
 8001b3c:	e02b      	b.n	8001b96 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d027      	beq.n	8001b96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	4798      	blx	r3
 8001b4e:	e022      	b.n	8001b96 <HAL_DMA_IRQHandler+0x29e>
 8001b50:	20000004 	.word	0x20000004
 8001b54:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10f      	bne.n	8001b86 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 0210 	bic.w	r2, r2, #16
 8001b74:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d032      	beq.n	8001c04 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d022      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2205      	movs	r2, #5
 8001bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0201 	bic.w	r2, r2, #1
 8001bc0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d307      	bcc.n	8001bde <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1f2      	bne.n	8001bc2 <HAL_DMA_IRQHandler+0x2ca>
 8001bdc:	e000      	b.n	8001be0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001bde:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d005      	beq.n	8001c04 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	4798      	blx	r3
 8001c00:	e000      	b.n	8001c04 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001c02:	bf00      	nop
    }
  }
}
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop

08001c0c <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b087      	sub	sp, #28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	460b      	mov	r3, r1
 8001c16:	607a      	str	r2, [r7, #4]
 8001c18:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d101      	bne.n	8001c2c <HAL_DMA_RegisterCallback+0x20>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e03c      	b.n	8001ca6 <HAL_DMA_RegisterCallback+0x9a>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d129      	bne.n	8001c94 <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 8001c40:	7afb      	ldrb	r3, [r7, #11]
 8001c42:	2b05      	cmp	r3, #5
 8001c44:	d829      	bhi.n	8001c9a <HAL_DMA_RegisterCallback+0x8e>
 8001c46:	a201      	add	r2, pc, #4	; (adr r2, 8001c4c <HAL_DMA_RegisterCallback+0x40>)
 8001c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c4c:	08001c65 	.word	0x08001c65
 8001c50:	08001c6d 	.word	0x08001c6d
 8001c54:	08001c75 	.word	0x08001c75
 8001c58:	08001c7d 	.word	0x08001c7d
 8001c5c:	08001c85 	.word	0x08001c85
 8001c60:	08001c8d 	.word	0x08001c8d
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8001c6a:	e017      	b.n	8001c9c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8001c72:	e013      	b.n	8001c9c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8001c7a:	e00f      	b.n	8001c9c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8001c82:	e00b      	b.n	8001c9c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8001c8a:	e007      	b.n	8001c9c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8001c92:	e003      	b.n	8001c9c <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	75fb      	strb	r3, [r7, #23]
 8001c98:	e000      	b.n	8001c9c <HAL_DMA_RegisterCallback+0x90>
      break;
 8001c9a:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8001ca4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	371c      	adds	r7, #28
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop

08001cb4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
 8001cc0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cd0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2b40      	cmp	r3, #64	; 0x40
 8001ce0:	d108      	bne.n	8001cf4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001cf2:	e007      	b.n	8001d04 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68ba      	ldr	r2, [r7, #8]
 8001cfa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	60da      	str	r2, [r3, #12]
}
 8001d04:	bf00      	nop
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	3b10      	subs	r3, #16
 8001d20:	4a14      	ldr	r2, [pc, #80]	; (8001d74 <DMA_CalcBaseAndBitshift+0x64>)
 8001d22:	fba2 2303 	umull	r2, r3, r2, r3
 8001d26:	091b      	lsrs	r3, r3, #4
 8001d28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d2a:	4a13      	ldr	r2, [pc, #76]	; (8001d78 <DMA_CalcBaseAndBitshift+0x68>)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4413      	add	r3, r2
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2b03      	cmp	r3, #3
 8001d3c:	d909      	bls.n	8001d52 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d46:	f023 0303 	bic.w	r3, r3, #3
 8001d4a:	1d1a      	adds	r2, r3, #4
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	659a      	str	r2, [r3, #88]	; 0x58
 8001d50:	e007      	b.n	8001d62 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d5a:	f023 0303 	bic.w	r3, r3, #3
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	aaaaaaab 	.word	0xaaaaaaab
 8001d78:	08005828 	.word	0x08005828

08001d7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d84:	2300      	movs	r3, #0
 8001d86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d11f      	bne.n	8001dd6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	2b03      	cmp	r3, #3
 8001d9a:	d855      	bhi.n	8001e48 <DMA_CheckFifoParam+0xcc>
 8001d9c:	a201      	add	r2, pc, #4	; (adr r2, 8001da4 <DMA_CheckFifoParam+0x28>)
 8001d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da2:	bf00      	nop
 8001da4:	08001db5 	.word	0x08001db5
 8001da8:	08001dc7 	.word	0x08001dc7
 8001dac:	08001db5 	.word	0x08001db5
 8001db0:	08001e49 	.word	0x08001e49
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d045      	beq.n	8001e4c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dc4:	e042      	b.n	8001e4c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001dce:	d13f      	bne.n	8001e50 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dd4:	e03c      	b.n	8001e50 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dde:	d121      	bne.n	8001e24 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	d836      	bhi.n	8001e54 <DMA_CheckFifoParam+0xd8>
 8001de6:	a201      	add	r2, pc, #4	; (adr r2, 8001dec <DMA_CheckFifoParam+0x70>)
 8001de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dec:	08001dfd 	.word	0x08001dfd
 8001df0:	08001e03 	.word	0x08001e03
 8001df4:	08001dfd 	.word	0x08001dfd
 8001df8:	08001e15 	.word	0x08001e15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8001e00:	e02f      	b.n	8001e62 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d024      	beq.n	8001e58 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e12:	e021      	b.n	8001e58 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e18:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e1c:	d11e      	bne.n	8001e5c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e22:	e01b      	b.n	8001e5c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d902      	bls.n	8001e30 <DMA_CheckFifoParam+0xb4>
 8001e2a:	2b03      	cmp	r3, #3
 8001e2c:	d003      	beq.n	8001e36 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e2e:	e018      	b.n	8001e62 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	73fb      	strb	r3, [r7, #15]
      break;
 8001e34:	e015      	b.n	8001e62 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00e      	beq.n	8001e60 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	73fb      	strb	r3, [r7, #15]
      break;
 8001e46:	e00b      	b.n	8001e60 <DMA_CheckFifoParam+0xe4>
      break;
 8001e48:	bf00      	nop
 8001e4a:	e00a      	b.n	8001e62 <DMA_CheckFifoParam+0xe6>
      break;
 8001e4c:	bf00      	nop
 8001e4e:	e008      	b.n	8001e62 <DMA_CheckFifoParam+0xe6>
      break;
 8001e50:	bf00      	nop
 8001e52:	e006      	b.n	8001e62 <DMA_CheckFifoParam+0xe6>
      break;
 8001e54:	bf00      	nop
 8001e56:	e004      	b.n	8001e62 <DMA_CheckFifoParam+0xe6>
      break;
 8001e58:	bf00      	nop
 8001e5a:	e002      	b.n	8001e62 <DMA_CheckFifoParam+0xe6>
      break;   
 8001e5c:	bf00      	nop
 8001e5e:	e000      	b.n	8001e62 <DMA_CheckFifoParam+0xe6>
      break;
 8001e60:	bf00      	nop
    }
  } 
  
  return status; 
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b089      	sub	sp, #36	; 0x24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]
 8001e8a:	e165      	b.n	8002158 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	f040 8154 	bne.w	8002152 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d00b      	beq.n	8001eca <HAL_GPIO_Init+0x5a>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d007      	beq.n	8001eca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ebe:	2b11      	cmp	r3, #17
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b12      	cmp	r3, #18
 8001ec8:	d130      	bne.n	8001f2c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f00:	2201      	movs	r2, #1
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	f003 0201 	and.w	r2, r3, #1
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	2203      	movs	r2, #3
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d003      	beq.n	8001f6c <HAL_GPIO_Init+0xfc>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2b12      	cmp	r3, #18
 8001f6a:	d123      	bne.n	8001fb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	08da      	lsrs	r2, r3, #3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3208      	adds	r2, #8
 8001f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	220f      	movs	r2, #15
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	691a      	ldr	r2, [r3, #16]
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	08da      	lsrs	r2, r3, #3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3208      	adds	r2, #8
 8001fae:	69b9      	ldr	r1, [r7, #24]
 8001fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 0203 	and.w	r2, r3, #3
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 80ae 	beq.w	8002152 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	4b5c      	ldr	r3, [pc, #368]	; (800216c <HAL_GPIO_Init+0x2fc>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	4a5b      	ldr	r2, [pc, #364]	; (800216c <HAL_GPIO_Init+0x2fc>)
 8002000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002004:	6453      	str	r3, [r2, #68]	; 0x44
 8002006:	4b59      	ldr	r3, [pc, #356]	; (800216c <HAL_GPIO_Init+0x2fc>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002012:	4a57      	ldr	r2, [pc, #348]	; (8002170 <HAL_GPIO_Init+0x300>)
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	089b      	lsrs	r3, r3, #2
 8002018:	3302      	adds	r3, #2
 800201a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800201e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	220f      	movs	r2, #15
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4013      	ands	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a4e      	ldr	r2, [pc, #312]	; (8002174 <HAL_GPIO_Init+0x304>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d025      	beq.n	800208a <HAL_GPIO_Init+0x21a>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a4d      	ldr	r2, [pc, #308]	; (8002178 <HAL_GPIO_Init+0x308>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d01f      	beq.n	8002086 <HAL_GPIO_Init+0x216>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a4c      	ldr	r2, [pc, #304]	; (800217c <HAL_GPIO_Init+0x30c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d019      	beq.n	8002082 <HAL_GPIO_Init+0x212>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a4b      	ldr	r2, [pc, #300]	; (8002180 <HAL_GPIO_Init+0x310>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d013      	beq.n	800207e <HAL_GPIO_Init+0x20e>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a4a      	ldr	r2, [pc, #296]	; (8002184 <HAL_GPIO_Init+0x314>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d00d      	beq.n	800207a <HAL_GPIO_Init+0x20a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a49      	ldr	r2, [pc, #292]	; (8002188 <HAL_GPIO_Init+0x318>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d007      	beq.n	8002076 <HAL_GPIO_Init+0x206>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a48      	ldr	r2, [pc, #288]	; (800218c <HAL_GPIO_Init+0x31c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d101      	bne.n	8002072 <HAL_GPIO_Init+0x202>
 800206e:	2306      	movs	r3, #6
 8002070:	e00c      	b.n	800208c <HAL_GPIO_Init+0x21c>
 8002072:	2307      	movs	r3, #7
 8002074:	e00a      	b.n	800208c <HAL_GPIO_Init+0x21c>
 8002076:	2305      	movs	r3, #5
 8002078:	e008      	b.n	800208c <HAL_GPIO_Init+0x21c>
 800207a:	2304      	movs	r3, #4
 800207c:	e006      	b.n	800208c <HAL_GPIO_Init+0x21c>
 800207e:	2303      	movs	r3, #3
 8002080:	e004      	b.n	800208c <HAL_GPIO_Init+0x21c>
 8002082:	2302      	movs	r3, #2
 8002084:	e002      	b.n	800208c <HAL_GPIO_Init+0x21c>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <HAL_GPIO_Init+0x21c>
 800208a:	2300      	movs	r3, #0
 800208c:	69fa      	ldr	r2, [r7, #28]
 800208e:	f002 0203 	and.w	r2, r2, #3
 8002092:	0092      	lsls	r2, r2, #2
 8002094:	4093      	lsls	r3, r2
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800209c:	4934      	ldr	r1, [pc, #208]	; (8002170 <HAL_GPIO_Init+0x300>)
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	089b      	lsrs	r3, r3, #2
 80020a2:	3302      	adds	r3, #2
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020aa:	4b39      	ldr	r3, [pc, #228]	; (8002190 <HAL_GPIO_Init+0x320>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020ce:	4a30      	ldr	r2, [pc, #192]	; (8002190 <HAL_GPIO_Init+0x320>)
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020d4:	4b2e      	ldr	r3, [pc, #184]	; (8002190 <HAL_GPIO_Init+0x320>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020f8:	4a25      	ldr	r2, [pc, #148]	; (8002190 <HAL_GPIO_Init+0x320>)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020fe:	4b24      	ldr	r3, [pc, #144]	; (8002190 <HAL_GPIO_Init+0x320>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	43db      	mvns	r3, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4013      	ands	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002122:	4a1b      	ldr	r2, [pc, #108]	; (8002190 <HAL_GPIO_Init+0x320>)
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002128:	4b19      	ldr	r3, [pc, #100]	; (8002190 <HAL_GPIO_Init+0x320>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800214c:	4a10      	ldr	r2, [pc, #64]	; (8002190 <HAL_GPIO_Init+0x320>)
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3301      	adds	r3, #1
 8002156:	61fb      	str	r3, [r7, #28]
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	2b0f      	cmp	r3, #15
 800215c:	f67f ae96 	bls.w	8001e8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002160:	bf00      	nop
 8002162:	3724      	adds	r7, #36	; 0x24
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	40023800 	.word	0x40023800
 8002170:	40013800 	.word	0x40013800
 8002174:	40020000 	.word	0x40020000
 8002178:	40020400 	.word	0x40020400
 800217c:	40020800 	.word	0x40020800
 8002180:	40020c00 	.word	0x40020c00
 8002184:	40021000 	.word	0x40021000
 8002188:	40021400 	.word	0x40021400
 800218c:	40021800 	.word	0x40021800
 8002190:	40013c00 	.word	0x40013c00

08002194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	807b      	strh	r3, [r7, #2]
 80021a0:	4613      	mov	r3, r2
 80021a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021a4:	787b      	ldrb	r3, [r7, #1]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021aa:	887a      	ldrh	r2, [r7, #2]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021b0:	e003      	b.n	80021ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021b2:	887b      	ldrh	r3, [r7, #2]
 80021b4:	041a      	lsls	r2, r3, #16
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	619a      	str	r2, [r3, #24]
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
	...

080021c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e11f      	b.n	800241a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d106      	bne.n	80021f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7fe fad6 	bl	80007a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2224      	movs	r2, #36	; 0x24
 80021f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0201 	bic.w	r2, r2, #1
 800220a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800221a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800222a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800222c:	f001 f8be 	bl	80033ac <HAL_RCC_GetPCLK1Freq>
 8002230:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	4a7b      	ldr	r2, [pc, #492]	; (8002424 <HAL_I2C_Init+0x25c>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d807      	bhi.n	800224c <HAL_I2C_Init+0x84>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4a7a      	ldr	r2, [pc, #488]	; (8002428 <HAL_I2C_Init+0x260>)
 8002240:	4293      	cmp	r3, r2
 8002242:	bf94      	ite	ls
 8002244:	2301      	movls	r3, #1
 8002246:	2300      	movhi	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	e006      	b.n	800225a <HAL_I2C_Init+0x92>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4a77      	ldr	r2, [pc, #476]	; (800242c <HAL_I2C_Init+0x264>)
 8002250:	4293      	cmp	r3, r2
 8002252:	bf94      	ite	ls
 8002254:	2301      	movls	r3, #1
 8002256:	2300      	movhi	r3, #0
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e0db      	b.n	800241a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	4a72      	ldr	r2, [pc, #456]	; (8002430 <HAL_I2C_Init+0x268>)
 8002266:	fba2 2303 	umull	r2, r3, r2, r3
 800226a:	0c9b      	lsrs	r3, r3, #18
 800226c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68ba      	ldr	r2, [r7, #8]
 800227e:	430a      	orrs	r2, r1
 8002280:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	4a64      	ldr	r2, [pc, #400]	; (8002424 <HAL_I2C_Init+0x25c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d802      	bhi.n	800229c <HAL_I2C_Init+0xd4>
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	3301      	adds	r3, #1
 800229a:	e009      	b.n	80022b0 <HAL_I2C_Init+0xe8>
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022a2:	fb02 f303 	mul.w	r3, r2, r3
 80022a6:	4a63      	ldr	r2, [pc, #396]	; (8002434 <HAL_I2C_Init+0x26c>)
 80022a8:	fba2 2303 	umull	r2, r3, r2, r3
 80022ac:	099b      	lsrs	r3, r3, #6
 80022ae:	3301      	adds	r3, #1
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	430b      	orrs	r3, r1
 80022b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	4956      	ldr	r1, [pc, #344]	; (8002424 <HAL_I2C_Init+0x25c>)
 80022cc:	428b      	cmp	r3, r1
 80022ce:	d80d      	bhi.n	80022ec <HAL_I2C_Init+0x124>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	1e59      	subs	r1, r3, #1
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	fbb1 f3f3 	udiv	r3, r1, r3
 80022de:	3301      	adds	r3, #1
 80022e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e4:	2b04      	cmp	r3, #4
 80022e6:	bf38      	it	cc
 80022e8:	2304      	movcc	r3, #4
 80022ea:	e04f      	b.n	800238c <HAL_I2C_Init+0x1c4>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d111      	bne.n	8002318 <HAL_I2C_Init+0x150>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	1e58      	subs	r0, r3, #1
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6859      	ldr	r1, [r3, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	440b      	add	r3, r1
 8002302:	fbb0 f3f3 	udiv	r3, r0, r3
 8002306:	3301      	adds	r3, #1
 8002308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800230c:	2b00      	cmp	r3, #0
 800230e:	bf0c      	ite	eq
 8002310:	2301      	moveq	r3, #1
 8002312:	2300      	movne	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	e012      	b.n	800233e <HAL_I2C_Init+0x176>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	1e58      	subs	r0, r3, #1
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6859      	ldr	r1, [r3, #4]
 8002320:	460b      	mov	r3, r1
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	0099      	lsls	r1, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	fbb0 f3f3 	udiv	r3, r0, r3
 800232e:	3301      	adds	r3, #1
 8002330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002334:	2b00      	cmp	r3, #0
 8002336:	bf0c      	ite	eq
 8002338:	2301      	moveq	r3, #1
 800233a:	2300      	movne	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_I2C_Init+0x17e>
 8002342:	2301      	movs	r3, #1
 8002344:	e022      	b.n	800238c <HAL_I2C_Init+0x1c4>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10e      	bne.n	800236c <HAL_I2C_Init+0x1a4>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	1e58      	subs	r0, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6859      	ldr	r1, [r3, #4]
 8002356:	460b      	mov	r3, r1
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	440b      	add	r3, r1
 800235c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002360:	3301      	adds	r3, #1
 8002362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800236a:	e00f      	b.n	800238c <HAL_I2C_Init+0x1c4>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	1e58      	subs	r0, r3, #1
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6859      	ldr	r1, [r3, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	0099      	lsls	r1, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002382:	3301      	adds	r3, #1
 8002384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002388:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	6809      	ldr	r1, [r1, #0]
 8002390:	4313      	orrs	r3, r2
 8002392:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69da      	ldr	r2, [r3, #28]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6911      	ldr	r1, [r2, #16]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	68d2      	ldr	r2, [r2, #12]
 80023c6:	4311      	orrs	r1, r2
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6812      	ldr	r2, [r2, #0]
 80023cc:	430b      	orrs	r3, r1
 80023ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695a      	ldr	r2, [r3, #20]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0201 	orr.w	r2, r2, #1
 80023fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2220      	movs	r2, #32
 8002406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	000186a0 	.word	0x000186a0
 8002428:	001e847f 	.word	0x001e847f
 800242c:	003d08ff 	.word	0x003d08ff
 8002430:	431bde83 	.word	0x431bde83
 8002434:	10624dd3 	.word	0x10624dd3

08002438 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b088      	sub	sp, #32
 800243c:	af02      	add	r7, sp, #8
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	4608      	mov	r0, r1
 8002442:	4611      	mov	r1, r2
 8002444:	461a      	mov	r2, r3
 8002446:	4603      	mov	r3, r0
 8002448:	817b      	strh	r3, [r7, #10]
 800244a:	460b      	mov	r3, r1
 800244c:	813b      	strh	r3, [r7, #8]
 800244e:	4613      	mov	r3, r2
 8002450:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002452:	f7fe ffe9 	bl	8001428 <HAL_GetTick>
 8002456:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b20      	cmp	r3, #32
 8002462:	f040 80d9 	bne.w	8002618 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	2319      	movs	r3, #25
 800246c:	2201      	movs	r2, #1
 800246e:	496d      	ldr	r1, [pc, #436]	; (8002624 <HAL_I2C_Mem_Write+0x1ec>)
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 fc7b 	bl	8002d6c <I2C_WaitOnFlagUntilTimeout>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800247c:	2302      	movs	r3, #2
 800247e:	e0cc      	b.n	800261a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002486:	2b01      	cmp	r3, #1
 8002488:	d101      	bne.n	800248e <HAL_I2C_Mem_Write+0x56>
 800248a:	2302      	movs	r3, #2
 800248c:	e0c5      	b.n	800261a <HAL_I2C_Mem_Write+0x1e2>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d007      	beq.n	80024b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0201 	orr.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2221      	movs	r2, #33	; 0x21
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2240      	movs	r2, #64	; 0x40
 80024d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6a3a      	ldr	r2, [r7, #32]
 80024de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80024e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4a4d      	ldr	r2, [pc, #308]	; (8002628 <HAL_I2C_Mem_Write+0x1f0>)
 80024f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024f6:	88f8      	ldrh	r0, [r7, #6]
 80024f8:	893a      	ldrh	r2, [r7, #8]
 80024fa:	8979      	ldrh	r1, [r7, #10]
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	9301      	str	r3, [sp, #4]
 8002500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	4603      	mov	r3, r0
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 fab6 	bl	8002a78 <I2C_RequestMemoryWrite>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d052      	beq.n	80025b8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e081      	b.n	800261a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 fcfc 	bl	8002f18 <I2C_WaitOnTXEFlagUntilTimeout>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00d      	beq.n	8002542 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	2b04      	cmp	r3, #4
 800252c:	d107      	bne.n	800253e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800253c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e06b      	b.n	800261a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	781a      	ldrb	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255c:	3b01      	subs	r3, #1
 800255e:	b29a      	uxth	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002568:	b29b      	uxth	r3, r3
 800256a:	3b01      	subs	r3, #1
 800256c:	b29a      	uxth	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b04      	cmp	r3, #4
 800257e:	d11b      	bne.n	80025b8 <HAL_I2C_Mem_Write+0x180>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002584:	2b00      	cmp	r3, #0
 8002586:	d017      	beq.n	80025b8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	781a      	ldrb	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	1c5a      	adds	r2, r3, #1
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a2:	3b01      	subs	r3, #1
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1aa      	bne.n	8002516 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f000 fce8 	bl	8002f9a <I2C_WaitOnBTFFlagUntilTimeout>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00d      	beq.n	80025ec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d4:	2b04      	cmp	r3, #4
 80025d6:	d107      	bne.n	80025e8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e016      	b.n	800261a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2220      	movs	r2, #32
 8002600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002614:	2300      	movs	r3, #0
 8002616:	e000      	b.n	800261a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002618:	2302      	movs	r3, #2
  }
}
 800261a:	4618      	mov	r0, r3
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	00100002 	.word	0x00100002
 8002628:	ffff0000 	.word	0xffff0000

0800262c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08c      	sub	sp, #48	; 0x30
 8002630:	af02      	add	r7, sp, #8
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	4608      	mov	r0, r1
 8002636:	4611      	mov	r1, r2
 8002638:	461a      	mov	r2, r3
 800263a:	4603      	mov	r3, r0
 800263c:	817b      	strh	r3, [r7, #10]
 800263e:	460b      	mov	r3, r1
 8002640:	813b      	strh	r3, [r7, #8]
 8002642:	4613      	mov	r3, r2
 8002644:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002646:	f7fe feef 	bl	8001428 <HAL_GetTick>
 800264a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b20      	cmp	r3, #32
 8002656:	f040 8208 	bne.w	8002a6a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	2319      	movs	r3, #25
 8002660:	2201      	movs	r2, #1
 8002662:	497b      	ldr	r1, [pc, #492]	; (8002850 <HAL_I2C_Mem_Read+0x224>)
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 fb81 	bl	8002d6c <I2C_WaitOnFlagUntilTimeout>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002670:	2302      	movs	r3, #2
 8002672:	e1fb      	b.n	8002a6c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_I2C_Mem_Read+0x56>
 800267e:	2302      	movs	r3, #2
 8002680:	e1f4      	b.n	8002a6c <HAL_I2C_Mem_Read+0x440>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b01      	cmp	r3, #1
 8002696:	d007      	beq.n	80026a8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0201 	orr.w	r2, r2, #1
 80026a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2222      	movs	r2, #34	; 0x22
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2240      	movs	r2, #64	; 0x40
 80026c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80026d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026de:	b29a      	uxth	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4a5b      	ldr	r2, [pc, #364]	; (8002854 <HAL_I2C_Mem_Read+0x228>)
 80026e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026ea:	88f8      	ldrh	r0, [r7, #6]
 80026ec:	893a      	ldrh	r2, [r7, #8]
 80026ee:	8979      	ldrh	r1, [r7, #10]
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	9301      	str	r3, [sp, #4]
 80026f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	4603      	mov	r3, r0
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 fa50 	bl	8002ba0 <I2C_RequestMemoryRead>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e1b0      	b.n	8002a6c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270e:	2b00      	cmp	r3, #0
 8002710:	d113      	bne.n	800273a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002712:	2300      	movs	r3, #0
 8002714:	623b      	str	r3, [r7, #32]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	623b      	str	r3, [r7, #32]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	623b      	str	r3, [r7, #32]
 8002726:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	e184      	b.n	8002a44 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273e:	2b01      	cmp	r3, #1
 8002740:	d11b      	bne.n	800277a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002750:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	61fb      	str	r3, [r7, #28]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	61fb      	str	r3, [r7, #28]
 8002766:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	e164      	b.n	8002a44 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277e:	2b02      	cmp	r3, #2
 8002780:	d11b      	bne.n	80027ba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002790:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	61bb      	str	r3, [r7, #24]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	61bb      	str	r3, [r7, #24]
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	e144      	b.n	8002a44 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80027d0:	e138      	b.n	8002a44 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	f200 80f1 	bhi.w	80029be <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d123      	bne.n	800282c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f000 fc17 	bl	800301c <I2C_WaitOnRXNEFlagUntilTimeout>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e139      	b.n	8002a6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691a      	ldr	r2, [r3, #16]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	1c5a      	adds	r2, r3, #1
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002814:	3b01      	subs	r3, #1
 8002816:	b29a      	uxth	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002820:	b29b      	uxth	r3, r3
 8002822:	3b01      	subs	r3, #1
 8002824:	b29a      	uxth	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	855a      	strh	r2, [r3, #42]	; 0x2a
 800282a:	e10b      	b.n	8002a44 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002830:	2b02      	cmp	r3, #2
 8002832:	d14e      	bne.n	80028d2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800283a:	2200      	movs	r2, #0
 800283c:	4906      	ldr	r1, [pc, #24]	; (8002858 <HAL_I2C_Mem_Read+0x22c>)
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 fa94 	bl	8002d6c <I2C_WaitOnFlagUntilTimeout>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d008      	beq.n	800285c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e10e      	b.n	8002a6c <HAL_I2C_Mem_Read+0x440>
 800284e:	bf00      	nop
 8002850:	00100002 	.word	0x00100002
 8002854:	ffff0000 	.word	0xffff0000
 8002858:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800286a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	691a      	ldr	r2, [r3, #16]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002888:	3b01      	subs	r3, #1
 800288a:	b29a      	uxth	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002894:	b29b      	uxth	r3, r3
 8002896:	3b01      	subs	r3, #1
 8002898:	b29a      	uxth	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	691a      	ldr	r2, [r3, #16]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028d0:	e0b8      	b.n	8002a44 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d8:	2200      	movs	r2, #0
 80028da:	4966      	ldr	r1, [pc, #408]	; (8002a74 <HAL_I2C_Mem_Read+0x448>)
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 fa45 	bl	8002d6c <I2C_WaitOnFlagUntilTimeout>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e0bf      	b.n	8002a6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	691a      	ldr	r2, [r3, #16]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002924:	b29b      	uxth	r3, r3
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002934:	2200      	movs	r2, #0
 8002936:	494f      	ldr	r1, [pc, #316]	; (8002a74 <HAL_I2C_Mem_Read+0x448>)
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 fa17 	bl	8002d6c <I2C_WaitOnFlagUntilTimeout>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e091      	b.n	8002a6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002956:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691a      	ldr	r2, [r3, #16]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002980:	b29b      	uxth	r3, r3
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	691a      	ldr	r2, [r3, #16]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	1c5a      	adds	r2, r3, #1
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029bc:	e042      	b.n	8002a44 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 fb2a 	bl	800301c <I2C_WaitOnRXNEFlagUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e04c      	b.n	8002a6c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	691a      	ldr	r2, [r3, #16]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	1c5a      	adds	r2, r3, #1
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d118      	bne.n	8002a44 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f47f aec2 	bne.w	80027d2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2220      	movs	r2, #32
 8002a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	e000      	b.n	8002a6c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002a6a:	2302      	movs	r3, #2
  }
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3728      	adds	r7, #40	; 0x28
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	00010004 	.word	0x00010004

08002a78 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	4608      	mov	r0, r1
 8002a82:	4611      	mov	r1, r2
 8002a84:	461a      	mov	r2, r3
 8002a86:	4603      	mov	r3, r0
 8002a88:	817b      	strh	r3, [r7, #10]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	813b      	strh	r3, [r7, #8]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aa0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	6a3b      	ldr	r3, [r7, #32]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 f95c 	bl	8002d6c <I2C_WaitOnFlagUntilTimeout>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00c      	beq.n	8002ad4 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ace:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e05f      	b.n	8002b94 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ad4:	897b      	ldrh	r3, [r7, #10]
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	461a      	mov	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ae2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	6a3a      	ldr	r2, [r7, #32]
 8002ae8:	492c      	ldr	r1, [pc, #176]	; (8002b9c <I2C_RequestMemoryWrite+0x124>)
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 f995 	bl	8002e1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e04c      	b.n	8002b94 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002afa:	2300      	movs	r3, #0
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	617b      	str	r3, [r7, #20]
 8002b0e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b12:	6a39      	ldr	r1, [r7, #32]
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 f9ff 	bl	8002f18 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00d      	beq.n	8002b3c <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d107      	bne.n	8002b38 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b36:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e02b      	b.n	8002b94 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b3c:	88fb      	ldrh	r3, [r7, #6]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d105      	bne.n	8002b4e <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b42:	893b      	ldrh	r3, [r7, #8]
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	611a      	str	r2, [r3, #16]
 8002b4c:	e021      	b.n	8002b92 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b4e:	893b      	ldrh	r3, [r7, #8]
 8002b50:	0a1b      	lsrs	r3, r3, #8
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b5e:	6a39      	ldr	r1, [r7, #32]
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 f9d9 	bl	8002f18 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00d      	beq.n	8002b88 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d107      	bne.n	8002b84 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b82:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e005      	b.n	8002b94 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b88:	893b      	ldrh	r3, [r7, #8]
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	00010002 	.word	0x00010002

08002ba0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b088      	sub	sp, #32
 8002ba4:	af02      	add	r7, sp, #8
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	4608      	mov	r0, r1
 8002baa:	4611      	mov	r1, r2
 8002bac:	461a      	mov	r2, r3
 8002bae:	4603      	mov	r3, r0
 8002bb0:	817b      	strh	r3, [r7, #10]
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	813b      	strh	r3, [r7, #8]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bc8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 f8c0 	bl	8002d6c <I2C_WaitOnFlagUntilTimeout>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00c      	beq.n	8002c0c <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d003      	beq.n	8002c08 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e0a9      	b.n	8002d60 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c0c:	897b      	ldrh	r3, [r7, #10]
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	461a      	mov	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c1a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	6a3a      	ldr	r2, [r7, #32]
 8002c20:	4951      	ldr	r1, [pc, #324]	; (8002d68 <I2C_RequestMemoryRead+0x1c8>)
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 f8f9 	bl	8002e1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e096      	b.n	8002d60 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c32:	2300      	movs	r3, #0
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	617b      	str	r3, [r7, #20]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	617b      	str	r3, [r7, #20]
 8002c46:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c4a:	6a39      	ldr	r1, [r7, #32]
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 f963 	bl	8002f18 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00d      	beq.n	8002c74 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	2b04      	cmp	r3, #4
 8002c5e:	d107      	bne.n	8002c70 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c6e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e075      	b.n	8002d60 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c74:	88fb      	ldrh	r3, [r7, #6]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d105      	bne.n	8002c86 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c7a:	893b      	ldrh	r3, [r7, #8]
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	611a      	str	r2, [r3, #16]
 8002c84:	e021      	b.n	8002cca <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c86:	893b      	ldrh	r3, [r7, #8]
 8002c88:	0a1b      	lsrs	r3, r3, #8
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c96:	6a39      	ldr	r1, [r7, #32]
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f000 f93d 	bl	8002f18 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00d      	beq.n	8002cc0 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca8:	2b04      	cmp	r3, #4
 8002caa:	d107      	bne.n	8002cbc <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e04f      	b.n	8002d60 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cc0:	893b      	ldrh	r3, [r7, #8]
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ccc:	6a39      	ldr	r1, [r7, #32]
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 f922 	bl	8002f18 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00d      	beq.n	8002cf6 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d107      	bne.n	8002cf2 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e034      	b.n	8002d60 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 f82a 	bl	8002d6c <I2C_WaitOnFlagUntilTimeout>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00c      	beq.n	8002d38 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e013      	b.n	8002d60 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d38:	897b      	ldrh	r3, [r7, #10]
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	6a3a      	ldr	r2, [r7, #32]
 8002d4c:	4906      	ldr	r1, [pc, #24]	; (8002d68 <I2C_RequestMemoryRead+0x1c8>)
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 f863 	bl	8002e1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	00010002 	.word	0x00010002

08002d6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	603b      	str	r3, [r7, #0]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d7c:	e025      	b.n	8002dca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d84:	d021      	beq.n	8002dca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d86:	f7fe fb4f 	bl	8001428 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d302      	bcc.n	8002d9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d116      	bne.n	8002dca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2220      	movs	r2, #32
 8002da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	f043 0220 	orr.w	r2, r3, #32
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e023      	b.n	8002e12 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	0c1b      	lsrs	r3, r3, #16
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d10d      	bne.n	8002df0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	43da      	mvns	r2, r3
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	4013      	ands	r3, r2
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	bf0c      	ite	eq
 8002de6:	2301      	moveq	r3, #1
 8002de8:	2300      	movne	r3, #0
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	461a      	mov	r2, r3
 8002dee:	e00c      	b.n	8002e0a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	43da      	mvns	r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	bf0c      	ite	eq
 8002e02:	2301      	moveq	r3, #1
 8002e04:	2300      	movne	r3, #0
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	461a      	mov	r2, r3
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d0b6      	beq.n	8002d7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b084      	sub	sp, #16
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	60f8      	str	r0, [r7, #12]
 8002e22:	60b9      	str	r1, [r7, #8]
 8002e24:	607a      	str	r2, [r7, #4]
 8002e26:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e28:	e051      	b.n	8002ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e38:	d123      	bne.n	8002e82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e48:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e52:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	f043 0204 	orr.w	r2, r3, #4
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e046      	b.n	8002f10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e88:	d021      	beq.n	8002ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e8a:	f7fe facd 	bl	8001428 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d302      	bcc.n	8002ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d116      	bne.n	8002ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	f043 0220 	orr.w	r2, r3, #32
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e020      	b.n	8002f10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	0c1b      	lsrs	r3, r3, #16
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d10c      	bne.n	8002ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	43da      	mvns	r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	bf14      	ite	ne
 8002eea:	2301      	movne	r3, #1
 8002eec:	2300      	moveq	r3, #0
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	e00b      	b.n	8002f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	43da      	mvns	r2, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	4013      	ands	r3, r2
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	bf14      	ite	ne
 8002f04:	2301      	movne	r3, #1
 8002f06:	2300      	moveq	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d18d      	bne.n	8002e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f24:	e02d      	b.n	8002f82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 f8ce 	bl	80030c8 <I2C_IsAcknowledgeFailed>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e02d      	b.n	8002f92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3c:	d021      	beq.n	8002f82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f3e:	f7fe fa73 	bl	8001428 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d302      	bcc.n	8002f54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d116      	bne.n	8002f82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	f043 0220 	orr.w	r2, r3, #32
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e007      	b.n	8002f92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8c:	2b80      	cmp	r3, #128	; 0x80
 8002f8e:	d1ca      	bne.n	8002f26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b084      	sub	sp, #16
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	60f8      	str	r0, [r7, #12]
 8002fa2:	60b9      	str	r1, [r7, #8]
 8002fa4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fa6:	e02d      	b.n	8003004 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 f88d 	bl	80030c8 <I2C_IsAcknowledgeFailed>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e02d      	b.n	8003014 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fbe:	d021      	beq.n	8003004 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc0:	f7fe fa32 	bl	8001428 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d302      	bcc.n	8002fd6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d116      	bne.n	8003004 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	f043 0220 	orr.w	r2, r3, #32
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e007      	b.n	8003014 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	2b04      	cmp	r3, #4
 8003010:	d1ca      	bne.n	8002fa8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003028:	e042      	b.n	80030b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	f003 0310 	and.w	r3, r3, #16
 8003034:	2b10      	cmp	r3, #16
 8003036:	d119      	bne.n	800306c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0210 	mvn.w	r2, #16
 8003040:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e029      	b.n	80030c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800306c:	f7fe f9dc 	bl	8001428 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	429a      	cmp	r2, r3
 800307a:	d302      	bcc.n	8003082 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d116      	bne.n	80030b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	f043 0220 	orr.w	r2, r3, #32
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e007      	b.n	80030c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ba:	2b40      	cmp	r3, #64	; 0x40
 80030bc:	d1b5      	bne.n	800302a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030de:	d11b      	bne.n	8003118 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	f043 0204 	orr.w	r2, r3, #4
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e000      	b.n	800311a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
	...

08003128 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800312e:	2300      	movs	r3, #0
 8003130:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003132:	2300      	movs	r3, #0
 8003134:	603b      	str	r3, [r7, #0]
 8003136:	4b20      	ldr	r3, [pc, #128]	; (80031b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	4a1f      	ldr	r2, [pc, #124]	; (80031b8 <HAL_PWREx_EnableOverDrive+0x90>)
 800313c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003140:	6413      	str	r3, [r2, #64]	; 0x40
 8003142:	4b1d      	ldr	r3, [pc, #116]	; (80031b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314a:	603b      	str	r3, [r7, #0]
 800314c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800314e:	4b1b      	ldr	r3, [pc, #108]	; (80031bc <HAL_PWREx_EnableOverDrive+0x94>)
 8003150:	2201      	movs	r2, #1
 8003152:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003154:	f7fe f968 	bl	8001428 <HAL_GetTick>
 8003158:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800315a:	e009      	b.n	8003170 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800315c:	f7fe f964 	bl	8001428 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800316a:	d901      	bls.n	8003170 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e01f      	b.n	80031b0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003170:	4b13      	ldr	r3, [pc, #76]	; (80031c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800317c:	d1ee      	bne.n	800315c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800317e:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003180:	2201      	movs	r2, #1
 8003182:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003184:	f7fe f950 	bl	8001428 <HAL_GetTick>
 8003188:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800318a:	e009      	b.n	80031a0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800318c:	f7fe f94c 	bl	8001428 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800319a:	d901      	bls.n	80031a0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e007      	b.n	80031b0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80031a0:	4b07      	ldr	r3, [pc, #28]	; (80031c0 <HAL_PWREx_EnableOverDrive+0x98>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031ac:	d1ee      	bne.n	800318c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40023800 	.word	0x40023800
 80031bc:	420e0040 	.word	0x420e0040
 80031c0:	40007000 	.word	0x40007000
 80031c4:	420e0044 	.word	0x420e0044

080031c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e0cc      	b.n	8003376 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031dc:	4b68      	ldr	r3, [pc, #416]	; (8003380 <HAL_RCC_ClockConfig+0x1b8>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 030f 	and.w	r3, r3, #15
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d90c      	bls.n	8003204 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ea:	4b65      	ldr	r3, [pc, #404]	; (8003380 <HAL_RCC_ClockConfig+0x1b8>)
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f2:	4b63      	ldr	r3, [pc, #396]	; (8003380 <HAL_RCC_ClockConfig+0x1b8>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d001      	beq.n	8003204 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e0b8      	b.n	8003376 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d020      	beq.n	8003252 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d005      	beq.n	8003228 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800321c:	4b59      	ldr	r3, [pc, #356]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	4a58      	ldr	r2, [pc, #352]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003226:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0308 	and.w	r3, r3, #8
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003234:	4b53      	ldr	r3, [pc, #332]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	4a52      	ldr	r2, [pc, #328]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800323e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003240:	4b50      	ldr	r3, [pc, #320]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	494d      	ldr	r1, [pc, #308]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	4313      	orrs	r3, r2
 8003250:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d044      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d107      	bne.n	8003276 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003266:	4b47      	ldr	r3, [pc, #284]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d119      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e07f      	b.n	8003376 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b02      	cmp	r3, #2
 800327c:	d003      	beq.n	8003286 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003282:	2b03      	cmp	r3, #3
 8003284:	d107      	bne.n	8003296 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003286:	4b3f      	ldr	r3, [pc, #252]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d109      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e06f      	b.n	8003376 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003296:	4b3b      	ldr	r3, [pc, #236]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e067      	b.n	8003376 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032a6:	4b37      	ldr	r3, [pc, #220]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f023 0203 	bic.w	r2, r3, #3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	4934      	ldr	r1, [pc, #208]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032b8:	f7fe f8b6 	bl	8001428 <HAL_GetTick>
 80032bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032be:	e00a      	b.n	80032d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c0:	f7fe f8b2 	bl	8001428 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e04f      	b.n	8003376 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d6:	4b2b      	ldr	r3, [pc, #172]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 020c 	and.w	r2, r3, #12
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d1eb      	bne.n	80032c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032e8:	4b25      	ldr	r3, [pc, #148]	; (8003380 <HAL_RCC_ClockConfig+0x1b8>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 030f 	and.w	r3, r3, #15
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d20c      	bcs.n	8003310 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f6:	4b22      	ldr	r3, [pc, #136]	; (8003380 <HAL_RCC_ClockConfig+0x1b8>)
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fe:	4b20      	ldr	r3, [pc, #128]	; (8003380 <HAL_RCC_ClockConfig+0x1b8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	429a      	cmp	r2, r3
 800330a:	d001      	beq.n	8003310 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e032      	b.n	8003376 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b00      	cmp	r3, #0
 800331a:	d008      	beq.n	800332e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800331c:	4b19      	ldr	r3, [pc, #100]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	4916      	ldr	r1, [pc, #88]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 800332a:	4313      	orrs	r3, r2
 800332c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b00      	cmp	r3, #0
 8003338:	d009      	beq.n	800334e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800333a:	4b12      	ldr	r3, [pc, #72]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	490e      	ldr	r1, [pc, #56]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 800334a:	4313      	orrs	r3, r2
 800334c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800334e:	f000 f855 	bl	80033fc <HAL_RCC_GetSysClockFreq>
 8003352:	4601      	mov	r1, r0
 8003354:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	091b      	lsrs	r3, r3, #4
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	4a0a      	ldr	r2, [pc, #40]	; (8003388 <HAL_RCC_ClockConfig+0x1c0>)
 8003360:	5cd3      	ldrb	r3, [r2, r3]
 8003362:	fa21 f303 	lsr.w	r3, r1, r3
 8003366:	4a09      	ldr	r2, [pc, #36]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800336a:	4b09      	ldr	r3, [pc, #36]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f7fe f816 	bl	80013a0 <HAL_InitTick>

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	40023c00 	.word	0x40023c00
 8003384:	40023800 	.word	0x40023800
 8003388:	08005810 	.word	0x08005810
 800338c:	20000004 	.word	0x20000004
 8003390:	20000008 	.word	0x20000008

08003394 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003398:	4b03      	ldr	r3, [pc, #12]	; (80033a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800339a:	681b      	ldr	r3, [r3, #0]
}
 800339c:	4618      	mov	r0, r3
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	20000004 	.word	0x20000004

080033ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033b0:	f7ff fff0 	bl	8003394 <HAL_RCC_GetHCLKFreq>
 80033b4:	4601      	mov	r1, r0
 80033b6:	4b05      	ldr	r3, [pc, #20]	; (80033cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	0a9b      	lsrs	r3, r3, #10
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	4a03      	ldr	r2, [pc, #12]	; (80033d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033c2:	5cd3      	ldrb	r3, [r2, r3]
 80033c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40023800 	.word	0x40023800
 80033d0:	08005820 	.word	0x08005820

080033d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033d8:	f7ff ffdc 	bl	8003394 <HAL_RCC_GetHCLKFreq>
 80033dc:	4601      	mov	r1, r0
 80033de:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	0b5b      	lsrs	r3, r3, #13
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	4a03      	ldr	r2, [pc, #12]	; (80033f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033ea:	5cd3      	ldrb	r3, [r2, r3]
 80033ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40023800 	.word	0x40023800
 80033f8:	08005820 	.word	0x08005820

080033fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033fe:	b087      	sub	sp, #28
 8003400:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003402:	2300      	movs	r3, #0
 8003404:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003406:	2300      	movs	r3, #0
 8003408:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800340a:	2300      	movs	r3, #0
 800340c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800340e:	2300      	movs	r3, #0
 8003410:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003412:	2300      	movs	r3, #0
 8003414:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003416:	4b9f      	ldr	r3, [pc, #636]	; (8003694 <HAL_RCC_GetSysClockFreq+0x298>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 030c 	and.w	r3, r3, #12
 800341e:	2b0c      	cmp	r3, #12
 8003420:	f200 8130 	bhi.w	8003684 <HAL_RCC_GetSysClockFreq+0x288>
 8003424:	a201      	add	r2, pc, #4	; (adr r2, 800342c <HAL_RCC_GetSysClockFreq+0x30>)
 8003426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342a:	bf00      	nop
 800342c:	08003461 	.word	0x08003461
 8003430:	08003685 	.word	0x08003685
 8003434:	08003685 	.word	0x08003685
 8003438:	08003685 	.word	0x08003685
 800343c:	08003467 	.word	0x08003467
 8003440:	08003685 	.word	0x08003685
 8003444:	08003685 	.word	0x08003685
 8003448:	08003685 	.word	0x08003685
 800344c:	0800346d 	.word	0x0800346d
 8003450:	08003685 	.word	0x08003685
 8003454:	08003685 	.word	0x08003685
 8003458:	08003685 	.word	0x08003685
 800345c:	0800357b 	.word	0x0800357b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003460:	4b8d      	ldr	r3, [pc, #564]	; (8003698 <HAL_RCC_GetSysClockFreq+0x29c>)
 8003462:	613b      	str	r3, [r7, #16]
       break;
 8003464:	e111      	b.n	800368a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003466:	4b8d      	ldr	r3, [pc, #564]	; (800369c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003468:	613b      	str	r3, [r7, #16]
      break;
 800346a:	e10e      	b.n	800368a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800346c:	4b89      	ldr	r3, [pc, #548]	; (8003694 <HAL_RCC_GetSysClockFreq+0x298>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003474:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003476:	4b87      	ldr	r3, [pc, #540]	; (8003694 <HAL_RCC_GetSysClockFreq+0x298>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d023      	beq.n	80034ca <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003482:	4b84      	ldr	r3, [pc, #528]	; (8003694 <HAL_RCC_GetSysClockFreq+0x298>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	099b      	lsrs	r3, r3, #6
 8003488:	f04f 0400 	mov.w	r4, #0
 800348c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	ea03 0501 	and.w	r5, r3, r1
 8003498:	ea04 0602 	and.w	r6, r4, r2
 800349c:	4a7f      	ldr	r2, [pc, #508]	; (800369c <HAL_RCC_GetSysClockFreq+0x2a0>)
 800349e:	fb02 f106 	mul.w	r1, r2, r6
 80034a2:	2200      	movs	r2, #0
 80034a4:	fb02 f205 	mul.w	r2, r2, r5
 80034a8:	440a      	add	r2, r1
 80034aa:	497c      	ldr	r1, [pc, #496]	; (800369c <HAL_RCC_GetSysClockFreq+0x2a0>)
 80034ac:	fba5 0101 	umull	r0, r1, r5, r1
 80034b0:	1853      	adds	r3, r2, r1
 80034b2:	4619      	mov	r1, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f04f 0400 	mov.w	r4, #0
 80034ba:	461a      	mov	r2, r3
 80034bc:	4623      	mov	r3, r4
 80034be:	f7fc fef7 	bl	80002b0 <__aeabi_uldivmod>
 80034c2:	4603      	mov	r3, r0
 80034c4:	460c      	mov	r4, r1
 80034c6:	617b      	str	r3, [r7, #20]
 80034c8:	e049      	b.n	800355e <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ca:	4b72      	ldr	r3, [pc, #456]	; (8003694 <HAL_RCC_GetSysClockFreq+0x298>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	099b      	lsrs	r3, r3, #6
 80034d0:	f04f 0400 	mov.w	r4, #0
 80034d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	ea03 0501 	and.w	r5, r3, r1
 80034e0:	ea04 0602 	and.w	r6, r4, r2
 80034e4:	4629      	mov	r1, r5
 80034e6:	4632      	mov	r2, r6
 80034e8:	f04f 0300 	mov.w	r3, #0
 80034ec:	f04f 0400 	mov.w	r4, #0
 80034f0:	0154      	lsls	r4, r2, #5
 80034f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80034f6:	014b      	lsls	r3, r1, #5
 80034f8:	4619      	mov	r1, r3
 80034fa:	4622      	mov	r2, r4
 80034fc:	1b49      	subs	r1, r1, r5
 80034fe:	eb62 0206 	sbc.w	r2, r2, r6
 8003502:	f04f 0300 	mov.w	r3, #0
 8003506:	f04f 0400 	mov.w	r4, #0
 800350a:	0194      	lsls	r4, r2, #6
 800350c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003510:	018b      	lsls	r3, r1, #6
 8003512:	1a5b      	subs	r3, r3, r1
 8003514:	eb64 0402 	sbc.w	r4, r4, r2
 8003518:	f04f 0100 	mov.w	r1, #0
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	00e2      	lsls	r2, r4, #3
 8003522:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003526:	00d9      	lsls	r1, r3, #3
 8003528:	460b      	mov	r3, r1
 800352a:	4614      	mov	r4, r2
 800352c:	195b      	adds	r3, r3, r5
 800352e:	eb44 0406 	adc.w	r4, r4, r6
 8003532:	f04f 0100 	mov.w	r1, #0
 8003536:	f04f 0200 	mov.w	r2, #0
 800353a:	02a2      	lsls	r2, r4, #10
 800353c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003540:	0299      	lsls	r1, r3, #10
 8003542:	460b      	mov	r3, r1
 8003544:	4614      	mov	r4, r2
 8003546:	4618      	mov	r0, r3
 8003548:	4621      	mov	r1, r4
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f04f 0400 	mov.w	r4, #0
 8003550:	461a      	mov	r2, r3
 8003552:	4623      	mov	r3, r4
 8003554:	f7fc feac 	bl	80002b0 <__aeabi_uldivmod>
 8003558:	4603      	mov	r3, r0
 800355a:	460c      	mov	r4, r1
 800355c:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800355e:	4b4d      	ldr	r3, [pc, #308]	; (8003694 <HAL_RCC_GetSysClockFreq+0x298>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	0c1b      	lsrs	r3, r3, #16
 8003564:	f003 0303 	and.w	r3, r3, #3
 8003568:	3301      	adds	r3, #1
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	fbb2 f3f3 	udiv	r3, r2, r3
 8003576:	613b      	str	r3, [r7, #16]
      break;
 8003578:	e087      	b.n	800368a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800357a:	4b46      	ldr	r3, [pc, #280]	; (8003694 <HAL_RCC_GetSysClockFreq+0x298>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003582:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003584:	4b43      	ldr	r3, [pc, #268]	; (8003694 <HAL_RCC_GetSysClockFreq+0x298>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d023      	beq.n	80035d8 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003590:	4b40      	ldr	r3, [pc, #256]	; (8003694 <HAL_RCC_GetSysClockFreq+0x298>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	099b      	lsrs	r3, r3, #6
 8003596:	f04f 0400 	mov.w	r4, #0
 800359a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800359e:	f04f 0200 	mov.w	r2, #0
 80035a2:	ea03 0501 	and.w	r5, r3, r1
 80035a6:	ea04 0602 	and.w	r6, r4, r2
 80035aa:	4a3c      	ldr	r2, [pc, #240]	; (800369c <HAL_RCC_GetSysClockFreq+0x2a0>)
 80035ac:	fb02 f106 	mul.w	r1, r2, r6
 80035b0:	2200      	movs	r2, #0
 80035b2:	fb02 f205 	mul.w	r2, r2, r5
 80035b6:	440a      	add	r2, r1
 80035b8:	4938      	ldr	r1, [pc, #224]	; (800369c <HAL_RCC_GetSysClockFreq+0x2a0>)
 80035ba:	fba5 0101 	umull	r0, r1, r5, r1
 80035be:	1853      	adds	r3, r2, r1
 80035c0:	4619      	mov	r1, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f04f 0400 	mov.w	r4, #0
 80035c8:	461a      	mov	r2, r3
 80035ca:	4623      	mov	r3, r4
 80035cc:	f7fc fe70 	bl	80002b0 <__aeabi_uldivmod>
 80035d0:	4603      	mov	r3, r0
 80035d2:	460c      	mov	r4, r1
 80035d4:	617b      	str	r3, [r7, #20]
 80035d6:	e049      	b.n	800366c <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035d8:	4b2e      	ldr	r3, [pc, #184]	; (8003694 <HAL_RCC_GetSysClockFreq+0x298>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	099b      	lsrs	r3, r3, #6
 80035de:	f04f 0400 	mov.w	r4, #0
 80035e2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80035e6:	f04f 0200 	mov.w	r2, #0
 80035ea:	ea03 0501 	and.w	r5, r3, r1
 80035ee:	ea04 0602 	and.w	r6, r4, r2
 80035f2:	4629      	mov	r1, r5
 80035f4:	4632      	mov	r2, r6
 80035f6:	f04f 0300 	mov.w	r3, #0
 80035fa:	f04f 0400 	mov.w	r4, #0
 80035fe:	0154      	lsls	r4, r2, #5
 8003600:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003604:	014b      	lsls	r3, r1, #5
 8003606:	4619      	mov	r1, r3
 8003608:	4622      	mov	r2, r4
 800360a:	1b49      	subs	r1, r1, r5
 800360c:	eb62 0206 	sbc.w	r2, r2, r6
 8003610:	f04f 0300 	mov.w	r3, #0
 8003614:	f04f 0400 	mov.w	r4, #0
 8003618:	0194      	lsls	r4, r2, #6
 800361a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800361e:	018b      	lsls	r3, r1, #6
 8003620:	1a5b      	subs	r3, r3, r1
 8003622:	eb64 0402 	sbc.w	r4, r4, r2
 8003626:	f04f 0100 	mov.w	r1, #0
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	00e2      	lsls	r2, r4, #3
 8003630:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003634:	00d9      	lsls	r1, r3, #3
 8003636:	460b      	mov	r3, r1
 8003638:	4614      	mov	r4, r2
 800363a:	195b      	adds	r3, r3, r5
 800363c:	eb44 0406 	adc.w	r4, r4, r6
 8003640:	f04f 0100 	mov.w	r1, #0
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	02a2      	lsls	r2, r4, #10
 800364a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800364e:	0299      	lsls	r1, r3, #10
 8003650:	460b      	mov	r3, r1
 8003652:	4614      	mov	r4, r2
 8003654:	4618      	mov	r0, r3
 8003656:	4621      	mov	r1, r4
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f04f 0400 	mov.w	r4, #0
 800365e:	461a      	mov	r2, r3
 8003660:	4623      	mov	r3, r4
 8003662:	f7fc fe25 	bl	80002b0 <__aeabi_uldivmod>
 8003666:	4603      	mov	r3, r0
 8003668:	460c      	mov	r4, r1
 800366a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800366c:	4b09      	ldr	r3, [pc, #36]	; (8003694 <HAL_RCC_GetSysClockFreq+0x298>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	0f1b      	lsrs	r3, r3, #28
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003680:	613b      	str	r3, [r7, #16]
      break;
 8003682:	e002      	b.n	800368a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003684:	4b04      	ldr	r3, [pc, #16]	; (8003698 <HAL_RCC_GetSysClockFreq+0x29c>)
 8003686:	613b      	str	r3, [r7, #16]
      break;
 8003688:	bf00      	nop
    }
  }
  return sysclockfreq;
 800368a:	693b      	ldr	r3, [r7, #16]
}
 800368c:	4618      	mov	r0, r3
 800368e:	371c      	adds	r7, #28
 8003690:	46bd      	mov	sp, r7
 8003692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003694:	40023800 	.word	0x40023800
 8003698:	00f42400 	.word	0x00f42400
 800369c:	017d7840 	.word	0x017d7840

080036a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 8083 	beq.w	80037c0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80036ba:	4b95      	ldr	r3, [pc, #596]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 030c 	and.w	r3, r3, #12
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d019      	beq.n	80036fa <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036c6:	4b92      	ldr	r3, [pc, #584]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80036ce:	2b08      	cmp	r3, #8
 80036d0:	d106      	bne.n	80036e0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036d2:	4b8f      	ldr	r3, [pc, #572]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036de:	d00c      	beq.n	80036fa <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036e0:	4b8b      	ldr	r3, [pc, #556]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036e8:	2b0c      	cmp	r3, #12
 80036ea:	d112      	bne.n	8003712 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ec:	4b88      	ldr	r3, [pc, #544]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036f8:	d10b      	bne.n	8003712 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036fa:	4b85      	ldr	r3, [pc, #532]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d05b      	beq.n	80037be <HAL_RCC_OscConfig+0x11e>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d157      	bne.n	80037be <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e216      	b.n	8003b40 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800371a:	d106      	bne.n	800372a <HAL_RCC_OscConfig+0x8a>
 800371c:	4b7c      	ldr	r3, [pc, #496]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a7b      	ldr	r2, [pc, #492]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 8003722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003726:	6013      	str	r3, [r2, #0]
 8003728:	e01d      	b.n	8003766 <HAL_RCC_OscConfig+0xc6>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003732:	d10c      	bne.n	800374e <HAL_RCC_OscConfig+0xae>
 8003734:	4b76      	ldr	r3, [pc, #472]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a75      	ldr	r2, [pc, #468]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 800373a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800373e:	6013      	str	r3, [r2, #0]
 8003740:	4b73      	ldr	r3, [pc, #460]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a72      	ldr	r2, [pc, #456]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 8003746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800374a:	6013      	str	r3, [r2, #0]
 800374c:	e00b      	b.n	8003766 <HAL_RCC_OscConfig+0xc6>
 800374e:	4b70      	ldr	r3, [pc, #448]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a6f      	ldr	r2, [pc, #444]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 8003754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	4b6d      	ldr	r3, [pc, #436]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a6c      	ldr	r2, [pc, #432]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 8003760:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003764:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d013      	beq.n	8003796 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376e:	f7fd fe5b 	bl	8001428 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003776:	f7fd fe57 	bl	8001428 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b64      	cmp	r3, #100	; 0x64
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e1db      	b.n	8003b40 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003788:	4b61      	ldr	r3, [pc, #388]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0f0      	beq.n	8003776 <HAL_RCC_OscConfig+0xd6>
 8003794:	e014      	b.n	80037c0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003796:	f7fd fe47 	bl	8001428 <HAL_GetTick>
 800379a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800379c:	e008      	b.n	80037b0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800379e:	f7fd fe43 	bl	8001428 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b64      	cmp	r3, #100	; 0x64
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e1c7      	b.n	8003b40 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037b0:	4b57      	ldr	r3, [pc, #348]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1f0      	bne.n	800379e <HAL_RCC_OscConfig+0xfe>
 80037bc:	e000      	b.n	80037c0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037be:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d06f      	beq.n	80038ac <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037cc:	4b50      	ldr	r3, [pc, #320]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 030c 	and.w	r3, r3, #12
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d017      	beq.n	8003808 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037d8:	4b4d      	ldr	r3, [pc, #308]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d105      	bne.n	80037f0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037e4:	4b4a      	ldr	r3, [pc, #296]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00b      	beq.n	8003808 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037f0:	4b47      	ldr	r3, [pc, #284]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037f8:	2b0c      	cmp	r3, #12
 80037fa:	d11c      	bne.n	8003836 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037fc:	4b44      	ldr	r3, [pc, #272]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d116      	bne.n	8003836 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003808:	4b41      	ldr	r3, [pc, #260]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <HAL_RCC_OscConfig+0x180>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d001      	beq.n	8003820 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e18f      	b.n	8003b40 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003820:	4b3b      	ldr	r3, [pc, #236]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	4938      	ldr	r1, [pc, #224]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 8003830:	4313      	orrs	r3, r2
 8003832:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003834:	e03a      	b.n	80038ac <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d020      	beq.n	8003880 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800383e:	4b35      	ldr	r3, [pc, #212]	; (8003914 <HAL_RCC_OscConfig+0x274>)
 8003840:	2201      	movs	r2, #1
 8003842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003844:	f7fd fdf0 	bl	8001428 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800384c:	f7fd fdec 	bl	8001428 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e170      	b.n	8003b40 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800385e:	4b2c      	ldr	r3, [pc, #176]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f0      	beq.n	800384c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800386a:	4b29      	ldr	r3, [pc, #164]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	4925      	ldr	r1, [pc, #148]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 800387a:	4313      	orrs	r3, r2
 800387c:	600b      	str	r3, [r1, #0]
 800387e:	e015      	b.n	80038ac <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003880:	4b24      	ldr	r3, [pc, #144]	; (8003914 <HAL_RCC_OscConfig+0x274>)
 8003882:	2200      	movs	r2, #0
 8003884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003886:	f7fd fdcf 	bl	8001428 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800388c:	e008      	b.n	80038a0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800388e:	f7fd fdcb 	bl	8001428 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e14f      	b.n	8003b40 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038a0:	4b1b      	ldr	r3, [pc, #108]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1f0      	bne.n	800388e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0308 	and.w	r3, r3, #8
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d037      	beq.n	8003928 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d016      	beq.n	80038ee <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038c0:	4b15      	ldr	r3, [pc, #84]	; (8003918 <HAL_RCC_OscConfig+0x278>)
 80038c2:	2201      	movs	r2, #1
 80038c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c6:	f7fd fdaf 	bl	8001428 <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038cc:	e008      	b.n	80038e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038ce:	f7fd fdab 	bl	8001428 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e12f      	b.n	8003b40 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038e0:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 80038e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d0f0      	beq.n	80038ce <HAL_RCC_OscConfig+0x22e>
 80038ec:	e01c      	b.n	8003928 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038ee:	4b0a      	ldr	r3, [pc, #40]	; (8003918 <HAL_RCC_OscConfig+0x278>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f4:	f7fd fd98 	bl	8001428 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038fa:	e00f      	b.n	800391c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038fc:	f7fd fd94 	bl	8001428 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d908      	bls.n	800391c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e118      	b.n	8003b40 <HAL_RCC_OscConfig+0x4a0>
 800390e:	bf00      	nop
 8003910:	40023800 	.word	0x40023800
 8003914:	42470000 	.word	0x42470000
 8003918:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800391c:	4b8a      	ldr	r3, [pc, #552]	; (8003b48 <HAL_RCC_OscConfig+0x4a8>)
 800391e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1e9      	bne.n	80038fc <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 8097 	beq.w	8003a64 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003936:	2300      	movs	r3, #0
 8003938:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800393a:	4b83      	ldr	r3, [pc, #524]	; (8003b48 <HAL_RCC_OscConfig+0x4a8>)
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10f      	bne.n	8003966 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003946:	2300      	movs	r3, #0
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	4b7f      	ldr	r3, [pc, #508]	; (8003b48 <HAL_RCC_OscConfig+0x4a8>)
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	4a7e      	ldr	r2, [pc, #504]	; (8003b48 <HAL_RCC_OscConfig+0x4a8>)
 8003950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003954:	6413      	str	r3, [r2, #64]	; 0x40
 8003956:	4b7c      	ldr	r3, [pc, #496]	; (8003b48 <HAL_RCC_OscConfig+0x4a8>)
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003962:	2301      	movs	r3, #1
 8003964:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003966:	4b79      	ldr	r3, [pc, #484]	; (8003b4c <HAL_RCC_OscConfig+0x4ac>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396e:	2b00      	cmp	r3, #0
 8003970:	d118      	bne.n	80039a4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003972:	4b76      	ldr	r3, [pc, #472]	; (8003b4c <HAL_RCC_OscConfig+0x4ac>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a75      	ldr	r2, [pc, #468]	; (8003b4c <HAL_RCC_OscConfig+0x4ac>)
 8003978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800397c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800397e:	f7fd fd53 	bl	8001428 <HAL_GetTick>
 8003982:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003984:	e008      	b.n	8003998 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003986:	f7fd fd4f 	bl	8001428 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e0d3      	b.n	8003b40 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003998:	4b6c      	ldr	r3, [pc, #432]	; (8003b4c <HAL_RCC_OscConfig+0x4ac>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0f0      	beq.n	8003986 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d106      	bne.n	80039ba <HAL_RCC_OscConfig+0x31a>
 80039ac:	4b66      	ldr	r3, [pc, #408]	; (8003b48 <HAL_RCC_OscConfig+0x4a8>)
 80039ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b0:	4a65      	ldr	r2, [pc, #404]	; (8003b48 <HAL_RCC_OscConfig+0x4a8>)
 80039b2:	f043 0301 	orr.w	r3, r3, #1
 80039b6:	6713      	str	r3, [r2, #112]	; 0x70
 80039b8:	e01c      	b.n	80039f4 <HAL_RCC_OscConfig+0x354>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	2b05      	cmp	r3, #5
 80039c0:	d10c      	bne.n	80039dc <HAL_RCC_OscConfig+0x33c>
 80039c2:	4b61      	ldr	r3, [pc, #388]	; (8003b48 <HAL_RCC_OscConfig+0x4a8>)
 80039c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c6:	4a60      	ldr	r2, [pc, #384]	; (8003b48 <HAL_RCC_OscConfig+0x4a8>)
 80039c8:	f043 0304 	orr.w	r3, r3, #4
 80039cc:	6713      	str	r3, [r2, #112]	; 0x70
 80039ce:	4b5e      	ldr	r3, [pc, #376]	; (8003b48 <HAL_RCC_OscConfig+0x4a8>)
 80039d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d2:	4a5d      	ldr	r2, [pc, #372]	; (8003b48 <HAL_RCC_OscConfig+0x4a8>)
 80039d4:	f043 0301 	orr.w	r3, r3, #1
 80039d8:	6713      	str	r3, [r2, #112]	; 0x70
 80039da:	e00b      	b.n	80039f4 <HAL_RCC_OscConfig+0x354>
 80039dc:	4b5a      	ldr	r3, [pc, #360]	; (8003b48 <HAL_RCC_OscConfig+0x4a8>)
 80039de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e0:	4a59      	ldr	r2, [pc, #356]	; (8003b48 <HAL_RCC_OscConfig+0x4a8>)
 80039e2:	f023 0301 	bic.w	r3, r3, #1
 80039e6:	6713      	str	r3, [r2, #112]	; 0x70
 80039e8:	4b57      	ldr	r3, [pc, #348]	; (8003b48 <HAL_RCC_OscConfig+0x4a8>)
 80039ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ec:	4a56      	ldr	r2, [pc, #344]	; (8003b48 <HAL_RCC_OscConfig+0x4a8>)
 80039ee:	f023 0304 	bic.w	r3, r3, #4
 80039f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d015      	beq.n	8003a28 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039fc:	f7fd fd14 	bl	8001428 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a02:	e00a      	b.n	8003a1a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a04:	f7fd fd10 	bl	8001428 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e092      	b.n	8003b40 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a1a:	4b4b      	ldr	r3, [pc, #300]	; (8003b48 <HAL_RCC_OscConfig+0x4a8>)
 8003a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d0ee      	beq.n	8003a04 <HAL_RCC_OscConfig+0x364>
 8003a26:	e014      	b.n	8003a52 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a28:	f7fd fcfe 	bl	8001428 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a2e:	e00a      	b.n	8003a46 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a30:	f7fd fcfa 	bl	8001428 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e07c      	b.n	8003b40 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a46:	4b40      	ldr	r3, [pc, #256]	; (8003b48 <HAL_RCC_OscConfig+0x4a8>)
 8003a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1ee      	bne.n	8003a30 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a52:	7dfb      	ldrb	r3, [r7, #23]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d105      	bne.n	8003a64 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a58:	4b3b      	ldr	r3, [pc, #236]	; (8003b48 <HAL_RCC_OscConfig+0x4a8>)
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5c:	4a3a      	ldr	r2, [pc, #232]	; (8003b48 <HAL_RCC_OscConfig+0x4a8>)
 8003a5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d068      	beq.n	8003b3e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a6c:	4b36      	ldr	r3, [pc, #216]	; (8003b48 <HAL_RCC_OscConfig+0x4a8>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f003 030c 	and.w	r3, r3, #12
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d060      	beq.n	8003b3a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d145      	bne.n	8003b0c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a80:	4b33      	ldr	r3, [pc, #204]	; (8003b50 <HAL_RCC_OscConfig+0x4b0>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a86:	f7fd fccf 	bl	8001428 <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a8e:	f7fd fccb 	bl	8001428 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e04f      	b.n	8003b40 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa0:	4b29      	ldr	r3, [pc, #164]	; (8003b48 <HAL_RCC_OscConfig+0x4a8>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1f0      	bne.n	8003a8e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	69da      	ldr	r2, [r3, #28]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	431a      	orrs	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	019b      	lsls	r3, r3, #6
 8003abc:	431a      	orrs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac2:	085b      	lsrs	r3, r3, #1
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	041b      	lsls	r3, r3, #16
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ace:	061b      	lsls	r3, r3, #24
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad6:	071b      	lsls	r3, r3, #28
 8003ad8:	491b      	ldr	r1, [pc, #108]	; (8003b48 <HAL_RCC_OscConfig+0x4a8>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ade:	4b1c      	ldr	r3, [pc, #112]	; (8003b50 <HAL_RCC_OscConfig+0x4b0>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae4:	f7fd fca0 	bl	8001428 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aec:	f7fd fc9c 	bl	8001428 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e020      	b.n	8003b40 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003afe:	4b12      	ldr	r3, [pc, #72]	; (8003b48 <HAL_RCC_OscConfig+0x4a8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCC_OscConfig+0x44c>
 8003b0a:	e018      	b.n	8003b3e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b0c:	4b10      	ldr	r3, [pc, #64]	; (8003b50 <HAL_RCC_OscConfig+0x4b0>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b12:	f7fd fc89 	bl	8001428 <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b1a:	f7fd fc85 	bl	8001428 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e009      	b.n	8003b40 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b2c:	4b06      	ldr	r3, [pc, #24]	; (8003b48 <HAL_RCC_OscConfig+0x4a8>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1f0      	bne.n	8003b1a <HAL_RCC_OscConfig+0x47a>
 8003b38:	e001      	b.n	8003b3e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e000      	b.n	8003b40 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	40007000 	.word	0x40007000
 8003b50:	42470060 	.word	0x42470060

08003b54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e01d      	b.n	8003ba2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d106      	bne.n	8003b80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f7fd faf8 	bl	8001170 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2202      	movs	r2, #2
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3304      	adds	r3, #4
 8003b90:	4619      	mov	r1, r3
 8003b92:	4610      	mov	r0, r2
 8003b94:	f000 f8e4 	bl	8003d60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b085      	sub	sp, #20
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2b06      	cmp	r3, #6
 8003bca:	d007      	beq.n	8003bdc <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0201 	orr.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b084      	sub	sp, #16
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d101      	bne.n	8003c0a <HAL_TIM_ConfigClockSource+0x18>
 8003c06:	2302      	movs	r3, #2
 8003c08:	e0a6      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x166>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2202      	movs	r2, #2
 8003c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c28:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c30:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b40      	cmp	r3, #64	; 0x40
 8003c40:	d067      	beq.n	8003d12 <HAL_TIM_ConfigClockSource+0x120>
 8003c42:	2b40      	cmp	r3, #64	; 0x40
 8003c44:	d80b      	bhi.n	8003c5e <HAL_TIM_ConfigClockSource+0x6c>
 8003c46:	2b10      	cmp	r3, #16
 8003c48:	d073      	beq.n	8003d32 <HAL_TIM_ConfigClockSource+0x140>
 8003c4a:	2b10      	cmp	r3, #16
 8003c4c:	d802      	bhi.n	8003c54 <HAL_TIM_ConfigClockSource+0x62>
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d06f      	beq.n	8003d32 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003c52:	e078      	b.n	8003d46 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c54:	2b20      	cmp	r3, #32
 8003c56:	d06c      	beq.n	8003d32 <HAL_TIM_ConfigClockSource+0x140>
 8003c58:	2b30      	cmp	r3, #48	; 0x30
 8003c5a:	d06a      	beq.n	8003d32 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003c5c:	e073      	b.n	8003d46 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c5e:	2b70      	cmp	r3, #112	; 0x70
 8003c60:	d00d      	beq.n	8003c7e <HAL_TIM_ConfigClockSource+0x8c>
 8003c62:	2b70      	cmp	r3, #112	; 0x70
 8003c64:	d804      	bhi.n	8003c70 <HAL_TIM_ConfigClockSource+0x7e>
 8003c66:	2b50      	cmp	r3, #80	; 0x50
 8003c68:	d033      	beq.n	8003cd2 <HAL_TIM_ConfigClockSource+0xe0>
 8003c6a:	2b60      	cmp	r3, #96	; 0x60
 8003c6c:	d041      	beq.n	8003cf2 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003c6e:	e06a      	b.n	8003d46 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c74:	d066      	beq.n	8003d44 <HAL_TIM_ConfigClockSource+0x152>
 8003c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c7a:	d017      	beq.n	8003cac <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003c7c:	e063      	b.n	8003d46 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	6899      	ldr	r1, [r3, #8]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	f000 f981 	bl	8003f94 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ca0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	609a      	str	r2, [r3, #8]
      break;
 8003caa:	e04c      	b.n	8003d46 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6818      	ldr	r0, [r3, #0]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	6899      	ldr	r1, [r3, #8]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f000 f96a 	bl	8003f94 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689a      	ldr	r2, [r3, #8]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cce:	609a      	str	r2, [r3, #8]
      break;
 8003cd0:	e039      	b.n	8003d46 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6818      	ldr	r0, [r3, #0]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	6859      	ldr	r1, [r3, #4]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	f000 f8de 	bl	8003ea0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2150      	movs	r1, #80	; 0x50
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 f937 	bl	8003f5e <TIM_ITRx_SetConfig>
      break;
 8003cf0:	e029      	b.n	8003d46 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6818      	ldr	r0, [r3, #0]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	6859      	ldr	r1, [r3, #4]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	461a      	mov	r2, r3
 8003d00:	f000 f8fd 	bl	8003efe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2160      	movs	r1, #96	; 0x60
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 f927 	bl	8003f5e <TIM_ITRx_SetConfig>
      break;
 8003d10:	e019      	b.n	8003d46 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6818      	ldr	r0, [r3, #0]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	6859      	ldr	r1, [r3, #4]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	f000 f8be 	bl	8003ea0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2140      	movs	r1, #64	; 0x40
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 f917 	bl	8003f5e <TIM_ITRx_SetConfig>
      break;
 8003d30:	e009      	b.n	8003d46 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	f000 f90e 	bl	8003f5e <TIM_ITRx_SetConfig>
      break;
 8003d42:	e000      	b.n	8003d46 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003d44:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a40      	ldr	r2, [pc, #256]	; (8003e74 <TIM_Base_SetConfig+0x114>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d013      	beq.n	8003da0 <TIM_Base_SetConfig+0x40>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d7e:	d00f      	beq.n	8003da0 <TIM_Base_SetConfig+0x40>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a3d      	ldr	r2, [pc, #244]	; (8003e78 <TIM_Base_SetConfig+0x118>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d00b      	beq.n	8003da0 <TIM_Base_SetConfig+0x40>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a3c      	ldr	r2, [pc, #240]	; (8003e7c <TIM_Base_SetConfig+0x11c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d007      	beq.n	8003da0 <TIM_Base_SetConfig+0x40>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a3b      	ldr	r2, [pc, #236]	; (8003e80 <TIM_Base_SetConfig+0x120>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d003      	beq.n	8003da0 <TIM_Base_SetConfig+0x40>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a3a      	ldr	r2, [pc, #232]	; (8003e84 <TIM_Base_SetConfig+0x124>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d108      	bne.n	8003db2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a2f      	ldr	r2, [pc, #188]	; (8003e74 <TIM_Base_SetConfig+0x114>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d02b      	beq.n	8003e12 <TIM_Base_SetConfig+0xb2>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc0:	d027      	beq.n	8003e12 <TIM_Base_SetConfig+0xb2>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a2c      	ldr	r2, [pc, #176]	; (8003e78 <TIM_Base_SetConfig+0x118>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d023      	beq.n	8003e12 <TIM_Base_SetConfig+0xb2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a2b      	ldr	r2, [pc, #172]	; (8003e7c <TIM_Base_SetConfig+0x11c>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d01f      	beq.n	8003e12 <TIM_Base_SetConfig+0xb2>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a2a      	ldr	r2, [pc, #168]	; (8003e80 <TIM_Base_SetConfig+0x120>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d01b      	beq.n	8003e12 <TIM_Base_SetConfig+0xb2>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a29      	ldr	r2, [pc, #164]	; (8003e84 <TIM_Base_SetConfig+0x124>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d017      	beq.n	8003e12 <TIM_Base_SetConfig+0xb2>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a28      	ldr	r2, [pc, #160]	; (8003e88 <TIM_Base_SetConfig+0x128>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d013      	beq.n	8003e12 <TIM_Base_SetConfig+0xb2>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a27      	ldr	r2, [pc, #156]	; (8003e8c <TIM_Base_SetConfig+0x12c>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d00f      	beq.n	8003e12 <TIM_Base_SetConfig+0xb2>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a26      	ldr	r2, [pc, #152]	; (8003e90 <TIM_Base_SetConfig+0x130>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d00b      	beq.n	8003e12 <TIM_Base_SetConfig+0xb2>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a25      	ldr	r2, [pc, #148]	; (8003e94 <TIM_Base_SetConfig+0x134>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d007      	beq.n	8003e12 <TIM_Base_SetConfig+0xb2>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a24      	ldr	r2, [pc, #144]	; (8003e98 <TIM_Base_SetConfig+0x138>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d003      	beq.n	8003e12 <TIM_Base_SetConfig+0xb2>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a23      	ldr	r2, [pc, #140]	; (8003e9c <TIM_Base_SetConfig+0x13c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d108      	bne.n	8003e24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a0a      	ldr	r2, [pc, #40]	; (8003e74 <TIM_Base_SetConfig+0x114>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d003      	beq.n	8003e58 <TIM_Base_SetConfig+0xf8>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a0c      	ldr	r2, [pc, #48]	; (8003e84 <TIM_Base_SetConfig+0x124>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d103      	bne.n	8003e60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	691a      	ldr	r2, [r3, #16]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	615a      	str	r2, [r3, #20]
}
 8003e66:	bf00      	nop
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	40010000 	.word	0x40010000
 8003e78:	40000400 	.word	0x40000400
 8003e7c:	40000800 	.word	0x40000800
 8003e80:	40000c00 	.word	0x40000c00
 8003e84:	40010400 	.word	0x40010400
 8003e88:	40014000 	.word	0x40014000
 8003e8c:	40014400 	.word	0x40014400
 8003e90:	40014800 	.word	0x40014800
 8003e94:	40001800 	.word	0x40001800
 8003e98:	40001c00 	.word	0x40001c00
 8003e9c:	40002000 	.word	0x40002000

08003ea0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	f023 0201 	bic.w	r2, r3, #1
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003eca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	011b      	lsls	r3, r3, #4
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f023 030a 	bic.w	r3, r3, #10
 8003edc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	621a      	str	r2, [r3, #32]
}
 8003ef2:	bf00      	nop
 8003ef4:	371c      	adds	r7, #28
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b087      	sub	sp, #28
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	60f8      	str	r0, [r7, #12]
 8003f06:	60b9      	str	r1, [r7, #8]
 8003f08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	f023 0210 	bic.w	r2, r3, #16
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	031b      	lsls	r3, r3, #12
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	621a      	str	r2, [r3, #32]
}
 8003f52:	bf00      	nop
 8003f54:	371c      	adds	r7, #28
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b085      	sub	sp, #20
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f043 0307 	orr.w	r3, r3, #7
 8003f80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	609a      	str	r2, [r3, #8]
}
 8003f88:	bf00      	nop
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
 8003fa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	021a      	lsls	r2, r3, #8
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	609a      	str	r2, [r3, #8]
}
 8003fc8:	bf00      	nop
 8003fca:	371c      	adds	r7, #28
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e05a      	b.n	80040a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004012:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a21      	ldr	r2, [pc, #132]	; (80040b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d022      	beq.n	8004076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004038:	d01d      	beq.n	8004076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a1d      	ldr	r2, [pc, #116]	; (80040b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d018      	beq.n	8004076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a1b      	ldr	r2, [pc, #108]	; (80040b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d013      	beq.n	8004076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a1a      	ldr	r2, [pc, #104]	; (80040bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d00e      	beq.n	8004076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a18      	ldr	r2, [pc, #96]	; (80040c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d009      	beq.n	8004076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a17      	ldr	r2, [pc, #92]	; (80040c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d004      	beq.n	8004076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a15      	ldr	r2, [pc, #84]	; (80040c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d10c      	bne.n	8004090 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800407c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	4313      	orrs	r3, r2
 8004086:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	40010000 	.word	0x40010000
 80040b4:	40000400 	.word	0x40000400
 80040b8:	40000800 	.word	0x40000800
 80040bc:	40000c00 	.word	0x40000c00
 80040c0:	40010400 	.word	0x40010400
 80040c4:	40014000 	.word	0x40014000
 80040c8:	40001800 	.word	0x40001800

080040cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e03f      	b.n	800415e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d106      	bne.n	80040f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7fd f886 	bl	8001204 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2224      	movs	r2, #36	; 0x24
 80040fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68da      	ldr	r2, [r3, #12]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800410e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 fbb5 	bl	8004880 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	691a      	ldr	r2, [r3, #16]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004124:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	695a      	ldr	r2, [r3, #20]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004134:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68da      	ldr	r2, [r3, #12]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004144:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2220      	movs	r2, #32
 8004150:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2220      	movs	r2, #32
 8004158:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004166:	b480      	push	{r7}
 8004168:	b085      	sub	sp, #20
 800416a:	af00      	add	r7, sp, #0
 800416c:	60f8      	str	r0, [r7, #12]
 800416e:	60b9      	str	r1, [r7, #8]
 8004170:	4613      	mov	r3, r2
 8004172:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b20      	cmp	r3, #32
 800417e:	d140      	bne.n	8004202 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d002      	beq.n	800418c <HAL_UART_Receive_IT+0x26>
 8004186:	88fb      	ldrh	r3, [r7, #6]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d101      	bne.n	8004190 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e039      	b.n	8004204 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004196:	2b01      	cmp	r3, #1
 8004198:	d101      	bne.n	800419e <HAL_UART_Receive_IT+0x38>
 800419a:	2302      	movs	r3, #2
 800419c:	e032      	b.n	8004204 <HAL_UART_Receive_IT+0x9e>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	88fa      	ldrh	r2, [r7, #6]
 80041b0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	88fa      	ldrh	r2, [r7, #6]
 80041b6:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2222      	movs	r2, #34	; 0x22
 80041c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68da      	ldr	r2, [r3, #12]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041dc:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	695a      	ldr	r2, [r3, #20]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f042 0201 	orr.w	r2, r2, #1
 80041ec:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f042 0220 	orr.w	r2, r2, #32
 80041fc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80041fe:	2300      	movs	r3, #0
 8004200:	e000      	b.n	8004204 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004202:	2302      	movs	r3, #2
  }
}
 8004204:	4618      	mov	r0, r3
 8004206:	3714      	adds	r7, #20
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	4613      	mov	r3, r2
 800421c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b20      	cmp	r3, #32
 8004228:	d153      	bne.n	80042d2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d002      	beq.n	8004236 <HAL_UART_Transmit_DMA+0x26>
 8004230:	88fb      	ldrh	r3, [r7, #6]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e04c      	b.n	80042d4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004240:	2b01      	cmp	r3, #1
 8004242:	d101      	bne.n	8004248 <HAL_UART_Transmit_DMA+0x38>
 8004244:	2302      	movs	r3, #2
 8004246:	e045      	b.n	80042d4 <HAL_UART_Transmit_DMA+0xc4>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	88fa      	ldrh	r2, [r7, #6]
 800425a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	88fa      	ldrh	r2, [r7, #6]
 8004260:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2221      	movs	r2, #33	; 0x21
 800426c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004274:	4a19      	ldr	r2, [pc, #100]	; (80042dc <HAL_UART_Transmit_DMA+0xcc>)
 8004276:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427c:	4a18      	ldr	r2, [pc, #96]	; (80042e0 <HAL_UART_Transmit_DMA+0xd0>)
 800427e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004284:	4a17      	ldr	r2, [pc, #92]	; (80042e4 <HAL_UART_Transmit_DMA+0xd4>)
 8004286:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428c:	2200      	movs	r2, #0
 800428e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8004290:	f107 0308 	add.w	r3, r7, #8
 8004294:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	6819      	ldr	r1, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3304      	adds	r3, #4
 80042a4:	461a      	mov	r2, r3
 80042a6:	88fb      	ldrh	r3, [r7, #6]
 80042a8:	f7fd faac 	bl	8001804 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042b4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	695a      	ldr	r2, [r3, #20]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80042cc:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80042ce:	2300      	movs	r3, #0
 80042d0:	e000      	b.n	80042d4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80042d2:	2302      	movs	r3, #2
  }
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3718      	adds	r7, #24
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	08004511 	.word	0x08004511
 80042e0:	08004563 	.word	0x08004563
 80042e4:	0800457f 	.word	0x0800457f

080042e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b088      	sub	sp, #32
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004308:	2300      	movs	r3, #0
 800430a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800430c:	2300      	movs	r3, #0
 800430e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	f003 030f 	and.w	r3, r3, #15
 8004316:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10d      	bne.n	800433a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	f003 0320 	and.w	r3, r3, #32
 8004324:	2b00      	cmp	r3, #0
 8004326:	d008      	beq.n	800433a <HAL_UART_IRQHandler+0x52>
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	f003 0320 	and.w	r3, r3, #32
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 fa23 	bl	800477e <UART_Receive_IT>
      return;
 8004338:	e0d1      	b.n	80044de <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 80b0 	beq.w	80044a2 <HAL_UART_IRQHandler+0x1ba>
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b00      	cmp	r3, #0
 800434a:	d105      	bne.n	8004358 <HAL_UART_IRQHandler+0x70>
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 80a5 	beq.w	80044a2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00a      	beq.n	8004378 <HAL_UART_IRQHandler+0x90>
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004368:	2b00      	cmp	r3, #0
 800436a:	d005      	beq.n	8004378 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004370:	f043 0201 	orr.w	r2, r3, #1
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	f003 0304 	and.w	r3, r3, #4
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <HAL_UART_IRQHandler+0xb0>
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b00      	cmp	r3, #0
 800438a:	d005      	beq.n	8004398 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004390:	f043 0202 	orr.w	r2, r3, #2
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00a      	beq.n	80043b8 <HAL_UART_IRQHandler+0xd0>
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d005      	beq.n	80043b8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b0:	f043 0204 	orr.w	r2, r3, #4
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00f      	beq.n	80043e2 <HAL_UART_IRQHandler+0xfa>
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	f003 0320 	and.w	r3, r3, #32
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d104      	bne.n	80043d6 <HAL_UART_IRQHandler+0xee>
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d005      	beq.n	80043e2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043da:	f043 0208 	orr.w	r2, r3, #8
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d078      	beq.n	80044dc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	f003 0320 	and.w	r3, r3, #32
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d007      	beq.n	8004404 <HAL_UART_IRQHandler+0x11c>
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	f003 0320 	and.w	r3, r3, #32
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d002      	beq.n	8004404 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f9bd 	bl	800477e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440e:	2b40      	cmp	r3, #64	; 0x40
 8004410:	bf0c      	ite	eq
 8004412:	2301      	moveq	r3, #1
 8004414:	2300      	movne	r3, #0
 8004416:	b2db      	uxtb	r3, r3
 8004418:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441e:	f003 0308 	and.w	r3, r3, #8
 8004422:	2b00      	cmp	r3, #0
 8004424:	d102      	bne.n	800442c <HAL_UART_IRQHandler+0x144>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d031      	beq.n	8004490 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f906 	bl	800463e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443c:	2b40      	cmp	r3, #64	; 0x40
 800443e:	d123      	bne.n	8004488 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695a      	ldr	r2, [r3, #20]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800444e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004454:	2b00      	cmp	r3, #0
 8004456:	d013      	beq.n	8004480 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800445c:	4a21      	ldr	r2, [pc, #132]	; (80044e4 <HAL_UART_IRQHandler+0x1fc>)
 800445e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004464:	4618      	mov	r0, r3
 8004466:	f7fd fa25 	bl	80018b4 <HAL_DMA_Abort_IT>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d016      	beq.n	800449e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800447a:	4610      	mov	r0, r2
 800447c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800447e:	e00e      	b.n	800449e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f83b 	bl	80044fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004486:	e00a      	b.n	800449e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f837 	bl	80044fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800448e:	e006      	b.n	800449e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f833 	bl	80044fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800449c:	e01e      	b.n	80044dc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800449e:	bf00      	nop
    return;
 80044a0:	e01c      	b.n	80044dc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d008      	beq.n	80044be <HAL_UART_IRQHandler+0x1d6>
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f8f3 	bl	80046a2 <UART_Transmit_IT>
    return;
 80044bc:	e00f      	b.n	80044de <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00a      	beq.n	80044de <HAL_UART_IRQHandler+0x1f6>
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d005      	beq.n	80044de <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f93b 	bl	800474e <UART_EndTransmit_IT>
    return;
 80044d8:	bf00      	nop
 80044da:	e000      	b.n	80044de <HAL_UART_IRQHandler+0x1f6>
    return;
 80044dc:	bf00      	nop
  }
}
 80044de:	3720      	adds	r7, #32
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	0800467b 	.word	0x0800467b

080044e8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004528:	2b00      	cmp	r3, #0
 800452a:	d113      	bne.n	8004554 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	695a      	ldr	r2, [r3, #20]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004540:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68da      	ldr	r2, [r3, #12]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004550:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004552:	e002      	b.n	800455a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f7fc fcc1 	bl	8000edc <HAL_UART_TxCpltCallback>
}
 800455a:	bf00      	nop
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b084      	sub	sp, #16
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f7ff ffb9 	bl	80044e8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004576:	bf00      	nop
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b084      	sub	sp, #16
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004586:	2300      	movs	r3, #0
 8004588:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459a:	2b80      	cmp	r3, #128	; 0x80
 800459c:	bf0c      	ite	eq
 800459e:	2301      	moveq	r3, #1
 80045a0:	2300      	movne	r3, #0
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b21      	cmp	r3, #33	; 0x21
 80045b0:	d108      	bne.n	80045c4 <UART_DMAError+0x46>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d005      	beq.n	80045c4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2200      	movs	r2, #0
 80045bc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80045be:	68b8      	ldr	r0, [r7, #8]
 80045c0:	f000 f827 	bl	8004612 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ce:	2b40      	cmp	r3, #64	; 0x40
 80045d0:	bf0c      	ite	eq
 80045d2:	2301      	moveq	r3, #1
 80045d4:	2300      	movne	r3, #0
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b22      	cmp	r3, #34	; 0x22
 80045e4:	d108      	bne.n	80045f8 <UART_DMAError+0x7a>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d005      	beq.n	80045f8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2200      	movs	r2, #0
 80045f0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80045f2:	68b8      	ldr	r0, [r7, #8]
 80045f4:	f000 f823 	bl	800463e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fc:	f043 0210 	orr.w	r2, r3, #16
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004604:	68b8      	ldr	r0, [r7, #8]
 8004606:	f7ff ff79 	bl	80044fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800460a:	bf00      	nop
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004628:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2220      	movs	r2, #32
 800462e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800463e:	b480      	push	{r7}
 8004640:	b083      	sub	sp, #12
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68da      	ldr	r2, [r3, #12]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004654:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	695a      	ldr	r2, [r3, #20]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 0201 	bic.w	r2, r2, #1
 8004664:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2220      	movs	r2, #32
 800466a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800466e:	bf00      	nop
 8004670:	370c      	adds	r7, #12
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b084      	sub	sp, #16
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f7ff ff31 	bl	80044fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800469a:	bf00      	nop
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b085      	sub	sp, #20
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b21      	cmp	r3, #33	; 0x21
 80046b4:	d144      	bne.n	8004740 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046be:	d11a      	bne.n	80046f6 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	881b      	ldrh	r3, [r3, #0]
 80046ca:	461a      	mov	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046d4:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d105      	bne.n	80046ea <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	1c9a      	adds	r2, r3, #2
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	621a      	str	r2, [r3, #32]
 80046e8:	e00e      	b.n	8004708 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	1c5a      	adds	r2, r3, #1
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	621a      	str	r2, [r3, #32]
 80046f4:	e008      	b.n	8004708 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	1c59      	adds	r1, r3, #1
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	6211      	str	r1, [r2, #32]
 8004700:	781a      	ldrb	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800470c:	b29b      	uxth	r3, r3
 800470e:	3b01      	subs	r3, #1
 8004710:	b29b      	uxth	r3, r3
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	4619      	mov	r1, r3
 8004716:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10f      	bne.n	800473c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800472a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800473a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800473c:	2300      	movs	r3, #0
 800473e:	e000      	b.n	8004742 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004740:	2302      	movs	r3, #2
  }
}
 8004742:	4618      	mov	r0, r3
 8004744:	3714      	adds	r7, #20
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b082      	sub	sp, #8
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68da      	ldr	r2, [r3, #12]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004764:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2220      	movs	r2, #32
 800476a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7fc fbb4 	bl	8000edc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b084      	sub	sp, #16
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b22      	cmp	r3, #34	; 0x22
 8004790:	d171      	bne.n	8004876 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800479a:	d123      	bne.n	80047e4 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a0:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10e      	bne.n	80047c8 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c0:	1c9a      	adds	r2, r3, #2
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	629a      	str	r2, [r3, #40]	; 0x28
 80047c6:	e029      	b.n	800481c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047dc:	1c5a      	adds	r2, r3, #1
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	629a      	str	r2, [r3, #40]	; 0x28
 80047e2:	e01b      	b.n	800481c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10a      	bne.n	8004802 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6858      	ldr	r0, [r3, #4]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f6:	1c59      	adds	r1, r3, #1
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	6291      	str	r1, [r2, #40]	; 0x28
 80047fc:	b2c2      	uxtb	r2, r0
 80047fe:	701a      	strb	r2, [r3, #0]
 8004800:	e00c      	b.n	800481c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	b2da      	uxtb	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480e:	1c58      	adds	r0, r3, #1
 8004810:	6879      	ldr	r1, [r7, #4]
 8004812:	6288      	str	r0, [r1, #40]	; 0x28
 8004814:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004820:	b29b      	uxth	r3, r3
 8004822:	3b01      	subs	r3, #1
 8004824:	b29b      	uxth	r3, r3
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	4619      	mov	r1, r3
 800482a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800482c:	2b00      	cmp	r3, #0
 800482e:	d120      	bne.n	8004872 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68da      	ldr	r2, [r3, #12]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 0220 	bic.w	r2, r2, #32
 800483e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800484e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	695a      	ldr	r2, [r3, #20]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 0201 	bic.w	r2, r2, #1
 800485e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2220      	movs	r2, #32
 8004864:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7fc fb47 	bl	8000efc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800486e:	2300      	movs	r3, #0
 8004870:	e002      	b.n	8004878 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	e000      	b.n	8004878 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004876:	2302      	movs	r3, #2
  }
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004884:	b085      	sub	sp, #20
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68da      	ldr	r2, [r3, #12]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	430a      	orrs	r2, r1
 800489e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	431a      	orrs	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80048c2:	f023 030c 	bic.w	r3, r3, #12
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	6812      	ldr	r2, [r2, #0]
 80048ca:	68f9      	ldr	r1, [r7, #12]
 80048cc:	430b      	orrs	r3, r1
 80048ce:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699a      	ldr	r2, [r3, #24]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048ee:	f040 818b 	bne.w	8004c08 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4ac1      	ldr	r2, [pc, #772]	; (8004bfc <UART_SetConfig+0x37c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d005      	beq.n	8004908 <UART_SetConfig+0x88>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4abf      	ldr	r2, [pc, #764]	; (8004c00 <UART_SetConfig+0x380>)
 8004902:	4293      	cmp	r3, r2
 8004904:	f040 80bd 	bne.w	8004a82 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004908:	f7fe fd64 	bl	80033d4 <HAL_RCC_GetPCLK2Freq>
 800490c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	461d      	mov	r5, r3
 8004912:	f04f 0600 	mov.w	r6, #0
 8004916:	46a8      	mov	r8, r5
 8004918:	46b1      	mov	r9, r6
 800491a:	eb18 0308 	adds.w	r3, r8, r8
 800491e:	eb49 0409 	adc.w	r4, r9, r9
 8004922:	4698      	mov	r8, r3
 8004924:	46a1      	mov	r9, r4
 8004926:	eb18 0805 	adds.w	r8, r8, r5
 800492a:	eb49 0906 	adc.w	r9, r9, r6
 800492e:	f04f 0100 	mov.w	r1, #0
 8004932:	f04f 0200 	mov.w	r2, #0
 8004936:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800493a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800493e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004942:	4688      	mov	r8, r1
 8004944:	4691      	mov	r9, r2
 8004946:	eb18 0005 	adds.w	r0, r8, r5
 800494a:	eb49 0106 	adc.w	r1, r9, r6
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	461d      	mov	r5, r3
 8004954:	f04f 0600 	mov.w	r6, #0
 8004958:	196b      	adds	r3, r5, r5
 800495a:	eb46 0406 	adc.w	r4, r6, r6
 800495e:	461a      	mov	r2, r3
 8004960:	4623      	mov	r3, r4
 8004962:	f7fb fca5 	bl	80002b0 <__aeabi_uldivmod>
 8004966:	4603      	mov	r3, r0
 8004968:	460c      	mov	r4, r1
 800496a:	461a      	mov	r2, r3
 800496c:	4ba5      	ldr	r3, [pc, #660]	; (8004c04 <UART_SetConfig+0x384>)
 800496e:	fba3 2302 	umull	r2, r3, r3, r2
 8004972:	095b      	lsrs	r3, r3, #5
 8004974:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	461d      	mov	r5, r3
 800497c:	f04f 0600 	mov.w	r6, #0
 8004980:	46a9      	mov	r9, r5
 8004982:	46b2      	mov	sl, r6
 8004984:	eb19 0309 	adds.w	r3, r9, r9
 8004988:	eb4a 040a 	adc.w	r4, sl, sl
 800498c:	4699      	mov	r9, r3
 800498e:	46a2      	mov	sl, r4
 8004990:	eb19 0905 	adds.w	r9, r9, r5
 8004994:	eb4a 0a06 	adc.w	sl, sl, r6
 8004998:	f04f 0100 	mov.w	r1, #0
 800499c:	f04f 0200 	mov.w	r2, #0
 80049a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80049a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80049ac:	4689      	mov	r9, r1
 80049ae:	4692      	mov	sl, r2
 80049b0:	eb19 0005 	adds.w	r0, r9, r5
 80049b4:	eb4a 0106 	adc.w	r1, sl, r6
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	461d      	mov	r5, r3
 80049be:	f04f 0600 	mov.w	r6, #0
 80049c2:	196b      	adds	r3, r5, r5
 80049c4:	eb46 0406 	adc.w	r4, r6, r6
 80049c8:	461a      	mov	r2, r3
 80049ca:	4623      	mov	r3, r4
 80049cc:	f7fb fc70 	bl	80002b0 <__aeabi_uldivmod>
 80049d0:	4603      	mov	r3, r0
 80049d2:	460c      	mov	r4, r1
 80049d4:	461a      	mov	r2, r3
 80049d6:	4b8b      	ldr	r3, [pc, #556]	; (8004c04 <UART_SetConfig+0x384>)
 80049d8:	fba3 1302 	umull	r1, r3, r3, r2
 80049dc:	095b      	lsrs	r3, r3, #5
 80049de:	2164      	movs	r1, #100	; 0x64
 80049e0:	fb01 f303 	mul.w	r3, r1, r3
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	3332      	adds	r3, #50	; 0x32
 80049ea:	4a86      	ldr	r2, [pc, #536]	; (8004c04 <UART_SetConfig+0x384>)
 80049ec:	fba2 2303 	umull	r2, r3, r2, r3
 80049f0:	095b      	lsrs	r3, r3, #5
 80049f2:	005b      	lsls	r3, r3, #1
 80049f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049f8:	4498      	add	r8, r3
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	461d      	mov	r5, r3
 80049fe:	f04f 0600 	mov.w	r6, #0
 8004a02:	46a9      	mov	r9, r5
 8004a04:	46b2      	mov	sl, r6
 8004a06:	eb19 0309 	adds.w	r3, r9, r9
 8004a0a:	eb4a 040a 	adc.w	r4, sl, sl
 8004a0e:	4699      	mov	r9, r3
 8004a10:	46a2      	mov	sl, r4
 8004a12:	eb19 0905 	adds.w	r9, r9, r5
 8004a16:	eb4a 0a06 	adc.w	sl, sl, r6
 8004a1a:	f04f 0100 	mov.w	r1, #0
 8004a1e:	f04f 0200 	mov.w	r2, #0
 8004a22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a2e:	4689      	mov	r9, r1
 8004a30:	4692      	mov	sl, r2
 8004a32:	eb19 0005 	adds.w	r0, r9, r5
 8004a36:	eb4a 0106 	adc.w	r1, sl, r6
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	461d      	mov	r5, r3
 8004a40:	f04f 0600 	mov.w	r6, #0
 8004a44:	196b      	adds	r3, r5, r5
 8004a46:	eb46 0406 	adc.w	r4, r6, r6
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	4623      	mov	r3, r4
 8004a4e:	f7fb fc2f 	bl	80002b0 <__aeabi_uldivmod>
 8004a52:	4603      	mov	r3, r0
 8004a54:	460c      	mov	r4, r1
 8004a56:	461a      	mov	r2, r3
 8004a58:	4b6a      	ldr	r3, [pc, #424]	; (8004c04 <UART_SetConfig+0x384>)
 8004a5a:	fba3 1302 	umull	r1, r3, r3, r2
 8004a5e:	095b      	lsrs	r3, r3, #5
 8004a60:	2164      	movs	r1, #100	; 0x64
 8004a62:	fb01 f303 	mul.w	r3, r1, r3
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	3332      	adds	r3, #50	; 0x32
 8004a6c:	4a65      	ldr	r2, [pc, #404]	; (8004c04 <UART_SetConfig+0x384>)
 8004a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a72:	095b      	lsrs	r3, r3, #5
 8004a74:	f003 0207 	and.w	r2, r3, #7
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4442      	add	r2, r8
 8004a7e:	609a      	str	r2, [r3, #8]
 8004a80:	e26f      	b.n	8004f62 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a82:	f7fe fc93 	bl	80033ac <HAL_RCC_GetPCLK1Freq>
 8004a86:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	461d      	mov	r5, r3
 8004a8c:	f04f 0600 	mov.w	r6, #0
 8004a90:	46a8      	mov	r8, r5
 8004a92:	46b1      	mov	r9, r6
 8004a94:	eb18 0308 	adds.w	r3, r8, r8
 8004a98:	eb49 0409 	adc.w	r4, r9, r9
 8004a9c:	4698      	mov	r8, r3
 8004a9e:	46a1      	mov	r9, r4
 8004aa0:	eb18 0805 	adds.w	r8, r8, r5
 8004aa4:	eb49 0906 	adc.w	r9, r9, r6
 8004aa8:	f04f 0100 	mov.w	r1, #0
 8004aac:	f04f 0200 	mov.w	r2, #0
 8004ab0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004ab4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004ab8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004abc:	4688      	mov	r8, r1
 8004abe:	4691      	mov	r9, r2
 8004ac0:	eb18 0005 	adds.w	r0, r8, r5
 8004ac4:	eb49 0106 	adc.w	r1, r9, r6
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	461d      	mov	r5, r3
 8004ace:	f04f 0600 	mov.w	r6, #0
 8004ad2:	196b      	adds	r3, r5, r5
 8004ad4:	eb46 0406 	adc.w	r4, r6, r6
 8004ad8:	461a      	mov	r2, r3
 8004ada:	4623      	mov	r3, r4
 8004adc:	f7fb fbe8 	bl	80002b0 <__aeabi_uldivmod>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	460c      	mov	r4, r1
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	4b47      	ldr	r3, [pc, #284]	; (8004c04 <UART_SetConfig+0x384>)
 8004ae8:	fba3 2302 	umull	r2, r3, r3, r2
 8004aec:	095b      	lsrs	r3, r3, #5
 8004aee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	461d      	mov	r5, r3
 8004af6:	f04f 0600 	mov.w	r6, #0
 8004afa:	46a9      	mov	r9, r5
 8004afc:	46b2      	mov	sl, r6
 8004afe:	eb19 0309 	adds.w	r3, r9, r9
 8004b02:	eb4a 040a 	adc.w	r4, sl, sl
 8004b06:	4699      	mov	r9, r3
 8004b08:	46a2      	mov	sl, r4
 8004b0a:	eb19 0905 	adds.w	r9, r9, r5
 8004b0e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004b12:	f04f 0100 	mov.w	r1, #0
 8004b16:	f04f 0200 	mov.w	r2, #0
 8004b1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b26:	4689      	mov	r9, r1
 8004b28:	4692      	mov	sl, r2
 8004b2a:	eb19 0005 	adds.w	r0, r9, r5
 8004b2e:	eb4a 0106 	adc.w	r1, sl, r6
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	461d      	mov	r5, r3
 8004b38:	f04f 0600 	mov.w	r6, #0
 8004b3c:	196b      	adds	r3, r5, r5
 8004b3e:	eb46 0406 	adc.w	r4, r6, r6
 8004b42:	461a      	mov	r2, r3
 8004b44:	4623      	mov	r3, r4
 8004b46:	f7fb fbb3 	bl	80002b0 <__aeabi_uldivmod>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	460c      	mov	r4, r1
 8004b4e:	461a      	mov	r2, r3
 8004b50:	4b2c      	ldr	r3, [pc, #176]	; (8004c04 <UART_SetConfig+0x384>)
 8004b52:	fba3 1302 	umull	r1, r3, r3, r2
 8004b56:	095b      	lsrs	r3, r3, #5
 8004b58:	2164      	movs	r1, #100	; 0x64
 8004b5a:	fb01 f303 	mul.w	r3, r1, r3
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	00db      	lsls	r3, r3, #3
 8004b62:	3332      	adds	r3, #50	; 0x32
 8004b64:	4a27      	ldr	r2, [pc, #156]	; (8004c04 <UART_SetConfig+0x384>)
 8004b66:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6a:	095b      	lsrs	r3, r3, #5
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b72:	4498      	add	r8, r3
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	461d      	mov	r5, r3
 8004b78:	f04f 0600 	mov.w	r6, #0
 8004b7c:	46a9      	mov	r9, r5
 8004b7e:	46b2      	mov	sl, r6
 8004b80:	eb19 0309 	adds.w	r3, r9, r9
 8004b84:	eb4a 040a 	adc.w	r4, sl, sl
 8004b88:	4699      	mov	r9, r3
 8004b8a:	46a2      	mov	sl, r4
 8004b8c:	eb19 0905 	adds.w	r9, r9, r5
 8004b90:	eb4a 0a06 	adc.w	sl, sl, r6
 8004b94:	f04f 0100 	mov.w	r1, #0
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ba0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ba4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ba8:	4689      	mov	r9, r1
 8004baa:	4692      	mov	sl, r2
 8004bac:	eb19 0005 	adds.w	r0, r9, r5
 8004bb0:	eb4a 0106 	adc.w	r1, sl, r6
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	461d      	mov	r5, r3
 8004bba:	f04f 0600 	mov.w	r6, #0
 8004bbe:	196b      	adds	r3, r5, r5
 8004bc0:	eb46 0406 	adc.w	r4, r6, r6
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	4623      	mov	r3, r4
 8004bc8:	f7fb fb72 	bl	80002b0 <__aeabi_uldivmod>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	460c      	mov	r4, r1
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	4b0c      	ldr	r3, [pc, #48]	; (8004c04 <UART_SetConfig+0x384>)
 8004bd4:	fba3 1302 	umull	r1, r3, r3, r2
 8004bd8:	095b      	lsrs	r3, r3, #5
 8004bda:	2164      	movs	r1, #100	; 0x64
 8004bdc:	fb01 f303 	mul.w	r3, r1, r3
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	00db      	lsls	r3, r3, #3
 8004be4:	3332      	adds	r3, #50	; 0x32
 8004be6:	4a07      	ldr	r2, [pc, #28]	; (8004c04 <UART_SetConfig+0x384>)
 8004be8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bec:	095b      	lsrs	r3, r3, #5
 8004bee:	f003 0207 	and.w	r2, r3, #7
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4442      	add	r2, r8
 8004bf8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004bfa:	e1b2      	b.n	8004f62 <UART_SetConfig+0x6e2>
 8004bfc:	40011000 	.word	0x40011000
 8004c00:	40011400 	.word	0x40011400
 8004c04:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4ad7      	ldr	r2, [pc, #860]	; (8004f6c <UART_SetConfig+0x6ec>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d005      	beq.n	8004c1e <UART_SetConfig+0x39e>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4ad6      	ldr	r2, [pc, #856]	; (8004f70 <UART_SetConfig+0x6f0>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	f040 80d1 	bne.w	8004dc0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c1e:	f7fe fbd9 	bl	80033d4 <HAL_RCC_GetPCLK2Freq>
 8004c22:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	469a      	mov	sl, r3
 8004c28:	f04f 0b00 	mov.w	fp, #0
 8004c2c:	46d0      	mov	r8, sl
 8004c2e:	46d9      	mov	r9, fp
 8004c30:	eb18 0308 	adds.w	r3, r8, r8
 8004c34:	eb49 0409 	adc.w	r4, r9, r9
 8004c38:	4698      	mov	r8, r3
 8004c3a:	46a1      	mov	r9, r4
 8004c3c:	eb18 080a 	adds.w	r8, r8, sl
 8004c40:	eb49 090b 	adc.w	r9, r9, fp
 8004c44:	f04f 0100 	mov.w	r1, #0
 8004c48:	f04f 0200 	mov.w	r2, #0
 8004c4c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004c50:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004c54:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004c58:	4688      	mov	r8, r1
 8004c5a:	4691      	mov	r9, r2
 8004c5c:	eb1a 0508 	adds.w	r5, sl, r8
 8004c60:	eb4b 0609 	adc.w	r6, fp, r9
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	4619      	mov	r1, r3
 8004c6a:	f04f 0200 	mov.w	r2, #0
 8004c6e:	f04f 0300 	mov.w	r3, #0
 8004c72:	f04f 0400 	mov.w	r4, #0
 8004c76:	0094      	lsls	r4, r2, #2
 8004c78:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c7c:	008b      	lsls	r3, r1, #2
 8004c7e:	461a      	mov	r2, r3
 8004c80:	4623      	mov	r3, r4
 8004c82:	4628      	mov	r0, r5
 8004c84:	4631      	mov	r1, r6
 8004c86:	f7fb fb13 	bl	80002b0 <__aeabi_uldivmod>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	460c      	mov	r4, r1
 8004c8e:	461a      	mov	r2, r3
 8004c90:	4bb8      	ldr	r3, [pc, #736]	; (8004f74 <UART_SetConfig+0x6f4>)
 8004c92:	fba3 2302 	umull	r2, r3, r3, r2
 8004c96:	095b      	lsrs	r3, r3, #5
 8004c98:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	469b      	mov	fp, r3
 8004ca0:	f04f 0c00 	mov.w	ip, #0
 8004ca4:	46d9      	mov	r9, fp
 8004ca6:	46e2      	mov	sl, ip
 8004ca8:	eb19 0309 	adds.w	r3, r9, r9
 8004cac:	eb4a 040a 	adc.w	r4, sl, sl
 8004cb0:	4699      	mov	r9, r3
 8004cb2:	46a2      	mov	sl, r4
 8004cb4:	eb19 090b 	adds.w	r9, r9, fp
 8004cb8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004cbc:	f04f 0100 	mov.w	r1, #0
 8004cc0:	f04f 0200 	mov.w	r2, #0
 8004cc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cc8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ccc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004cd0:	4689      	mov	r9, r1
 8004cd2:	4692      	mov	sl, r2
 8004cd4:	eb1b 0509 	adds.w	r5, fp, r9
 8004cd8:	eb4c 060a 	adc.w	r6, ip, sl
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	f04f 0200 	mov.w	r2, #0
 8004ce6:	f04f 0300 	mov.w	r3, #0
 8004cea:	f04f 0400 	mov.w	r4, #0
 8004cee:	0094      	lsls	r4, r2, #2
 8004cf0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004cf4:	008b      	lsls	r3, r1, #2
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	4623      	mov	r3, r4
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	4631      	mov	r1, r6
 8004cfe:	f7fb fad7 	bl	80002b0 <__aeabi_uldivmod>
 8004d02:	4603      	mov	r3, r0
 8004d04:	460c      	mov	r4, r1
 8004d06:	461a      	mov	r2, r3
 8004d08:	4b9a      	ldr	r3, [pc, #616]	; (8004f74 <UART_SetConfig+0x6f4>)
 8004d0a:	fba3 1302 	umull	r1, r3, r3, r2
 8004d0e:	095b      	lsrs	r3, r3, #5
 8004d10:	2164      	movs	r1, #100	; 0x64
 8004d12:	fb01 f303 	mul.w	r3, r1, r3
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	011b      	lsls	r3, r3, #4
 8004d1a:	3332      	adds	r3, #50	; 0x32
 8004d1c:	4a95      	ldr	r2, [pc, #596]	; (8004f74 <UART_SetConfig+0x6f4>)
 8004d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d22:	095b      	lsrs	r3, r3, #5
 8004d24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d28:	4498      	add	r8, r3
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	469b      	mov	fp, r3
 8004d2e:	f04f 0c00 	mov.w	ip, #0
 8004d32:	46d9      	mov	r9, fp
 8004d34:	46e2      	mov	sl, ip
 8004d36:	eb19 0309 	adds.w	r3, r9, r9
 8004d3a:	eb4a 040a 	adc.w	r4, sl, sl
 8004d3e:	4699      	mov	r9, r3
 8004d40:	46a2      	mov	sl, r4
 8004d42:	eb19 090b 	adds.w	r9, r9, fp
 8004d46:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004d4a:	f04f 0100 	mov.w	r1, #0
 8004d4e:	f04f 0200 	mov.w	r2, #0
 8004d52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d56:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d5a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d5e:	4689      	mov	r9, r1
 8004d60:	4692      	mov	sl, r2
 8004d62:	eb1b 0509 	adds.w	r5, fp, r9
 8004d66:	eb4c 060a 	adc.w	r6, ip, sl
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	4619      	mov	r1, r3
 8004d70:	f04f 0200 	mov.w	r2, #0
 8004d74:	f04f 0300 	mov.w	r3, #0
 8004d78:	f04f 0400 	mov.w	r4, #0
 8004d7c:	0094      	lsls	r4, r2, #2
 8004d7e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d82:	008b      	lsls	r3, r1, #2
 8004d84:	461a      	mov	r2, r3
 8004d86:	4623      	mov	r3, r4
 8004d88:	4628      	mov	r0, r5
 8004d8a:	4631      	mov	r1, r6
 8004d8c:	f7fb fa90 	bl	80002b0 <__aeabi_uldivmod>
 8004d90:	4603      	mov	r3, r0
 8004d92:	460c      	mov	r4, r1
 8004d94:	461a      	mov	r2, r3
 8004d96:	4b77      	ldr	r3, [pc, #476]	; (8004f74 <UART_SetConfig+0x6f4>)
 8004d98:	fba3 1302 	umull	r1, r3, r3, r2
 8004d9c:	095b      	lsrs	r3, r3, #5
 8004d9e:	2164      	movs	r1, #100	; 0x64
 8004da0:	fb01 f303 	mul.w	r3, r1, r3
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	011b      	lsls	r3, r3, #4
 8004da8:	3332      	adds	r3, #50	; 0x32
 8004daa:	4a72      	ldr	r2, [pc, #456]	; (8004f74 <UART_SetConfig+0x6f4>)
 8004dac:	fba2 2303 	umull	r2, r3, r2, r3
 8004db0:	095b      	lsrs	r3, r3, #5
 8004db2:	f003 020f 	and.w	r2, r3, #15
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4442      	add	r2, r8
 8004dbc:	609a      	str	r2, [r3, #8]
 8004dbe:	e0d0      	b.n	8004f62 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004dc0:	f7fe faf4 	bl	80033ac <HAL_RCC_GetPCLK1Freq>
 8004dc4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	469a      	mov	sl, r3
 8004dca:	f04f 0b00 	mov.w	fp, #0
 8004dce:	46d0      	mov	r8, sl
 8004dd0:	46d9      	mov	r9, fp
 8004dd2:	eb18 0308 	adds.w	r3, r8, r8
 8004dd6:	eb49 0409 	adc.w	r4, r9, r9
 8004dda:	4698      	mov	r8, r3
 8004ddc:	46a1      	mov	r9, r4
 8004dde:	eb18 080a 	adds.w	r8, r8, sl
 8004de2:	eb49 090b 	adc.w	r9, r9, fp
 8004de6:	f04f 0100 	mov.w	r1, #0
 8004dea:	f04f 0200 	mov.w	r2, #0
 8004dee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004df2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004df6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004dfa:	4688      	mov	r8, r1
 8004dfc:	4691      	mov	r9, r2
 8004dfe:	eb1a 0508 	adds.w	r5, sl, r8
 8004e02:	eb4b 0609 	adc.w	r6, fp, r9
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	f04f 0200 	mov.w	r2, #0
 8004e10:	f04f 0300 	mov.w	r3, #0
 8004e14:	f04f 0400 	mov.w	r4, #0
 8004e18:	0094      	lsls	r4, r2, #2
 8004e1a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004e1e:	008b      	lsls	r3, r1, #2
 8004e20:	461a      	mov	r2, r3
 8004e22:	4623      	mov	r3, r4
 8004e24:	4628      	mov	r0, r5
 8004e26:	4631      	mov	r1, r6
 8004e28:	f7fb fa42 	bl	80002b0 <__aeabi_uldivmod>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	460c      	mov	r4, r1
 8004e30:	461a      	mov	r2, r3
 8004e32:	4b50      	ldr	r3, [pc, #320]	; (8004f74 <UART_SetConfig+0x6f4>)
 8004e34:	fba3 2302 	umull	r2, r3, r3, r2
 8004e38:	095b      	lsrs	r3, r3, #5
 8004e3a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	469b      	mov	fp, r3
 8004e42:	f04f 0c00 	mov.w	ip, #0
 8004e46:	46d9      	mov	r9, fp
 8004e48:	46e2      	mov	sl, ip
 8004e4a:	eb19 0309 	adds.w	r3, r9, r9
 8004e4e:	eb4a 040a 	adc.w	r4, sl, sl
 8004e52:	4699      	mov	r9, r3
 8004e54:	46a2      	mov	sl, r4
 8004e56:	eb19 090b 	adds.w	r9, r9, fp
 8004e5a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004e5e:	f04f 0100 	mov.w	r1, #0
 8004e62:	f04f 0200 	mov.w	r2, #0
 8004e66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e6a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e6e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e72:	4689      	mov	r9, r1
 8004e74:	4692      	mov	sl, r2
 8004e76:	eb1b 0509 	adds.w	r5, fp, r9
 8004e7a:	eb4c 060a 	adc.w	r6, ip, sl
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	4619      	mov	r1, r3
 8004e84:	f04f 0200 	mov.w	r2, #0
 8004e88:	f04f 0300 	mov.w	r3, #0
 8004e8c:	f04f 0400 	mov.w	r4, #0
 8004e90:	0094      	lsls	r4, r2, #2
 8004e92:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004e96:	008b      	lsls	r3, r1, #2
 8004e98:	461a      	mov	r2, r3
 8004e9a:	4623      	mov	r3, r4
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	4631      	mov	r1, r6
 8004ea0:	f7fb fa06 	bl	80002b0 <__aeabi_uldivmod>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	460c      	mov	r4, r1
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	4b32      	ldr	r3, [pc, #200]	; (8004f74 <UART_SetConfig+0x6f4>)
 8004eac:	fba3 1302 	umull	r1, r3, r3, r2
 8004eb0:	095b      	lsrs	r3, r3, #5
 8004eb2:	2164      	movs	r1, #100	; 0x64
 8004eb4:	fb01 f303 	mul.w	r3, r1, r3
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	011b      	lsls	r3, r3, #4
 8004ebc:	3332      	adds	r3, #50	; 0x32
 8004ebe:	4a2d      	ldr	r2, [pc, #180]	; (8004f74 <UART_SetConfig+0x6f4>)
 8004ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec4:	095b      	lsrs	r3, r3, #5
 8004ec6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004eca:	4498      	add	r8, r3
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	469b      	mov	fp, r3
 8004ed0:	f04f 0c00 	mov.w	ip, #0
 8004ed4:	46d9      	mov	r9, fp
 8004ed6:	46e2      	mov	sl, ip
 8004ed8:	eb19 0309 	adds.w	r3, r9, r9
 8004edc:	eb4a 040a 	adc.w	r4, sl, sl
 8004ee0:	4699      	mov	r9, r3
 8004ee2:	46a2      	mov	sl, r4
 8004ee4:	eb19 090b 	adds.w	r9, r9, fp
 8004ee8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004eec:	f04f 0100 	mov.w	r1, #0
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ef8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004efc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f00:	4689      	mov	r9, r1
 8004f02:	4692      	mov	sl, r2
 8004f04:	eb1b 0509 	adds.w	r5, fp, r9
 8004f08:	eb4c 060a 	adc.w	r6, ip, sl
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	4619      	mov	r1, r3
 8004f12:	f04f 0200 	mov.w	r2, #0
 8004f16:	f04f 0300 	mov.w	r3, #0
 8004f1a:	f04f 0400 	mov.w	r4, #0
 8004f1e:	0094      	lsls	r4, r2, #2
 8004f20:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f24:	008b      	lsls	r3, r1, #2
 8004f26:	461a      	mov	r2, r3
 8004f28:	4623      	mov	r3, r4
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	4631      	mov	r1, r6
 8004f2e:	f7fb f9bf 	bl	80002b0 <__aeabi_uldivmod>
 8004f32:	4603      	mov	r3, r0
 8004f34:	460c      	mov	r4, r1
 8004f36:	461a      	mov	r2, r3
 8004f38:	4b0e      	ldr	r3, [pc, #56]	; (8004f74 <UART_SetConfig+0x6f4>)
 8004f3a:	fba3 1302 	umull	r1, r3, r3, r2
 8004f3e:	095b      	lsrs	r3, r3, #5
 8004f40:	2164      	movs	r1, #100	; 0x64
 8004f42:	fb01 f303 	mul.w	r3, r1, r3
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	011b      	lsls	r3, r3, #4
 8004f4a:	3332      	adds	r3, #50	; 0x32
 8004f4c:	4a09      	ldr	r2, [pc, #36]	; (8004f74 <UART_SetConfig+0x6f4>)
 8004f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f52:	095b      	lsrs	r3, r3, #5
 8004f54:	f003 020f 	and.w	r2, r3, #15
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4442      	add	r2, r8
 8004f5e:	609a      	str	r2, [r3, #8]
}
 8004f60:	e7ff      	b.n	8004f62 <UART_SetConfig+0x6e2>
 8004f62:	bf00      	nop
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f6c:	40011000 	.word	0x40011000
 8004f70:	40011400 	.word	0x40011400
 8004f74:	51eb851f 	.word	0x51eb851f

08004f78 <__errno>:
 8004f78:	4b01      	ldr	r3, [pc, #4]	; (8004f80 <__errno+0x8>)
 8004f7a:	6818      	ldr	r0, [r3, #0]
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	20000010 	.word	0x20000010

08004f84 <__libc_init_array>:
 8004f84:	b570      	push	{r4, r5, r6, lr}
 8004f86:	4e0d      	ldr	r6, [pc, #52]	; (8004fbc <__libc_init_array+0x38>)
 8004f88:	4c0d      	ldr	r4, [pc, #52]	; (8004fc0 <__libc_init_array+0x3c>)
 8004f8a:	1ba4      	subs	r4, r4, r6
 8004f8c:	10a4      	asrs	r4, r4, #2
 8004f8e:	2500      	movs	r5, #0
 8004f90:	42a5      	cmp	r5, r4
 8004f92:	d109      	bne.n	8004fa8 <__libc_init_array+0x24>
 8004f94:	4e0b      	ldr	r6, [pc, #44]	; (8004fc4 <__libc_init_array+0x40>)
 8004f96:	4c0c      	ldr	r4, [pc, #48]	; (8004fc8 <__libc_init_array+0x44>)
 8004f98:	f000 fc26 	bl	80057e8 <_init>
 8004f9c:	1ba4      	subs	r4, r4, r6
 8004f9e:	10a4      	asrs	r4, r4, #2
 8004fa0:	2500      	movs	r5, #0
 8004fa2:	42a5      	cmp	r5, r4
 8004fa4:	d105      	bne.n	8004fb2 <__libc_init_array+0x2e>
 8004fa6:	bd70      	pop	{r4, r5, r6, pc}
 8004fa8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fac:	4798      	blx	r3
 8004fae:	3501      	adds	r5, #1
 8004fb0:	e7ee      	b.n	8004f90 <__libc_init_array+0xc>
 8004fb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fb6:	4798      	blx	r3
 8004fb8:	3501      	adds	r5, #1
 8004fba:	e7f2      	b.n	8004fa2 <__libc_init_array+0x1e>
 8004fbc:	0800586c 	.word	0x0800586c
 8004fc0:	0800586c 	.word	0x0800586c
 8004fc4:	0800586c 	.word	0x0800586c
 8004fc8:	08005870 	.word	0x08005870

08004fcc <memset>:
 8004fcc:	4402      	add	r2, r0
 8004fce:	4603      	mov	r3, r0
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d100      	bne.n	8004fd6 <memset+0xa>
 8004fd4:	4770      	bx	lr
 8004fd6:	f803 1b01 	strb.w	r1, [r3], #1
 8004fda:	e7f9      	b.n	8004fd0 <memset+0x4>

08004fdc <siprintf>:
 8004fdc:	b40e      	push	{r1, r2, r3}
 8004fde:	b500      	push	{lr}
 8004fe0:	b09c      	sub	sp, #112	; 0x70
 8004fe2:	ab1d      	add	r3, sp, #116	; 0x74
 8004fe4:	9002      	str	r0, [sp, #8]
 8004fe6:	9006      	str	r0, [sp, #24]
 8004fe8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004fec:	4809      	ldr	r0, [pc, #36]	; (8005014 <siprintf+0x38>)
 8004fee:	9107      	str	r1, [sp, #28]
 8004ff0:	9104      	str	r1, [sp, #16]
 8004ff2:	4909      	ldr	r1, [pc, #36]	; (8005018 <siprintf+0x3c>)
 8004ff4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ff8:	9105      	str	r1, [sp, #20]
 8004ffa:	6800      	ldr	r0, [r0, #0]
 8004ffc:	9301      	str	r3, [sp, #4]
 8004ffe:	a902      	add	r1, sp, #8
 8005000:	f000 f866 	bl	80050d0 <_svfiprintf_r>
 8005004:	9b02      	ldr	r3, [sp, #8]
 8005006:	2200      	movs	r2, #0
 8005008:	701a      	strb	r2, [r3, #0]
 800500a:	b01c      	add	sp, #112	; 0x70
 800500c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005010:	b003      	add	sp, #12
 8005012:	4770      	bx	lr
 8005014:	20000010 	.word	0x20000010
 8005018:	ffff0208 	.word	0xffff0208

0800501c <__ssputs_r>:
 800501c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005020:	688e      	ldr	r6, [r1, #8]
 8005022:	429e      	cmp	r6, r3
 8005024:	4682      	mov	sl, r0
 8005026:	460c      	mov	r4, r1
 8005028:	4690      	mov	r8, r2
 800502a:	4699      	mov	r9, r3
 800502c:	d837      	bhi.n	800509e <__ssputs_r+0x82>
 800502e:	898a      	ldrh	r2, [r1, #12]
 8005030:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005034:	d031      	beq.n	800509a <__ssputs_r+0x7e>
 8005036:	6825      	ldr	r5, [r4, #0]
 8005038:	6909      	ldr	r1, [r1, #16]
 800503a:	1a6f      	subs	r7, r5, r1
 800503c:	6965      	ldr	r5, [r4, #20]
 800503e:	2302      	movs	r3, #2
 8005040:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005044:	fb95 f5f3 	sdiv	r5, r5, r3
 8005048:	f109 0301 	add.w	r3, r9, #1
 800504c:	443b      	add	r3, r7
 800504e:	429d      	cmp	r5, r3
 8005050:	bf38      	it	cc
 8005052:	461d      	movcc	r5, r3
 8005054:	0553      	lsls	r3, r2, #21
 8005056:	d530      	bpl.n	80050ba <__ssputs_r+0x9e>
 8005058:	4629      	mov	r1, r5
 800505a:	f000 fb2b 	bl	80056b4 <_malloc_r>
 800505e:	4606      	mov	r6, r0
 8005060:	b950      	cbnz	r0, 8005078 <__ssputs_r+0x5c>
 8005062:	230c      	movs	r3, #12
 8005064:	f8ca 3000 	str.w	r3, [sl]
 8005068:	89a3      	ldrh	r3, [r4, #12]
 800506a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800506e:	81a3      	strh	r3, [r4, #12]
 8005070:	f04f 30ff 	mov.w	r0, #4294967295
 8005074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005078:	463a      	mov	r2, r7
 800507a:	6921      	ldr	r1, [r4, #16]
 800507c:	f000 faa8 	bl	80055d0 <memcpy>
 8005080:	89a3      	ldrh	r3, [r4, #12]
 8005082:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800508a:	81a3      	strh	r3, [r4, #12]
 800508c:	6126      	str	r6, [r4, #16]
 800508e:	6165      	str	r5, [r4, #20]
 8005090:	443e      	add	r6, r7
 8005092:	1bed      	subs	r5, r5, r7
 8005094:	6026      	str	r6, [r4, #0]
 8005096:	60a5      	str	r5, [r4, #8]
 8005098:	464e      	mov	r6, r9
 800509a:	454e      	cmp	r6, r9
 800509c:	d900      	bls.n	80050a0 <__ssputs_r+0x84>
 800509e:	464e      	mov	r6, r9
 80050a0:	4632      	mov	r2, r6
 80050a2:	4641      	mov	r1, r8
 80050a4:	6820      	ldr	r0, [r4, #0]
 80050a6:	f000 fa9e 	bl	80055e6 <memmove>
 80050aa:	68a3      	ldr	r3, [r4, #8]
 80050ac:	1b9b      	subs	r3, r3, r6
 80050ae:	60a3      	str	r3, [r4, #8]
 80050b0:	6823      	ldr	r3, [r4, #0]
 80050b2:	441e      	add	r6, r3
 80050b4:	6026      	str	r6, [r4, #0]
 80050b6:	2000      	movs	r0, #0
 80050b8:	e7dc      	b.n	8005074 <__ssputs_r+0x58>
 80050ba:	462a      	mov	r2, r5
 80050bc:	f000 fb54 	bl	8005768 <_realloc_r>
 80050c0:	4606      	mov	r6, r0
 80050c2:	2800      	cmp	r0, #0
 80050c4:	d1e2      	bne.n	800508c <__ssputs_r+0x70>
 80050c6:	6921      	ldr	r1, [r4, #16]
 80050c8:	4650      	mov	r0, sl
 80050ca:	f000 faa5 	bl	8005618 <_free_r>
 80050ce:	e7c8      	b.n	8005062 <__ssputs_r+0x46>

080050d0 <_svfiprintf_r>:
 80050d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050d4:	461d      	mov	r5, r3
 80050d6:	898b      	ldrh	r3, [r1, #12]
 80050d8:	061f      	lsls	r7, r3, #24
 80050da:	b09d      	sub	sp, #116	; 0x74
 80050dc:	4680      	mov	r8, r0
 80050de:	460c      	mov	r4, r1
 80050e0:	4616      	mov	r6, r2
 80050e2:	d50f      	bpl.n	8005104 <_svfiprintf_r+0x34>
 80050e4:	690b      	ldr	r3, [r1, #16]
 80050e6:	b96b      	cbnz	r3, 8005104 <_svfiprintf_r+0x34>
 80050e8:	2140      	movs	r1, #64	; 0x40
 80050ea:	f000 fae3 	bl	80056b4 <_malloc_r>
 80050ee:	6020      	str	r0, [r4, #0]
 80050f0:	6120      	str	r0, [r4, #16]
 80050f2:	b928      	cbnz	r0, 8005100 <_svfiprintf_r+0x30>
 80050f4:	230c      	movs	r3, #12
 80050f6:	f8c8 3000 	str.w	r3, [r8]
 80050fa:	f04f 30ff 	mov.w	r0, #4294967295
 80050fe:	e0c8      	b.n	8005292 <_svfiprintf_r+0x1c2>
 8005100:	2340      	movs	r3, #64	; 0x40
 8005102:	6163      	str	r3, [r4, #20]
 8005104:	2300      	movs	r3, #0
 8005106:	9309      	str	r3, [sp, #36]	; 0x24
 8005108:	2320      	movs	r3, #32
 800510a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800510e:	2330      	movs	r3, #48	; 0x30
 8005110:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005114:	9503      	str	r5, [sp, #12]
 8005116:	f04f 0b01 	mov.w	fp, #1
 800511a:	4637      	mov	r7, r6
 800511c:	463d      	mov	r5, r7
 800511e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005122:	b10b      	cbz	r3, 8005128 <_svfiprintf_r+0x58>
 8005124:	2b25      	cmp	r3, #37	; 0x25
 8005126:	d13e      	bne.n	80051a6 <_svfiprintf_r+0xd6>
 8005128:	ebb7 0a06 	subs.w	sl, r7, r6
 800512c:	d00b      	beq.n	8005146 <_svfiprintf_r+0x76>
 800512e:	4653      	mov	r3, sl
 8005130:	4632      	mov	r2, r6
 8005132:	4621      	mov	r1, r4
 8005134:	4640      	mov	r0, r8
 8005136:	f7ff ff71 	bl	800501c <__ssputs_r>
 800513a:	3001      	adds	r0, #1
 800513c:	f000 80a4 	beq.w	8005288 <_svfiprintf_r+0x1b8>
 8005140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005142:	4453      	add	r3, sl
 8005144:	9309      	str	r3, [sp, #36]	; 0x24
 8005146:	783b      	ldrb	r3, [r7, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 809d 	beq.w	8005288 <_svfiprintf_r+0x1b8>
 800514e:	2300      	movs	r3, #0
 8005150:	f04f 32ff 	mov.w	r2, #4294967295
 8005154:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005158:	9304      	str	r3, [sp, #16]
 800515a:	9307      	str	r3, [sp, #28]
 800515c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005160:	931a      	str	r3, [sp, #104]	; 0x68
 8005162:	462f      	mov	r7, r5
 8005164:	2205      	movs	r2, #5
 8005166:	f817 1b01 	ldrb.w	r1, [r7], #1
 800516a:	4850      	ldr	r0, [pc, #320]	; (80052ac <_svfiprintf_r+0x1dc>)
 800516c:	f7fb f850 	bl	8000210 <memchr>
 8005170:	9b04      	ldr	r3, [sp, #16]
 8005172:	b9d0      	cbnz	r0, 80051aa <_svfiprintf_r+0xda>
 8005174:	06d9      	lsls	r1, r3, #27
 8005176:	bf44      	itt	mi
 8005178:	2220      	movmi	r2, #32
 800517a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800517e:	071a      	lsls	r2, r3, #28
 8005180:	bf44      	itt	mi
 8005182:	222b      	movmi	r2, #43	; 0x2b
 8005184:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005188:	782a      	ldrb	r2, [r5, #0]
 800518a:	2a2a      	cmp	r2, #42	; 0x2a
 800518c:	d015      	beq.n	80051ba <_svfiprintf_r+0xea>
 800518e:	9a07      	ldr	r2, [sp, #28]
 8005190:	462f      	mov	r7, r5
 8005192:	2000      	movs	r0, #0
 8005194:	250a      	movs	r5, #10
 8005196:	4639      	mov	r1, r7
 8005198:	f811 3b01 	ldrb.w	r3, [r1], #1
 800519c:	3b30      	subs	r3, #48	; 0x30
 800519e:	2b09      	cmp	r3, #9
 80051a0:	d94d      	bls.n	800523e <_svfiprintf_r+0x16e>
 80051a2:	b1b8      	cbz	r0, 80051d4 <_svfiprintf_r+0x104>
 80051a4:	e00f      	b.n	80051c6 <_svfiprintf_r+0xf6>
 80051a6:	462f      	mov	r7, r5
 80051a8:	e7b8      	b.n	800511c <_svfiprintf_r+0x4c>
 80051aa:	4a40      	ldr	r2, [pc, #256]	; (80052ac <_svfiprintf_r+0x1dc>)
 80051ac:	1a80      	subs	r0, r0, r2
 80051ae:	fa0b f000 	lsl.w	r0, fp, r0
 80051b2:	4318      	orrs	r0, r3
 80051b4:	9004      	str	r0, [sp, #16]
 80051b6:	463d      	mov	r5, r7
 80051b8:	e7d3      	b.n	8005162 <_svfiprintf_r+0x92>
 80051ba:	9a03      	ldr	r2, [sp, #12]
 80051bc:	1d11      	adds	r1, r2, #4
 80051be:	6812      	ldr	r2, [r2, #0]
 80051c0:	9103      	str	r1, [sp, #12]
 80051c2:	2a00      	cmp	r2, #0
 80051c4:	db01      	blt.n	80051ca <_svfiprintf_r+0xfa>
 80051c6:	9207      	str	r2, [sp, #28]
 80051c8:	e004      	b.n	80051d4 <_svfiprintf_r+0x104>
 80051ca:	4252      	negs	r2, r2
 80051cc:	f043 0302 	orr.w	r3, r3, #2
 80051d0:	9207      	str	r2, [sp, #28]
 80051d2:	9304      	str	r3, [sp, #16]
 80051d4:	783b      	ldrb	r3, [r7, #0]
 80051d6:	2b2e      	cmp	r3, #46	; 0x2e
 80051d8:	d10c      	bne.n	80051f4 <_svfiprintf_r+0x124>
 80051da:	787b      	ldrb	r3, [r7, #1]
 80051dc:	2b2a      	cmp	r3, #42	; 0x2a
 80051de:	d133      	bne.n	8005248 <_svfiprintf_r+0x178>
 80051e0:	9b03      	ldr	r3, [sp, #12]
 80051e2:	1d1a      	adds	r2, r3, #4
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	9203      	str	r2, [sp, #12]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	bfb8      	it	lt
 80051ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80051f0:	3702      	adds	r7, #2
 80051f2:	9305      	str	r3, [sp, #20]
 80051f4:	4d2e      	ldr	r5, [pc, #184]	; (80052b0 <_svfiprintf_r+0x1e0>)
 80051f6:	7839      	ldrb	r1, [r7, #0]
 80051f8:	2203      	movs	r2, #3
 80051fa:	4628      	mov	r0, r5
 80051fc:	f7fb f808 	bl	8000210 <memchr>
 8005200:	b138      	cbz	r0, 8005212 <_svfiprintf_r+0x142>
 8005202:	2340      	movs	r3, #64	; 0x40
 8005204:	1b40      	subs	r0, r0, r5
 8005206:	fa03 f000 	lsl.w	r0, r3, r0
 800520a:	9b04      	ldr	r3, [sp, #16]
 800520c:	4303      	orrs	r3, r0
 800520e:	3701      	adds	r7, #1
 8005210:	9304      	str	r3, [sp, #16]
 8005212:	7839      	ldrb	r1, [r7, #0]
 8005214:	4827      	ldr	r0, [pc, #156]	; (80052b4 <_svfiprintf_r+0x1e4>)
 8005216:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800521a:	2206      	movs	r2, #6
 800521c:	1c7e      	adds	r6, r7, #1
 800521e:	f7fa fff7 	bl	8000210 <memchr>
 8005222:	2800      	cmp	r0, #0
 8005224:	d038      	beq.n	8005298 <_svfiprintf_r+0x1c8>
 8005226:	4b24      	ldr	r3, [pc, #144]	; (80052b8 <_svfiprintf_r+0x1e8>)
 8005228:	bb13      	cbnz	r3, 8005270 <_svfiprintf_r+0x1a0>
 800522a:	9b03      	ldr	r3, [sp, #12]
 800522c:	3307      	adds	r3, #7
 800522e:	f023 0307 	bic.w	r3, r3, #7
 8005232:	3308      	adds	r3, #8
 8005234:	9303      	str	r3, [sp, #12]
 8005236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005238:	444b      	add	r3, r9
 800523a:	9309      	str	r3, [sp, #36]	; 0x24
 800523c:	e76d      	b.n	800511a <_svfiprintf_r+0x4a>
 800523e:	fb05 3202 	mla	r2, r5, r2, r3
 8005242:	2001      	movs	r0, #1
 8005244:	460f      	mov	r7, r1
 8005246:	e7a6      	b.n	8005196 <_svfiprintf_r+0xc6>
 8005248:	2300      	movs	r3, #0
 800524a:	3701      	adds	r7, #1
 800524c:	9305      	str	r3, [sp, #20]
 800524e:	4619      	mov	r1, r3
 8005250:	250a      	movs	r5, #10
 8005252:	4638      	mov	r0, r7
 8005254:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005258:	3a30      	subs	r2, #48	; 0x30
 800525a:	2a09      	cmp	r2, #9
 800525c:	d903      	bls.n	8005266 <_svfiprintf_r+0x196>
 800525e:	2b00      	cmp	r3, #0
 8005260:	d0c8      	beq.n	80051f4 <_svfiprintf_r+0x124>
 8005262:	9105      	str	r1, [sp, #20]
 8005264:	e7c6      	b.n	80051f4 <_svfiprintf_r+0x124>
 8005266:	fb05 2101 	mla	r1, r5, r1, r2
 800526a:	2301      	movs	r3, #1
 800526c:	4607      	mov	r7, r0
 800526e:	e7f0      	b.n	8005252 <_svfiprintf_r+0x182>
 8005270:	ab03      	add	r3, sp, #12
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	4622      	mov	r2, r4
 8005276:	4b11      	ldr	r3, [pc, #68]	; (80052bc <_svfiprintf_r+0x1ec>)
 8005278:	a904      	add	r1, sp, #16
 800527a:	4640      	mov	r0, r8
 800527c:	f3af 8000 	nop.w
 8005280:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005284:	4681      	mov	r9, r0
 8005286:	d1d6      	bne.n	8005236 <_svfiprintf_r+0x166>
 8005288:	89a3      	ldrh	r3, [r4, #12]
 800528a:	065b      	lsls	r3, r3, #25
 800528c:	f53f af35 	bmi.w	80050fa <_svfiprintf_r+0x2a>
 8005290:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005292:	b01d      	add	sp, #116	; 0x74
 8005294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005298:	ab03      	add	r3, sp, #12
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	4622      	mov	r2, r4
 800529e:	4b07      	ldr	r3, [pc, #28]	; (80052bc <_svfiprintf_r+0x1ec>)
 80052a0:	a904      	add	r1, sp, #16
 80052a2:	4640      	mov	r0, r8
 80052a4:	f000 f882 	bl	80053ac <_printf_i>
 80052a8:	e7ea      	b.n	8005280 <_svfiprintf_r+0x1b0>
 80052aa:	bf00      	nop
 80052ac:	08005830 	.word	0x08005830
 80052b0:	08005836 	.word	0x08005836
 80052b4:	0800583a 	.word	0x0800583a
 80052b8:	00000000 	.word	0x00000000
 80052bc:	0800501d 	.word	0x0800501d

080052c0 <_printf_common>:
 80052c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052c4:	4691      	mov	r9, r2
 80052c6:	461f      	mov	r7, r3
 80052c8:	688a      	ldr	r2, [r1, #8]
 80052ca:	690b      	ldr	r3, [r1, #16]
 80052cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052d0:	4293      	cmp	r3, r2
 80052d2:	bfb8      	it	lt
 80052d4:	4613      	movlt	r3, r2
 80052d6:	f8c9 3000 	str.w	r3, [r9]
 80052da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052de:	4606      	mov	r6, r0
 80052e0:	460c      	mov	r4, r1
 80052e2:	b112      	cbz	r2, 80052ea <_printf_common+0x2a>
 80052e4:	3301      	adds	r3, #1
 80052e6:	f8c9 3000 	str.w	r3, [r9]
 80052ea:	6823      	ldr	r3, [r4, #0]
 80052ec:	0699      	lsls	r1, r3, #26
 80052ee:	bf42      	ittt	mi
 80052f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80052f4:	3302      	addmi	r3, #2
 80052f6:	f8c9 3000 	strmi.w	r3, [r9]
 80052fa:	6825      	ldr	r5, [r4, #0]
 80052fc:	f015 0506 	ands.w	r5, r5, #6
 8005300:	d107      	bne.n	8005312 <_printf_common+0x52>
 8005302:	f104 0a19 	add.w	sl, r4, #25
 8005306:	68e3      	ldr	r3, [r4, #12]
 8005308:	f8d9 2000 	ldr.w	r2, [r9]
 800530c:	1a9b      	subs	r3, r3, r2
 800530e:	42ab      	cmp	r3, r5
 8005310:	dc28      	bgt.n	8005364 <_printf_common+0xa4>
 8005312:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005316:	6822      	ldr	r2, [r4, #0]
 8005318:	3300      	adds	r3, #0
 800531a:	bf18      	it	ne
 800531c:	2301      	movne	r3, #1
 800531e:	0692      	lsls	r2, r2, #26
 8005320:	d42d      	bmi.n	800537e <_printf_common+0xbe>
 8005322:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005326:	4639      	mov	r1, r7
 8005328:	4630      	mov	r0, r6
 800532a:	47c0      	blx	r8
 800532c:	3001      	adds	r0, #1
 800532e:	d020      	beq.n	8005372 <_printf_common+0xb2>
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	68e5      	ldr	r5, [r4, #12]
 8005334:	f8d9 2000 	ldr.w	r2, [r9]
 8005338:	f003 0306 	and.w	r3, r3, #6
 800533c:	2b04      	cmp	r3, #4
 800533e:	bf08      	it	eq
 8005340:	1aad      	subeq	r5, r5, r2
 8005342:	68a3      	ldr	r3, [r4, #8]
 8005344:	6922      	ldr	r2, [r4, #16]
 8005346:	bf0c      	ite	eq
 8005348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800534c:	2500      	movne	r5, #0
 800534e:	4293      	cmp	r3, r2
 8005350:	bfc4      	itt	gt
 8005352:	1a9b      	subgt	r3, r3, r2
 8005354:	18ed      	addgt	r5, r5, r3
 8005356:	f04f 0900 	mov.w	r9, #0
 800535a:	341a      	adds	r4, #26
 800535c:	454d      	cmp	r5, r9
 800535e:	d11a      	bne.n	8005396 <_printf_common+0xd6>
 8005360:	2000      	movs	r0, #0
 8005362:	e008      	b.n	8005376 <_printf_common+0xb6>
 8005364:	2301      	movs	r3, #1
 8005366:	4652      	mov	r2, sl
 8005368:	4639      	mov	r1, r7
 800536a:	4630      	mov	r0, r6
 800536c:	47c0      	blx	r8
 800536e:	3001      	adds	r0, #1
 8005370:	d103      	bne.n	800537a <_printf_common+0xba>
 8005372:	f04f 30ff 	mov.w	r0, #4294967295
 8005376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800537a:	3501      	adds	r5, #1
 800537c:	e7c3      	b.n	8005306 <_printf_common+0x46>
 800537e:	18e1      	adds	r1, r4, r3
 8005380:	1c5a      	adds	r2, r3, #1
 8005382:	2030      	movs	r0, #48	; 0x30
 8005384:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005388:	4422      	add	r2, r4
 800538a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800538e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005392:	3302      	adds	r3, #2
 8005394:	e7c5      	b.n	8005322 <_printf_common+0x62>
 8005396:	2301      	movs	r3, #1
 8005398:	4622      	mov	r2, r4
 800539a:	4639      	mov	r1, r7
 800539c:	4630      	mov	r0, r6
 800539e:	47c0      	blx	r8
 80053a0:	3001      	adds	r0, #1
 80053a2:	d0e6      	beq.n	8005372 <_printf_common+0xb2>
 80053a4:	f109 0901 	add.w	r9, r9, #1
 80053a8:	e7d8      	b.n	800535c <_printf_common+0x9c>
	...

080053ac <_printf_i>:
 80053ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80053b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80053b4:	460c      	mov	r4, r1
 80053b6:	7e09      	ldrb	r1, [r1, #24]
 80053b8:	b085      	sub	sp, #20
 80053ba:	296e      	cmp	r1, #110	; 0x6e
 80053bc:	4617      	mov	r7, r2
 80053be:	4606      	mov	r6, r0
 80053c0:	4698      	mov	r8, r3
 80053c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80053c4:	f000 80b3 	beq.w	800552e <_printf_i+0x182>
 80053c8:	d822      	bhi.n	8005410 <_printf_i+0x64>
 80053ca:	2963      	cmp	r1, #99	; 0x63
 80053cc:	d036      	beq.n	800543c <_printf_i+0x90>
 80053ce:	d80a      	bhi.n	80053e6 <_printf_i+0x3a>
 80053d0:	2900      	cmp	r1, #0
 80053d2:	f000 80b9 	beq.w	8005548 <_printf_i+0x19c>
 80053d6:	2958      	cmp	r1, #88	; 0x58
 80053d8:	f000 8083 	beq.w	80054e2 <_printf_i+0x136>
 80053dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80053e4:	e032      	b.n	800544c <_printf_i+0xa0>
 80053e6:	2964      	cmp	r1, #100	; 0x64
 80053e8:	d001      	beq.n	80053ee <_printf_i+0x42>
 80053ea:	2969      	cmp	r1, #105	; 0x69
 80053ec:	d1f6      	bne.n	80053dc <_printf_i+0x30>
 80053ee:	6820      	ldr	r0, [r4, #0]
 80053f0:	6813      	ldr	r3, [r2, #0]
 80053f2:	0605      	lsls	r5, r0, #24
 80053f4:	f103 0104 	add.w	r1, r3, #4
 80053f8:	d52a      	bpl.n	8005450 <_printf_i+0xa4>
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6011      	str	r1, [r2, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	da03      	bge.n	800540a <_printf_i+0x5e>
 8005402:	222d      	movs	r2, #45	; 0x2d
 8005404:	425b      	negs	r3, r3
 8005406:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800540a:	486f      	ldr	r0, [pc, #444]	; (80055c8 <_printf_i+0x21c>)
 800540c:	220a      	movs	r2, #10
 800540e:	e039      	b.n	8005484 <_printf_i+0xd8>
 8005410:	2973      	cmp	r1, #115	; 0x73
 8005412:	f000 809d 	beq.w	8005550 <_printf_i+0x1a4>
 8005416:	d808      	bhi.n	800542a <_printf_i+0x7e>
 8005418:	296f      	cmp	r1, #111	; 0x6f
 800541a:	d020      	beq.n	800545e <_printf_i+0xb2>
 800541c:	2970      	cmp	r1, #112	; 0x70
 800541e:	d1dd      	bne.n	80053dc <_printf_i+0x30>
 8005420:	6823      	ldr	r3, [r4, #0]
 8005422:	f043 0320 	orr.w	r3, r3, #32
 8005426:	6023      	str	r3, [r4, #0]
 8005428:	e003      	b.n	8005432 <_printf_i+0x86>
 800542a:	2975      	cmp	r1, #117	; 0x75
 800542c:	d017      	beq.n	800545e <_printf_i+0xb2>
 800542e:	2978      	cmp	r1, #120	; 0x78
 8005430:	d1d4      	bne.n	80053dc <_printf_i+0x30>
 8005432:	2378      	movs	r3, #120	; 0x78
 8005434:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005438:	4864      	ldr	r0, [pc, #400]	; (80055cc <_printf_i+0x220>)
 800543a:	e055      	b.n	80054e8 <_printf_i+0x13c>
 800543c:	6813      	ldr	r3, [r2, #0]
 800543e:	1d19      	adds	r1, r3, #4
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6011      	str	r1, [r2, #0]
 8005444:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005448:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800544c:	2301      	movs	r3, #1
 800544e:	e08c      	b.n	800556a <_printf_i+0x1be>
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6011      	str	r1, [r2, #0]
 8005454:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005458:	bf18      	it	ne
 800545a:	b21b      	sxthne	r3, r3
 800545c:	e7cf      	b.n	80053fe <_printf_i+0x52>
 800545e:	6813      	ldr	r3, [r2, #0]
 8005460:	6825      	ldr	r5, [r4, #0]
 8005462:	1d18      	adds	r0, r3, #4
 8005464:	6010      	str	r0, [r2, #0]
 8005466:	0628      	lsls	r0, r5, #24
 8005468:	d501      	bpl.n	800546e <_printf_i+0xc2>
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	e002      	b.n	8005474 <_printf_i+0xc8>
 800546e:	0668      	lsls	r0, r5, #25
 8005470:	d5fb      	bpl.n	800546a <_printf_i+0xbe>
 8005472:	881b      	ldrh	r3, [r3, #0]
 8005474:	4854      	ldr	r0, [pc, #336]	; (80055c8 <_printf_i+0x21c>)
 8005476:	296f      	cmp	r1, #111	; 0x6f
 8005478:	bf14      	ite	ne
 800547a:	220a      	movne	r2, #10
 800547c:	2208      	moveq	r2, #8
 800547e:	2100      	movs	r1, #0
 8005480:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005484:	6865      	ldr	r5, [r4, #4]
 8005486:	60a5      	str	r5, [r4, #8]
 8005488:	2d00      	cmp	r5, #0
 800548a:	f2c0 8095 	blt.w	80055b8 <_printf_i+0x20c>
 800548e:	6821      	ldr	r1, [r4, #0]
 8005490:	f021 0104 	bic.w	r1, r1, #4
 8005494:	6021      	str	r1, [r4, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d13d      	bne.n	8005516 <_printf_i+0x16a>
 800549a:	2d00      	cmp	r5, #0
 800549c:	f040 808e 	bne.w	80055bc <_printf_i+0x210>
 80054a0:	4665      	mov	r5, ip
 80054a2:	2a08      	cmp	r2, #8
 80054a4:	d10b      	bne.n	80054be <_printf_i+0x112>
 80054a6:	6823      	ldr	r3, [r4, #0]
 80054a8:	07db      	lsls	r3, r3, #31
 80054aa:	d508      	bpl.n	80054be <_printf_i+0x112>
 80054ac:	6923      	ldr	r3, [r4, #16]
 80054ae:	6862      	ldr	r2, [r4, #4]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	bfde      	ittt	le
 80054b4:	2330      	movle	r3, #48	; 0x30
 80054b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80054be:	ebac 0305 	sub.w	r3, ip, r5
 80054c2:	6123      	str	r3, [r4, #16]
 80054c4:	f8cd 8000 	str.w	r8, [sp]
 80054c8:	463b      	mov	r3, r7
 80054ca:	aa03      	add	r2, sp, #12
 80054cc:	4621      	mov	r1, r4
 80054ce:	4630      	mov	r0, r6
 80054d0:	f7ff fef6 	bl	80052c0 <_printf_common>
 80054d4:	3001      	adds	r0, #1
 80054d6:	d14d      	bne.n	8005574 <_printf_i+0x1c8>
 80054d8:	f04f 30ff 	mov.w	r0, #4294967295
 80054dc:	b005      	add	sp, #20
 80054de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80054e2:	4839      	ldr	r0, [pc, #228]	; (80055c8 <_printf_i+0x21c>)
 80054e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80054e8:	6813      	ldr	r3, [r2, #0]
 80054ea:	6821      	ldr	r1, [r4, #0]
 80054ec:	1d1d      	adds	r5, r3, #4
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6015      	str	r5, [r2, #0]
 80054f2:	060a      	lsls	r2, r1, #24
 80054f4:	d50b      	bpl.n	800550e <_printf_i+0x162>
 80054f6:	07ca      	lsls	r2, r1, #31
 80054f8:	bf44      	itt	mi
 80054fa:	f041 0120 	orrmi.w	r1, r1, #32
 80054fe:	6021      	strmi	r1, [r4, #0]
 8005500:	b91b      	cbnz	r3, 800550a <_printf_i+0x15e>
 8005502:	6822      	ldr	r2, [r4, #0]
 8005504:	f022 0220 	bic.w	r2, r2, #32
 8005508:	6022      	str	r2, [r4, #0]
 800550a:	2210      	movs	r2, #16
 800550c:	e7b7      	b.n	800547e <_printf_i+0xd2>
 800550e:	064d      	lsls	r5, r1, #25
 8005510:	bf48      	it	mi
 8005512:	b29b      	uxthmi	r3, r3
 8005514:	e7ef      	b.n	80054f6 <_printf_i+0x14a>
 8005516:	4665      	mov	r5, ip
 8005518:	fbb3 f1f2 	udiv	r1, r3, r2
 800551c:	fb02 3311 	mls	r3, r2, r1, r3
 8005520:	5cc3      	ldrb	r3, [r0, r3]
 8005522:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005526:	460b      	mov	r3, r1
 8005528:	2900      	cmp	r1, #0
 800552a:	d1f5      	bne.n	8005518 <_printf_i+0x16c>
 800552c:	e7b9      	b.n	80054a2 <_printf_i+0xf6>
 800552e:	6813      	ldr	r3, [r2, #0]
 8005530:	6825      	ldr	r5, [r4, #0]
 8005532:	6961      	ldr	r1, [r4, #20]
 8005534:	1d18      	adds	r0, r3, #4
 8005536:	6010      	str	r0, [r2, #0]
 8005538:	0628      	lsls	r0, r5, #24
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	d501      	bpl.n	8005542 <_printf_i+0x196>
 800553e:	6019      	str	r1, [r3, #0]
 8005540:	e002      	b.n	8005548 <_printf_i+0x19c>
 8005542:	066a      	lsls	r2, r5, #25
 8005544:	d5fb      	bpl.n	800553e <_printf_i+0x192>
 8005546:	8019      	strh	r1, [r3, #0]
 8005548:	2300      	movs	r3, #0
 800554a:	6123      	str	r3, [r4, #16]
 800554c:	4665      	mov	r5, ip
 800554e:	e7b9      	b.n	80054c4 <_printf_i+0x118>
 8005550:	6813      	ldr	r3, [r2, #0]
 8005552:	1d19      	adds	r1, r3, #4
 8005554:	6011      	str	r1, [r2, #0]
 8005556:	681d      	ldr	r5, [r3, #0]
 8005558:	6862      	ldr	r2, [r4, #4]
 800555a:	2100      	movs	r1, #0
 800555c:	4628      	mov	r0, r5
 800555e:	f7fa fe57 	bl	8000210 <memchr>
 8005562:	b108      	cbz	r0, 8005568 <_printf_i+0x1bc>
 8005564:	1b40      	subs	r0, r0, r5
 8005566:	6060      	str	r0, [r4, #4]
 8005568:	6863      	ldr	r3, [r4, #4]
 800556a:	6123      	str	r3, [r4, #16]
 800556c:	2300      	movs	r3, #0
 800556e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005572:	e7a7      	b.n	80054c4 <_printf_i+0x118>
 8005574:	6923      	ldr	r3, [r4, #16]
 8005576:	462a      	mov	r2, r5
 8005578:	4639      	mov	r1, r7
 800557a:	4630      	mov	r0, r6
 800557c:	47c0      	blx	r8
 800557e:	3001      	adds	r0, #1
 8005580:	d0aa      	beq.n	80054d8 <_printf_i+0x12c>
 8005582:	6823      	ldr	r3, [r4, #0]
 8005584:	079b      	lsls	r3, r3, #30
 8005586:	d413      	bmi.n	80055b0 <_printf_i+0x204>
 8005588:	68e0      	ldr	r0, [r4, #12]
 800558a:	9b03      	ldr	r3, [sp, #12]
 800558c:	4298      	cmp	r0, r3
 800558e:	bfb8      	it	lt
 8005590:	4618      	movlt	r0, r3
 8005592:	e7a3      	b.n	80054dc <_printf_i+0x130>
 8005594:	2301      	movs	r3, #1
 8005596:	464a      	mov	r2, r9
 8005598:	4639      	mov	r1, r7
 800559a:	4630      	mov	r0, r6
 800559c:	47c0      	blx	r8
 800559e:	3001      	adds	r0, #1
 80055a0:	d09a      	beq.n	80054d8 <_printf_i+0x12c>
 80055a2:	3501      	adds	r5, #1
 80055a4:	68e3      	ldr	r3, [r4, #12]
 80055a6:	9a03      	ldr	r2, [sp, #12]
 80055a8:	1a9b      	subs	r3, r3, r2
 80055aa:	42ab      	cmp	r3, r5
 80055ac:	dcf2      	bgt.n	8005594 <_printf_i+0x1e8>
 80055ae:	e7eb      	b.n	8005588 <_printf_i+0x1dc>
 80055b0:	2500      	movs	r5, #0
 80055b2:	f104 0919 	add.w	r9, r4, #25
 80055b6:	e7f5      	b.n	80055a4 <_printf_i+0x1f8>
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1ac      	bne.n	8005516 <_printf_i+0x16a>
 80055bc:	7803      	ldrb	r3, [r0, #0]
 80055be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055c6:	e76c      	b.n	80054a2 <_printf_i+0xf6>
 80055c8:	08005841 	.word	0x08005841
 80055cc:	08005852 	.word	0x08005852

080055d0 <memcpy>:
 80055d0:	b510      	push	{r4, lr}
 80055d2:	1e43      	subs	r3, r0, #1
 80055d4:	440a      	add	r2, r1
 80055d6:	4291      	cmp	r1, r2
 80055d8:	d100      	bne.n	80055dc <memcpy+0xc>
 80055da:	bd10      	pop	{r4, pc}
 80055dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055e4:	e7f7      	b.n	80055d6 <memcpy+0x6>

080055e6 <memmove>:
 80055e6:	4288      	cmp	r0, r1
 80055e8:	b510      	push	{r4, lr}
 80055ea:	eb01 0302 	add.w	r3, r1, r2
 80055ee:	d807      	bhi.n	8005600 <memmove+0x1a>
 80055f0:	1e42      	subs	r2, r0, #1
 80055f2:	4299      	cmp	r1, r3
 80055f4:	d00a      	beq.n	800560c <memmove+0x26>
 80055f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055fa:	f802 4f01 	strb.w	r4, [r2, #1]!
 80055fe:	e7f8      	b.n	80055f2 <memmove+0xc>
 8005600:	4283      	cmp	r3, r0
 8005602:	d9f5      	bls.n	80055f0 <memmove+0xa>
 8005604:	1881      	adds	r1, r0, r2
 8005606:	1ad2      	subs	r2, r2, r3
 8005608:	42d3      	cmn	r3, r2
 800560a:	d100      	bne.n	800560e <memmove+0x28>
 800560c:	bd10      	pop	{r4, pc}
 800560e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005612:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005616:	e7f7      	b.n	8005608 <memmove+0x22>

08005618 <_free_r>:
 8005618:	b538      	push	{r3, r4, r5, lr}
 800561a:	4605      	mov	r5, r0
 800561c:	2900      	cmp	r1, #0
 800561e:	d045      	beq.n	80056ac <_free_r+0x94>
 8005620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005624:	1f0c      	subs	r4, r1, #4
 8005626:	2b00      	cmp	r3, #0
 8005628:	bfb8      	it	lt
 800562a:	18e4      	addlt	r4, r4, r3
 800562c:	f000 f8d2 	bl	80057d4 <__malloc_lock>
 8005630:	4a1f      	ldr	r2, [pc, #124]	; (80056b0 <_free_r+0x98>)
 8005632:	6813      	ldr	r3, [r2, #0]
 8005634:	4610      	mov	r0, r2
 8005636:	b933      	cbnz	r3, 8005646 <_free_r+0x2e>
 8005638:	6063      	str	r3, [r4, #4]
 800563a:	6014      	str	r4, [r2, #0]
 800563c:	4628      	mov	r0, r5
 800563e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005642:	f000 b8c8 	b.w	80057d6 <__malloc_unlock>
 8005646:	42a3      	cmp	r3, r4
 8005648:	d90c      	bls.n	8005664 <_free_r+0x4c>
 800564a:	6821      	ldr	r1, [r4, #0]
 800564c:	1862      	adds	r2, r4, r1
 800564e:	4293      	cmp	r3, r2
 8005650:	bf04      	itt	eq
 8005652:	681a      	ldreq	r2, [r3, #0]
 8005654:	685b      	ldreq	r3, [r3, #4]
 8005656:	6063      	str	r3, [r4, #4]
 8005658:	bf04      	itt	eq
 800565a:	1852      	addeq	r2, r2, r1
 800565c:	6022      	streq	r2, [r4, #0]
 800565e:	6004      	str	r4, [r0, #0]
 8005660:	e7ec      	b.n	800563c <_free_r+0x24>
 8005662:	4613      	mov	r3, r2
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	b10a      	cbz	r2, 800566c <_free_r+0x54>
 8005668:	42a2      	cmp	r2, r4
 800566a:	d9fa      	bls.n	8005662 <_free_r+0x4a>
 800566c:	6819      	ldr	r1, [r3, #0]
 800566e:	1858      	adds	r0, r3, r1
 8005670:	42a0      	cmp	r0, r4
 8005672:	d10b      	bne.n	800568c <_free_r+0x74>
 8005674:	6820      	ldr	r0, [r4, #0]
 8005676:	4401      	add	r1, r0
 8005678:	1858      	adds	r0, r3, r1
 800567a:	4282      	cmp	r2, r0
 800567c:	6019      	str	r1, [r3, #0]
 800567e:	d1dd      	bne.n	800563c <_free_r+0x24>
 8005680:	6810      	ldr	r0, [r2, #0]
 8005682:	6852      	ldr	r2, [r2, #4]
 8005684:	605a      	str	r2, [r3, #4]
 8005686:	4401      	add	r1, r0
 8005688:	6019      	str	r1, [r3, #0]
 800568a:	e7d7      	b.n	800563c <_free_r+0x24>
 800568c:	d902      	bls.n	8005694 <_free_r+0x7c>
 800568e:	230c      	movs	r3, #12
 8005690:	602b      	str	r3, [r5, #0]
 8005692:	e7d3      	b.n	800563c <_free_r+0x24>
 8005694:	6820      	ldr	r0, [r4, #0]
 8005696:	1821      	adds	r1, r4, r0
 8005698:	428a      	cmp	r2, r1
 800569a:	bf04      	itt	eq
 800569c:	6811      	ldreq	r1, [r2, #0]
 800569e:	6852      	ldreq	r2, [r2, #4]
 80056a0:	6062      	str	r2, [r4, #4]
 80056a2:	bf04      	itt	eq
 80056a4:	1809      	addeq	r1, r1, r0
 80056a6:	6021      	streq	r1, [r4, #0]
 80056a8:	605c      	str	r4, [r3, #4]
 80056aa:	e7c7      	b.n	800563c <_free_r+0x24>
 80056ac:	bd38      	pop	{r3, r4, r5, pc}
 80056ae:	bf00      	nop
 80056b0:	200000a0 	.word	0x200000a0

080056b4 <_malloc_r>:
 80056b4:	b570      	push	{r4, r5, r6, lr}
 80056b6:	1ccd      	adds	r5, r1, #3
 80056b8:	f025 0503 	bic.w	r5, r5, #3
 80056bc:	3508      	adds	r5, #8
 80056be:	2d0c      	cmp	r5, #12
 80056c0:	bf38      	it	cc
 80056c2:	250c      	movcc	r5, #12
 80056c4:	2d00      	cmp	r5, #0
 80056c6:	4606      	mov	r6, r0
 80056c8:	db01      	blt.n	80056ce <_malloc_r+0x1a>
 80056ca:	42a9      	cmp	r1, r5
 80056cc:	d903      	bls.n	80056d6 <_malloc_r+0x22>
 80056ce:	230c      	movs	r3, #12
 80056d0:	6033      	str	r3, [r6, #0]
 80056d2:	2000      	movs	r0, #0
 80056d4:	bd70      	pop	{r4, r5, r6, pc}
 80056d6:	f000 f87d 	bl	80057d4 <__malloc_lock>
 80056da:	4a21      	ldr	r2, [pc, #132]	; (8005760 <_malloc_r+0xac>)
 80056dc:	6814      	ldr	r4, [r2, #0]
 80056de:	4621      	mov	r1, r4
 80056e0:	b991      	cbnz	r1, 8005708 <_malloc_r+0x54>
 80056e2:	4c20      	ldr	r4, [pc, #128]	; (8005764 <_malloc_r+0xb0>)
 80056e4:	6823      	ldr	r3, [r4, #0]
 80056e6:	b91b      	cbnz	r3, 80056f0 <_malloc_r+0x3c>
 80056e8:	4630      	mov	r0, r6
 80056ea:	f000 f863 	bl	80057b4 <_sbrk_r>
 80056ee:	6020      	str	r0, [r4, #0]
 80056f0:	4629      	mov	r1, r5
 80056f2:	4630      	mov	r0, r6
 80056f4:	f000 f85e 	bl	80057b4 <_sbrk_r>
 80056f8:	1c43      	adds	r3, r0, #1
 80056fa:	d124      	bne.n	8005746 <_malloc_r+0x92>
 80056fc:	230c      	movs	r3, #12
 80056fe:	6033      	str	r3, [r6, #0]
 8005700:	4630      	mov	r0, r6
 8005702:	f000 f868 	bl	80057d6 <__malloc_unlock>
 8005706:	e7e4      	b.n	80056d2 <_malloc_r+0x1e>
 8005708:	680b      	ldr	r3, [r1, #0]
 800570a:	1b5b      	subs	r3, r3, r5
 800570c:	d418      	bmi.n	8005740 <_malloc_r+0x8c>
 800570e:	2b0b      	cmp	r3, #11
 8005710:	d90f      	bls.n	8005732 <_malloc_r+0x7e>
 8005712:	600b      	str	r3, [r1, #0]
 8005714:	50cd      	str	r5, [r1, r3]
 8005716:	18cc      	adds	r4, r1, r3
 8005718:	4630      	mov	r0, r6
 800571a:	f000 f85c 	bl	80057d6 <__malloc_unlock>
 800571e:	f104 000b 	add.w	r0, r4, #11
 8005722:	1d23      	adds	r3, r4, #4
 8005724:	f020 0007 	bic.w	r0, r0, #7
 8005728:	1ac3      	subs	r3, r0, r3
 800572a:	d0d3      	beq.n	80056d4 <_malloc_r+0x20>
 800572c:	425a      	negs	r2, r3
 800572e:	50e2      	str	r2, [r4, r3]
 8005730:	e7d0      	b.n	80056d4 <_malloc_r+0x20>
 8005732:	428c      	cmp	r4, r1
 8005734:	684b      	ldr	r3, [r1, #4]
 8005736:	bf16      	itet	ne
 8005738:	6063      	strne	r3, [r4, #4]
 800573a:	6013      	streq	r3, [r2, #0]
 800573c:	460c      	movne	r4, r1
 800573e:	e7eb      	b.n	8005718 <_malloc_r+0x64>
 8005740:	460c      	mov	r4, r1
 8005742:	6849      	ldr	r1, [r1, #4]
 8005744:	e7cc      	b.n	80056e0 <_malloc_r+0x2c>
 8005746:	1cc4      	adds	r4, r0, #3
 8005748:	f024 0403 	bic.w	r4, r4, #3
 800574c:	42a0      	cmp	r0, r4
 800574e:	d005      	beq.n	800575c <_malloc_r+0xa8>
 8005750:	1a21      	subs	r1, r4, r0
 8005752:	4630      	mov	r0, r6
 8005754:	f000 f82e 	bl	80057b4 <_sbrk_r>
 8005758:	3001      	adds	r0, #1
 800575a:	d0cf      	beq.n	80056fc <_malloc_r+0x48>
 800575c:	6025      	str	r5, [r4, #0]
 800575e:	e7db      	b.n	8005718 <_malloc_r+0x64>
 8005760:	200000a0 	.word	0x200000a0
 8005764:	200000a4 	.word	0x200000a4

08005768 <_realloc_r>:
 8005768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800576a:	4607      	mov	r7, r0
 800576c:	4614      	mov	r4, r2
 800576e:	460e      	mov	r6, r1
 8005770:	b921      	cbnz	r1, 800577c <_realloc_r+0x14>
 8005772:	4611      	mov	r1, r2
 8005774:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005778:	f7ff bf9c 	b.w	80056b4 <_malloc_r>
 800577c:	b922      	cbnz	r2, 8005788 <_realloc_r+0x20>
 800577e:	f7ff ff4b 	bl	8005618 <_free_r>
 8005782:	4625      	mov	r5, r4
 8005784:	4628      	mov	r0, r5
 8005786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005788:	f000 f826 	bl	80057d8 <_malloc_usable_size_r>
 800578c:	42a0      	cmp	r0, r4
 800578e:	d20f      	bcs.n	80057b0 <_realloc_r+0x48>
 8005790:	4621      	mov	r1, r4
 8005792:	4638      	mov	r0, r7
 8005794:	f7ff ff8e 	bl	80056b4 <_malloc_r>
 8005798:	4605      	mov	r5, r0
 800579a:	2800      	cmp	r0, #0
 800579c:	d0f2      	beq.n	8005784 <_realloc_r+0x1c>
 800579e:	4631      	mov	r1, r6
 80057a0:	4622      	mov	r2, r4
 80057a2:	f7ff ff15 	bl	80055d0 <memcpy>
 80057a6:	4631      	mov	r1, r6
 80057a8:	4638      	mov	r0, r7
 80057aa:	f7ff ff35 	bl	8005618 <_free_r>
 80057ae:	e7e9      	b.n	8005784 <_realloc_r+0x1c>
 80057b0:	4635      	mov	r5, r6
 80057b2:	e7e7      	b.n	8005784 <_realloc_r+0x1c>

080057b4 <_sbrk_r>:
 80057b4:	b538      	push	{r3, r4, r5, lr}
 80057b6:	4c06      	ldr	r4, [pc, #24]	; (80057d0 <_sbrk_r+0x1c>)
 80057b8:	2300      	movs	r3, #0
 80057ba:	4605      	mov	r5, r0
 80057bc:	4608      	mov	r0, r1
 80057be:	6023      	str	r3, [r4, #0]
 80057c0:	f7fb fc3e 	bl	8001040 <_sbrk>
 80057c4:	1c43      	adds	r3, r0, #1
 80057c6:	d102      	bne.n	80057ce <_sbrk_r+0x1a>
 80057c8:	6823      	ldr	r3, [r4, #0]
 80057ca:	b103      	cbz	r3, 80057ce <_sbrk_r+0x1a>
 80057cc:	602b      	str	r3, [r5, #0]
 80057ce:	bd38      	pop	{r3, r4, r5, pc}
 80057d0:	20006040 	.word	0x20006040

080057d4 <__malloc_lock>:
 80057d4:	4770      	bx	lr

080057d6 <__malloc_unlock>:
 80057d6:	4770      	bx	lr

080057d8 <_malloc_usable_size_r>:
 80057d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057dc:	1f18      	subs	r0, r3, #4
 80057de:	2b00      	cmp	r3, #0
 80057e0:	bfbc      	itt	lt
 80057e2:	580b      	ldrlt	r3, [r1, r0]
 80057e4:	18c0      	addlt	r0, r0, r3
 80057e6:	4770      	bx	lr

080057e8 <_init>:
 80057e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ea:	bf00      	nop
 80057ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ee:	bc08      	pop	{r3}
 80057f0:	469e      	mov	lr, r3
 80057f2:	4770      	bx	lr

080057f4 <_fini>:
 80057f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057f6:	bf00      	nop
 80057f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057fa:	bc08      	pop	{r3}
 80057fc:	469e      	mov	lr, r3
 80057fe:	4770      	bx	lr
